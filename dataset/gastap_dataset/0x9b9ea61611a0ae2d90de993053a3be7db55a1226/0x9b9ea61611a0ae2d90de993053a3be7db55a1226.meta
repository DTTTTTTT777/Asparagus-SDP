{
    "DSAuthEvents": {
        "function_list": [],
        "initial_state": {},
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "DSAuth": {
        "function_list": [
            "DSAuth()",
            "setOwner(address)",
            "setAuthority(DSAuthority)",
            "isAuthorized(address,bytes4)"
        ],
        "initial_state": {
            "DSAuth()": {
                "argument": {},
                "contract": {}
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "setAuthority(DSAuthority)": {
                "argument": {},
                "contract": {}
            },
            "isAuthorized(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "setOwner(address)": [
                103,
                75
            ]
        },
        "block_CALL_mapping": {
            "jump1499": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block1499_0": [
                "authority.canCall(src, this, sig)"
            ],
            "jump1499_0": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block1499": [
                "authority.canCall(src, this, sig)"
            ]
        }
    },
    "DSMath": {
        "function_list": [
            "add(uint256,uint256)",
            "sub(uint256,uint256)",
            "mul(uint256,uint256)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "imin(int256,int256)",
            "imax(int256,int256)",
            "wmul(uint256,uint256)",
            "rmul(uint256,uint256)",
            "wdiv(uint256,uint256)",
            "rdiv(uint256,uint256)",
            "rpow(uint256,uint256)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "imin(int256,int256)": {
                "argument": {},
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "imax(int256,int256)": {
                "argument": {},
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "wmul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "rmul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "wdiv(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "rdiv(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "rpow(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "n": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "ERC20Events": {
        "function_list": [],
        "initial_state": {},
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "allowance(address,address)",
            "approve(address,uint256)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "wad": "uint256"
                },
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "wad": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "wad": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                401,
                97
            ],
            "transfer(address,uint256)": [
                1385,
                361
            ],
            "totalSupply()": [
                545,
                141
            ],
            "allowance(address,address)": [
                1704,
                427
            ],
            "balanceOf(address)": [
                1044,
                273
            ],
            "transferFrom(address,address,uint256)": [
                588,
                163
            ]
        },
        "block_CALL_mapping": {
            "block3721": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "jump3721": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "EventfulMarket": {
        "function_list": [],
        "initial_state": {},
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "SimpleMarket": {
        "function_list": [
            "add(uint256,uint256)",
            "sub(uint256,uint256)",
            "mul(uint256,uint256)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "imin(int256,int256)",
            "imax(int256,int256)",
            "wmul(uint256,uint256)",
            "rmul(uint256,uint256)",
            "wdiv(uint256,uint256)",
            "rdiv(uint256,uint256)",
            "rpow(uint256,uint256)",
            "isActive(uint256)",
            "getOwner(uint256)",
            "getOffer(uint256)",
            "bump(bytes32)",
            "buy(uint256,uint256)",
            "cancel(uint256)",
            "kill(bytes32)",
            "make(ERC20,ERC20,uint128,uint128)",
            "offer(uint256,ERC20,uint256,ERC20)",
            "take(bytes32,uint128)",
            "_next_id()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "imin(int256,int256)": {
                "argument": {},
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "imax(int256,int256)": {
                "argument": {},
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "wmul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "rmul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "wdiv(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "rdiv(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "rpow(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "n": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "isActive(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "getOwner(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "getOffer(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "bump(bytes32)": {
                "argument": {
                    "id_": "bytes32"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "buy(uint256,uint256)": {
                "argument": {
                    "id": "uint256",
                    "quantity": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "cancel(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "kill(bytes32)": {
                "argument": {
                    "id": "bytes32"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "make(ERC20,ERC20,uint128,uint128)": {
                "argument": {
                    "pay_amt": "uint128",
                    "buy_amt": "uint128"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "offer(uint256,ERC20,uint256,ERC20)": {
                "argument": {
                    "pay_amt": "uint256",
                    "buy_amt": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "take(bytes32,uint128)": {
                "argument": {
                    "id": "bytes32",
                    "maxTakeAmount": "uint128"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "_next_id()": {
                "argument": {},
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "last_offer_id": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "buy(uint256,uint256)": [
                1265,
                295
            ],
            "kill(bytes32)": [
                1107,
                251
            ],
            "getOffer(uint256)": [
                486,
                141
            ],
            "getOwner(uint256)": [
                1156,
                273
            ],
            "isActive(uint256)": [
                786,
                207
            ],
            "cancel(uint256)": [
                417,
                119
            ],
            "take(bytes32,uint128)": [
                660,
                163
            ],
            "bump(bytes32)": [
                737,
                185
            ]
        },
        "block_CALL_mapping": {
            "block5553": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block5316_0": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump2422": [
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)",
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)"
            ],
            "block2422_0": [
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)"
            ],
            "jump5316": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump5553": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump7640": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)",
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "block7640": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "jump5316_0": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block2422": [
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)"
            ],
            "block5553_0": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump7640_0": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)",
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "jump2422_0": [
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)",
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)"
            ],
            "block5316": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block7640_0": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "jump5553_0": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ]
        }
    },
    "ExpiringMarket": {
        "function_list": [
            "isActive(uint256)",
            "getOwner(uint256)",
            "getOffer(uint256)",
            "bump(bytes32)",
            "buy(uint256,uint256)",
            "cancel(uint256)",
            "kill(bytes32)",
            "make(ERC20,ERC20,uint128,uint128)",
            "offer(uint256,ERC20,uint256,ERC20)",
            "take(bytes32,uint128)",
            "_next_id()",
            "add(uint256,uint256)",
            "sub(uint256,uint256)",
            "mul(uint256,uint256)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "imin(int256,int256)",
            "imax(int256,int256)",
            "wmul(uint256,uint256)",
            "rmul(uint256,uint256)",
            "wdiv(uint256,uint256)",
            "rdiv(uint256,uint256)",
            "rpow(uint256,uint256)",
            "DSAuth()",
            "setOwner(address)",
            "setAuthority(DSAuthority)",
            "isAuthorized(address,bytes4)",
            "ExpiringMarket(uint64)",
            "isClosed()",
            "getTime()",
            "stop()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "isActive(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "getOwner(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "getOffer(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "bump(bytes32)": {
                "argument": {
                    "id_": "bytes32"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "buy(uint256,uint256)": {
                "argument": {
                    "id": "uint256",
                    "quantity": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "cancel(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "kill(bytes32)": {
                "argument": {
                    "id": "bytes32"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "make(ERC20,ERC20,uint128,uint128)": {
                "argument": {
                    "pay_amt": "uint128",
                    "buy_amt": "uint128"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "offer(uint256,ERC20,uint256,ERC20)": {
                "argument": {
                    "pay_amt": "uint256",
                    "buy_amt": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "take(bytes32,uint128)": {
                "argument": {
                    "id": "bytes32",
                    "maxTakeAmount": "uint128"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "_next_id()": {
                "argument": {},
                "contract": {
                    "close_time": "uint64"
                }
            },
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "imin(int256,int256)": {
                "argument": {},
                "contract": {
                    "close_time": "uint64"
                }
            },
            "imax(int256,int256)": {
                "argument": {},
                "contract": {
                    "close_time": "uint64"
                }
            },
            "wmul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "rmul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "wdiv(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "rdiv(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "rpow(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "n": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "DSAuth()": {
                "argument": {},
                "contract": {
                    "close_time": "uint64"
                }
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {
                    "close_time": "uint64"
                }
            },
            "setAuthority(DSAuthority)": {
                "argument": {},
                "contract": {
                    "close_time": "uint64"
                }
            },
            "isAuthorized(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "ExpiringMarket(uint64)": {
                "argument": {
                    "_close_time": "uint64"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "isClosed()": {
                "argument": {},
                "contract": {
                    "close_time": "uint64"
                }
            },
            "getTime()": {
                "argument": {},
                "contract": {
                    "close_time": "uint64"
                }
            },
            "stop()": {
                "argument": {},
                "contract": {
                    "close_time": "uint64"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "close_time": "uint64"
                }
            }
        },
        "function_block_mapping": {
            "buy(uint256,uint256)": [
                1915,
                493
            ],
            "kill(bytes32)": [
                1623,
                405
            ],
            "setOwner(address)": [
                496,
                119
            ],
            "isClosed()": [
                1759,
                449
            ],
            "isActive(uint256)": [
                1215,
                339
            ],
            "getOffer(uint256)": [
                675,
                185
            ],
            "getTime()": [
                926,
                229
            ],
            "cancel(uint256)": [
                606,
                163
            ],
            "getOwner(uint256)": [
                1806,
                471
            ],
            "take(bytes32,uint128)": [
                849,
                207
            ],
            "bump(bytes32)": [
                1099,
                295
            ],
            "stop()": [
                290,
                75
            ]
        },
        "block_CALL_mapping": {
            "block3399_0": [
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)"
            ],
            "block3399": [
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)"
            ],
            "block10285_0": [
                "authority.canCall(src, this, sig)"
            ],
            "block10285_1": [
                "authority.canCall(src, this, sig)"
            ],
            "block7004_0": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump7004_0": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block6767": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump3399": [
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)",
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)"
            ],
            "jump9111": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)",
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "block10285": [
                "authority.canCall(src, this, sig)"
            ],
            "block9111": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "jump10285": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump3399_0": [
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)",
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)"
            ],
            "block7004": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump9111_0": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)",
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "block9111_0": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "jump10285_0": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump10285_1": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump6767": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block6767_0": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump7004": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump6767_0": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ]
        }
    },
    "DSNote": {
        "function_list": [],
        "initial_state": {},
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "MatchingEvents": {
        "function_list": [],
        "initial_state": {},
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "MatchingMarket": {
        "function_list": [
            "ExpiringMarket(uint64)",
            "isClosed()",
            "getTime()",
            "stop()",
            "isActive(uint256)",
            "getOwner(uint256)",
            "getOffer(uint256)",
            "bump(bytes32)",
            "buy(uint256,uint256)",
            "cancel(uint256)",
            "kill(bytes32)",
            "make(ERC20,ERC20,uint128,uint128)",
            "offer(uint256,ERC20,uint256,ERC20)",
            "take(bytes32,uint128)",
            "_next_id()",
            "add(uint256,uint256)",
            "sub(uint256,uint256)",
            "mul(uint256,uint256)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "imin(int256,int256)",
            "imax(int256,int256)",
            "wmul(uint256,uint256)",
            "rmul(uint256,uint256)",
            "wdiv(uint256,uint256)",
            "rdiv(uint256,uint256)",
            "rpow(uint256,uint256)",
            "DSAuth()",
            "setOwner(address)",
            "setAuthority(DSAuthority)",
            "isAuthorized(address,bytes4)",
            "MatchingMarket(uint64)",
            "make(ERC20,ERC20,uint128,uint128)",
            "take(bytes32,uint128)",
            "kill(bytes32)",
            "offer(uint256,ERC20,uint256,ERC20)",
            "offer(uint256,ERC20,uint256,ERC20,uint256)",
            "offer(uint256,ERC20,uint256,ERC20,uint256,bool)",
            "buy(uint256,uint256)",
            "cancel(uint256)",
            "insert(uint256,uint256)",
            "del_rank(uint256)",
            "addTokenPairWhitelist(ERC20,ERC20)",
            "remTokenPairWhitelist(ERC20,ERC20)",
            "isTokenPairWhitelisted(ERC20,ERC20)",
            "setMinSell(ERC20,uint256)",
            "getMinSell(ERC20)",
            "setBuyEnabled(bool)",
            "setMatchingEnabled(bool)",
            "getBestOffer(ERC20,ERC20)",
            "getWorseOffer(uint256)",
            "getBetterOffer(uint256)",
            "getOfferCount(ERC20,ERC20)",
            "getFirstUnsortedOffer()",
            "getNextUnsortedOffer(uint256)",
            "isOfferSorted(uint256)",
            "sellAllAmount(ERC20,uint256,ERC20,uint256)",
            "buyAllAmount(ERC20,uint256,ERC20,uint256)",
            "getBuyAmount(ERC20,ERC20,uint256)",
            "getPayAmount(ERC20,ERC20,uint256)",
            "_buys(uint256,uint256)",
            "_find(uint256)",
            "_findpos(uint256,uint256)",
            "_isPricedLtOrEq(uint256,uint256)",
            "_matcho(uint256,ERC20,uint256,ERC20,uint256,bool)",
            "_offeru(uint256,ERC20,uint256,ERC20)",
            "_sort(uint256,uint256)",
            "_unsort(uint256)",
            "_hide(uint256)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "ExpiringMarket(uint64)": {
                "argument": {
                    "_close_time": "uint64"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "isClosed()": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "getTime()": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "stop()": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "isActive(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "getOwner(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "getOffer(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "bump(bytes32)": {
                "argument": {
                    "id_": "bytes32"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "buy(uint256,uint256)": {
                "argument": {
                    "id": "uint256",
                    "amount": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "cancel(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "kill(bytes32)": {
                "argument": {
                    "id": "bytes32"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "make(ERC20,ERC20,uint128,uint128)": {
                "argument": {
                    "pay_amt": "uint128",
                    "buy_amt": "uint128"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "offer(uint256,ERC20,uint256,ERC20)": {
                "argument": {
                    "pay_amt": "uint256",
                    "buy_amt": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "take(bytes32,uint128)": {
                "argument": {
                    "id": "bytes32",
                    "maxTakeAmount": "uint128"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "_next_id()": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "imin(int256,int256)": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "imax(int256,int256)": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "wmul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "rmul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "wdiv(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "rdiv(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "rpow(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "n": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "DSAuth()": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "setAuthority(DSAuthority)": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "isAuthorized(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "MatchingMarket(uint64)": {
                "argument": {
                    "close_time": "uint64"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "offer(uint256,ERC20,uint256,ERC20,uint256)": {
                "argument": {
                    "pay_amt": "uint256",
                    "buy_amt": "uint256",
                    "pos": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "offer(uint256,ERC20,uint256,ERC20,uint256,bool)": {
                "argument": {
                    "pay_amt": "uint256",
                    "buy_amt": "uint256",
                    "pos": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "insert(uint256,uint256)": {
                "argument": {
                    "id": "uint256",
                    "pos": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "del_rank(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "addTokenPairWhitelist(ERC20,ERC20)": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "remTokenPairWhitelist(ERC20,ERC20)": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "isTokenPairWhitelisted(ERC20,ERC20)": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "setMinSell(ERC20,uint256)": {
                "argument": {
                    "dust": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "getMinSell(ERC20)": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "setBuyEnabled(bool)": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "setMatchingEnabled(bool)": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "getBestOffer(ERC20,ERC20)": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "getWorseOffer(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "getBetterOffer(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "getOfferCount(ERC20,ERC20)": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "getFirstUnsortedOffer()": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "getNextUnsortedOffer(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "isOfferSorted(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "sellAllAmount(ERC20,uint256,ERC20,uint256)": {
                "argument": {
                    "pay_amt": "uint256",
                    "min_fill_amount": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "buyAllAmount(ERC20,uint256,ERC20,uint256)": {
                "argument": {
                    "buy_amt": "uint256",
                    "max_fill_amount": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "getBuyAmount(ERC20,ERC20,uint256)": {
                "argument": {
                    "pay_amt": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "getPayAmount(ERC20,ERC20,uint256)": {
                "argument": {
                    "buy_amt": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "_buys(uint256,uint256)": {
                "argument": {
                    "id": "uint256",
                    "amount": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "_find(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "_findpos(uint256,uint256)": {
                "argument": {
                    "id": "uint256",
                    "pos": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "_isPricedLtOrEq(uint256,uint256)": {
                "argument": {
                    "low": "uint256",
                    "high": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "_matcho(uint256,ERC20,uint256,ERC20,uint256,bool)": {
                "argument": {
                    "t_pay_amt": "uint256",
                    "t_buy_amt": "uint256",
                    "pos": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "_offeru(uint256,ERC20,uint256,ERC20)": {
                "argument": {
                    "pay_amt": "uint256",
                    "buy_amt": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "_sort(uint256,uint256)": {
                "argument": {
                    "id": "uint256",
                    "pos": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "_unsort(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "_hide(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "buy(uint256,uint256)": [
                4782,
                1087
            ],
            "getBetterOffer(uint256)": [
                3815,
                801
            ],
            "getFirstUnsortedOffer()": [
                3562,
                735
            ],
            "isClosed()": [
                4407,
                977
            ],
            "isOfferSorted(uint256)": [
                4642,
                1043
            ],
            "kill(bytes32)": [
                4170,
                911
            ],
            "insert(uint256,uint256)": [
                1722,
                295
            ],
            "getTime()": [
                2391,
                471
            ],
            "isActive(uint256)": [
                3241,
                691
            ],
            "cancel(uint256)": [
                1915,
                361
            ],
            "setOwner(address)": [
                1131,
                185
            ],
            "getWorseOffer(uint256)": [
                3967,
                845
            ],
            "getOwner(uint256)": [
                4533,
                1021
            ],
            "setBuyEnabled(bool)": [
                4711,
                1065
            ],
            "getNextUnsortedOffer(uint256)": [
                2454,
                493
            ],
            "getOffer(uint256)": [
                1984,
                383
            ],
            "setMatchingEnabled(bool)": [
                1844,
                339
            ],
            "del_rank(uint256)": [
                2158,
                405
            ],
            "take(bytes32,uint128)": [
                2227,
                427
            ],
            "bump(bytes32)": [
                2867,
                603
            ],
            "stop()": [
                925,
                141
            ]
        },
        "block_CALL_mapping": {
            "jump15537": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump23536_3": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)",
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "jump23536_2": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)",
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "jump23536_1": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)",
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "jump23536_0": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)",
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "jump23536_6": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)",
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "jump23536_5": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)",
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "jump23536_4": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)",
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "block20783_2": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block20783_3": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block20783_0": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block20783_1": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block20783_6": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block20783_7": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block20783_4": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block20783_5": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block20783_8": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block20783_9": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump20783_12": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump20783_13": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump20783_10": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump20783_11": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump20783_14": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block15537_1": [
                "authority.canCall(src, this, sig)"
            ],
            "block15537_0": [
                "authority.canCall(src, this, sig)"
            ],
            "block15537_3": [
                "authority.canCall(src, this, sig)"
            ],
            "block15537_2": [
                "authority.canCall(src, this, sig)"
            ],
            "block15537_5": [
                "authority.canCall(src, this, sig)"
            ],
            "block15537_4": [
                "authority.canCall(src, this, sig)"
            ],
            "block15537_6": [
                "authority.canCall(src, this, sig)"
            ],
            "jump18981_0": [
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)",
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)"
            ],
            "block23536": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "block18981_0": [
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)"
            ],
            "jump20783": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block15537": [
                "authority.canCall(src, this, sig)"
            ],
            "block20783_10": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block20783_11": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block20783_12": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block20783_13": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block20783_14": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block20546_14": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block20546_11": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block20546_10": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block20546_13": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block20546_12": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump20546": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block20546_9": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block20546_8": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block20546_5": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block20546_4": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block20546_7": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block20546_6": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block20546_1": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block20546_0": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block20546_3": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block20546_2": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump18981": [
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)",
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)"
            ],
            "jump15537_6": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump15537_5": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump15537_4": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump15537_3": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump15537_2": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump15537_1": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump15537_0": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump20546_7": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump20546_6": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump20546_5": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump20546_4": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump20546_3": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump20546_2": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump20546_1": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump20546_0": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump20546_9": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump20546_8": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block18981": [
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)"
            ],
            "block23536_1": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "block23536_0": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "block23536_3": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "block23536_2": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "block23536_5": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "block23536_4": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "block23536_6": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "jump20546_13": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump20546_12": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump20546_11": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump20546_10": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump20546_14": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump23536": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)",
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "block20783": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump20783_8": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump20783_9": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block20546": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump20783_0": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump20783_1": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump20783_2": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump20783_3": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump20783_4": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump20783_5": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump20783_6": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump20783_7": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ]
        }
    }
}