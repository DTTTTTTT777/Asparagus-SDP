{
    "SafeMath": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Token": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "decimals": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "decimals": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "decimals": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "decimals": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "decimals": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "decimals": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "totalSupply()": [
                226,
                97
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "EKTSale": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "EKTSale(address)",
            "setPrice(uint256)",
            "fallback()",
            "buy()",
            "withdraw(uint256)",
            "withdrawToken(uint256)",
            "getPeriod()",
            "stopSale()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "BEFORE_SALE": "uint256",
                    "IN_SALE": "uint256",
                    "FINISHED": "uint256",
                    "totalQuantity": "uint256",
                    "saleQuantity": "uint256",
                    "ethQuantity": "uint256",
                    "withdrawQuantity": "uint256",
                    "minEth": "uint256",
                    "maxEth": "uint256",
                    "openTime": "uint256",
                    "closeTime": "uint256",
                    "price": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "BEFORE_SALE": "uint256",
                    "IN_SALE": "uint256",
                    "FINISHED": "uint256",
                    "totalQuantity": "uint256",
                    "saleQuantity": "uint256",
                    "ethQuantity": "uint256",
                    "withdrawQuantity": "uint256",
                    "minEth": "uint256",
                    "maxEth": "uint256",
                    "openTime": "uint256",
                    "closeTime": "uint256",
                    "price": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "BEFORE_SALE": "uint256",
                    "IN_SALE": "uint256",
                    "FINISHED": "uint256",
                    "totalQuantity": "uint256",
                    "saleQuantity": "uint256",
                    "ethQuantity": "uint256",
                    "withdrawQuantity": "uint256",
                    "minEth": "uint256",
                    "maxEth": "uint256",
                    "openTime": "uint256",
                    "closeTime": "uint256",
                    "price": "uint256"
                }
            },
            "EKTSale(address)": {
                "argument": {},
                "contract": {
                    "BEFORE_SALE": "uint256",
                    "IN_SALE": "uint256",
                    "FINISHED": "uint256",
                    "totalQuantity": "uint256",
                    "saleQuantity": "uint256",
                    "ethQuantity": "uint256",
                    "withdrawQuantity": "uint256",
                    "minEth": "uint256",
                    "maxEth": "uint256",
                    "openTime": "uint256",
                    "closeTime": "uint256",
                    "price": "uint256"
                }
            },
            "setPrice(uint256)": {
                "argument": {
                    "_price": "uint256"
                },
                "contract": {
                    "BEFORE_SALE": "uint256",
                    "IN_SALE": "uint256",
                    "FINISHED": "uint256",
                    "totalQuantity": "uint256",
                    "saleQuantity": "uint256",
                    "ethQuantity": "uint256",
                    "withdrawQuantity": "uint256",
                    "minEth": "uint256",
                    "maxEth": "uint256",
                    "openTime": "uint256",
                    "closeTime": "uint256",
                    "price": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "BEFORE_SALE": "uint256",
                    "IN_SALE": "uint256",
                    "FINISHED": "uint256",
                    "totalQuantity": "uint256",
                    "saleQuantity": "uint256",
                    "ethQuantity": "uint256",
                    "withdrawQuantity": "uint256",
                    "minEth": "uint256",
                    "maxEth": "uint256",
                    "openTime": "uint256",
                    "closeTime": "uint256",
                    "price": "uint256"
                }
            },
            "buy()": {
                "argument": {},
                "contract": {
                    "BEFORE_SALE": "uint256",
                    "IN_SALE": "uint256",
                    "FINISHED": "uint256",
                    "totalQuantity": "uint256",
                    "saleQuantity": "uint256",
                    "ethQuantity": "uint256",
                    "withdrawQuantity": "uint256",
                    "minEth": "uint256",
                    "maxEth": "uint256",
                    "openTime": "uint256",
                    "closeTime": "uint256",
                    "price": "uint256"
                }
            },
            "withdraw(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "BEFORE_SALE": "uint256",
                    "IN_SALE": "uint256",
                    "FINISHED": "uint256",
                    "totalQuantity": "uint256",
                    "saleQuantity": "uint256",
                    "ethQuantity": "uint256",
                    "withdrawQuantity": "uint256",
                    "minEth": "uint256",
                    "maxEth": "uint256",
                    "openTime": "uint256",
                    "closeTime": "uint256",
                    "price": "uint256"
                }
            },
            "withdrawToken(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "BEFORE_SALE": "uint256",
                    "IN_SALE": "uint256",
                    "FINISHED": "uint256",
                    "totalQuantity": "uint256",
                    "saleQuantity": "uint256",
                    "ethQuantity": "uint256",
                    "withdrawQuantity": "uint256",
                    "minEth": "uint256",
                    "maxEth": "uint256",
                    "openTime": "uint256",
                    "closeTime": "uint256",
                    "price": "uint256"
                }
            },
            "getPeriod()": {
                "argument": {},
                "contract": {
                    "BEFORE_SALE": "uint256",
                    "IN_SALE": "uint256",
                    "FINISHED": "uint256",
                    "totalQuantity": "uint256",
                    "saleQuantity": "uint256",
                    "ethQuantity": "uint256",
                    "withdrawQuantity": "uint256",
                    "minEth": "uint256",
                    "maxEth": "uint256",
                    "openTime": "uint256",
                    "closeTime": "uint256",
                    "price": "uint256"
                }
            },
            "stopSale()": {
                "argument": {},
                "contract": {
                    "BEFORE_SALE": "uint256",
                    "IN_SALE": "uint256",
                    "FINISHED": "uint256",
                    "totalQuantity": "uint256",
                    "saleQuantity": "uint256",
                    "ethQuantity": "uint256",
                    "withdrawQuantity": "uint256",
                    "minEth": "uint256",
                    "maxEth": "uint256",
                    "openTime": "uint256",
                    "closeTime": "uint256",
                    "price": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "BEFORE_SALE": "uint256",
                    "IN_SALE": "uint256",
                    "FINISHED": "uint256",
                    "totalQuantity": "uint256",
                    "saleQuantity": "uint256",
                    "ethQuantity": "uint256",
                    "withdrawQuantity": "uint256",
                    "minEth": "uint256",
                    "maxEth": "uint256",
                    "openTime": "uint256",
                    "closeTime": "uint256",
                    "price": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "getPeriod()": [
                262,
                75
            ],
            "setPrice(uint256)": [
                658,
                251
            ],
            "withdraw(uint256)": [
                305,
                97
            ],
            "stopSale()": [
                952,
                405
            ],
            "buy()": [
                770,
                295
            ],
            "withdrawToken(uint256)": [
                350,
                119
            ]
        },
        "block_CALL_mapping": {
            "block1560_1": [
                "token.transfer(msg.sender, quantity)"
            ],
            "block1560_0": [
                "token.transfer(msg.sender, quantity)"
            ],
            "block1560": [
                "token.transfer(msg.sender, quantity)"
            ],
            "jump2403": [
                "token.transfer(msg.sender, amount)",
                "token.transfer(msg.sender, amount)"
            ],
            "block1989": [
                "msg.sender.transfer(amount)"
            ],
            "jump1560_0": [
                "token.transfer(msg.sender, quantity)",
                "token.transfer(msg.sender, quantity)"
            ],
            "block2403": [
                "token.transfer(msg.sender, amount)"
            ],
            "jump1560_1": [
                "token.transfer(msg.sender, quantity)",
                "token.transfer(msg.sender, quantity)"
            ],
            "jump1989": [
                "msg.sender.transfer(amount)",
                "msg.sender.transfer(amount)"
            ],
            "jump1560": [
                "token.transfer(msg.sender, quantity)",
                "token.transfer(msg.sender, quantity)"
            ]
        }
    }
}