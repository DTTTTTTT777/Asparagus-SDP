{
    "owned": {
        "function_list": [
            "owned()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "owned()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "tokenRecipient": {
        "function_list": [
            "receiveApproval(address,uint256,address,bytes)"
        ],
        "initial_state": {
            "receiveApproval(address,uint256,address,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "receiveApproval(address,uint256,address,bytes)": [
                174,
                75
            ]
        },
        "block_CALL_mapping": {
            "jump573": [
                "t.transferFrom(_from, this, _value)",
                "t.transferFrom(_from, this, _value)"
            ],
            "block573": [
                "t.transferFrom(_from, this, _value)"
            ]
        }
    },
    "AzurionToken": {
        "function_list": [
            "owned()",
            "transferOwnership(address)",
            "AzurionToken(uint256,address)",
            "_transfer(address,address,uint256)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "mintToken(address,uint256)",
            "freezeAccount(address,bool)",
            "approve(address,uint256)",
            "approveAndCall(address,uint256,bytes)",
            "burn(uint256)",
            "burnFrom(address,uint256)",
            "fallback()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "owned()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "AzurionToken(uint256,address)": {
                "argument": {
                    "initialSupply": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "_transfer(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "mintToken(address,uint256)": {
                "argument": {
                    "mintedAmount": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "freezeAccount(address,bool)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "burn(uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "burnFrom(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                403,
                97
            ],
            "freezeAccount(address,bool)": [
                1752,
                405
            ],
            "burn(uint256)": [
                729,
                185
            ],
            "mintToken(address,uint256)": [
                885,
                229
            ],
            "burnFrom(address,uint256)": [
                962,
                251
            ],
            "transferFrom(address,address,uint256)": [
                547,
                141
            ],
            "transferOwnership(address)": [
                1831,
                427
            ],
            "approveAndCall(address,uint256,bytes)": [
                1462,
                361
            ],
            "transfer(address,uint256)": [
                1294,
                317
            ]
        },
        "block_CALL_mapping": {
            "jump4333": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "block4333": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    }
}