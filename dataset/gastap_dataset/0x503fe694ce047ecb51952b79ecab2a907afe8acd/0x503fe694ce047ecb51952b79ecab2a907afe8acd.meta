{
    "MaptPricing": {
        "function_list": [
            "MaptPricing()",
            "createPricing()",
            "calculatePrice(uint256,uint256,uint256)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "MaptPricing()": {
                "argument": {},
                "contract": {
                    "MAPT_IN_ETH": "uint256",
                    "FRACTIONAL_DIVIDER": "uint256",
                    "DEFAULT_MULTIPLIER": "uint256",
                    "MIN_ETH": "uint256",
                    "prices": "uint256[4]",
                    "dates": "uint256[3]",
                    "rules": "mapping(uint256 => uint256[])"
                }
            },
            "createPricing()": {
                "argument": {},
                "contract": {
                    "MAPT_IN_ETH": "uint256",
                    "FRACTIONAL_DIVIDER": "uint256",
                    "DEFAULT_MULTIPLIER": "uint256",
                    "MIN_ETH": "uint256",
                    "prices": "uint256[4]",
                    "dates": "uint256[3]",
                    "rules": "mapping(uint256 => uint256[])"
                }
            },
            "calculatePrice(uint256,uint256,uint256)": {
                "argument": {
                    "valueWei": "uint256",
                    "timeSinceStart": "uint256",
                    "decimals": "uint256"
                },
                "contract": {
                    "MAPT_IN_ETH": "uint256",
                    "FRACTIONAL_DIVIDER": "uint256",
                    "DEFAULT_MULTIPLIER": "uint256",
                    "MIN_ETH": "uint256",
                    "prices": "uint256[4]",
                    "dates": "uint256[3]",
                    "rules": "mapping(uint256 => uint256[])"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "MAPT_IN_ETH": "uint256",
                    "FRACTIONAL_DIVIDER": "uint256",
                    "DEFAULT_MULTIPLIER": "uint256",
                    "MIN_ETH": "uint256",
                    "prices": "uint256[4]",
                    "dates": "uint256[3]",
                    "rules": "mapping(uint256 => uint256[])"
                }
            }
        },
        "function_block_mapping": {
            "createPricing()": [
                81,
                75
            ],
            "calculatePrice(uint256,uint256,uint256)": [
                104,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "MaptPresaleToken": {
        "function_list": [
            "MaptPresaleToken(address,address)",
            "fallback()",
            "burnTokens(address)",
            "balanceOf(address)",
            "setPresalePhaseUInt(uint256)",
            "setPresalePhase(MaptPresaleToken.Phase)",
            "_setPresalePhase(MaptPresaleToken.Phase)",
            "setCrowdsaleManager(address)",
            "setStartDate(uint256)",
            "buyTokens(address)",
            "buyTokensForFiat(address,uint256)",
            "withdrawEther(uint256)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "MaptPresaleToken(address,address)": {
                "argument": {},
                "contract": {
                    "MIN_TRANSACTION_AMOUNT_ETH": "uint256",
                    "PRESALE_START_DATE": "uint256",
                    "PRESALE_END_DATE": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "totalSupply": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "MIN_TRANSACTION_AMOUNT_ETH": "uint256",
                    "PRESALE_START_DATE": "uint256",
                    "PRESALE_END_DATE": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "totalSupply": "uint256"
                }
            },
            "burnTokens(address)": {
                "argument": {},
                "contract": {
                    "MIN_TRANSACTION_AMOUNT_ETH": "uint256",
                    "PRESALE_START_DATE": "uint256",
                    "PRESALE_END_DATE": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "totalSupply": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "MIN_TRANSACTION_AMOUNT_ETH": "uint256",
                    "PRESALE_START_DATE": "uint256",
                    "PRESALE_END_DATE": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "totalSupply": "uint256"
                }
            },
            "setPresalePhaseUInt(uint256)": {
                "argument": {
                    "phase": "uint256"
                },
                "contract": {
                    "MIN_TRANSACTION_AMOUNT_ETH": "uint256",
                    "PRESALE_START_DATE": "uint256",
                    "PRESALE_END_DATE": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "totalSupply": "uint256"
                }
            },
            "setPresalePhase(MaptPresaleToken.Phase)": {
                "argument": {},
                "contract": {
                    "MIN_TRANSACTION_AMOUNT_ETH": "uint256",
                    "PRESALE_START_DATE": "uint256",
                    "PRESALE_END_DATE": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "totalSupply": "uint256"
                }
            },
            "_setPresalePhase(MaptPresaleToken.Phase)": {
                "argument": {},
                "contract": {
                    "MIN_TRANSACTION_AMOUNT_ETH": "uint256",
                    "PRESALE_START_DATE": "uint256",
                    "PRESALE_END_DATE": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "totalSupply": "uint256"
                }
            },
            "setCrowdsaleManager(address)": {
                "argument": {},
                "contract": {
                    "MIN_TRANSACTION_AMOUNT_ETH": "uint256",
                    "PRESALE_START_DATE": "uint256",
                    "PRESALE_END_DATE": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "totalSupply": "uint256"
                }
            },
            "setStartDate(uint256)": {
                "argument": {
                    "_date": "uint256"
                },
                "contract": {
                    "MIN_TRANSACTION_AMOUNT_ETH": "uint256",
                    "PRESALE_START_DATE": "uint256",
                    "PRESALE_END_DATE": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "totalSupply": "uint256"
                }
            },
            "buyTokens(address)": {
                "argument": {},
                "contract": {
                    "MIN_TRANSACTION_AMOUNT_ETH": "uint256",
                    "PRESALE_START_DATE": "uint256",
                    "PRESALE_END_DATE": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "totalSupply": "uint256"
                }
            },
            "buyTokensForFiat(address,uint256)": {
                "argument": {
                    "tokens": "uint256"
                },
                "contract": {
                    "MIN_TRANSACTION_AMOUNT_ETH": "uint256",
                    "PRESALE_START_DATE": "uint256",
                    "PRESALE_END_DATE": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "totalSupply": "uint256"
                }
            },
            "withdrawEther(uint256)": {
                "argument": {
                    "bal": "uint256"
                },
                "contract": {
                    "MIN_TRANSACTION_AMOUNT_ETH": "uint256",
                    "PRESALE_START_DATE": "uint256",
                    "PRESALE_END_DATE": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "totalSupply": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "MIN_TRANSACTION_AMOUNT_ETH": "uint256",
                    "PRESALE_START_DATE": "uint256",
                    "PRESALE_END_DATE": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "setStartDate(uint256)": [
                1178,
                361
            ],
            "buyTokens(address)": [
                1584,
                471
            ],
            "withdrawEther(uint256)": [
                914,
                273
            ],
            "setPresalePhaseUInt(uint256)": [
                1133,
                339
            ],
            "buyTokensForFiat(address,uint256)": [
                837,
                251
            ],
            "balanceOf(address)": [
                1046,
                317
            ],
            "setCrowdsaleManager(address)": [
                979,
                295
            ],
            "burnTokens(address)": [
                1367,
                405
            ]
        },
        "block_CALL_mapping": {
            "jump1994_0": [
                "priceRules.calculatePrice(valueWei, timeSinceStart, 18)",
                "priceRules.calculatePrice(valueWei, timeSinceStart, 18)"
            ],
            "jump1994_1": [
                "priceRules.calculatePrice(valueWei, timeSinceStart, 18)",
                "priceRules.calculatePrice(valueWei, timeSinceStart, 18)"
            ],
            "block1994": [
                "priceRules.calculatePrice(valueWei, timeSinceStart, 18)"
            ],
            "block3119": [
                "escrow.transfer(bal)"
            ],
            "block1994_0": [
                "priceRules.calculatePrice(valueWei, timeSinceStart, 18)"
            ],
            "block1994_1": [
                "priceRules.calculatePrice(valueWei, timeSinceStart, 18)"
            ],
            "jump1994": [
                "priceRules.calculatePrice(valueWei, timeSinceStart, 18)",
                "priceRules.calculatePrice(valueWei, timeSinceStart, 18)"
            ],
            "jump3119": [
                "escrow.transfer(bal)",
                "escrow.transfer(bal)"
            ]
        }
    }
}