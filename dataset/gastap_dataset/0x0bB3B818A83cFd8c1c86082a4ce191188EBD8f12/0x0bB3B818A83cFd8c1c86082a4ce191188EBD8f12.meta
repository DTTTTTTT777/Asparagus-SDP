{
    "SafeMath": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeDiv(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)",
            "assert(bool)"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeDiv(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "assert(bool)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Controller": {
        "function_list": [
            "proxyPayment(address)",
            "onTransfer(address,address,uint256)",
            "onApprove(address,address,uint256)"
        ],
        "initial_state": {
            "proxyPayment(address)": {
                "argument": {},
                "contract": {}
            },
            "onTransfer(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "onApprove(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {
            "jump3139": [
                "ledger.transferFrom(_spender, _from, _to, _value)",
                "ledger.transferFrom(_spender, _from, _to, _value)"
            ],
            "block7253": [
                "ledger.transfer(_from, _to, _value)"
            ],
            "block8794": [
                "token.controllerTransfer(from, to, val)"
            ],
            "block4797": [
                "ledger.setBurnAddress(_address)"
            ],
            "jump7253": [
                "ledger.transfer(_from, _to, _value)",
                "ledger.transfer(_from, _to, _value)"
            ],
            "jump4407": [
                "token.controllerBurn(_from, _to, _amount)",
                "token.controllerBurn(_from, _to, _amount)"
            ],
            "jump5491": [
                "ledger.balanceOf(_a)",
                "ledger.balanceOf(_a)"
            ],
            "jump5010": [
                "token.setBurnAddress(_address)",
                "token.setBurnAddress(_address)"
            ],
            "jump8385": [
                "ledger.decreaseApproval(_owner, _spender, _subtractedValue)",
                "ledger.decreaseApproval(_owner, _spender, _subtractedValue)"
            ],
            "block3139": [
                "ledger.transferFrom(_spender, _from, _to, _value)"
            ],
            "block5820": [
                "token.enableBurning()"
            ],
            "jump3344": [
                "ledger.totalSupply()",
                "ledger.totalSupply()"
            ],
            "block8385": [
                "ledger.decreaseApproval(_owner, _spender, _subtractedValue)"
            ],
            "block3344": [
                "ledger.totalSupply()"
            ],
            "jump7974": [
                "ledger.approve(_owner, _spender, _value)",
                "ledger.approve(_owner, _spender, _value)"
            ],
            "jump6295": [
                "token.disableBurning()",
                "token.disableBurning()"
            ],
            "block5491": [
                "ledger.balanceOf(_a)"
            ],
            "jump7564": [
                "ledger.allowance(_owner, _spender)",
                "ledger.allowance(_owner, _spender)"
            ],
            "block6295": [
                "token.disableBurning()"
            ],
            "jump4047": [
                "ledger.transfer(_from, burnAddress, _amount)",
                "ledger.transfer(_from, burnAddress, _amount)"
            ],
            "block7974": [
                "ledger.approve(_owner, _spender, _value)"
            ],
            "block6842": [
                "ledger.increaseApproval(_owner, _spender, _addedValue)"
            ],
            "jump4797": [
                "ledger.setBurnAddress(_address)",
                "ledger.setBurnAddress(_address)"
            ],
            "jump8794": [
                "token.controllerTransfer(from, to, val)",
                "token.controllerTransfer(from, to, val)"
            ],
            "block4047": [
                "ledger.transfer(_from, burnAddress, _amount)"
            ],
            "jump6842": [
                "ledger.increaseApproval(_owner, _spender, _addedValue)",
                "ledger.increaseApproval(_owner, _spender, _addedValue)"
            ],
            "jump5820": [
                "token.enableBurning()",
                "token.enableBurning()"
            ],
            "block7564": [
                "ledger.allowance(_owner, _spender)"
            ],
            "block5010": [
                "token.setBurnAddress(_address)"
            ],
            "block4407": [
                "token.controllerBurn(_from, _to, _amount)"
            ]
        }
    },
    "Controlled": {
        "function_list": [
            "Controlled()",
            "changeController(address)"
        ],
        "initial_state": {
            "Controlled()": {
                "argument": {},
                "contract": {}
            },
            "changeController(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "changeController(address)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "totalSupply()": [
                226,
                97
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "MiniMeToken": {
        "function_list": [
            "Controlled()",
            "changeController(address)",
            "totalSupply()",
            "balanceOf(address)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "MiniMeToken(address,address,uint256,string,uint8,string,bool)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "doTransfer(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "approveAndCall(address,uint256,bytes)",
            "totalSupply()",
            "balanceOfAt(address,uint256)",
            "totalSupplyAt(uint256)",
            "min(uint256,uint256)",
            "createCloneToken(string,uint8,string,uint256,bool)",
            "generateTokens(address,uint256)",
            "destroyTokens(address,uint256)",
            "enableTransfers(bool)",
            "getValueAt(MiniMeToken.Checkpoint[],uint256)",
            "updateValueAtNow(MiniMeToken.Checkpoint[],uint256)",
            "isContract(address)",
            "fallback()",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Controlled()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "changeController(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "MiniMeToken(address,address,uint256,string,uint8,string,bool)": {
                "argument": {
                    "_parentSnapShotBlock": "uint256",
                    "_tokenName": "string",
                    "_decimalUnits": "uint8",
                    "_tokenSymbol": "string"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "doTransfer(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_amount": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "balanceOfAt(address,uint256)": {
                "argument": {
                    "_blockNumber": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "totalSupplyAt(uint256)": {
                "argument": {
                    "_blockNumber": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "createCloneToken(string,uint8,string,uint256,bool)": {
                "argument": {
                    "_cloneTokenName": "string",
                    "_cloneDecimalUnits": "uint8",
                    "_cloneTokenSymbol": "string",
                    "_snapshotBlock": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "generateTokens(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "destroyTokens(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "enableTransfers(bool)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "getValueAt(MiniMeToken.Checkpoint[],uint256)": {
                "argument": {
                    "checkpoints": "MiniMeToken.Checkpoint[]",
                    "_block": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "updateValueAtNow(MiniMeToken.Checkpoint[],uint256)": {
                "argument": {
                    "checkpoints": "MiniMeToken.Checkpoint[]",
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "isContract(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            }
        },
        "function_block_mapping": {
            "balanceOfAt(address,uint256)": [
                9080,
                26
            ],
            "totalSupply()": [
                917,
                141
            ],
            "allowance(address,address)": [
                2671,
                515
            ],
            "transferFrom(address,address,uint256)": [
                960,
                163
            ],
            "approve(address,uint256)": [
                773,
                97
            ],
            "totalSupplyAt(uint256)": [
                9080,
                26
            ],
            "enableTransfers(bool)": [
                2877,
                559
            ],
            "createCloneToken(string,uint8,string,uint256,bool)": [
                1450,
                273
            ],
            "changeController(address)": [
                6102,
                889
            ],
            "balanceOf(address)": [
                1724,
                295
            ],
            "generateTokens(address,uint256)": [
                1898,
                339
            ],
            "approveAndCall(address,uint256,bytes)": [
                2399,
                471
            ],
            "destroyTokens(address,uint256)": [
                2570,
                493
            ],
            "transfer(address,uint256)": [
                2208,
                405
            ]
        },
        "block_CALL_mapping": {
            "jump3703": [
                "Controller(controller).onApprove(msg.sender,_spender,_amount)",
                "Controller(controller).onApprove(msg.sender,_spender,_amount)"
            ],
            "block559_0": [
                "Controller(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "block3703_0": [
                "Controller(controller).onApprove(msg.sender,_spender,_amount)"
            ],
            "jump5886": [
                "tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            )",
                "tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            )"
            ],
            "block8708": [
                "Controller(controller).onTransfer(_from,_to,_amount)"
            ],
            "jump5116_0": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5116_1": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5116_2": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5116_3": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5116_4": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5116_5": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5116_6": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5116_2": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5116_3": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7081": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5116_1": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5116_6": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5116_4": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5116_5": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump8708_0": [
                "Controller(controller).onTransfer(_from,_to,_amount)",
                "Controller(controller).onTransfer(_from,_to,_amount)"
            ],
            "jump8708": [
                "Controller(controller).onTransfer(_from,_to,_amount)",
                "Controller(controller).onTransfer(_from,_to,_amount)"
            ],
            "jump3703_0": [
                "Controller(controller).onApprove(msg.sender,_spender,_amount)",
                "Controller(controller).onApprove(msg.sender,_spender,_amount)"
            ],
            "block8708_0": [
                "Controller(controller).onTransfer(_from,_to,_amount)"
            ],
            "block5116_0": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6102": [
                "cloneToken.changeController(msg.sender)",
                "cloneToken.changeController(msg.sender)"
            ],
            "block5886": [
                "tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            )"
            ],
            "jump7081": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))",
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "block559": [
                "Controller(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "block7585": [
                "ApproveAndCallReceiver(_spender).receiveApproval(\n           msg.sender,\n           _amount,\n           this,\n           _extraData\n        )"
            ],
            "jump5116": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7081_0": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump559_0": [
                "Controller(controller).proxyPayment.value(msg.value)(msg.sender)",
                "Controller(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "block5116": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6102": [
                "cloneToken.changeController(msg.sender)"
            ],
            "jump7585": [
                "ApproveAndCallReceiver(_spender).receiveApproval(\n           msg.sender,\n           _amount,\n           this,\n           _extraData\n        )",
                "ApproveAndCallReceiver(_spender).receiveApproval(\n           msg.sender,\n           _amount,\n           this,\n           _extraData\n        )"
            ],
            "block3703": [
                "Controller(controller).onApprove(msg.sender,_spender,_amount)"
            ],
            "jump559": [
                "Controller(controller).proxyPayment.value(msg.value)(msg.sender)",
                "Controller(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "jump7081_0": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))",
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ]
        }
    },
    "MiniMeIrrevocableVestedToken": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeDiv(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)",
            "assert(bool)",
            "MiniMeToken(address,address,uint256,string,uint8,string,bool)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "doTransfer(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "approveAndCall(address,uint256,bytes)",
            "totalSupply()",
            "balanceOfAt(address,uint256)",
            "totalSupplyAt(uint256)",
            "min(uint256,uint256)",
            "createCloneToken(string,uint8,string,uint256,bool)",
            "generateTokens(address,uint256)",
            "destroyTokens(address,uint256)",
            "enableTransfers(bool)",
            "getValueAt(MiniMeToken.Checkpoint[],uint256)",
            "updateValueAtNow(MiniMeToken.Checkpoint[],uint256)",
            "isContract(address)",
            "fallback()",
            "Controlled()",
            "changeController(address)",
            "totalSupply()",
            "balanceOf(address)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "MiniMeIrrevocableVestedToken(address,address,uint256,string,uint8,string,bool)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "spendableBalanceOf(address)",
            "grantVestedTokens(address,uint256,uint64,uint64,uint64)",
            "setCanCreateGrants(address,bool)",
            "doSetCanCreateGrants(address,bool)",
            "changeVestingWhitelister(address)",
            "tokenGrantsCount(address)",
            "tokenGrant(address,uint256)",
            "vestedTokens(MiniMeIrrevocableVestedToken.TokenGrant,uint64)",
            "calculateVestedTokens(uint256,uint256,uint256,uint256,uint256)",
            "nonVestedTokens(MiniMeIrrevocableVestedToken.TokenGrant,uint64)",
            "lastTokenIsTransferableDate(address)",
            "transferableTokens(address,uint64)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "safeDiv(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "assert(bool)": {
                "argument": {},
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "MiniMeToken(address,address,uint256,string,uint8,string,bool)": {
                "argument": {
                    "_parentSnapShotBlock": "uint256",
                    "_tokenName": "string",
                    "_decimalUnits": "uint8",
                    "_tokenSymbol": "string"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "doTransfer(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_amount": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "balanceOfAt(address,uint256)": {
                "argument": {
                    "_blockNumber": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "totalSupplyAt(uint256)": {
                "argument": {
                    "_blockNumber": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "createCloneToken(string,uint8,string,uint256,bool)": {
                "argument": {
                    "_cloneTokenName": "string",
                    "_cloneDecimalUnits": "uint8",
                    "_cloneTokenSymbol": "string",
                    "_snapshotBlock": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "generateTokens(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "destroyTokens(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "enableTransfers(bool)": {
                "argument": {},
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "getValueAt(MiniMeToken.Checkpoint[],uint256)": {
                "argument": {
                    "checkpoints": "MiniMeToken.Checkpoint[]",
                    "_block": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "updateValueAtNow(MiniMeToken.Checkpoint[],uint256)": {
                "argument": {
                    "checkpoints": "MiniMeToken.Checkpoint[]",
                    "_value": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "isContract(address)": {
                "argument": {},
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "Controlled()": {
                "argument": {},
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "changeController(address)": {
                "argument": {},
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "MiniMeIrrevocableVestedToken(address,address,uint256,string,uint8,string,bool)": {
                "argument": {
                    "_parentSnapShotBlock": "uint256",
                    "_tokenName": "string",
                    "_decimalUnits": "uint8",
                    "_tokenSymbol": "string"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "spendableBalanceOf(address)": {
                "argument": {},
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "grantVestedTokens(address,uint256,uint64,uint64,uint64)": {
                "argument": {
                    "_value": "uint256",
                    "_start": "uint64",
                    "_cliff": "uint64",
                    "_vesting": "uint64"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "setCanCreateGrants(address,bool)": {
                "argument": {},
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "doSetCanCreateGrants(address,bool)": {
                "argument": {},
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "changeVestingWhitelister(address)": {
                "argument": {},
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "tokenGrantsCount(address)": {
                "argument": {},
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "tokenGrant(address,uint256)": {
                "argument": {
                    "_grantId": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "vestedTokens(MiniMeIrrevocableVestedToken.TokenGrant,uint64)": {
                "argument": {
                    "time": "uint64"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "calculateVestedTokens(uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "tokens": "uint256",
                    "time": "uint256",
                    "start": "uint256",
                    "cliff": "uint256",
                    "vesting": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "nonVestedTokens(MiniMeIrrevocableVestedToken.TokenGrant,uint64)": {
                "argument": {
                    "time": "uint64"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "lastTokenIsTransferableDate(address)": {
                "argument": {},
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            },
            "transferableTokens(address,uint64)": {
                "argument": {
                    "time": "uint64"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => MiniMeIrrevocableVestedToken.TokenGrant[])"
                }
            }
        },
        "function_block_mapping": {
            "balanceOfAt(address,uint256)": [
                12284,
                26
            ],
            "tokenGrantsCount(address)": [
                864,
                22
            ],
            "totalSupply()": [
                1326,
                132
            ],
            "allowance(address,address)": [
                3838,
                616
            ],
            "transferFrom(address,address,uint256)": [
                1448,
                176
            ],
            "transferableTokens(address,uint64)": [
                3630,
                572
            ],
            "approve(address,uint256)": [
                1095,
                66
            ],
            "totalSupplyAt(uint256)": [
                12284,
                26
            ],
            "enableTransfers(bool)": [
                4044,
                660
            ],
            "setCanCreateGrants(address,bool)": [
                1369,
                154
            ],
            "createCloneToken(string,uint8,string,uint256,bool)": [
                2403,
                330
            ],
            "tokenGrant(address,uint256)": [
                2167,
                308
            ],
            "changeController(address)": [
                8683,
                889
            ],
            "balanceOf(address)": [
                2784,
                374
            ],
            "spendableBalanceOf(address)": [
                1196,
                88
            ],
            "generateTokens(address,uint256)": [
                2958,
                418
            ],
            "approveAndCall(address,uint256,bytes)": [
                3459,
                550
            ],
            "destroyTokens(address,uint256)": [
                3737,
                594
            ],
            "lastTokenIsTransferableDate(address)": [
                2677,
                352
            ],
            "changeVestingWhitelister(address)": [
                4178,
                704
            ],
            "transfer(address,uint256)": [
                3268,
                484
            ]
        },
        "block_CALL_mapping": {
            "block7186_2": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block13901": [
                "Controller(controller).onTransfer(_from,_to,_amount)"
            ],
            "jump7186_7": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_6": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_9": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7186_5": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block657": [
                "Controller(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "block5835": [
                "Controller(controller).onApprove(msg.sender,_spender,_amount)"
            ],
            "block10345": [
                "ApproveAndCallReceiver(_spender).receiveApproval(\n           msg.sender,\n           _amount,\n           this,\n           _extraData\n        )"
            ],
            "block9842": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump9842_0": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))",
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5835_0": [
                "Controller(controller).onApprove(msg.sender,_spender,_amount)",
                "Controller(controller).onApprove(msg.sender,_spender,_amount)"
            ],
            "jump7186_8": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5835": [
                "Controller(controller).onApprove(msg.sender,_spender,_amount)",
                "Controller(controller).onApprove(msg.sender,_spender,_amount)"
            ],
            "block657_0": [
                "Controller(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "block7186_18": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7186_17": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7186_16": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7186_15": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7186_14": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7186_13": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7186_1": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump10345": [
                "ApproveAndCallReceiver(_spender).receiveApproval(\n           msg.sender,\n           _amount,\n           this,\n           _extraData\n        )",
                "ApproveAndCallReceiver(_spender).receiveApproval(\n           msg.sender,\n           _amount,\n           this,\n           _extraData\n        )"
            ],
            "block7186_10": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_5": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_4": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_0": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7186_0": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_1": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump13901": [
                "Controller(controller).onTransfer(_from,_to,_amount)",
                "Controller(controller).onTransfer(_from,_to,_amount)"
            ],
            "jump7186_3": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block8683": [
                "cloneToken.changeController(msg.sender)"
            ],
            "block7186_3": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump9842": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))",
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump13901_0": [
                "Controller(controller).onTransfer(_from,_to,_amount)",
                "Controller(controller).onTransfer(_from,_to,_amount)"
            ],
            "jump13901_1": [
                "Controller(controller).onTransfer(_from,_to,_amount)",
                "Controller(controller).onTransfer(_from,_to,_amount)"
            ],
            "block7186": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7186_6": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump657_0": [
                "Controller(controller).proxyPayment.value(msg.value)(msg.sender)",
                "Controller(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "block8467": [
                "tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            )"
            ],
            "jump7186_11": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_10": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_13": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_12": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_15": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_14": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_17": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_16": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_18": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7186_4": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7186_7": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5835_0": [
                "Controller(controller).onApprove(msg.sender,_spender,_amount)"
            ],
            "block7186_9": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block9842_0": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump8467": [
                "tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            )",
                "tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            )"
            ],
            "jump7186": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block13901_0": [
                "Controller(controller).onTransfer(_from,_to,_amount)"
            ],
            "block13901_1": [
                "Controller(controller).onTransfer(_from,_to,_amount)"
            ],
            "block7186_8": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7186_12": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump657": [
                "Controller(controller).proxyPayment.value(msg.value)(msg.sender)",
                "Controller(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "block7186_11": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump8683": [
                "cloneToken.changeController(msg.sender)",
                "cloneToken.changeController(msg.sender)"
            ],
            "jump7186_2": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ]
        }
    },
    "GNR": {
        "function_list": [
            "MiniMeIrrevocableVestedToken(address,address,uint256,string,uint8,string,bool)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "spendableBalanceOf(address)",
            "grantVestedTokens(address,uint256,uint64,uint64,uint64)",
            "setCanCreateGrants(address,bool)",
            "doSetCanCreateGrants(address,bool)",
            "changeVestingWhitelister(address)",
            "tokenGrantsCount(address)",
            "tokenGrant(address,uint256)",
            "vestedTokens(MiniMeIrrevocableVestedToken.TokenGrant,uint64)",
            "calculateVestedTokens(uint256,uint256,uint256,uint256,uint256)",
            "nonVestedTokens(MiniMeIrrevocableVestedToken.TokenGrant,uint64)",
            "lastTokenIsTransferableDate(address)",
            "transferableTokens(address,uint64)",
            "safeMul(uint256,uint256)",
            "safeDiv(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)",
            "assert(bool)",
            "MiniMeToken(address,address,uint256,string,uint8,string,bool)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "doTransfer(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "approveAndCall(address,uint256,bytes)",
            "totalSupply()",
            "balanceOfAt(address,uint256)",
            "totalSupplyAt(uint256)",
            "min(uint256,uint256)",
            "createCloneToken(string,uint8,string,uint256,bool)",
            "generateTokens(address,uint256)",
            "destroyTokens(address,uint256)",
            "enableTransfers(bool)",
            "getValueAt(MiniMeToken.Checkpoint[],uint256)",
            "updateValueAtNow(MiniMeToken.Checkpoint[],uint256)",
            "isContract(address)",
            "fallback()",
            "Controlled()",
            "changeController(address)",
            "totalSupply()",
            "balanceOf(address)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "GNR(address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "MiniMeIrrevocableVestedToken(address,address,uint256,string,uint8,string,bool)": {
                "argument": {
                    "_parentSnapShotBlock": "uint256",
                    "_tokenName": "string",
                    "_decimalUnits": "uint8",
                    "_tokenSymbol": "string"
                },
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "spendableBalanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "grantVestedTokens(address,uint256,uint64,uint64,uint64)": {
                "argument": {
                    "_value": "uint256",
                    "_start": "uint64",
                    "_cliff": "uint64",
                    "_vesting": "uint64"
                },
                "contract": {}
            },
            "setCanCreateGrants(address,bool)": {
                "argument": {},
                "contract": {}
            },
            "doSetCanCreateGrants(address,bool)": {
                "argument": {},
                "contract": {}
            },
            "changeVestingWhitelister(address)": {
                "argument": {},
                "contract": {}
            },
            "tokenGrantsCount(address)": {
                "argument": {},
                "contract": {}
            },
            "tokenGrant(address,uint256)": {
                "argument": {
                    "_grantId": "uint256"
                },
                "contract": {}
            },
            "vestedTokens(MiniMeIrrevocableVestedToken.TokenGrant,uint64)": {
                "argument": {
                    "time": "uint64"
                },
                "contract": {}
            },
            "calculateVestedTokens(uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "tokens": "uint256",
                    "time": "uint256",
                    "start": "uint256",
                    "cliff": "uint256",
                    "vesting": "uint256"
                },
                "contract": {}
            },
            "nonVestedTokens(MiniMeIrrevocableVestedToken.TokenGrant,uint64)": {
                "argument": {
                    "time": "uint64"
                },
                "contract": {}
            },
            "lastTokenIsTransferableDate(address)": {
                "argument": {},
                "contract": {}
            },
            "transferableTokens(address,uint64)": {
                "argument": {
                    "time": "uint64"
                },
                "contract": {}
            },
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeDiv(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "assert(bool)": {
                "argument": {},
                "contract": {}
            },
            "MiniMeToken(address,address,uint256,string,uint8,string,bool)": {
                "argument": {
                    "_parentSnapShotBlock": "uint256",
                    "_tokenName": "string",
                    "_decimalUnits": "uint8",
                    "_tokenSymbol": "string"
                },
                "contract": {}
            },
            "doTransfer(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_amount": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {}
            },
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOfAt(address,uint256)": {
                "argument": {
                    "_blockNumber": "uint256"
                },
                "contract": {}
            },
            "totalSupplyAt(uint256)": {
                "argument": {
                    "_blockNumber": "uint256"
                },
                "contract": {}
            },
            "min(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "createCloneToken(string,uint8,string,uint256,bool)": {
                "argument": {
                    "_cloneTokenName": "string",
                    "_cloneDecimalUnits": "uint8",
                    "_cloneTokenSymbol": "string",
                    "_snapshotBlock": "uint256"
                },
                "contract": {}
            },
            "generateTokens(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "destroyTokens(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "enableTransfers(bool)": {
                "argument": {},
                "contract": {}
            },
            "getValueAt(MiniMeToken.Checkpoint[],uint256)": {
                "argument": {
                    "checkpoints": "MiniMeToken.Checkpoint[]",
                    "_block": "uint256"
                },
                "contract": {}
            },
            "updateValueAtNow(MiniMeToken.Checkpoint[],uint256)": {
                "argument": {
                    "checkpoints": "MiniMeToken.Checkpoint[]",
                    "_value": "uint256"
                },
                "contract": {}
            },
            "isContract(address)": {
                "argument": {},
                "contract": {}
            },
            "fallback()": {
                "argument": {},
                "contract": {}
            },
            "Controlled()": {
                "argument": {},
                "contract": {}
            },
            "changeController(address)": {
                "argument": {},
                "contract": {}
            },
            "GNR(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "balanceOfAt(address,uint256)": [
                12284,
                26
            ],
            "tokenGrantsCount(address)": [
                864,
                22
            ],
            "totalSupply()": [
                1326,
                132
            ],
            "allowance(address,address)": [
                3838,
                616
            ],
            "transferFrom(address,address,uint256)": [
                1448,
                176
            ],
            "transferableTokens(address,uint64)": [
                3630,
                572
            ],
            "approve(address,uint256)": [
                1095,
                66
            ],
            "totalSupplyAt(uint256)": [
                12284,
                26
            ],
            "enableTransfers(bool)": [
                4044,
                660
            ],
            "setCanCreateGrants(address,bool)": [
                1369,
                154
            ],
            "createCloneToken(string,uint8,string,uint256,bool)": [
                2403,
                330
            ],
            "tokenGrant(address,uint256)": [
                2167,
                308
            ],
            "changeController(address)": [
                8683,
                889
            ],
            "balanceOf(address)": [
                2784,
                374
            ],
            "spendableBalanceOf(address)": [
                1196,
                88
            ],
            "generateTokens(address,uint256)": [
                2958,
                418
            ],
            "approveAndCall(address,uint256,bytes)": [
                3459,
                550
            ],
            "destroyTokens(address,uint256)": [
                3737,
                594
            ],
            "lastTokenIsTransferableDate(address)": [
                2677,
                352
            ],
            "changeVestingWhitelister(address)": [
                4178,
                704
            ],
            "transfer(address,uint256)": [
                3268,
                484
            ]
        },
        "block_CALL_mapping": {
            "block7186_2": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block13901": [
                "Controller(controller).onTransfer(_from,_to,_amount)"
            ],
            "jump7186_7": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_6": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_9": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7186_5": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block657": [
                "Controller(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "block5835": [
                "Controller(controller).onApprove(msg.sender,_spender,_amount)"
            ],
            "block10345": [
                "ApproveAndCallReceiver(_spender).receiveApproval(\n           msg.sender,\n           _amount,\n           this,\n           _extraData\n        )"
            ],
            "block9842": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump9842_0": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))",
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5835_0": [
                "Controller(controller).onApprove(msg.sender,_spender,_amount)",
                "Controller(controller).onApprove(msg.sender,_spender,_amount)"
            ],
            "jump7186_8": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5835": [
                "Controller(controller).onApprove(msg.sender,_spender,_amount)",
                "Controller(controller).onApprove(msg.sender,_spender,_amount)"
            ],
            "block657_0": [
                "Controller(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "block7186_18": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7186_17": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7186_16": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7186_15": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7186_14": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7186_13": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7186_1": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump10345": [
                "ApproveAndCallReceiver(_spender).receiveApproval(\n           msg.sender,\n           _amount,\n           this,\n           _extraData\n        )",
                "ApproveAndCallReceiver(_spender).receiveApproval(\n           msg.sender,\n           _amount,\n           this,\n           _extraData\n        )"
            ],
            "block7186_10": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_5": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_4": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_0": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7186_0": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_1": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump13901": [
                "Controller(controller).onTransfer(_from,_to,_amount)",
                "Controller(controller).onTransfer(_from,_to,_amount)"
            ],
            "jump7186_3": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block8683": [
                "cloneToken.changeController(msg.sender)"
            ],
            "block7186_3": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump9842": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))",
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump13901_0": [
                "Controller(controller).onTransfer(_from,_to,_amount)",
                "Controller(controller).onTransfer(_from,_to,_amount)"
            ],
            "jump13901_1": [
                "Controller(controller).onTransfer(_from,_to,_amount)",
                "Controller(controller).onTransfer(_from,_to,_amount)"
            ],
            "block7186": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7186_6": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump657_0": [
                "Controller(controller).proxyPayment.value(msg.value)(msg.sender)",
                "Controller(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "block8467": [
                "tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            )"
            ],
            "jump7186_11": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_10": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_13": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_12": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_15": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_14": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_17": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_16": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7186_18": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7186_4": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7186_7": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5835_0": [
                "Controller(controller).onApprove(msg.sender,_spender,_amount)"
            ],
            "block7186_9": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block9842_0": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump8467": [
                "tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            )",
                "tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            )"
            ],
            "jump7186": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block13901_0": [
                "Controller(controller).onTransfer(_from,_to,_amount)"
            ],
            "block13901_1": [
                "Controller(controller).onTransfer(_from,_to,_amount)"
            ],
            "block7186_8": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7186_12": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump657": [
                "Controller(controller).proxyPayment.value(msg.value)(msg.sender)",
                "Controller(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "block7186_11": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump8683": [
                "cloneToken.changeController(msg.sender)",
                "cloneToken.changeController(msg.sender)"
            ],
            "jump7186_2": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ]
        }
    },
    "GRPlaceholder": {
        "function_list": [
            "proxyPayment(address)",
            "onTransfer(address,address,uint256)",
            "onApprove(address,address,uint256)",
            "GRPlaceholder(address,address)",
            "changeController(address)",
            "proxyPayment(address)",
            "onTransfer(address,address,uint256)",
            "onApprove(address,address,uint256)"
        ],
        "initial_state": {
            "proxyPayment(address)": {
                "argument": {},
                "contract": {}
            },
            "onTransfer(address,address,uint256)": {
                "argument": {
                    "": "uint256"
                },
                "contract": {}
            },
            "onApprove(address,address,uint256)": {
                "argument": {
                    "": "uint256"
                },
                "contract": {}
            },
            "GRPlaceholder(address,address)": {
                "argument": {},
                "contract": {}
            },
            "changeController(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "onApprove(address,address,uint256)": [
                412,
                141
            ],
            "proxyPayment(address)": [
                545,
                163
            ],
            "changeController(address)": [
                990,
                926
            ],
            "onTransfer(address,address,uint256)": [
                192,
                97
            ]
        },
        "block_CALL_mapping": {
            "block990": [
                "token.changeController(network)"
            ],
            "jump990": [
                "token.changeController(network)",
                "token.changeController(network)"
            ]
        }
    },
    "SaleWallet": {
        "function_list": [
            "SaleWallet(address,uint256,address)",
            "fallback()",
            "withdraw()",
            "doWithdraw()"
        ],
        "initial_state": {
            "SaleWallet(address,uint256,address)": {
                "argument": {
                    "_finalBlock": "uint256"
                },
                "contract": {
                    "finalBlock": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "finalBlock": "uint256"
                }
            },
            "withdraw()": {
                "argument": {},
                "contract": {
                    "finalBlock": "uint256"
                }
            },
            "doWithdraw()": {
                "argument": {},
                "contract": {
                    "finalBlock": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "withdraw()": [
                143,
                97
            ]
        },
        "block_CALL_mapping": {
            "block749_0": [
                "multisig.send(this.balance)"
            ],
            "jump749": [
                "multisig.send(this.balance)",
                "multisig.send(this.balance)"
            ],
            "block594": [
                "tokenSale.saleFinalized()"
            ],
            "block749": [
                "multisig.send(this.balance)"
            ],
            "jump594": [
                "tokenSale.saleFinalized()",
                "tokenSale.saleFinalized()"
            ],
            "jump749_0": [
                "multisig.send(this.balance)",
                "multisig.send(this.balance)"
            ]
        }
    },
    "GenaroTokenSale": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeDiv(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)",
            "assert(bool)",
            "proxyPayment(address)",
            "onTransfer(address,address,uint256)",
            "onApprove(address,address,uint256)",
            "Controlled()",
            "changeController(address)",
            "GenaroTokenSale(uint256,uint256,address,uint256,bytes32)",
            "setGNR(address,address,address)",
            "activateSale()",
            "doActivateSale(address)",
            "isActivated()",
            "getPrice(address,uint256)",
            "allocatePresaleTokens(address,uint256,uint64,uint64)",
            "fallback()",
            "addToWhiteList(address)",
            "removeFromWhiteList(address)",
            "isWhitelisted(address)",
            "proxyPayment(address)",
            "onTransfer(address,address,uint256)",
            "onApprove(address,address,uint256)",
            "doPayment(address)",
            "emergencyStopSale()",
            "restartSale()",
            "revealCap(uint256,uint256)",
            "finalizeSale()",
            "doFinalizeSale()",
            "deployNetwork(address)",
            "setGenaroDevMultisig(address)",
            "getBlockNumber()",
            "computeCap(uint256,uint256)",
            "isValidCap(uint256,uint256)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "safeDiv(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "assert(bool)": {
                "argument": {},
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "proxyPayment(address)": {
                "argument": {},
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "onTransfer(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "onApprove(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "Controlled()": {
                "argument": {},
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "changeController(address)": {
                "argument": {},
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "GenaroTokenSale(uint256,uint256,address,uint256,bytes32)": {
                "argument": {
                    "_initialBlock": "uint256",
                    "_finalBlock": "uint256",
                    "_price": "uint256",
                    "_capCommitment": "bytes32"
                },
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "setGNR(address,address,address)": {
                "argument": {},
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "activateSale()": {
                "argument": {},
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "doActivateSale(address)": {
                "argument": {},
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "isActivated()": {
                "argument": {},
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "getPrice(address,uint256)": {
                "argument": {
                    "_blockNumber": "uint256"
                },
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "allocatePresaleTokens(address,uint256,uint64,uint64)": {
                "argument": {
                    "_amount": "uint256",
                    "cliffDate": "uint64",
                    "vestingDate": "uint64"
                },
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "addToWhiteList(address)": {
                "argument": {},
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "removeFromWhiteList(address)": {
                "argument": {},
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "isWhitelisted(address)": {
                "argument": {},
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "doPayment(address)": {
                "argument": {},
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "emergencyStopSale()": {
                "argument": {},
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "restartSale()": {
                "argument": {},
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "revealCap(uint256,uint256)": {
                "argument": {
                    "_cap": "uint256",
                    "_cap_secure": "uint256"
                },
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "finalizeSale()": {
                "argument": {},
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "doFinalizeSale()": {
                "argument": {},
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "deployNetwork(address)": {
                "argument": {},
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "setGenaroDevMultisig(address)": {
                "argument": {},
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "getBlockNumber()": {
                "argument": {},
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "computeCap(uint256,uint256)": {
                "argument": {
                    "_cap": "uint256",
                    "_cap_secure": "uint256"
                },
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "isValidCap(uint256,uint256)": {
                "argument": {
                    "_cap": "uint256",
                    "_cap_secure": "uint256"
                },
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "initialBlock": "uint256",
                    "finalBlock": "uint256",
                    "price": "uint256",
                    "capCommitment": "bytes32",
                    "totalCollected": "uint256",
                    "dust": "uint256",
                    "maxPerPersion": "uint256",
                    "hardCap": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "addToWhiteList(address)": [
                1329,
                361
            ],
            "proxyPayment(address)": [
                2668,
                779
            ],
            "computeCap(uint256,uint256)": [
                2244,
                647
            ],
            "isActivated()": [
                1529,
                405
            ],
            "setGenaroDevMultisig(address)": [
                626,
                119
            ],
            "onApprove(address,address,uint256)": [
                2350,
                691
            ],
            "getPrice(address,uint256)": [
                1185,
                317
            ],
            "setGNR(address,address,address)": [
                853,
                229
            ],
            "finalizeSale()": [
                1576,
                427
            ],
            "onTransfer(address,address,uint256)": [
                1396,
                383
            ],
            "allocatePresaleTokens(address,uint256,uint64,uint64)": [
                2127,
                625
            ],
            "revealCap(uint256,uint256)": [
                2613,
                757
            ],
            "changeController(address)": [
                9938,
                1012
            ],
            "isWhitelisted(address)": [
                984,
                251
            ],
            "emergencyStopSale()": [
                787,
                185
            ],
            "activateSale()": [
                2327,
                669
            ],
            "removeFromWhiteList(address)": [
                472,
                75
            ],
            "restartSale()": [
                1599,
                449
            ],
            "deployNetwork(address)": [
                2013,
                581
            ],
            "isValidCap(uint256,uint256)": [
                1800,
                515
            ]
        },
        "block_CALL_mapping": {
            "jump9938_0": [
                "token.changeController(genaroDevMultisig)",
                "token.changeController(genaroDevMultisig)"
            ],
            "block9938": [
                "token.changeController(genaroDevMultisig)"
            ],
            "jump7961": [
                "networkPlaceholder.changeController(networkAddress)",
                "networkPlaceholder.changeController(networkAddress)"
            ],
            "jump3544": [
                "token.generateTokens(_owner,boughtTokens)",
                "token.generateTokens(_owner,boughtTokens)"
            ],
            "jump4979": [
                "token.controller()",
                "token.controller()"
            ],
            "block4979": [
                "token.controller()"
            ],
            "jump9938": [
                "token.changeController(genaroDevMultisig)",
                "token.changeController(genaroDevMultisig)"
            ],
            "jump5734": [
                "saleWallet.finalBlock()",
                "saleWallet.finalBlock()"
            ],
            "block7961": [
                "networkPlaceholder.changeController(networkAddress)"
            ],
            "jump5226": [
                "networkPlaceholder.sale()",
                "networkPlaceholder.sale()"
            ],
            "jump5993": [
                "saleWallet.multisig()",
                "saleWallet.multisig()"
            ],
            "block5226": [
                "networkPlaceholder.sale()"
            ],
            "jump6240": [
                "saleWallet.tokenSale()",
                "saleWallet.tokenSale()"
            ],
            "block3544_0": [
                "token.generateTokens(_owner,boughtTokens)"
            ],
            "block8750": [
                "token.grantVestedTokens(_receiver, _amount, uint64(now), cliffDate, vestingDate)"
            ],
            "block9938_0": [
                "token.changeController(genaroDevMultisig)"
            ],
            "block5993": [
                "saleWallet.multisig()"
            ],
            "block3544": [
                "token.generateTokens(_owner,boughtTokens)"
            ],
            "block3247": [
                "saleWallet.send(msg.value)"
            ],
            "block8406": [
                "token.generateTokens(address(this),_amount)"
            ],
            "jump5507": [
                "networkPlaceholder.token()",
                "networkPlaceholder.token()"
            ],
            "block6240": [
                "saleWallet.tokenSale()"
            ],
            "jump3544_1": [
                "token.generateTokens(_owner,boughtTokens)",
                "token.generateTokens(_owner,boughtTokens)"
            ],
            "jump3544_0": [
                "token.generateTokens(_owner,boughtTokens)",
                "token.generateTokens(_owner,boughtTokens)"
            ],
            "block3247_1": [
                "saleWallet.send(msg.value)"
            ],
            "block3247_0": [
                "saleWallet.send(msg.value)"
            ],
            "block5507": [
                "networkPlaceholder.token()"
            ],
            "block3544_1": [
                "token.generateTokens(_owner,boughtTokens)"
            ],
            "jump8750": [
                "token.grantVestedTokens(_receiver, _amount, uint64(now), cliffDate, vestingDate)",
                "token.grantVestedTokens(_receiver, _amount, uint64(now), cliffDate, vestingDate)"
            ],
            "jump8406": [
                "token.generateTokens(address(this),_amount)",
                "token.generateTokens(address(this),_amount)"
            ],
            "block5734": [
                "saleWallet.finalBlock()"
            ]
        }
    }
}