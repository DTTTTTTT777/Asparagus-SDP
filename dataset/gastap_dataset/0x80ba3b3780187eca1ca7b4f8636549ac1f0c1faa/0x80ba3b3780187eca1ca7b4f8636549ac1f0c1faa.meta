{
    "ERC20": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                202,
                75
            ],
            "transfer(address,uint256)": [
                873,
                273
            ],
            "balanceOf(address)": [
                601,
                185
            ],
            "totalSupply()": [
                303,
                97
            ],
            "transferFrom(address,address,uint256)": [
                346,
                119
            ],
            "allowance(address,address)": [
                1061,
                317
            ]
        },
        "block_CALL_mapping": {}
    },
    "Owned": {
        "function_list": [
            "Owned()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "SellKiCoin": {
        "function_list": [
            "Owned()",
            "transferOwnership(address)",
            "SellKiCoin()",
            "WithdrawToken(uint256)",
            "SetPrice(uint256)",
            "SetMinLot(uint256)",
            "WithdrawEther(uint256)",
            "BuyToken()",
            "fallback()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {
                    "share1": "uint256",
                    "share2": "uint256",
                    "share3": "uint256",
                    "sellPrice": "uint256",
                    "minLot": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "share1": "uint256",
                    "share2": "uint256",
                    "share3": "uint256",
                    "sellPrice": "uint256",
                    "minLot": "uint256"
                }
            },
            "SellKiCoin()": {
                "argument": {},
                "contract": {
                    "share1": "uint256",
                    "share2": "uint256",
                    "share3": "uint256",
                    "sellPrice": "uint256",
                    "minLot": "uint256"
                }
            },
            "WithdrawToken(uint256)": {
                "argument": {
                    "tokens": "uint256"
                },
                "contract": {
                    "share1": "uint256",
                    "share2": "uint256",
                    "share3": "uint256",
                    "sellPrice": "uint256",
                    "minLot": "uint256"
                }
            },
            "SetPrice(uint256)": {
                "argument": {
                    "newprice": "uint256"
                },
                "contract": {
                    "share1": "uint256",
                    "share2": "uint256",
                    "share3": "uint256",
                    "sellPrice": "uint256",
                    "minLot": "uint256"
                }
            },
            "SetMinLot(uint256)": {
                "argument": {
                    "newminlot": "uint256"
                },
                "contract": {
                    "share1": "uint256",
                    "share2": "uint256",
                    "share3": "uint256",
                    "sellPrice": "uint256",
                    "minLot": "uint256"
                }
            },
            "WithdrawEther(uint256)": {
                "argument": {
                    "ethers": "uint256"
                },
                "contract": {
                    "share1": "uint256",
                    "share2": "uint256",
                    "share3": "uint256",
                    "sellPrice": "uint256",
                    "minLot": "uint256"
                }
            },
            "BuyToken()": {
                "argument": {},
                "contract": {
                    "share1": "uint256",
                    "share2": "uint256",
                    "share3": "uint256",
                    "sellPrice": "uint256",
                    "minLot": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "share1": "uint256",
                    "share2": "uint256",
                    "share3": "uint256",
                    "sellPrice": "uint256",
                    "minLot": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "share1": "uint256",
                    "share2": "uint256",
                    "share3": "uint256",
                    "sellPrice": "uint256",
                    "minLot": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "SetMinLot(uint256)": [
                996,
                361
            ],
            "WithdrawEther(uint256)": [
                283,
                97
            ],
            "SetPrice(uint256)": [
                405,
                163
            ],
            "BuyToken()": [
                352,
                119
            ],
            "WithdrawToken(uint256)": [
                711,
                251
            ],
            "transferOwnership(address)": [
                1041,
                383
            ]
        },
        "block_CALL_mapping": {
            "block1978_1": [
                "payto2.send(msg.value*share2/1000)"
            ],
            "block1488_1": [
                "msg.sender.send(change)"
            ],
            "jump1878": [
                "payto1.send(msg.value*share1/1000)",
                "payto1.send(msg.value*share1/1000)"
            ],
            "block1745": [
                "ERC20(token).transfer(msg.sender, tokens)"
            ],
            "block1488_0": [
                "msg.sender.send(change)"
            ],
            "block2946": [
                "ERC20(token).transfer(owner, tokens)"
            ],
            "jump2946": [
                "ERC20(token).transfer(owner, tokens)",
                "ERC20(token).transfer(owner, tokens)"
            ],
            "jump2078": [
                "payto3.send(msg.value*share3/1000)",
                "payto3.send(msg.value*share3/1000)"
            ],
            "block1745_0": [
                "ERC20(token).transfer(msg.sender, tokens)"
            ],
            "block1745_1": [
                "ERC20(token).transfer(msg.sender, tokens)"
            ],
            "block1392": [
                "ERC20(token).balanceOf(address(this))"
            ],
            "block1978": [
                "payto2.send(msg.value*share2/1000)"
            ],
            "jump1488_1": [
                "msg.sender.send(change)",
                "msg.sender.send(change)"
            ],
            "jump1878_1": [
                "payto1.send(msg.value*share1/1000)",
                "payto1.send(msg.value*share1/1000)"
            ],
            "block2078_0": [
                "payto3.send(msg.value*share3/1000)"
            ],
            "block2078_1": [
                "payto3.send(msg.value*share3/1000)"
            ],
            "block1878": [
                "payto1.send(msg.value*share1/1000)"
            ],
            "jump1878_0": [
                "payto1.send(msg.value*share1/1000)",
                "payto1.send(msg.value*share1/1000)"
            ],
            "jump1392": [
                "ERC20(token).balanceOf(address(this))",
                "ERC20(token).balanceOf(address(this))"
            ],
            "block2340": [
                "owner.send(ethers)"
            ],
            "jump1978_0": [
                "payto2.send(msg.value*share2/1000)",
                "payto2.send(msg.value*share2/1000)"
            ],
            "block1392_0": [
                "ERC20(token).balanceOf(address(this))"
            ],
            "block1392_1": [
                "ERC20(token).balanceOf(address(this))"
            ],
            "jump1392_0": [
                "ERC20(token).balanceOf(address(this))",
                "ERC20(token).balanceOf(address(this))"
            ],
            "jump1392_1": [
                "ERC20(token).balanceOf(address(this))",
                "ERC20(token).balanceOf(address(this))"
            ],
            "jump2078_0": [
                "payto3.send(msg.value*share3/1000)",
                "payto3.send(msg.value*share3/1000)"
            ],
            "jump2078_1": [
                "payto3.send(msg.value*share3/1000)",
                "payto3.send(msg.value*share3/1000)"
            ],
            "jump1978_1": [
                "payto2.send(msg.value*share2/1000)",
                "payto2.send(msg.value*share2/1000)"
            ],
            "block1488": [
                "msg.sender.send(change)"
            ],
            "block2078": [
                "payto3.send(msg.value*share3/1000)"
            ],
            "jump1745_0": [
                "ERC20(token).transfer(msg.sender, tokens)",
                "ERC20(token).transfer(msg.sender, tokens)"
            ],
            "jump1745_1": [
                "ERC20(token).transfer(msg.sender, tokens)",
                "ERC20(token).transfer(msg.sender, tokens)"
            ],
            "block1878_1": [
                "payto1.send(msg.value*share1/1000)"
            ],
            "block1878_0": [
                "payto1.send(msg.value*share1/1000)"
            ],
            "jump1488_0": [
                "msg.sender.send(change)",
                "msg.sender.send(change)"
            ],
            "jump1745": [
                "ERC20(token).transfer(msg.sender, tokens)",
                "ERC20(token).transfer(msg.sender, tokens)"
            ],
            "jump1488": [
                "msg.sender.send(change)",
                "msg.sender.send(change)"
            ],
            "jump1978": [
                "payto2.send(msg.value*share2/1000)",
                "payto2.send(msg.value*share2/1000)"
            ],
            "block1978_0": [
                "payto2.send(msg.value*share2/1000)"
            ]
        }
    }
}