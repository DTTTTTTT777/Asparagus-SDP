{
    "Token": {
        "function_list": [
            "transfer(address,uint256)",
            "approveAndCall(address,uint256,bytes)",
            "approve(address,uint256)",
            "transferFrom(address,address,uint256)"
        ],
        "initial_state": {
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "standard": "bytes32",
                    "name": "bytes32",
                    "symbol": "bytes32",
                    "totalSupply": "uint256",
                    "decimals": "uint8"
                }
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {
                    "standard": "bytes32",
                    "name": "bytes32",
                    "symbol": "bytes32",
                    "totalSupply": "uint256",
                    "decimals": "uint8"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "standard": "bytes32",
                    "name": "bytes32",
                    "symbol": "bytes32",
                    "totalSupply": "uint256",
                    "decimals": "uint8"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "standard": "bytes32",
                    "name": "bytes32",
                    "symbol": "bytes32",
                    "totalSupply": "uint256",
                    "decimals": "uint8"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "Assertive": {
        "function_list": [
            "assert(bool)"
        ],
        "initial_state": {
            "assert(bool)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "assert(bool)": [
                68,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "Owned": {
        "function_list": [
            "assert(bool)",
            "Owned()",
            "setOwner(address)",
            "getOwner()"
        ],
        "initial_state": {
            "assert(bool)": {
                "argument": {},
                "contract": {}
            },
            "Owned()": {
                "argument": {},
                "contract": {}
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "getOwner()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "getOwner()": [
                206,
                119
            ],
            "setOwner(address)": [
                139,
                97
            ],
            "assert(bool)": [
                92,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "Math": {
        "function_list": [
            "assert(bool)",
            "safeMul(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)"
        ],
        "initial_state": {
            "assert(bool)": {
                "argument": {},
                "contract": {}
            },
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "assert(bool)": [
                68,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "ExchangeWhitelist": {
        "function_list": [
            "Owned()",
            "setOwner(address)",
            "getOwner()",
            "assert(bool)",
            "safeMul(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "ExchangeWhitelist(address,address)",
            "setFeeAccount(address)",
            "setDVIP(address)",
            "setAdmin(address,bool)",
            "setWhitelister(address,bool)",
            "setWhitelisted(address,bool)",
            "fallback()",
            "deposit(address,uint256)",
            "withdraw(address,uint256)",
            "balanceOf(address,address)",
            "trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256)",
            "testTrade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256,address)",
            "cancelOrder(address,uint256,address,uint256,uint256,uint256,uint8,bytes32,bytes32,address)"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {
                    "feeTake": "uint256",
                    "feeMake": "uint256",
                    "feeTerm": "uint256",
                    "testHash": "bytes32",
                    "amountSelln": "uint256"
                }
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {
                    "feeTake": "uint256",
                    "feeMake": "uint256",
                    "feeTerm": "uint256",
                    "testHash": "bytes32",
                    "amountSelln": "uint256"
                }
            },
            "getOwner()": {
                "argument": {},
                "contract": {
                    "feeTake": "uint256",
                    "feeMake": "uint256",
                    "feeTerm": "uint256",
                    "testHash": "bytes32",
                    "amountSelln": "uint256"
                }
            },
            "assert(bool)": {
                "argument": {},
                "contract": {
                    "feeTake": "uint256",
                    "feeMake": "uint256",
                    "feeTerm": "uint256",
                    "testHash": "bytes32",
                    "amountSelln": "uint256"
                }
            },
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "feeTake": "uint256",
                    "feeMake": "uint256",
                    "feeTerm": "uint256",
                    "testHash": "bytes32",
                    "amountSelln": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "feeTake": "uint256",
                    "feeMake": "uint256",
                    "feeTerm": "uint256",
                    "testHash": "bytes32",
                    "amountSelln": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "feeTake": "uint256",
                    "feeMake": "uint256",
                    "feeTerm": "uint256",
                    "testHash": "bytes32",
                    "amountSelln": "uint256"
                }
            },
            "ExchangeWhitelist(address,address)": {
                "argument": {},
                "contract": {
                    "feeTake": "uint256",
                    "feeMake": "uint256",
                    "feeTerm": "uint256",
                    "testHash": "bytes32",
                    "amountSelln": "uint256"
                }
            },
            "setFeeAccount(address)": {
                "argument": {},
                "contract": {
                    "feeTake": "uint256",
                    "feeMake": "uint256",
                    "feeTerm": "uint256",
                    "testHash": "bytes32",
                    "amountSelln": "uint256"
                }
            },
            "setDVIP(address)": {
                "argument": {},
                "contract": {
                    "feeTake": "uint256",
                    "feeMake": "uint256",
                    "feeTerm": "uint256",
                    "testHash": "bytes32",
                    "amountSelln": "uint256"
                }
            },
            "setAdmin(address,bool)": {
                "argument": {},
                "contract": {
                    "feeTake": "uint256",
                    "feeMake": "uint256",
                    "feeTerm": "uint256",
                    "testHash": "bytes32",
                    "amountSelln": "uint256"
                }
            },
            "setWhitelister(address,bool)": {
                "argument": {},
                "contract": {
                    "feeTake": "uint256",
                    "feeMake": "uint256",
                    "feeTerm": "uint256",
                    "testHash": "bytes32",
                    "amountSelln": "uint256"
                }
            },
            "setWhitelisted(address,bool)": {
                "argument": {},
                "contract": {
                    "feeTake": "uint256",
                    "feeMake": "uint256",
                    "feeTerm": "uint256",
                    "testHash": "bytes32",
                    "amountSelln": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "feeTake": "uint256",
                    "feeMake": "uint256",
                    "feeTerm": "uint256",
                    "testHash": "bytes32",
                    "amountSelln": "uint256"
                }
            },
            "deposit(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "feeTake": "uint256",
                    "feeMake": "uint256",
                    "feeTerm": "uint256",
                    "testHash": "bytes32",
                    "amountSelln": "uint256"
                }
            },
            "withdraw(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "feeTake": "uint256",
                    "feeMake": "uint256",
                    "feeTerm": "uint256",
                    "testHash": "bytes32",
                    "amountSelln": "uint256"
                }
            },
            "balanceOf(address,address)": {
                "argument": {},
                "contract": {
                    "feeTake": "uint256",
                    "feeMake": "uint256",
                    "feeTerm": "uint256",
                    "testHash": "bytes32",
                    "amountSelln": "uint256"
                }
            },
            "trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256)": {
                "argument": {
                    "amountBuy": "uint256",
                    "amountSell": "uint256",
                    "expires": "uint256",
                    "nonce": "uint256",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32",
                    "amount": "uint256"
                },
                "contract": {
                    "feeTake": "uint256",
                    "feeMake": "uint256",
                    "feeTerm": "uint256",
                    "testHash": "bytes32",
                    "amountSelln": "uint256"
                }
            },
            "testTrade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256,address)": {
                "argument": {
                    "amountBuy": "uint256",
                    "amountSell": "uint256",
                    "expires": "uint256",
                    "nonce": "uint256",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32",
                    "amount": "uint256"
                },
                "contract": {
                    "feeTake": "uint256",
                    "feeMake": "uint256",
                    "feeTerm": "uint256",
                    "testHash": "bytes32",
                    "amountSelln": "uint256"
                }
            },
            "cancelOrder(address,uint256,address,uint256,uint256,uint256,uint8,bytes32,bytes32,address)": {
                "argument": {
                    "amountBuy": "uint256",
                    "amountSell": "uint256",
                    "expires": "uint256",
                    "nonce": "uint256",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "feeTake": "uint256",
                    "feeMake": "uint256",
                    "feeTerm": "uint256",
                    "testHash": "bytes32",
                    "amountSelln": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "assert(bool)": [
                412,
                97
            ],
            "testTrade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256,address)": [
                1733,
                383
            ],
            "withdraw(address,uint256)": [
                2436,
                515
            ],
            "trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256)": [
                459,
                119
            ],
            "setWhitelister(address,bool)": [
                2179,
                449
            ],
            "setDVIP(address)": [
                1666,
                361
            ],
            "setWhitelisted(address,bool)": [
                2100,
                427
            ],
            "setOwner(address)": [
                681,
                141
            ],
            "deposit(address,uint256)": [
                1138,
                229
            ],
            "balanceOf(address,address)": [
                2582,
                559
            ],
            "setAdmin(address,bool)": [
                1269,
                273
            ],
            "getOwner()": [
                2013,
                405
            ],
            "cancelOrder(address,uint256,address,uint256,uint256,uint256,uint8,bytes32,bytes32,address)": [
                835,
                185
            ],
            "setFeeAccount(address)": [
                1202,
                251
            ]
        },
        "block_CALL_mapping": {
            "block2847": [
                "ecrecover(hash,v,r,s)"
            ],
            "jump8604": [
                "Token(token).transferFrom(msg.sender, this, amount)",
                "Token(token).transferFrom(msg.sender, this, amount)"
            ],
            "block11567": [
                "msg.sender.send(amount)"
            ],
            "block6997": [
                "ecrecover(hash,v,r,s)"
            ],
            "jump4281": [
                "DVIP(dvipAddress).feeFor(feeTakeExporter, user, 1 ether)",
                "DVIP(dvipAddress).feeFor(feeTakeExporter, user, 1 ether)"
            ],
            "block10187": [
                "ecrecover(testHash, v, r, s)"
            ],
            "block11798": [
                "Token(token).transfer(msg.sender, amount)"
            ],
            "block3925": [
                "DVIP(dvipAddress).feeFor(feeMakeExporter, msg.sender, 1 ether)"
            ],
            "jump10187": [
                "ecrecover(testHash, v, r, s)",
                "ecrecover(testHash, v, r, s)"
            ],
            "jump11798": [
                "Token(token).transfer(msg.sender, amount)",
                "Token(token).transfer(msg.sender, amount)"
            ],
            "jump11567": [
                "msg.sender.send(amount)",
                "msg.sender.send(amount)"
            ],
            "block4281": [
                "DVIP(dvipAddress).feeFor(feeTakeExporter, user, 1 ether)"
            ],
            "jump3925": [
                "DVIP(dvipAddress).feeFor(feeMakeExporter, msg.sender, 1 ether)",
                "DVIP(dvipAddress).feeFor(feeMakeExporter, msg.sender, 1 ether)"
            ],
            "block8604": [
                "Token(token).transferFrom(msg.sender, this, amount)"
            ],
            "jump2847": [
                "ecrecover(hash,v,r,s)",
                "ecrecover(hash,v,r,s)"
            ],
            "jump6997": [
                "ecrecover(hash,v,r,s)",
                "ecrecover(hash,v,r,s)"
            ]
        }
    }
}