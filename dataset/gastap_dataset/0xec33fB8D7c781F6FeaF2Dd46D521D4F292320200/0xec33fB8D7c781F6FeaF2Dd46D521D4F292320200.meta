{
    "ERC20": {
        "function_list": [
            "balanceOf(address)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                337,
                97
            ],
            "allowance(address,address)": [
                1286,
                295
            ],
            "balanceOf(address)": [
                807,
                207
            ],
            "transferFrom(address,address,uint256)": [
                481,
                141
            ],
            "transfer(address,uint256)": [
                1038,
                251
            ]
        },
        "block_CALL_mapping": {
            "jump3655": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "block3655": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "SafeMath": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeDiv(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)",
            "assert(bool)"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeDiv(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "assert(bool)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "PullPayment": {
        "function_list": [
            "asyncSend(address,uint256)",
            "withdrawPayments()"
        ],
        "initial_state": {
            "asyncSend(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {}
            },
            "withdrawPayments()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "withdrawPayments()": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {
            "jump312": [
                "payee.send(payment)",
                "payee.send(payment)"
            ],
            "block312": [
                "payee.send(payment)"
            ]
        }
    },
    "Pausable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "emergencyStop()",
            "release()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "emergencyStop()": {
                "argument": {},
                "contract": {}
            },
            "release()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "emergencyStop()": [
                114,
                75
            ],
            "transferOwnership(address)": [
                294,
                163
            ],
            "release()": [
                184,
                119
            ]
        },
        "block_CALL_mapping": {}
    },
    "RLC": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "safeMul(uint256,uint256)",
            "safeDiv(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)",
            "assert(bool)",
            "balanceOf(address)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "RLC()",
            "unlock()",
            "burn(uint256)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "approveAndCall(address,uint256,bytes)",
            "allowance(address,address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string",
                    "initialSupply": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string",
                    "initialSupply": "uint256"
                }
            },
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string",
                    "initialSupply": "uint256"
                }
            },
            "safeDiv(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string",
                    "initialSupply": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string",
                    "initialSupply": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string",
                    "initialSupply": "uint256"
                }
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string",
                    "initialSupply": "uint256"
                }
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string",
                    "initialSupply": "uint256"
                }
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string",
                    "initialSupply": "uint256"
                }
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string",
                    "initialSupply": "uint256"
                }
            },
            "assert(bool)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string",
                    "initialSupply": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string",
                    "initialSupply": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string",
                    "initialSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string",
                    "initialSupply": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string",
                    "initialSupply": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string",
                    "initialSupply": "uint256"
                }
            },
            "RLC()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string",
                    "initialSupply": "uint256"
                }
            },
            "unlock()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string",
                    "initialSupply": "uint256"
                }
            },
            "burn(uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string",
                    "initialSupply": "uint256"
                }
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string",
                    "initialSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                390,
                97
            ],
            "approveAndCall(address,uint256,bytes)": [
                1414,
                361
            ],
            "transfer(address,uint256)": [
                1313,
                339
            ],
            "allowance(address,address)": [
                1608,
                405
            ],
            "burn(uint256)": [
                759,
                207
            ],
            "balanceOf(address)": [
                972,
                251
            ],
            "transferFrom(address,address,uint256)": [
                534,
                141
            ],
            "transferOwnership(address)": [
                1727,
                427
            ],
            "unlock()": [
                1290,
                317
            ]
        },
        "block_CALL_mapping": {
            "block4647": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "jump4647": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "Crowdsale": {
        "function_list": [
            "emergencyStop()",
            "release()",
            "Ownable()",
            "transferOwnership(address)",
            "asyncSend(address,uint256)",
            "withdrawPayments()",
            "safeMul(uint256,uint256)",
            "safeDiv(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)",
            "assert(bool)",
            "Crowdsale()",
            "fallback()",
            "start()",
            "receiveETH(address)",
            "receiveBTC(address,string,uint256,string)",
            "emitRLC(uint256)",
            "bonus(uint256)",
            "receiveApproval(address,uint256,address,bytes)",
            "setRLCPerETH(uint256)",
            "finalize()",
            "drain()"
        ],
        "initial_state": {
            "emergencyStop()": {
                "argument": {},
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            },
            "release()": {
                "argument": {},
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            },
            "Ownable()": {
                "argument": {},
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            },
            "asyncSend(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            },
            "withdrawPayments()": {
                "argument": {},
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            },
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            },
            "safeDiv(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            },
            "assert(bool)": {
                "argument": {},
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            },
            "Crowdsale()": {
                "argument": {},
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            },
            "start()": {
                "argument": {},
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            },
            "receiveETH(address)": {
                "argument": {},
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            },
            "receiveBTC(address,string,uint256,string)": {
                "argument": {
                    "btc_address": "string",
                    "value": "uint256",
                    "txid": "string"
                },
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            },
            "emitRLC(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            },
            "bonus(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            },
            "receiveApproval(address,uint256,address,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            },
            "setRLCPerETH(uint256)": {
                "argument": {
                    "rate": "uint256"
                },
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            },
            "finalize()": {
                "argument": {},
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            },
            "drain()": {
                "argument": {},
                "contract": {
                    "RLCPerETH": "uint256",
                    "RLCPerSATOSHI": "uint256",
                    "ETHReceived": "uint256",
                    "BTCReceived": "uint256",
                    "RLCSentToETH": "uint256",
                    "RLCSentToBTC": "uint256",
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minCap": "uint256",
                    "maxCap": "uint256",
                    "minInvestETH": "uint256",
                    "minInvestBTC": "uint256",
                    "rlc_bounty": "uint256",
                    "rlc_reserve": "uint256",
                    "rlc_team": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "receiveBTC(address,string,uint256,string)": [
                702,
                185
            ],
            "setRLCPerETH(uint256)": [
                1334,
                405
            ],
            "start()": [
                2447,
                735
            ],
            "transferOwnership(address)": [
                2781,
                867
            ],
            "receiveApproval(address,uint256,address,bytes)": [
                1733,
                559
            ],
            "withdrawPayments()": [
                1311,
                383
            ],
            "emergencyStop()": [
                1379,
                427
            ],
            "release()": [
                1623,
                515
            ],
            "drain()": [
                2042,
                625
            ],
            "finalize()": [
                1202,
                317
            ]
        },
        "block_CALL_mapping": {
            "block9857": [
                "owner.send(this.balance)"
            ],
            "block7457": [
                "rlc.unlock()"
            ],
            "jump8857": [
                "rlc.transferFrom(_from, address(this), _value)",
                "rlc.transferFrom(_from, address(this), _value)"
            ],
            "jump3259": [
                "rlc.transfer(beneficiary, rlcToSend)",
                "rlc.transfer(beneficiary, rlcToSend)"
            ],
            "block3259": [
                "rlc.transfer(beneficiary, rlcToSend)"
            ],
            "jump9857": [
                "owner.send(this.balance)",
                "owner.send(this.balance)"
            ],
            "jump6006": [
                "rlc.transfer(bounty,6000000000000000)",
                "rlc.transfer(bounty,6000000000000000)"
            ],
            "jump4217": [
                "rlc.transfer(beneficiary, rlcToSend)",
                "rlc.transfer(beneficiary, rlcToSend)"
            ],
            "block9072": [
                "rlc.burn(_value)"
            ],
            "jump6632": [
                "rlc.transfer(team,rlc_team)",
                "rlc.transfer(team,rlc_team)"
            ],
            "jump7457": [
                "rlc.unlock()",
                "rlc.unlock()"
            ],
            "jump9072": [
                "rlc.burn(_value)",
                "rlc.burn(_value)"
            ],
            "block7120": [
                "rlc.totalSupply()"
            ],
            "jump6857": [
                "rlc.totalSupply()",
                "rlc.totalSupply()"
            ],
            "jump4982": [
                "multisigETH.send(this.balance)",
                "multisigETH.send(this.balance)"
            ],
            "block4217": [
                "rlc.transfer(beneficiary, rlcToSend)"
            ],
            "jump7645": [
                "payee.send(payment)",
                "payee.send(payment)"
            ],
            "jump6328": [
                "rlc.transfer(bounty,rlc_bounty)",
                "rlc.transfer(bounty,rlc_bounty)"
            ],
            "block6328": [
                "rlc.transfer(bounty,rlc_bounty)"
            ],
            "block7645": [
                "payee.send(payment)"
            ],
            "block4982": [
                "multisigETH.send(this.balance)"
            ],
            "block7262": [
                "rlc.burn(rlc.totalSupply() - RLCEmitted)"
            ],
            "jump7262": [
                "rlc.burn(rlc.totalSupply() - RLCEmitted)",
                "rlc.burn(rlc.totalSupply() - RLCEmitted)"
            ],
            "block6632": [
                "rlc.transfer(team,rlc_team)"
            ],
            "jump5680": [
                "rlc.transfer(reserve,rlc_reserve)",
                "rlc.transfer(reserve,rlc_reserve)"
            ],
            "jump5358": [
                "rlc.transfer(reserve,6000000000000000)",
                "rlc.transfer(reserve,6000000000000000)"
            ],
            "block6006": [
                "rlc.transfer(bounty,6000000000000000)"
            ],
            "block5358": [
                "rlc.transfer(reserve,6000000000000000)"
            ],
            "jump3259_0": [
                "rlc.transfer(beneficiary, rlcToSend)",
                "rlc.transfer(beneficiary, rlcToSend)"
            ],
            "block3259_0": [
                "rlc.transfer(beneficiary, rlcToSend)"
            ],
            "block6857": [
                "rlc.totalSupply()"
            ],
            "block5680": [
                "rlc.transfer(reserve,rlc_reserve)"
            ],
            "block8857": [
                "rlc.transferFrom(_from, address(this), _value)"
            ],
            "jump7120": [
                "rlc.totalSupply()",
                "rlc.totalSupply()"
            ]
        }
    }
}