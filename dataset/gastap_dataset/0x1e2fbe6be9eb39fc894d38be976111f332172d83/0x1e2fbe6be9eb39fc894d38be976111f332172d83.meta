{
    "usingOraclize": {
        "function_list": [
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            }
        },
        "function_block_mapping": {
            "__callback(bytes32,string,bytes)": [
                200,
                97
            ],
            "__callback(bytes32,string)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "Dice": {
        "function_list": [
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "Dice()",
            "getBankroll()",
            "getMinInvestment()",
            "getStatus()",
            "getBet(uint256)",
            "numBets()",
            "getMinBetAmount()",
            "getMaxBetAmount()",
            "getLossesShare(address)",
            "getProfitShare(address)",
            "getBalance(address)",
            "searchSmallestInvestor()",
            "changeOraclizeProofType(bytes1)",
            "changeOraclizeConfig(bytes32)",
            "safeSend(address,uint256)",
            "addInvestorAtID(uint256)",
            "profitDistribution()",
            "fallback()",
            "bet()",
            "__callback(bytes32,string,bytes)",
            "isWinningBet(Dice.Bet,uint256)",
            "isLosingBet(Dice.Bet,uint256)",
            "increaseInvestment()",
            "newInvestor()",
            "divest()",
            "divest(address)",
            "forceDivestOfAllInvestors()",
            "forceDivestOfOneInvestor(address)",
            "stopContract()",
            "resumeContract()",
            "changeHouseAddress(address)",
            "changeOwnerAddress(address)",
            "changeGasLimitOfSafeSend(uint256)",
            "voteEmergencyWithdrawal(bool)",
            "proposeEmergencyWithdrawal(address)",
            "executeEmergencyWithdrawal()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "Dice()": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "getBankroll()": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "getMinInvestment()": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "getStatus()": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "getBet(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "numBets()": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "getMinBetAmount()": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "getMaxBetAmount()": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "getLossesShare(address)": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "getProfitShare(address)": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "getBalance(address)": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "searchSmallestInvestor()": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "changeOraclizeProofType(bytes1)": {
                "argument": {
                    "_proofType": "bytes1"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "changeOraclizeConfig(bytes32)": {
                "argument": {
                    "_config": "bytes32"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "safeSend(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "addInvestorAtID(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "profitDistribution()": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "bet()": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "isWinningBet(Dice.Bet,uint256)": {
                "argument": {
                    "numberRolled": "uint256"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "isLosingBet(Dice.Bet,uint256)": {
                "argument": {
                    "numberRolled": "uint256"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "increaseInvestment()": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "newInvestor()": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "divest()": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "divest(address)": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "forceDivestOfAllInvestors()": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "forceDivestOfOneInvestor(address)": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "stopContract()": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "resumeContract()": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "changeHouseAddress(address)": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "changeOwnerAddress(address)": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "changeGasLimitOfSafeSend(uint256)": {
                "argument": {
                    "newGasLimit": "uint256"
                },
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "voteEmergencyWithdrawal(bool)": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "proposeEmergencyWithdrawal(address)": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "executeEmergencyWithdrawal()": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "pwin": "uint256",
                    "edge": "uint256",
                    "maxWin": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "houseEdge": "uint256",
                    "divestFee": "uint256",
                    "emergencyWithdrawalRatio": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "INVALID_BET_MARKER": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "resumeContract()": [
                2554,
                757
            ],
            "getMinInvestment()": [
                2304,
                647
            ],
            "changeHouseAddress(address)": [
                1001,
                273
            ],
            "executeEmergencyWithdrawal()": [
                2971,
                911
            ],
            "changeOraclizeConfig(bytes32)": [
                2879,
                867
            ],
            "getBet(uint256)": [
                538,
                97
            ],
            "stopContract()": [
                801,
                185
            ],
            "getBalance(address)": [
                2994,
                933
            ],
            "forceDivestOfAllInvestors()": [
                1068,
                295
            ],
            "changeOraclizeProofType(bytes1)": [
                1775,
                471
            ],
            "getLossesShare(address)": [
                867,
                229
            ],
            "__callback(bytes32,string,bytes)": [
                1210,
                339
            ],
            "getMaxBetAmount()": [
                2015,
                537
            ],
            "bet()": [
                704,
                141
            ],
            "numBets()": [
                2928,
                889
            ],
            "increaseInvestment()": [
                2544,
                735
            ],
            "getProfitShare(address)": [
                714,
                163
            ],
            "forceDivestOfOneInvestor(address)": [
                1854,
                493
            ],
            "getStatus()": [
                1683,
                449
            ],
            "getBankroll()": [
                661,
                119
            ],
            "searchSmallestInvestor()": [
                1573,
                405
            ],
            "divest()": [
                515,
                75
            ],
            "__callback(bytes32,string)": [
                1091,
                317
            ],
            "proposeEmergencyWithdrawal(address)": [
                1616,
                427
            ],
            "changeGasLimitOfSafeSend(uint256)": [
                2747,
                823
            ],
            "voteEmergencyWithdrawal(bool)": [
                954,
                251
            ],
            "newInvestor()": [
                3081,
                955
            ],
            "getMinBetAmount()": [
                2347,
                669
            ],
            "changeOwnerAddress(address)": [
                2390,
                691
            ]
        },
        "block_CALL_mapping": {
            "jump12087": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block12929_1": [
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)"
            ],
            "block12929_0": [
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)"
            ],
            "jump12929_1": [
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)",
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)"
            ],
            "block3255": [
                "OAR.getAddress()"
            ],
            "jump14500_0": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "block17225": [
                "OAR.getAddress()"
            ],
            "block3488_0": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "block14722": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump3488": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "jump12929_0": [
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)",
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)"
            ],
            "block14243_0": [
                "OAR.getAddress()"
            ],
            "block3488": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "jump17501": [
                "oraclize.setConfig(config)",
                "oraclize.setConfig(config)"
            ],
            "block12087_0": [
                "OAR.getAddress()"
            ],
            "block12087_1": [
                "OAR.getAddress()"
            ],
            "block14971_3": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump11022": [
                "proposedWithdrawal.toAddress.send(amountToWithdraw)",
                "proposedWithdrawal.toAddress.send(amountToWithdraw)"
            ],
            "block8604": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "block14971_0": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block14971_1": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block14971_2": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block12087": [
                "OAR.getAddress()"
            ],
            "block14971_4": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block14971_5": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block14971_6": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block14971_7": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block14971_8": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block11022": [
                "proposedWithdrawal.toAddress.send(amountToWithdraw)"
            ],
            "block14971_9": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block14500_0": [
                "oraclize.cbAddress()"
            ],
            "jump14243": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump14971_2": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump14971_3": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump14971_0": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump14971_1": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump14971_6": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block16085": [
                "OAR.getAddress()"
            ],
            "jump14971_4": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump14971_5": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump14971_8": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump14971_9": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump12087_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump12087_1": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump9259": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "block14971_12": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block14971_13": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block14971_10": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block14971_11": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block14971_16": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block14971_14": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block14971_15": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block3488_1": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "block12464": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump14722_8": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block14722_7": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block14722_4": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block14722_5": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block14722_2": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block14722_3": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block14722_0": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block14722_1": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump14722_0": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump14722_1": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump14722_2": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump14722_3": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump14722_4": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump14722_5": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump14722_6": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block14722_9": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block14243": [
                "OAR.getAddress()"
            ],
            "jump14500": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "jump3255_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump3255_1": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump14722_12": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump14722_13": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump14722_10": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump14722_11": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump14722_16": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump14722_14": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump14722_15": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block3255_0": [
                "OAR.getAddress()"
            ],
            "block3255_1": [
                "OAR.getAddress()"
            ],
            "block14722_6": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump14722_9": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump9026": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block8371": [
                "OAR.getAddress()"
            ],
            "block14500": [
                "oraclize.cbAddress()"
            ],
            "jump14971": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump17225": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump8604": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "block16421": [
                "oraclize.setProofType(proofP)"
            ],
            "jump14971_7": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump3255": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump14243_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block12929": [
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)"
            ],
            "block9259": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "block14722_8": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump14722_7": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block9026": [
                "OAR.getAddress()"
            ],
            "jump16085": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump14722": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block14722_14": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block14722_15": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block14722_16": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block14722_10": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block14722_11": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block14722_12": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block14722_13": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block12464_1": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block12464_0": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump16421": [
                "oraclize.setProofType(proofP)",
                "oraclize.setProofType(proofP)"
            ],
            "jump3488_0": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "jump3488_1": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "jump12464_1": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump12464_0": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump12929": [
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)",
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)"
            ],
            "jump8371": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump14971_14": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump14971_15": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump14971_16": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block14971": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump14971_10": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump14971_11": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump14971_12": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump14971_13": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump12464": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block17501": [
                "oraclize.setConfig(config)"
            ]
        }
    }
}