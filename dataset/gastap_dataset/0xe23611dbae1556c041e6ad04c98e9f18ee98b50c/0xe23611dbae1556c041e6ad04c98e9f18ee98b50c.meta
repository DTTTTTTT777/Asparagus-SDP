{
    "DBC": {
        "function_list": [],
        "initial_state": {},
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "ERC20Interface": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "totalSupply()": [
                226,
                97
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "totalSupply()": [
                226,
                97
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "Owned": {
        "function_list": [
            "isOwner()",
            "Owned()"
        ],
        "initial_state": {
            "isOwner()": {
                "argument": {},
                "contract": {}
            },
            "Owned()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Vesting": {
        "function_list": [
            "isOwner()",
            "Owned()",
            "isBeneficiary()",
            "isVestingStarted()",
            "isVestingRevoked()",
            "withdrawnMelon()",
            "calculateWithdrawable()",
            "Vesting(address)",
            "setVesting(address,uint256,uint256)",
            "withdraw()",
            "revokeAndReclaim()"
        ],
        "initial_state": {
            "isOwner()": {
                "argument": {},
                "contract": {
                    "totalVestedAmount": "uint256",
                    "vestingStartTime": "uint256",
                    "vestingPeriod": "uint256",
                    "withdrawnByBeneficiary": "uint256"
                }
            },
            "Owned()": {
                "argument": {},
                "contract": {
                    "totalVestedAmount": "uint256",
                    "vestingStartTime": "uint256",
                    "vestingPeriod": "uint256",
                    "withdrawnByBeneficiary": "uint256"
                }
            },
            "isBeneficiary()": {
                "argument": {},
                "contract": {
                    "totalVestedAmount": "uint256",
                    "vestingStartTime": "uint256",
                    "vestingPeriod": "uint256",
                    "withdrawnByBeneficiary": "uint256"
                }
            },
            "isVestingStarted()": {
                "argument": {},
                "contract": {
                    "totalVestedAmount": "uint256",
                    "vestingStartTime": "uint256",
                    "vestingPeriod": "uint256",
                    "withdrawnByBeneficiary": "uint256"
                }
            },
            "isVestingRevoked()": {
                "argument": {},
                "contract": {
                    "totalVestedAmount": "uint256",
                    "vestingStartTime": "uint256",
                    "vestingPeriod": "uint256",
                    "withdrawnByBeneficiary": "uint256"
                }
            },
            "withdrawnMelon()": {
                "argument": {},
                "contract": {
                    "totalVestedAmount": "uint256",
                    "vestingStartTime": "uint256",
                    "vestingPeriod": "uint256",
                    "withdrawnByBeneficiary": "uint256"
                }
            },
            "calculateWithdrawable()": {
                "argument": {},
                "contract": {
                    "totalVestedAmount": "uint256",
                    "vestingStartTime": "uint256",
                    "vestingPeriod": "uint256",
                    "withdrawnByBeneficiary": "uint256"
                }
            },
            "Vesting(address)": {
                "argument": {},
                "contract": {
                    "totalVestedAmount": "uint256",
                    "vestingStartTime": "uint256",
                    "vestingPeriod": "uint256",
                    "withdrawnByBeneficiary": "uint256"
                }
            },
            "setVesting(address,uint256,uint256)": {
                "argument": {
                    "ofMelonQuantity": "uint256",
                    "ofVestingPeriod": "uint256"
                },
                "contract": {
                    "totalVestedAmount": "uint256",
                    "vestingStartTime": "uint256",
                    "vestingPeriod": "uint256",
                    "withdrawnByBeneficiary": "uint256"
                }
            },
            "withdraw()": {
                "argument": {},
                "contract": {
                    "totalVestedAmount": "uint256",
                    "vestingStartTime": "uint256",
                    "vestingPeriod": "uint256",
                    "withdrawnByBeneficiary": "uint256"
                }
            },
            "revokeAndReclaim()": {
                "argument": {},
                "contract": {
                    "totalVestedAmount": "uint256",
                    "vestingStartTime": "uint256",
                    "vestingPeriod": "uint256",
                    "withdrawnByBeneficiary": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "setVesting(address,uint256,uint256)": [
                945,
                383
            ],
            "calculateWithdrawable()": [
                1032,
                405
            ],
            "isVestingStarted()": [
                305,
                119
            ],
            "revokeAndReclaim()": [
                282,
                97
            ],
            "isVestingRevoked()": [
                235,
                75
            ],
            "withdraw()": [
                439,
                163
            ],
            "withdrawnMelon()": [
                505,
                207
            ],
            "isBeneficiary()": [
                681,
                295
            ]
        },
        "block_CALL_mapping": {
            "jump2122": [
                "MELON_CONTRACT.transfer(beneficiary, withdrawable)",
                "MELON_CONTRACT.transfer(beneficiary, withdrawable)"
            ],
            "block2414": [
                "MELON_CONTRACT.balanceOf(this)"
            ],
            "block2122": [
                "MELON_CONTRACT.transfer(beneficiary, withdrawable)"
            ],
            "jump2414_2": [
                "MELON_CONTRACT.balanceOf(this)",
                "MELON_CONTRACT.balanceOf(this)"
            ],
            "jump2414_3": [
                "MELON_CONTRACT.balanceOf(this)",
                "MELON_CONTRACT.balanceOf(this)"
            ],
            "jump2414_0": [
                "MELON_CONTRACT.balanceOf(this)",
                "MELON_CONTRACT.balanceOf(this)"
            ],
            "jump2414_1": [
                "MELON_CONTRACT.balanceOf(this)",
                "MELON_CONTRACT.balanceOf(this)"
            ],
            "jump1829": [
                "MELON_CONTRACT.balanceOf(this)",
                "MELON_CONTRACT.balanceOf(this)"
            ],
            "jump2414": [
                "MELON_CONTRACT.balanceOf(this)",
                "MELON_CONTRACT.balanceOf(this)"
            ],
            "jump2414_4": [
                "MELON_CONTRACT.balanceOf(this)",
                "MELON_CONTRACT.balanceOf(this)"
            ],
            "jump2414_5": [
                "MELON_CONTRACT.balanceOf(this)",
                "MELON_CONTRACT.balanceOf(this)"
            ],
            "block1442": [
                "MELON_CONTRACT.transfer(owner, reclaimable)"
            ],
            "block2974": [
                "MELON_CONTRACT.transferFrom(msg.sender, this, ofMelonQuantity)"
            ],
            "jump2974": [
                "MELON_CONTRACT.transferFrom(msg.sender, this, ofMelonQuantity)",
                "MELON_CONTRACT.transferFrom(msg.sender, this, ofMelonQuantity)"
            ],
            "jump1442": [
                "MELON_CONTRACT.transfer(owner, reclaimable)",
                "MELON_CONTRACT.transfer(owner, reclaimable)"
            ],
            "jump2414_6": [
                "MELON_CONTRACT.balanceOf(this)",
                "MELON_CONTRACT.balanceOf(this)"
            ],
            "block1829": [
                "MELON_CONTRACT.balanceOf(this)"
            ],
            "block2414_4": [
                "MELON_CONTRACT.balanceOf(this)"
            ],
            "block2414_5": [
                "MELON_CONTRACT.balanceOf(this)"
            ],
            "block2414_6": [
                "MELON_CONTRACT.balanceOf(this)"
            ],
            "block2414_0": [
                "MELON_CONTRACT.balanceOf(this)"
            ],
            "block2414_1": [
                "MELON_CONTRACT.balanceOf(this)"
            ],
            "block2414_2": [
                "MELON_CONTRACT.balanceOf(this)"
            ],
            "block2414_3": [
                "MELON_CONTRACT.balanceOf(this)"
            ]
        }
    },
    "safeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    }
}