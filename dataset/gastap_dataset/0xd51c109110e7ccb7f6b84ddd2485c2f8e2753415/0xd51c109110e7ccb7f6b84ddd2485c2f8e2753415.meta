{
    "usingOraclize": {
        "function_list": [
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "matchBytes32Prefix(bytes32,bytes)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "matchBytes32Prefix(bytes32,bytes)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            }
        },
        "function_block_mapping": {
            "__callback(bytes32,string,bytes)": [
                200,
                97
            ],
            "__callback(bytes32,string)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "StringOps": {
        "function_list": [
            "stringEndsWith(string,string)"
        ],
        "initial_state": {
            "stringEndsWith(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "ERC20Interface": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "allowance(address,address)": [
                445,
                141
            ],
            "totalSupply()": [
                258,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20Token": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "unit": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "unit": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "unit": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "unit": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "unit": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "unit": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "unit": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                136,
                75
            ],
            "balanceOf(address)": [
                413,
                141
            ],
            "totalSupply()": [
                237,
                97
            ],
            "allowance(address,address)": [
                644,
                207
            ],
            "transferFrom(address,address,uint256)": [
                280,
                119
            ],
            "transfer(address,uint256)": [
                543,
                185
            ]
        },
        "block_CALL_mapping": {}
    },
    "LittleSisterToken": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "LittleSisterToken()",
            "fallback()",
            "setVigAddress(address)",
            "totalSupply()",
            "registerSister(address)",
            "sellPrice()",
            "buyPrice()",
            "sendFunds()",
            "releaseContract()",
            "winningValue()",
            "availableSupply()",
            "buy()",
            "sell(uint256)",
            "sellAll()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "vig": "uint8",
                    "maxSupply": "uint256",
                    "totalSupply_": "uint256",
                    "validityDate": "uint256",
                    "maxBuyingDate": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "vig": "uint8",
                    "maxSupply": "uint256",
                    "totalSupply_": "uint256",
                    "validityDate": "uint256",
                    "maxBuyingDate": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "vig": "uint8",
                    "maxSupply": "uint256",
                    "totalSupply_": "uint256",
                    "validityDate": "uint256",
                    "maxBuyingDate": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "vig": "uint8",
                    "maxSupply": "uint256",
                    "totalSupply_": "uint256",
                    "validityDate": "uint256",
                    "maxBuyingDate": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "vig": "uint8",
                    "maxSupply": "uint256",
                    "totalSupply_": "uint256",
                    "validityDate": "uint256",
                    "maxBuyingDate": "uint256"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "vig": "uint8",
                    "maxSupply": "uint256",
                    "totalSupply_": "uint256",
                    "validityDate": "uint256",
                    "maxBuyingDate": "uint256"
                }
            },
            "LittleSisterToken()": {
                "argument": {},
                "contract": {
                    "vig": "uint8",
                    "maxSupply": "uint256",
                    "totalSupply_": "uint256",
                    "validityDate": "uint256",
                    "maxBuyingDate": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "vig": "uint8",
                    "maxSupply": "uint256",
                    "totalSupply_": "uint256",
                    "validityDate": "uint256",
                    "maxBuyingDate": "uint256"
                }
            },
            "setVigAddress(address)": {
                "argument": {},
                "contract": {
                    "vig": "uint8",
                    "maxSupply": "uint256",
                    "totalSupply_": "uint256",
                    "validityDate": "uint256",
                    "maxBuyingDate": "uint256"
                }
            },
            "registerSister(address)": {
                "argument": {},
                "contract": {
                    "vig": "uint8",
                    "maxSupply": "uint256",
                    "totalSupply_": "uint256",
                    "validityDate": "uint256",
                    "maxBuyingDate": "uint256"
                }
            },
            "sellPrice()": {
                "argument": {},
                "contract": {
                    "vig": "uint8",
                    "maxSupply": "uint256",
                    "totalSupply_": "uint256",
                    "validityDate": "uint256",
                    "maxBuyingDate": "uint256"
                }
            },
            "buyPrice()": {
                "argument": {},
                "contract": {
                    "vig": "uint8",
                    "maxSupply": "uint256",
                    "totalSupply_": "uint256",
                    "validityDate": "uint256",
                    "maxBuyingDate": "uint256"
                }
            },
            "sendFunds()": {
                "argument": {},
                "contract": {
                    "vig": "uint8",
                    "maxSupply": "uint256",
                    "totalSupply_": "uint256",
                    "validityDate": "uint256",
                    "maxBuyingDate": "uint256"
                }
            },
            "releaseContract()": {
                "argument": {},
                "contract": {
                    "vig": "uint8",
                    "maxSupply": "uint256",
                    "totalSupply_": "uint256",
                    "validityDate": "uint256",
                    "maxBuyingDate": "uint256"
                }
            },
            "winningValue()": {
                "argument": {},
                "contract": {
                    "vig": "uint8",
                    "maxSupply": "uint256",
                    "totalSupply_": "uint256",
                    "validityDate": "uint256",
                    "maxBuyingDate": "uint256"
                }
            },
            "availableSupply()": {
                "argument": {},
                "contract": {
                    "vig": "uint8",
                    "maxSupply": "uint256",
                    "totalSupply_": "uint256",
                    "validityDate": "uint256",
                    "maxBuyingDate": "uint256"
                }
            },
            "buy()": {
                "argument": {},
                "contract": {
                    "vig": "uint8",
                    "maxSupply": "uint256",
                    "totalSupply_": "uint256",
                    "validityDate": "uint256",
                    "maxBuyingDate": "uint256"
                }
            },
            "sell(uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "vig": "uint8",
                    "maxSupply": "uint256",
                    "totalSupply_": "uint256",
                    "validityDate": "uint256",
                    "maxBuyingDate": "uint256"
                }
            },
            "sellAll()": {
                "argument": {},
                "contract": {
                    "vig": "uint8",
                    "maxSupply": "uint256",
                    "totalSupply_": "uint256",
                    "validityDate": "uint256",
                    "maxBuyingDate": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "vig": "uint8",
                    "maxSupply": "uint256",
                    "totalSupply_": "uint256",
                    "validityDate": "uint256",
                    "maxBuyingDate": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "releaseContract()": [
                2124,
                581
            ],
            "registerSister(address)": [
                936,
                185
            ],
            "buyPrice()": [
                6223,
                900
            ],
            "balanceOf(address)": [
                1258,
                317
            ],
            "totalSupply()": [
                5946,
                894
            ],
            "buy()": [
                1906,
                515
            ],
            "allowance(address,address)": [
                2190,
                625
            ],
            "transferFrom(address,address,uint256)": [
                803,
                163
            ],
            "approve(address,uint256)": [
                616,
                97
            ],
            "sellAll()": [
                717,
                119
            ],
            "winningValue()": [
                2374,
                669
            ],
            "availableSupply()": [
                1345,
                339
            ],
            "setVigAddress(address)": [
                1839,
                493
            ],
            "sellPrice()": [
                5606,
                900
            ],
            "sell(uint256)": [
                2309,
                647
            ],
            "sendFunds()": [
                1518,
                405
            ],
            "transfer(address,uint256)": [
                1936,
                537
            ]
        },
        "block_CALL_mapping": {
            "block5946_0": [
                "sisterContract.totalSupply()"
            ],
            "jump4852": [
                "sisterContract.maxSupply()",
                "sisterContract.maxSupply()"
            ],
            "jump6382": [
                "msg.sender.send(this.balance)",
                "msg.sender.send(this.balance)"
            ],
            "jump5946": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "jump5606_1": [
                "sisterContract.sellPrice()",
                "sisterContract.sellPrice()"
            ],
            "jump5606_2": [
                "sisterContract.sellPrice()",
                "sisterContract.sellPrice()"
            ],
            "block4852": [
                "sisterContract.maxSupply()"
            ],
            "jump7784": [
                "msg.sender.transfer(revenue)",
                "msg.sender.transfer(revenue)"
            ],
            "block5946_1": [
                "sisterContract.totalSupply()"
            ],
            "jump5367": [
                "sisterContract.maxBuyingDate()",
                "sisterContract.maxBuyingDate()"
            ],
            "block5946_2": [
                "sisterContract.totalSupply()"
            ],
            "jump6223": [
                "sisterContract.buyPrice()",
                "sisterContract.buyPrice()"
            ],
            "block2594": [
                "vigAddress.transfer(house)"
            ],
            "block6223": [
                "sisterContract.buyPrice()"
            ],
            "block5367": [
                "sisterContract.maxBuyingDate()"
            ],
            "jump5202": [
                "sisterContract.validityDate()",
                "sisterContract.validityDate()"
            ],
            "block6382": [
                "msg.sender.send(this.balance)"
            ],
            "block5606_2": [
                "sisterContract.sellPrice()"
            ],
            "block5606_3": [
                "sisterContract.sellPrice()"
            ],
            "block5606_0": [
                "sisterContract.sellPrice()"
            ],
            "block5606_1": [
                "sisterContract.sellPrice()"
            ],
            "block6223_2": [
                "sisterContract.buyPrice()"
            ],
            "jump5017": [
                "sisterContract.vig()",
                "sisterContract.vig()"
            ],
            "jump5606_0": [
                "sisterContract.sellPrice()",
                "sisterContract.sellPrice()"
            ],
            "jump7784_0": [
                "msg.sender.transfer(revenue)",
                "msg.sender.transfer(revenue)"
            ],
            "block4378": [
                "sisterContract.owner()"
            ],
            "jump6223_4": [
                "sisterContract.buyPrice()",
                "sisterContract.buyPrice()"
            ],
            "jump6223_5": [
                "sisterContract.buyPrice()",
                "sisterContract.buyPrice()"
            ],
            "jump6223_2": [
                "sisterContract.buyPrice()",
                "sisterContract.buyPrice()"
            ],
            "jump6223_3": [
                "sisterContract.buyPrice()",
                "sisterContract.buyPrice()"
            ],
            "block5946": [
                "sisterContract.totalSupply()"
            ],
            "jump6223_1": [
                "sisterContract.buyPrice()",
                "sisterContract.buyPrice()"
            ],
            "block7784_0": [
                "msg.sender.transfer(revenue)"
            ],
            "jump6223_6": [
                "sisterContract.buyPrice()",
                "sisterContract.buyPrice()"
            ],
            "jump5606_3": [
                "sisterContract.sellPrice()",
                "sisterContract.sellPrice()"
            ],
            "jump4594": [
                "sisterContract.sister()",
                "sisterContract.sister()"
            ],
            "block2594_1": [
                "vigAddress.transfer(house)"
            ],
            "block2594_0": [
                "vigAddress.transfer(house)"
            ],
            "jump2594": [
                "vigAddress.transfer(house)",
                "vigAddress.transfer(house)"
            ],
            "block7784": [
                "msg.sender.transfer(revenue)"
            ],
            "jump4378": [
                "sisterContract.owner()",
                "sisterContract.owner()"
            ],
            "jump5946_2": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "jump5606": [
                "sisterContract.sellPrice()",
                "sisterContract.sellPrice()"
            ],
            "block5202": [
                "sisterContract.validityDate()"
            ],
            "block5606": [
                "sisterContract.sellPrice()"
            ],
            "jump5946_1": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "jump5946_0": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "block6223_5": [
                "sisterContract.buyPrice()"
            ],
            "block5017": [
                "sisterContract.vig()"
            ],
            "jump6223_0": [
                "sisterContract.buyPrice()",
                "sisterContract.buyPrice()"
            ],
            "block4594": [
                "sisterContract.sister()"
            ],
            "block6223_4": [
                "sisterContract.buyPrice()"
            ],
            "block6223_6": [
                "sisterContract.buyPrice()"
            ],
            "block6223_3": [
                "sisterContract.buyPrice()"
            ],
            "block6223_0": [
                "sisterContract.buyPrice()"
            ],
            "block6223_1": [
                "sisterContract.buyPrice()"
            ],
            "jump2594_1": [
                "vigAddress.transfer(house)",
                "vigAddress.transfer(house)"
            ],
            "jump2594_0": [
                "vigAddress.transfer(house)",
                "vigAddress.transfer(house)"
            ]
        }
    },
    "BigSisterToken": {
        "function_list": [
            "LittleSisterToken()",
            "fallback()",
            "setVigAddress(address)",
            "totalSupply()",
            "registerSister(address)",
            "sellPrice()",
            "buyPrice()",
            "sendFunds()",
            "releaseContract()",
            "winningValue()",
            "availableSupply()",
            "buy()",
            "sell(uint256)",
            "sellAll()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "BigSisterToken(uint256,uint256,uint256,uint8,uint256,uint256)",
            "buyPrice()",
            "sellPrice()",
            "releaseContract()",
            "registerSister(address)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "LittleSisterToken()": {
                "argument": {},
                "contract": {
                    "buyPrice_": "uint256",
                    "sellPrice_": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "buyPrice_": "uint256",
                    "sellPrice_": "uint256"
                }
            },
            "setVigAddress(address)": {
                "argument": {},
                "contract": {
                    "buyPrice_": "uint256",
                    "sellPrice_": "uint256"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "buyPrice_": "uint256",
                    "sellPrice_": "uint256"
                }
            },
            "registerSister(address)": {
                "argument": {},
                "contract": {
                    "buyPrice_": "uint256",
                    "sellPrice_": "uint256"
                }
            },
            "sellPrice()": {
                "argument": {},
                "contract": {
                    "buyPrice_": "uint256",
                    "sellPrice_": "uint256"
                }
            },
            "buyPrice()": {
                "argument": {},
                "contract": {
                    "buyPrice_": "uint256",
                    "sellPrice_": "uint256"
                }
            },
            "sendFunds()": {
                "argument": {},
                "contract": {
                    "buyPrice_": "uint256",
                    "sellPrice_": "uint256"
                }
            },
            "releaseContract()": {
                "argument": {},
                "contract": {
                    "buyPrice_": "uint256",
                    "sellPrice_": "uint256"
                }
            },
            "winningValue()": {
                "argument": {},
                "contract": {
                    "buyPrice_": "uint256",
                    "sellPrice_": "uint256"
                }
            },
            "availableSupply()": {
                "argument": {},
                "contract": {
                    "buyPrice_": "uint256",
                    "sellPrice_": "uint256"
                }
            },
            "buy()": {
                "argument": {},
                "contract": {
                    "buyPrice_": "uint256",
                    "sellPrice_": "uint256"
                }
            },
            "sell(uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "buyPrice_": "uint256",
                    "sellPrice_": "uint256"
                }
            },
            "sellAll()": {
                "argument": {},
                "contract": {
                    "buyPrice_": "uint256",
                    "sellPrice_": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "buyPrice_": "uint256",
                    "sellPrice_": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "buyPrice_": "uint256",
                    "sellPrice_": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "buyPrice_": "uint256",
                    "sellPrice_": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "buyPrice_": "uint256",
                    "sellPrice_": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "buyPrice_": "uint256",
                    "sellPrice_": "uint256"
                }
            },
            "BigSisterToken(uint256,uint256,uint256,uint8,uint256,uint256)": {
                "argument": {
                    "_maxSupply": "uint256",
                    "_buyPrice": "uint256",
                    "_sellPrice": "uint256",
                    "_vig": "uint8",
                    "_buyingHorizon": "uint256",
                    "_maximumLifetime": "uint256"
                },
                "contract": {
                    "buyPrice_": "uint256",
                    "sellPrice_": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "buyPrice_": "uint256",
                    "sellPrice_": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "releaseContract()": [
                6543,
                800
            ],
            "registerSister(address)": [
                4750,
                20956
            ],
            "buyPrice()": [
                1475,
                383
            ],
            "totalSupply()": [
                5139,
                894
            ],
            "buy()": [
                1906,
                515
            ],
            "allowance(address,address)": [
                2190,
                625
            ],
            "transferFrom(address,address,uint256)": [
                803,
                163
            ],
            "approve(address,uint256)": [
                616,
                97
            ],
            "sellAll()": [
                717,
                119
            ],
            "winningValue()": [
                2374,
                669
            ],
            "availableSupply()": [
                1345,
                339
            ],
            "setVigAddress(address)": [
                1839,
                493
            ],
            "sellPrice()": [
                1123,
                251
            ],
            "balanceOf(address)": [
                1258,
                317
            ],
            "sell(uint256)": [
                2309,
                647
            ],
            "sendFunds()": [
                1518,
                405
            ],
            "transfer(address,uint256)": [
                1936,
                537
            ]
        },
        "block_CALL_mapping": {
            "block6543": [
                "sisterContract.releaseContract()"
            ],
            "block2594": [
                "vigAddress.transfer(house)"
            ],
            "jump6543": [
                "sisterContract.releaseContract()",
                "sisterContract.releaseContract()"
            ],
            "block6945_0": [
                "msg.sender.transfer(revenue)"
            ],
            "jump5139_1": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "jump5139_0": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "block5380": [
                "msg.sender.send(this.balance)"
            ],
            "jump5139_2": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "jump5380": [
                "msg.sender.send(this.balance)",
                "msg.sender.send(this.balance)"
            ],
            "block2594_1": [
                "vigAddress.transfer(house)"
            ],
            "block2594_0": [
                "vigAddress.transfer(house)"
            ],
            "jump6945_0": [
                "msg.sender.transfer(revenue)",
                "msg.sender.transfer(revenue)"
            ],
            "jump4750": [
                "sisterContract.registerSister(address(this))",
                "sisterContract.registerSister(address(this))"
            ],
            "block4437": [
                "sisterContract.sister()"
            ],
            "jump5139": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "jump4437": [
                "sisterContract.sister()",
                "sisterContract.sister()"
            ],
            "jump2594": [
                "vigAddress.transfer(house)",
                "vigAddress.transfer(house)"
            ],
            "block6945": [
                "msg.sender.transfer(revenue)"
            ],
            "block4750": [
                "sisterContract.registerSister(address(this))"
            ],
            "jump6945": [
                "msg.sender.transfer(revenue)",
                "msg.sender.transfer(revenue)"
            ],
            "block5139_2": [
                "sisterContract.totalSupply()"
            ],
            "block5139_1": [
                "sisterContract.totalSupply()"
            ],
            "block5139_0": [
                "sisterContract.totalSupply()"
            ],
            "block5139": [
                "sisterContract.totalSupply()"
            ],
            "jump2594_1": [
                "vigAddress.transfer(house)",
                "vigAddress.transfer(house)"
            ],
            "jump2594_0": [
                "vigAddress.transfer(house)",
                "vigAddress.transfer(house)"
            ]
        }
    },
    "PriceIncreasingLittleSisterToken": {
        "function_list": [
            "LittleSisterToken()",
            "fallback()",
            "setVigAddress(address)",
            "totalSupply()",
            "registerSister(address)",
            "sellPrice()",
            "buyPrice()",
            "sendFunds()",
            "releaseContract()",
            "winningValue()",
            "availableSupply()",
            "buy()",
            "sell(uint256)",
            "sellAll()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "fallback()",
            "buy()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "LittleSisterToken()": {
                "argument": {},
                "contract": {}
            },
            "fallback()": {
                "argument": {},
                "contract": {}
            },
            "setVigAddress(address)": {
                "argument": {},
                "contract": {}
            },
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "registerSister(address)": {
                "argument": {},
                "contract": {}
            },
            "sellPrice()": {
                "argument": {},
                "contract": {}
            },
            "buyPrice()": {
                "argument": {},
                "contract": {}
            },
            "sendFunds()": {
                "argument": {},
                "contract": {}
            },
            "releaseContract()": {
                "argument": {},
                "contract": {}
            },
            "winningValue()": {
                "argument": {},
                "contract": {}
            },
            "availableSupply()": {
                "argument": {},
                "contract": {}
            },
            "buy()": {
                "argument": {},
                "contract": {}
            },
            "sell(uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "sellAll()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "releaseContract()": [
                2124,
                581
            ],
            "registerSister(address)": [
                936,
                185
            ],
            "buyPrice()": [
                5973,
                900
            ],
            "balanceOf(address)": [
                1258,
                317
            ],
            "totalSupply()": [
                5696,
                894
            ],
            "buy()": [
                1906,
                515
            ],
            "allowance(address,address)": [
                2190,
                625
            ],
            "transferFrom(address,address,uint256)": [
                803,
                163
            ],
            "approve(address,uint256)": [
                616,
                97
            ],
            "sellAll()": [
                717,
                119
            ],
            "winningValue()": [
                2374,
                669
            ],
            "availableSupply()": [
                1345,
                339
            ],
            "setVigAddress(address)": [
                1839,
                493
            ],
            "sellPrice()": [
                5356,
                900
            ],
            "sell(uint256)": [
                2309,
                647
            ],
            "sendFunds()": [
                1518,
                405
            ],
            "transfer(address,uint256)": [
                1936,
                537
            ]
        },
        "block_CALL_mapping": {
            "block5973_1": [
                "sisterContract.buyPrice()"
            ],
            "block5973_0": [
                "sisterContract.buyPrice()"
            ],
            "block5973": [
                "sisterContract.buyPrice()"
            ],
            "block5973_2": [
                "sisterContract.buyPrice()"
            ],
            "jump5696": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "block5973_4": [
                "sisterContract.buyPrice()"
            ],
            "block5973_6": [
                "sisterContract.buyPrice()"
            ],
            "jump5696_2": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "jump2620": [
                "sisterContract.sisterCheckPrice(amount)",
                "sisterContract.sisterCheckPrice(amount)"
            ],
            "jump5696_0": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "block5973_3": [
                "sisterContract.buyPrice()"
            ],
            "jump4767": [
                "sisterContract.vig()",
                "sisterContract.vig()"
            ],
            "jump7534": [
                "msg.sender.transfer(revenue)",
                "msg.sender.transfer(revenue)"
            ],
            "jump4602": [
                "sisterContract.maxSupply()",
                "sisterContract.maxSupply()"
            ],
            "block5973_5": [
                "sisterContract.buyPrice()"
            ],
            "block8069_0": [
                "vigAddress.transfer(house)"
            ],
            "block8069_1": [
                "vigAddress.transfer(house)"
            ],
            "block7534_0": [
                "msg.sender.transfer(revenue)"
            ],
            "jump5973_6": [
                "sisterContract.buyPrice()",
                "sisterContract.buyPrice()"
            ],
            "block2620_1": [
                "sisterContract.sisterCheckPrice(amount)"
            ],
            "jump4344": [
                "sisterContract.sister()",
                "sisterContract.sister()"
            ],
            "block4767": [
                "sisterContract.vig()"
            ],
            "jump5973_2": [
                "sisterContract.buyPrice()",
                "sisterContract.buyPrice()"
            ],
            "block6132": [
                "msg.sender.send(this.balance)"
            ],
            "jump5973_0": [
                "sisterContract.buyPrice()",
                "sisterContract.buyPrice()"
            ],
            "block5696_1": [
                "sisterContract.totalSupply()"
            ],
            "block5696_0": [
                "sisterContract.totalSupply()"
            ],
            "block4602": [
                "sisterContract.maxSupply()"
            ],
            "block5696_2": [
                "sisterContract.totalSupply()"
            ],
            "block7534": [
                "msg.sender.transfer(revenue)"
            ],
            "jump8069": [
                "vigAddress.transfer(house)",
                "vigAddress.transfer(house)"
            ],
            "block5696": [
                "sisterContract.totalSupply()"
            ],
            "jump5696_1": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "jump6132": [
                "msg.sender.send(this.balance)",
                "msg.sender.send(this.balance)"
            ],
            "block5356_0": [
                "sisterContract.sellPrice()"
            ],
            "block5356_1": [
                "sisterContract.sellPrice()"
            ],
            "block5356_2": [
                "sisterContract.sellPrice()"
            ],
            "block5356_3": [
                "sisterContract.sellPrice()"
            ],
            "jump5973": [
                "sisterContract.buyPrice()",
                "sisterContract.buyPrice()"
            ],
            "jump5973_3": [
                "sisterContract.buyPrice()",
                "sisterContract.buyPrice()"
            ],
            "jump5973_5": [
                "sisterContract.buyPrice()",
                "sisterContract.buyPrice()"
            ],
            "jump5117": [
                "sisterContract.maxBuyingDate()",
                "sisterContract.maxBuyingDate()"
            ],
            "block2620_0": [
                "sisterContract.sisterCheckPrice(amount)"
            ],
            "block2620": [
                "sisterContract.sisterCheckPrice(amount)"
            ],
            "block8069": [
                "vigAddress.transfer(house)"
            ],
            "jump5356": [
                "sisterContract.sellPrice()",
                "sisterContract.sellPrice()"
            ],
            "jump8069_0": [
                "vigAddress.transfer(house)",
                "vigAddress.transfer(house)"
            ],
            "jump8069_1": [
                "vigAddress.transfer(house)",
                "vigAddress.transfer(house)"
            ],
            "jump5973_1": [
                "sisterContract.buyPrice()",
                "sisterContract.buyPrice()"
            ],
            "block5356": [
                "sisterContract.sellPrice()"
            ],
            "block4128": [
                "sisterContract.owner()"
            ],
            "jump4128": [
                "sisterContract.owner()",
                "sisterContract.owner()"
            ],
            "block5117": [
                "sisterContract.maxBuyingDate()"
            ],
            "jump5973_4": [
                "sisterContract.buyPrice()",
                "sisterContract.buyPrice()"
            ],
            "jump7534_0": [
                "msg.sender.transfer(revenue)",
                "msg.sender.transfer(revenue)"
            ],
            "jump5356_3": [
                "sisterContract.sellPrice()",
                "sisterContract.sellPrice()"
            ],
            "jump2620_1": [
                "sisterContract.sisterCheckPrice(amount)",
                "sisterContract.sisterCheckPrice(amount)"
            ],
            "jump2620_0": [
                "sisterContract.sisterCheckPrice(amount)",
                "sisterContract.sisterCheckPrice(amount)"
            ],
            "jump5356_0": [
                "sisterContract.sellPrice()",
                "sisterContract.sellPrice()"
            ],
            "jump4952": [
                "sisterContract.validityDate()",
                "sisterContract.validityDate()"
            ],
            "jump5356_2": [
                "sisterContract.sellPrice()",
                "sisterContract.sellPrice()"
            ],
            "block4344": [
                "sisterContract.sister()"
            ],
            "block4952": [
                "sisterContract.validityDate()"
            ],
            "jump5356_1": [
                "sisterContract.sellPrice()",
                "sisterContract.sellPrice()"
            ]
        }
    },
    "PriceIncreasingToken": {
        "function_list": [
            "BigSisterToken(uint256,uint256,uint256,uint8,uint256,uint256)",
            "buyPrice()",
            "sellPrice()",
            "releaseContract()",
            "registerSister(address)",
            "LittleSisterToken()",
            "fallback()",
            "setVigAddress(address)",
            "totalSupply()",
            "registerSister(address)",
            "sellPrice()",
            "buyPrice()",
            "sendFunds()",
            "releaseContract()",
            "winningValue()",
            "availableSupply()",
            "buy()",
            "sell(uint256)",
            "sellAll()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "PriceIncreasingToken(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256)",
            "fallback()",
            "buy()",
            "sisterCheckPrice(uint256)",
            "_checkPrice(uint256)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "BigSisterToken(uint256,uint256,uint256,uint8,uint256,uint256)": {
                "argument": {
                    "_maxSupply": "uint256",
                    "_buyPrice": "uint256",
                    "_sellPrice": "uint256",
                    "_vig": "uint8",
                    "_buyingHorizon": "uint256",
                    "_maximumLifetime": "uint256"
                },
                "contract": {
                    "currentBatch": "uint256",
                    "thresholdAmount": "uint256",
                    "priceIncrease": "uint256"
                }
            },
            "buyPrice()": {
                "argument": {},
                "contract": {
                    "currentBatch": "uint256",
                    "thresholdAmount": "uint256",
                    "priceIncrease": "uint256"
                }
            },
            "sellPrice()": {
                "argument": {},
                "contract": {
                    "currentBatch": "uint256",
                    "thresholdAmount": "uint256",
                    "priceIncrease": "uint256"
                }
            },
            "releaseContract()": {
                "argument": {},
                "contract": {
                    "currentBatch": "uint256",
                    "thresholdAmount": "uint256",
                    "priceIncrease": "uint256"
                }
            },
            "registerSister(address)": {
                "argument": {},
                "contract": {
                    "currentBatch": "uint256",
                    "thresholdAmount": "uint256",
                    "priceIncrease": "uint256"
                }
            },
            "LittleSisterToken()": {
                "argument": {},
                "contract": {
                    "currentBatch": "uint256",
                    "thresholdAmount": "uint256",
                    "priceIncrease": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "currentBatch": "uint256",
                    "thresholdAmount": "uint256",
                    "priceIncrease": "uint256"
                }
            },
            "setVigAddress(address)": {
                "argument": {},
                "contract": {
                    "currentBatch": "uint256",
                    "thresholdAmount": "uint256",
                    "priceIncrease": "uint256"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "currentBatch": "uint256",
                    "thresholdAmount": "uint256",
                    "priceIncrease": "uint256"
                }
            },
            "sendFunds()": {
                "argument": {},
                "contract": {
                    "currentBatch": "uint256",
                    "thresholdAmount": "uint256",
                    "priceIncrease": "uint256"
                }
            },
            "winningValue()": {
                "argument": {},
                "contract": {
                    "currentBatch": "uint256",
                    "thresholdAmount": "uint256",
                    "priceIncrease": "uint256"
                }
            },
            "availableSupply()": {
                "argument": {},
                "contract": {
                    "currentBatch": "uint256",
                    "thresholdAmount": "uint256",
                    "priceIncrease": "uint256"
                }
            },
            "buy()": {
                "argument": {},
                "contract": {
                    "currentBatch": "uint256",
                    "thresholdAmount": "uint256",
                    "priceIncrease": "uint256"
                }
            },
            "sell(uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "currentBatch": "uint256",
                    "thresholdAmount": "uint256",
                    "priceIncrease": "uint256"
                }
            },
            "sellAll()": {
                "argument": {},
                "contract": {
                    "currentBatch": "uint256",
                    "thresholdAmount": "uint256",
                    "priceIncrease": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "currentBatch": "uint256",
                    "thresholdAmount": "uint256",
                    "priceIncrease": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "currentBatch": "uint256",
                    "thresholdAmount": "uint256",
                    "priceIncrease": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "currentBatch": "uint256",
                    "thresholdAmount": "uint256",
                    "priceIncrease": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "currentBatch": "uint256",
                    "thresholdAmount": "uint256",
                    "priceIncrease": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "currentBatch": "uint256",
                    "thresholdAmount": "uint256",
                    "priceIncrease": "uint256"
                }
            },
            "PriceIncreasingToken(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_maxSupply": "uint256",
                    "_buyPrice": "uint256",
                    "sellPrice_": "uint256",
                    "_vig": "uint8",
                    "_thresholdAmount": "uint256",
                    "_priceIncrease": "uint256",
                    "_buyingHorizon": "uint256",
                    "_maximumLifetime": "uint256"
                },
                "contract": {
                    "currentBatch": "uint256",
                    "thresholdAmount": "uint256",
                    "priceIncrease": "uint256"
                }
            },
            "sisterCheckPrice(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "currentBatch": "uint256",
                    "thresholdAmount": "uint256",
                    "priceIncrease": "uint256"
                }
            },
            "_checkPrice(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "currentBatch": "uint256",
                    "thresholdAmount": "uint256",
                    "priceIncrease": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "currentBatch": "uint256",
                    "thresholdAmount": "uint256",
                    "priceIncrease": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "releaseContract()": [
                6462,
                800
            ],
            "registerSister(address)": [
                4657,
                20956
            ],
            "buyPrice()": [
                1649,
                374
            ],
            "totalSupply()": [
                5058,
                894
            ],
            "buy()": [
                2080,
                506
            ],
            "allowance(address,address)": [
                2364,
                616
            ],
            "transferFrom(address,address,uint256)": [
                891,
                110
            ],
            "approve(address,uint256)": [
                704,
                44
            ],
            "sellAll()": [
                805,
                66
            ],
            "winningValue()": [
                2548,
                660
            ],
            "availableSupply()": [
                1519,
                330
            ],
            "setVigAddress(address)": [
                2013,
                484
            ],
            "sellPrice()": [
                1254,
                220
            ],
            "balanceOf(address)": [
                1389,
                286
            ],
            "sell(uint256)": [
                2483,
                638
            ],
            "sendFunds()": [
                1692,
                396
            ],
            "transfer(address,uint256)": [
                2110,
                528
            ]
        },
        "block_CALL_mapping": {
            "block6462": [
                "sisterContract.releaseContract()"
            ],
            "jump6864": [
                "msg.sender.transfer(revenue)",
                "msg.sender.transfer(revenue)"
            ],
            "jump4344": [
                "sisterContract.sister()",
                "sisterContract.sister()"
            ],
            "jump5058": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "jump4657": [
                "sisterContract.registerSister(address(this))",
                "sisterContract.registerSister(address(this))"
            ],
            "block6864_0": [
                "msg.sender.transfer(revenue)"
            ],
            "jump5058_1": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "jump7405": [
                "vigAddress.transfer(house)",
                "vigAddress.transfer(house)"
            ],
            "jump6864_0": [
                "msg.sender.transfer(revenue)",
                "msg.sender.transfer(revenue)"
            ],
            "jump5058_2": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "jump6462": [
                "sisterContract.releaseContract()",
                "sisterContract.releaseContract()"
            ],
            "jump5058_0": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "block4657": [
                "sisterContract.registerSister(address(this))"
            ],
            "block7405_1": [
                "vigAddress.transfer(house)"
            ],
            "block7405_0": [
                "vigAddress.transfer(house)"
            ],
            "block6864": [
                "msg.sender.transfer(revenue)"
            ],
            "block5058_1": [
                "sisterContract.totalSupply()"
            ],
            "block5058_0": [
                "sisterContract.totalSupply()"
            ],
            "block5058": [
                "sisterContract.totalSupply()"
            ],
            "block5058_2": [
                "sisterContract.totalSupply()"
            ],
            "jump5299": [
                "msg.sender.send(this.balance)",
                "msg.sender.send(this.balance)"
            ],
            "block5299": [
                "msg.sender.send(this.balance)"
            ],
            "block7405": [
                "vigAddress.transfer(house)"
            ],
            "block4344": [
                "sisterContract.sister()"
            ],
            "jump7405_1": [
                "vigAddress.transfer(house)",
                "vigAddress.transfer(house)"
            ],
            "jump7405_0": [
                "vigAddress.transfer(house)",
                "vigAddress.transfer(house)"
            ]
        }
    },
    "TimedEvidenceToken": {
        "function_list": [
            "PriceIncreasingToken(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256)",
            "fallback()",
            "buy()",
            "sisterCheckPrice(uint256)",
            "_checkPrice(uint256)",
            "BigSisterToken(uint256,uint256,uint256,uint8,uint256,uint256)",
            "buyPrice()",
            "sellPrice()",
            "releaseContract()",
            "registerSister(address)",
            "LittleSisterToken()",
            "fallback()",
            "setVigAddress(address)",
            "totalSupply()",
            "registerSister(address)",
            "sellPrice()",
            "buyPrice()",
            "sendFunds()",
            "releaseContract()",
            "winningValue()",
            "availableSupply()",
            "buy()",
            "sell(uint256)",
            "sellAll()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "TimedEvidenceToken(uint256,uint256,uint8,uint256,uint256,uint256,uint8,uint256,uint256,uint256)",
            "checkForPayout()",
            "_accumulateEvidence(bool)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "PriceIncreasingToken(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_maxSupply": "uint256",
                    "_buyPrice": "uint256",
                    "sellPrice_": "uint256",
                    "_vig": "uint8",
                    "_thresholdAmount": "uint256",
                    "_priceIncrease": "uint256",
                    "_buyingHorizon": "uint256",
                    "_maximumLifetime": "uint256"
                },
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "buy()": {
                "argument": {},
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "sisterCheckPrice(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "_checkPrice(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "BigSisterToken(uint256,uint256,uint256,uint8,uint256,uint256)": {
                "argument": {
                    "_maxSupply": "uint256",
                    "_buyPrice": "uint256",
                    "_sellPrice": "uint256",
                    "_vig": "uint8",
                    "_buyingHorizon": "uint256",
                    "_maximumLifetime": "uint256"
                },
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "buyPrice()": {
                "argument": {},
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "sellPrice()": {
                "argument": {},
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "releaseContract()": {
                "argument": {},
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "registerSister(address)": {
                "argument": {},
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "LittleSisterToken()": {
                "argument": {},
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "setVigAddress(address)": {
                "argument": {},
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "sendFunds()": {
                "argument": {},
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "winningValue()": {
                "argument": {},
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "availableSupply()": {
                "argument": {},
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "sell(uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "sellAll()": {
                "argument": {},
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "TimedEvidenceToken(uint256,uint256,uint8,uint256,uint256,uint256,uint8,uint256,uint256,uint256)": {
                "argument": {
                    "_maxSupply": "uint256",
                    "_buyPrice": "uint256",
                    "_vig": "uint8",
                    "_thresholdAmount": "uint256",
                    "_priceIncrease": "uint256",
                    "_evidenceInterval": "uint256",
                    "_requiredEvidence": "uint8",
                    "_dateSisterWins": "uint256",
                    "_buyingHorizon": "uint256",
                    "_maximumLifetime": "uint256"
                },
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "checkForPayout()": {
                "argument": {},
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "_accumulateEvidence(bool)": {
                "argument": {},
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "dateSisterWins": "uint256",
                    "foundEvidence": "uint8",
                    "requiredEvidence": "uint8",
                    "evidenceInterval": "uint256",
                    "lastEvidenceCheck": "uint256",
                    "lastBuyPrice": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "releaseContract()": [
                7528,
                800
            ],
            "registerSister(address)": [
                4997,
                20956
            ],
            "buyPrice()": [
                1897,
                462
            ],
            "totalSupply()": [
                6099,
                894
            ],
            "buy()": [
                2328,
                594
            ],
            "transferFrom(address,address,uint256)": [
                957,
                110
            ],
            "approve(address,uint256)": [
                770,
                44
            ],
            "sellAll()": [
                871,
                66
            ],
            "winningValue()": [
                2888,
                792
            ],
            "availableSupply()": [
                1718,
                396
            ],
            "setVigAddress(address)": [
                2261,
                572
            ],
            "sellPrice()": [
                1453,
                286
            ],
            "balanceOf(address)": [
                1588,
                352
            ],
            "sell(uint256)": [
                2823,
                770
            ],
            "checkForPayout()": [
                1363,
                242
            ],
            "sendFunds()": [
                1940,
                484
            ],
            "transfer(address,uint256)": [
                2358,
                616
            ],
            "allowance(address,address)": [
                2704,
                748
            ]
        },
        "block_CALL_mapping": {
            "jump7949": [
                "msg.sender.transfer(revenue)",
                "msg.sender.transfer(revenue)"
            ],
            "jump6099_1": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "jump6099_0": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "block5184": [
                "sisterContract.send(this.balance)"
            ],
            "jump7949_0": [
                "msg.sender.transfer(revenue)",
                "msg.sender.transfer(revenue)"
            ],
            "jump6099_2": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "block5658": [
                "sisterContract.sendFunds()"
            ],
            "block8490": [
                "vigAddress.transfer(house)"
            ],
            "jump5658": [
                "sisterContract.sendFunds()",
                "sisterContract.sendFunds()"
            ],
            "jump4684": [
                "sisterContract.sister()",
                "sisterContract.sister()"
            ],
            "jump5184": [
                "sisterContract.send(this.balance)",
                "sisterContract.send(this.balance)"
            ],
            "block7949": [
                "msg.sender.transfer(revenue)"
            ],
            "block6099_1": [
                "sisterContract.totalSupply()"
            ],
            "block6099_0": [
                "sisterContract.totalSupply()"
            ],
            "block6099": [
                "sisterContract.totalSupply()"
            ],
            "block6099_2": [
                "sisterContract.totalSupply()"
            ],
            "jump8490_0": [
                "vigAddress.transfer(house)",
                "vigAddress.transfer(house)"
            ],
            "jump8490_1": [
                "vigAddress.transfer(house)",
                "vigAddress.transfer(house)"
            ],
            "block4684": [
                "sisterContract.sister()"
            ],
            "jump5405": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "jump8490": [
                "vigAddress.transfer(house)",
                "vigAddress.transfer(house)"
            ],
            "jump7528": [
                "sisterContract.releaseContract()",
                "sisterContract.releaseContract()"
            ],
            "block7528": [
                "sisterContract.releaseContract()"
            ],
            "block6359": [
                "msg.sender.send(this.balance)"
            ],
            "jump6359": [
                "msg.sender.send(this.balance)",
                "msg.sender.send(this.balance)"
            ],
            "jump6099": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "block8490_0": [
                "vigAddress.transfer(house)"
            ],
            "block8490_1": [
                "vigAddress.transfer(house)"
            ],
            "block4997": [
                "sisterContract.registerSister(address(this))"
            ],
            "jump4997": [
                "sisterContract.registerSister(address(this))",
                "sisterContract.registerSister(address(this))"
            ],
            "block5405": [
                "sisterContract.totalSupply()"
            ],
            "block7949_0": [
                "msg.sender.transfer(revenue)"
            ]
        }
    },
    "TrumpFullTermToken": {
        "function_list": [
            "fallback()",
            "buy()",
            "LittleSisterToken()",
            "fallback()",
            "setVigAddress(address)",
            "totalSupply()",
            "registerSister(address)",
            "sellPrice()",
            "buyPrice()",
            "sendFunds()",
            "releaseContract()",
            "winningValue()",
            "availableSupply()",
            "buy()",
            "sell(uint256)",
            "sellAll()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "fallback()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string"
                }
            },
            "buy()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string"
                }
            },
            "LittleSisterToken()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string"
                }
            },
            "setVigAddress(address)": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string"
                }
            },
            "registerSister(address)": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string"
                }
            },
            "sellPrice()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string"
                }
            },
            "buyPrice()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string"
                }
            },
            "sendFunds()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string"
                }
            },
            "releaseContract()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string"
                }
            },
            "winningValue()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string"
                }
            },
            "availableSupply()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string"
                }
            },
            "sell(uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string"
                }
            },
            "sellAll()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string"
                }
            }
        },
        "function_block_mapping": {
            "releaseContract()": [
                2124,
                581
            ],
            "registerSister(address)": [
                936,
                185
            ],
            "buyPrice()": [
                5973,
                900
            ],
            "balanceOf(address)": [
                1258,
                317
            ],
            "totalSupply()": [
                5696,
                894
            ],
            "buy()": [
                1906,
                515
            ],
            "allowance(address,address)": [
                2190,
                625
            ],
            "transferFrom(address,address,uint256)": [
                803,
                163
            ],
            "approve(address,uint256)": [
                616,
                97
            ],
            "sellAll()": [
                717,
                119
            ],
            "winningValue()": [
                2374,
                669
            ],
            "availableSupply()": [
                1345,
                339
            ],
            "setVigAddress(address)": [
                1839,
                493
            ],
            "sellPrice()": [
                5356,
                900
            ],
            "sell(uint256)": [
                2309,
                647
            ],
            "sendFunds()": [
                1518,
                405
            ],
            "transfer(address,uint256)": [
                1936,
                537
            ]
        },
        "block_CALL_mapping": {
            "block5973_1": [
                "sisterContract.buyPrice()"
            ],
            "block5973_0": [
                "sisterContract.buyPrice()"
            ],
            "block5973": [
                "sisterContract.buyPrice()"
            ],
            "block5973_2": [
                "sisterContract.buyPrice()"
            ],
            "jump5696": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "block5973_4": [
                "sisterContract.buyPrice()"
            ],
            "block5973_6": [
                "sisterContract.buyPrice()"
            ],
            "jump5696_2": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "jump2620": [
                "sisterContract.sisterCheckPrice(amount)",
                "sisterContract.sisterCheckPrice(amount)"
            ],
            "jump5696_0": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "block5973_3": [
                "sisterContract.buyPrice()"
            ],
            "jump4767": [
                "sisterContract.vig()",
                "sisterContract.vig()"
            ],
            "jump7534": [
                "msg.sender.transfer(revenue)",
                "msg.sender.transfer(revenue)"
            ],
            "jump4602": [
                "sisterContract.maxSupply()",
                "sisterContract.maxSupply()"
            ],
            "block5973_5": [
                "sisterContract.buyPrice()"
            ],
            "block8069_0": [
                "vigAddress.transfer(house)"
            ],
            "block8069_1": [
                "vigAddress.transfer(house)"
            ],
            "block7534_0": [
                "msg.sender.transfer(revenue)"
            ],
            "jump5973_6": [
                "sisterContract.buyPrice()",
                "sisterContract.buyPrice()"
            ],
            "block2620_1": [
                "sisterContract.sisterCheckPrice(amount)"
            ],
            "jump4344": [
                "sisterContract.sister()",
                "sisterContract.sister()"
            ],
            "block4767": [
                "sisterContract.vig()"
            ],
            "jump5973_2": [
                "sisterContract.buyPrice()",
                "sisterContract.buyPrice()"
            ],
            "block6132": [
                "msg.sender.send(this.balance)"
            ],
            "jump5973_0": [
                "sisterContract.buyPrice()",
                "sisterContract.buyPrice()"
            ],
            "block5696_1": [
                "sisterContract.totalSupply()"
            ],
            "block5696_0": [
                "sisterContract.totalSupply()"
            ],
            "block4602": [
                "sisterContract.maxSupply()"
            ],
            "block5696_2": [
                "sisterContract.totalSupply()"
            ],
            "block7534": [
                "msg.sender.transfer(revenue)"
            ],
            "jump8069": [
                "vigAddress.transfer(house)",
                "vigAddress.transfer(house)"
            ],
            "block5696": [
                "sisterContract.totalSupply()"
            ],
            "jump5696_1": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "jump6132": [
                "msg.sender.send(this.balance)",
                "msg.sender.send(this.balance)"
            ],
            "block5356_0": [
                "sisterContract.sellPrice()"
            ],
            "block5356_1": [
                "sisterContract.sellPrice()"
            ],
            "block5356_2": [
                "sisterContract.sellPrice()"
            ],
            "block5356_3": [
                "sisterContract.sellPrice()"
            ],
            "jump5973": [
                "sisterContract.buyPrice()",
                "sisterContract.buyPrice()"
            ],
            "jump5973_3": [
                "sisterContract.buyPrice()",
                "sisterContract.buyPrice()"
            ],
            "jump5973_5": [
                "sisterContract.buyPrice()",
                "sisterContract.buyPrice()"
            ],
            "jump5117": [
                "sisterContract.maxBuyingDate()",
                "sisterContract.maxBuyingDate()"
            ],
            "block2620_0": [
                "sisterContract.sisterCheckPrice(amount)"
            ],
            "block2620": [
                "sisterContract.sisterCheckPrice(amount)"
            ],
            "block8069": [
                "vigAddress.transfer(house)"
            ],
            "jump5356": [
                "sisterContract.sellPrice()",
                "sisterContract.sellPrice()"
            ],
            "jump8069_0": [
                "vigAddress.transfer(house)",
                "vigAddress.transfer(house)"
            ],
            "jump8069_1": [
                "vigAddress.transfer(house)",
                "vigAddress.transfer(house)"
            ],
            "jump5973_1": [
                "sisterContract.buyPrice()",
                "sisterContract.buyPrice()"
            ],
            "block5356": [
                "sisterContract.sellPrice()"
            ],
            "block4128": [
                "sisterContract.owner()"
            ],
            "jump4128": [
                "sisterContract.owner()",
                "sisterContract.owner()"
            ],
            "block5117": [
                "sisterContract.maxBuyingDate()"
            ],
            "jump5973_4": [
                "sisterContract.buyPrice()",
                "sisterContract.buyPrice()"
            ],
            "jump7534_0": [
                "msg.sender.transfer(revenue)",
                "msg.sender.transfer(revenue)"
            ],
            "jump5356_3": [
                "sisterContract.sellPrice()",
                "sisterContract.sellPrice()"
            ],
            "jump2620_1": [
                "sisterContract.sisterCheckPrice(amount)",
                "sisterContract.sisterCheckPrice(amount)"
            ],
            "jump2620_0": [
                "sisterContract.sisterCheckPrice(amount)",
                "sisterContract.sisterCheckPrice(amount)"
            ],
            "jump5356_0": [
                "sisterContract.sellPrice()",
                "sisterContract.sellPrice()"
            ],
            "jump4952": [
                "sisterContract.validityDate()",
                "sisterContract.validityDate()"
            ],
            "jump5356_2": [
                "sisterContract.sellPrice()",
                "sisterContract.sellPrice()"
            ],
            "block4344": [
                "sisterContract.sister()"
            ],
            "block4952": [
                "sisterContract.validityDate()"
            ],
            "jump5356_1": [
                "sisterContract.sellPrice()",
                "sisterContract.sellPrice()"
            ]
        }
    },
    "TrumpOracle": {
        "function_list": [
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "matchBytes32Prefix(bytes32,bytes)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "__callback(bytes32,string)",
            "requestEvidence()",
            "getOraclizePrice()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "_queryId": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "matchBytes32Prefix(bytes32,bytes)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "requestEvidence()": {
                "argument": {},
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "getOraclizePrice()": {
                "argument": {},
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "question": "string",
                    "oraclizePrice": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "requestEvidence()": [
                663,
                185
            ],
            "__callback(bytes32,string,bytes)": [
                244,
                97
            ],
            "getOraclizePrice()": [
                620,
                163
            ],
            "__callback(bytes32,string)": [
                125,
                75
            ]
        },
        "block_CALL_mapping": {
            "jump2191": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "jump2886_0": [
                "oraclize.getPrice(datasource)",
                "oraclize.getPrice(datasource)"
            ],
            "block4045": [
                "oraclize.query.value(price)(0, datasource, arg)"
            ],
            "block2517_0": [
                "OAR.getAddress()"
            ],
            "jump1934": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump2517_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block2886_0": [
                "oraclize.getPrice(datasource)"
            ],
            "block2191": [
                "oraclize.cbAddress()"
            ],
            "jump3585": [
                "oraclize.getPrice(datasource)",
                "oraclize.getPrice(datasource)"
            ],
            "block2517": [
                "OAR.getAddress()"
            ],
            "jump2886": [
                "oraclize.getPrice(datasource)",
                "oraclize.getPrice(datasource)"
            ],
            "block1934": [
                "OAR.getAddress()"
            ],
            "block3216": [
                "OAR.getAddress()"
            ],
            "jump4045": [
                "oraclize.query.value(price)(0, datasource, arg)",
                "oraclize.query.value(price)(0, datasource, arg)"
            ],
            "jump3216": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump2517": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block2886": [
                "oraclize.getPrice(datasource)"
            ],
            "block3585": [
                "oraclize.getPrice(datasource)"
            ]
        }
    },
    "TrumpImpeachmentToken": {
        "function_list": [
            "stringEndsWith(string,string)",
            "TimedEvidenceToken(uint256,uint256,uint8,uint256,uint256,uint256,uint8,uint256,uint256,uint256)",
            "checkForPayout()",
            "_accumulateEvidence(bool)",
            "PriceIncreasingToken(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256)",
            "fallback()",
            "buy()",
            "sisterCheckPrice(uint256)",
            "_checkPrice(uint256)",
            "BigSisterToken(uint256,uint256,uint256,uint8,uint256,uint256)",
            "buyPrice()",
            "sellPrice()",
            "releaseContract()",
            "registerSister(address)",
            "LittleSisterToken()",
            "fallback()",
            "setVigAddress(address)",
            "totalSupply()",
            "registerSister(address)",
            "sellPrice()",
            "buyPrice()",
            "sendFunds()",
            "releaseContract()",
            "winningValue()",
            "availableSupply()",
            "buy()",
            "sell(uint256)",
            "sellAll()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "__callback(bytes32,string)",
            "requestEvidence()",
            "getOraclizePrice()",
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "matchBytes32Prefix(bytes32,bytes)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "TrumpImpeachmentToken()",
            "__callback(bytes32,string)",
            "requestEvidence()",
            "setOraclizeGasPrice(uint256)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "stringEndsWith(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "TimedEvidenceToken(uint256,uint256,uint8,uint256,uint256,uint256,uint8,uint256,uint256,uint256)": {
                "argument": {
                    "_maxSupply": "uint256",
                    "_buyPrice": "uint256",
                    "_vig": "uint8",
                    "_thresholdAmount": "uint256",
                    "_priceIncrease": "uint256",
                    "_evidenceInterval": "uint256",
                    "_requiredEvidence": "uint8",
                    "_dateSisterWins": "uint256",
                    "_buyingHorizon": "uint256",
                    "_maximumLifetime": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "checkForPayout()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "_accumulateEvidence(bool)": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "PriceIncreasingToken(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_maxSupply": "uint256",
                    "_buyPrice": "uint256",
                    "sellPrice_": "uint256",
                    "_vig": "uint8",
                    "_thresholdAmount": "uint256",
                    "_priceIncrease": "uint256",
                    "_buyingHorizon": "uint256",
                    "_maximumLifetime": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "buy()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "sisterCheckPrice(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "_checkPrice(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "BigSisterToken(uint256,uint256,uint256,uint8,uint256,uint256)": {
                "argument": {
                    "_maxSupply": "uint256",
                    "_buyPrice": "uint256",
                    "_sellPrice": "uint256",
                    "_vig": "uint8",
                    "_buyingHorizon": "uint256",
                    "_maximumLifetime": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "buyPrice()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "sellPrice()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "releaseContract()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "registerSister(address)": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "LittleSisterToken()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "setVigAddress(address)": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "sendFunds()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "winningValue()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "availableSupply()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "sell(uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "sellAll()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "_queryId": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "requestEvidence()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "getOraclizePrice()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "matchBytes32Prefix(bytes32,bytes)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "TrumpImpeachmentToken()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "setOraclizeGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "lastEvidence": "string",
                    "answer": "string"
                }
            }
        },
        "function_block_mapping": {
            "releaseContract()": [
                9186,
                800
            ],
            "registerSister(address)": [
                5983,
                20956
            ],
            "buyPrice()": [
                2680,
                594
            ],
            "totalSupply()": [
                7429,
                894
            ],
            "buy()": [
                3164,
                770
            ],
            "transferFrom(address,address,uint256)": [
                1056,
                110
            ],
            "approve(address,uint256)": [
                869,
                44
            ],
            "setOraclizeGasPrice(uint256)": [
                2226,
                440
            ],
            "sellAll()": [
                970,
                66
            ],
            "__callback(bytes32,string,bytes)": [
                1491,
                220
            ],
            "getOraclizePrice()": [
                2857,
                660
            ],
            "winningValue()": [
                3868,
                990
            ],
            "availableSupply()": [
                2357,
                506
            ],
            "setVigAddress(address)": [
                3097,
                748
            ],
            "requestEvidence()": [
                3087,
                726
            ],
            "sellPrice()": [
                2004,
                352
            ],
            "balanceOf(address)": [
                2139,
                418
            ],
            "sell(uint256)": [
                3803,
                968
            ],
            "transfer(address,uint256)": [
                3194,
                792
            ],
            "__callback(bytes32,string)": [
                1280,
                154
            ],
            "checkForPayout()": [
                1914,
                308
            ],
            "sendFunds()": [
                2723,
                616
            ],
            "allowance(address,address)": [
                3684,
                946
            ]
        },
        "block_CALL_mapping": {
            "block13491": [
                "OAR.getAddress()"
            ],
            "jump15256": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block16085": [
                "oraclize.query.value(price)(0, datasource, arg)"
            ],
            "jump9608_0": [
                "msg.sender.transfer(revenue)",
                "msg.sender.transfer(revenue)"
            ],
            "jump6584": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "jump7746": [
                "msg.sender.send(this.balance)",
                "msg.sender.send(this.balance)"
            ],
            "block9608": [
                "msg.sender.transfer(revenue)"
            ],
            "block11988": [
                "oraclize.setCustomGasPrice(gasPrice)"
            ],
            "jump9608": [
                "msg.sender.transfer(revenue)",
                "msg.sender.transfer(revenue)"
            ],
            "block6837": [
                "sisterContract.sendFunds()"
            ],
            "block15625": [
                "oraclize.getPrice(datasource)"
            ],
            "jump5670": [
                "sisterContract.sister()",
                "sisterContract.sister()"
            ],
            "jump11988": [
                "oraclize.setCustomGasPrice(gasPrice)",
                "oraclize.setCustomGasPrice(gasPrice)"
            ],
            "block9608_0": [
                "msg.sender.transfer(revenue)"
            ],
            "jump12646": [
                "oraclize.getPrice(datasource)",
                "oraclize.getPrice(datasource)"
            ],
            "block7746": [
                "msg.sender.send(this.balance)"
            ],
            "jump16085": [
                "oraclize.query.value(price)(0, datasource, arg)",
                "oraclize.query.value(price)(0, datasource, arg)"
            ],
            "jump12646_0": [
                "oraclize.getPrice(datasource)",
                "oraclize.getPrice(datasource)"
            ],
            "block5670": [
                "sisterContract.sister()"
            ],
            "jump7429_1": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "jump7429_0": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "block6363": [
                "sisterContract.send(this.balance)"
            ],
            "jump7429_2": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "jump10150_1": [
                "vigAddress.transfer(house)",
                "vigAddress.transfer(house)"
            ],
            "block12277_0": [
                "OAR.getAddress()"
            ],
            "jump6837": [
                "sisterContract.sendFunds()",
                "sisterContract.sendFunds()"
            ],
            "jump11720": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block12646": [
                "oraclize.getPrice(datasource)"
            ],
            "jump10150_0": [
                "vigAddress.transfer(house)",
                "vigAddress.transfer(house)"
            ],
            "jump10150": [
                "vigAddress.transfer(house)",
                "vigAddress.transfer(house)"
            ],
            "block13748": [
                "oraclize.cbAddress()"
            ],
            "jump12277": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block5983": [
                "sisterContract.registerSister(address(this))"
            ],
            "block10150": [
                "vigAddress.transfer(house)"
            ],
            "jump13748": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "jump7429": [
                "sisterContract.totalSupply()",
                "sisterContract.totalSupply()"
            ],
            "jump13491": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block7429_2": [
                "sisterContract.totalSupply()"
            ],
            "block11720": [
                "OAR.getAddress()"
            ],
            "jump5983": [
                "sisterContract.registerSister(address(this))",
                "sisterContract.registerSister(address(this))"
            ],
            "jump12277_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block10150_1": [
                "vigAddress.transfer(house)"
            ],
            "block10150_0": [
                "vigAddress.transfer(house)"
            ],
            "block7429_1": [
                "sisterContract.totalSupply()"
            ],
            "jump15625": [
                "oraclize.getPrice(datasource)",
                "oraclize.getPrice(datasource)"
            ],
            "block7429_0": [
                "sisterContract.totalSupply()"
            ],
            "block12277": [
                "OAR.getAddress()"
            ],
            "block7429": [
                "sisterContract.totalSupply()"
            ],
            "jump6363": [
                "sisterContract.send(this.balance)",
                "sisterContract.send(this.balance)"
            ],
            "block6584": [
                "sisterContract.totalSupply()"
            ],
            "block9186": [
                "sisterContract.releaseContract()"
            ],
            "jump9186": [
                "sisterContract.releaseContract()",
                "sisterContract.releaseContract()"
            ],
            "block15256": [
                "OAR.getAddress()"
            ],
            "block12646_0": [
                "oraclize.getPrice(datasource)"
            ]
        }
    }
}