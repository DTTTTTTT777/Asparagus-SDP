{
    "ERC20": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "decimals()"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "decimals()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                202,
                75
            ],
            "transfer(address,uint256)": [
                873,
                273
            ],
            "balanceOf(address)": [
                601,
                185
            ],
            "totalSupply()": [
                303,
                97
            ],
            "transferFrom(address,address,uint256)": [
                346,
                119
            ],
            "allowance(address,address)": [
                1061,
                317
            ]
        },
        "block_CALL_mapping": {}
    },
    "KyberReserve": {
        "function_list": [
            "KyberReserve(address,address)",
            "isPairListed(ERC20,ERC20,uint256)",
            "getConversionRate(ERC20,ERC20,uint256)",
            "getDecimals(ERC20)",
            "doTrade(ERC20,uint256,ERC20,address,bool)",
            "trade(ERC20,uint256,ERC20,address,bool)",
            "setRate(ERC20[],ERC20[],uint256[],uint256[],bool)",
            "enableTrade(bool)",
            "fallback()",
            "depositEther()",
            "depositToken(ERC20,uint256)",
            "withdraw(ERC20,uint256,address)",
            "changeOwner(address)",
            "getPairInfo(ERC20,ERC20)",
            "getBalance(ERC20)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "KyberReserve(address,address)": {
                "argument": {},
                "contract": {
                    "PRECISION": "uint256"
                }
            },
            "isPairListed(ERC20,ERC20,uint256)": {
                "argument": {
                    "blockNumber": "uint256"
                },
                "contract": {
                    "PRECISION": "uint256"
                }
            },
            "getConversionRate(ERC20,ERC20,uint256)": {
                "argument": {
                    "blockNumber": "uint256"
                },
                "contract": {
                    "PRECISION": "uint256"
                }
            },
            "getDecimals(ERC20)": {
                "argument": {},
                "contract": {
                    "PRECISION": "uint256"
                }
            },
            "doTrade(ERC20,uint256,ERC20,address,bool)": {
                "argument": {
                    "sourceAmount": "uint256"
                },
                "contract": {
                    "PRECISION": "uint256"
                }
            },
            "trade(ERC20,uint256,ERC20,address,bool)": {
                "argument": {
                    "sourceAmount": "uint256"
                },
                "contract": {
                    "PRECISION": "uint256"
                }
            },
            "setRate(ERC20[],ERC20[],uint256[],uint256[],bool)": {
                "argument": {
                    "sources": "ERC20[]",
                    "dests": "ERC20[]",
                    "conversionRates": "uint256[]",
                    "expiryBlocks": "uint256[]"
                },
                "contract": {
                    "PRECISION": "uint256"
                }
            },
            "enableTrade(bool)": {
                "argument": {},
                "contract": {
                    "PRECISION": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "PRECISION": "uint256"
                }
            },
            "depositEther()": {
                "argument": {},
                "contract": {
                    "PRECISION": "uint256"
                }
            },
            "depositToken(ERC20,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "PRECISION": "uint256"
                }
            },
            "withdraw(ERC20,uint256,address)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "PRECISION": "uint256"
                }
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {
                    "PRECISION": "uint256"
                }
            },
            "getPairInfo(ERC20,ERC20)": {
                "argument": {},
                "contract": {
                    "PRECISION": "uint256"
                }
            },
            "getBalance(ERC20)": {
                "argument": {},
                "contract": {
                    "PRECISION": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "PRECISION": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "depositEther()": [
                955,
                185
            ],
            "enableTrade(bool)": [
                1143,
                251
            ],
            "changeOwner(address)": [
                989,
                207
            ]
        },
        "block_CALL_mapping": {
            "jump2270": [
                "msg.sender.send(msg.value)",
                "msg.sender.send(msg.value)"
            ],
            "block3517": [
                "token.transferFrom(msg.sender, this, amount )"
            ],
            "block1987": [
                "msg.sender.send(msg.value)"
            ],
            "block4671": [
                "destination.send(amount)"
            ],
            "block8474": [
                "sourceToken.allowance(msg.sender, this )"
            ],
            "jump10502": [
                "destToken.transfer(destAddress, destAmount)",
                "destToken.transfer(destAddress, destAmount)"
            ],
            "jump8474": [
                "sourceToken.allowance(msg.sender, this )",
                "sourceToken.allowance(msg.sender, this )"
            ],
            "jump6338_1": [
                "token.decimals()",
                "token.decimals()"
            ],
            "jump6338_0": [
                "token.decimals()",
                "token.decimals()"
            ],
            "block10502": [
                "destToken.transfer(destAddress, destAmount)"
            ],
            "block9893": [
                "sourceToken.transferFrom(msg.sender,this,sourceAmount)"
            ],
            "block2270": [
                "msg.sender.send(msg.value)"
            ],
            "jump4304": [
                "dest.balanceOf(this)",
                "dest.balanceOf(this)"
            ],
            "jump8808": [
                "sourceToken.allowance(msg.sender, this )",
                "sourceToken.allowance(msg.sender, this )"
            ],
            "jump3206": [
                "token.allowance( msg.sender, this )",
                "token.allowance( msg.sender, this )"
            ],
            "block3206": [
                "token.allowance( msg.sender, this )"
            ],
            "jump9417": [
                "destToken.balanceOf(this)",
                "destToken.balanceOf(this)"
            ],
            "jump4902": [
                "token.transfer(destination,amount)",
                "token.transfer(destination,amount)"
            ],
            "jump10154": [
                "destAddress.send(destAmount)",
                "destAddress.send(destAmount)"
            ],
            "block4902": [
                "token.transfer(destination,amount)"
            ],
            "jump4671": [
                "destination.send(amount)",
                "destination.send(amount)"
            ],
            "jump3517": [
                "token.transferFrom(msg.sender, this, amount )",
                "token.transferFrom(msg.sender, this, amount )"
            ],
            "block2872": [
                "token.allowance( msg.sender, this )"
            ],
            "jump1987": [
                "msg.sender.send(msg.value)",
                "msg.sender.send(msg.value)"
            ],
            "block9417": [
                "destToken.balanceOf(this)"
            ],
            "jump7775": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "jump6338": [
                "token.decimals()",
                "token.decimals()"
            ],
            "block6338_0": [
                "token.decimals()"
            ],
            "jump9893": [
                "sourceToken.transferFrom(msg.sender,this,sourceAmount)",
                "sourceToken.transferFrom(msg.sender,this,sourceAmount)"
            ],
            "block6338_1": [
                "token.decimals()"
            ],
            "block4304": [
                "dest.balanceOf(this)"
            ],
            "block6338": [
                "token.decimals()"
            ],
            "block7775": [
                "token.balanceOf(this)"
            ],
            "jump2464": [
                "msg.sender.send(msg.value)",
                "msg.sender.send(msg.value)"
            ],
            "jump2872": [
                "token.allowance( msg.sender, this )",
                "token.allowance( msg.sender, this )"
            ],
            "block8808": [
                "sourceToken.allowance(msg.sender, this )"
            ],
            "block10154": [
                "destAddress.send(destAmount)"
            ],
            "block2464": [
                "msg.sender.send(msg.value)"
            ]
        }
    },
    "KyberNetwork": {
        "function_list": [
            "KyberNetwork(address)",
            "getNumReserves()",
            "getRate(ERC20,ERC20,uint256)",
            "getPrice(ERC20,ERC20)",
            "getDecimals(ERC20)",
            "findBestRate(ERC20,ERC20)",
            "doSingleTrade(ERC20,uint256,ERC20,address,KyberReserve,bool)",
            "validateTradeInput(ERC20,uint256)",
            "walletTrade(ERC20,uint256,ERC20,address,uint256,uint256,bool,bytes32)",
            "isNegligable(uint256,uint256)",
            "trade(ERC20,uint256,ERC20,address,uint256,uint256,bool)",
            "addReserve(KyberReserve,bool)",
            "listPairForReserve(address,ERC20,ERC20,bool)",
            "upgrade(address)",
            "getReserves()",
            "getBalance(ERC20)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "KyberNetwork(address)": {
                "argument": {},
                "contract": {
                    "PRECISION": "uint256",
                    "EPSILON": "uint256",
                    "reserves": "KyberReserve[]"
                }
            },
            "getNumReserves()": {
                "argument": {},
                "contract": {
                    "PRECISION": "uint256",
                    "EPSILON": "uint256",
                    "reserves": "KyberReserve[]"
                }
            },
            "getRate(ERC20,ERC20,uint256)": {
                "argument": {
                    "reserveIndex": "uint256"
                },
                "contract": {
                    "PRECISION": "uint256",
                    "EPSILON": "uint256",
                    "reserves": "KyberReserve[]"
                }
            },
            "getPrice(ERC20,ERC20)": {
                "argument": {},
                "contract": {
                    "PRECISION": "uint256",
                    "EPSILON": "uint256",
                    "reserves": "KyberReserve[]"
                }
            },
            "getDecimals(ERC20)": {
                "argument": {},
                "contract": {
                    "PRECISION": "uint256",
                    "EPSILON": "uint256",
                    "reserves": "KyberReserve[]"
                }
            },
            "findBestRate(ERC20,ERC20)": {
                "argument": {},
                "contract": {
                    "PRECISION": "uint256",
                    "EPSILON": "uint256",
                    "reserves": "KyberReserve[]"
                }
            },
            "doSingleTrade(ERC20,uint256,ERC20,address,KyberReserve,bool)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "PRECISION": "uint256",
                    "EPSILON": "uint256",
                    "reserves": "KyberReserve[]"
                }
            },
            "validateTradeInput(ERC20,uint256)": {
                "argument": {
                    "srcAmount": "uint256"
                },
                "contract": {
                    "PRECISION": "uint256",
                    "EPSILON": "uint256",
                    "reserves": "KyberReserve[]"
                }
            },
            "walletTrade(ERC20,uint256,ERC20,address,uint256,uint256,bool,bytes32)": {
                "argument": {
                    "srcAmount": "uint256",
                    "maxDestAmount": "uint256",
                    "minConversionRate": "uint256",
                    "walletId": "bytes32"
                },
                "contract": {
                    "PRECISION": "uint256",
                    "EPSILON": "uint256",
                    "reserves": "KyberReserve[]"
                }
            },
            "isNegligable(uint256,uint256)": {
                "argument": {
                    "currentValue": "uint256",
                    "originalValue": "uint256"
                },
                "contract": {
                    "PRECISION": "uint256",
                    "EPSILON": "uint256",
                    "reserves": "KyberReserve[]"
                }
            },
            "trade(ERC20,uint256,ERC20,address,uint256,uint256,bool)": {
                "argument": {
                    "srcAmount": "uint256",
                    "maxDestAmount": "uint256",
                    "minConversionRate": "uint256"
                },
                "contract": {
                    "PRECISION": "uint256",
                    "EPSILON": "uint256",
                    "reserves": "KyberReserve[]"
                }
            },
            "addReserve(KyberReserve,bool)": {
                "argument": {},
                "contract": {
                    "PRECISION": "uint256",
                    "EPSILON": "uint256",
                    "reserves": "KyberReserve[]"
                }
            },
            "listPairForReserve(address,ERC20,ERC20,bool)": {
                "argument": {},
                "contract": {
                    "PRECISION": "uint256",
                    "EPSILON": "uint256",
                    "reserves": "KyberReserve[]"
                }
            },
            "upgrade(address)": {
                "argument": {},
                "contract": {
                    "PRECISION": "uint256",
                    "EPSILON": "uint256",
                    "reserves": "KyberReserve[]"
                }
            },
            "getReserves()": {
                "argument": {},
                "contract": {
                    "PRECISION": "uint256",
                    "EPSILON": "uint256",
                    "reserves": "KyberReserve[]"
                }
            },
            "getBalance(ERC20)": {
                "argument": {},
                "contract": {
                    "PRECISION": "uint256",
                    "EPSILON": "uint256",
                    "reserves": "KyberReserve[]"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "PRECISION": "uint256",
                    "EPSILON": "uint256",
                    "reserves": "KyberReserve[]"
                }
            }
        },
        "function_block_mapping": {
            "isNegligable(uint256,uint256)": [
                618,
                163
            ],
            "upgrade(address)": [
                356,
                97
            ],
            "getNumReserves()": [
                1271,
                295
            ],
            "getReserves()": [
                423,
                119
            ]
        },
        "block_CALL_mapping": {
            "block7959_0": [
                "source.transferFrom(msg.sender, this, amount)"
            ],
            "block5411_0": [
                "token.decimals()"
            ],
            "jump5411_2": [
                "token.decimals()",
                "token.decimals()"
            ],
            "block3580_0": [
                "msg.sender.send(msg.value)"
            ],
            "jump5411_0": [
                "token.decimals()",
                "token.decimals()"
            ],
            "jump5411_1": [
                "token.decimals()",
                "token.decimals()"
            ],
            "jump5411": [
                "token.decimals()",
                "token.decimals()"
            ],
            "jump2896_0": [
                "msg.sender.send(msg.value)",
                "msg.sender.send(msg.value)"
            ],
            "block2896_0": [
                "msg.sender.send(msg.value)"
            ],
            "block9058": [
                "source.transfer(msg.sender, amount)"
            ],
            "jump8182": [
                "source.approve( reserve, amount)",
                "source.approve( reserve, amount)"
            ],
            "jump5411_3": [
                "token.decimals()",
                "token.decimals()"
            ],
            "block8825_0": [
                "source.approve( reserve, 0)"
            ],
            "block8182_0": [
                "source.approve( reserve, amount)"
            ],
            "jump8522": [
                "reserve.trade.value(callValue)(source, amount, dest, destAddress, validate )",
                "reserve.trade.value(callValue)(source, amount, dest, destAddress, validate )"
            ],
            "jump3580": [
                "msg.sender.send(msg.value)",
                "msg.sender.send(msg.value)"
            ],
            "block8182": [
                "source.approve( reserve, amount)"
            ],
            "block5411_2": [
                "token.decimals()"
            ],
            "block5411_3": [
                "token.decimals()"
            ],
            "block5760": [
                "reserves[reserveIndex].getPairInfo(source,dest)"
            ],
            "block8522_0": [
                "reserve.trade.value(callValue)(source, amount, dest, destAddress, validate )"
            ],
            "block5411": [
                "token.decimals()"
            ],
            "jump9375": [
                "source.approve( reserve, 0)",
                "source.approve( reserve, 0)"
            ],
            "jump3829_0": [
                "msg.sender.send(tradeInfo.remainedSourceAmount)",
                "msg.sender.send(tradeInfo.remainedSourceAmount)"
            ],
            "jump8825": [
                "source.approve( reserve, 0)",
                "source.approve( reserve, 0)"
            ],
            "jump9375_0": [
                "source.approve( reserve, 0)",
                "source.approve( reserve, 0)"
            ],
            "jump5760_0": [
                "reserves[reserveIndex].getPairInfo(source,dest)",
                "reserves[reserveIndex].getPairInfo(source,dest)"
            ],
            "block7366": [
                "reserves[i].getPairInfo(source,dest)"
            ],
            "block2896": [
                "msg.sender.send(msg.value)"
            ],
            "jump9058": [
                "source.transfer(msg.sender, amount)",
                "source.transfer(msg.sender, amount)"
            ],
            "jump7959": [
                "source.transferFrom(msg.sender, this, amount)",
                "source.transferFrom(msg.sender, this, amount)"
            ],
            "jump3580_0": [
                "msg.sender.send(msg.value)",
                "msg.sender.send(msg.value)"
            ],
            "block7366_0": [
                "reserves[i].getPairInfo(source,dest)"
            ],
            "jump7366_0": [
                "reserves[i].getPairInfo(source,dest)",
                "reserves[i].getPairInfo(source,dest)"
            ],
            "block3829_0": [
                "msg.sender.send(tradeInfo.remainedSourceAmount)"
            ],
            "jump6151": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "block8522": [
                "reserve.trade.value(callValue)(source, amount, dest, destAddress, validate )"
            ],
            "block6151": [
                "token.balanceOf(this)"
            ],
            "jump3829": [
                "msg.sender.send(tradeInfo.remainedSourceAmount)",
                "msg.sender.send(tradeInfo.remainedSourceAmount)"
            ],
            "block6869_0": [
                "source.allowance(msg.sender,this)"
            ],
            "block3580": [
                "msg.sender.send(msg.value)"
            ],
            "jump8825_0": [
                "source.approve( reserve, 0)",
                "source.approve( reserve, 0)"
            ],
            "block9375": [
                "source.approve( reserve, 0)"
            ],
            "block6869": [
                "source.allowance(msg.sender,this)"
            ],
            "jump7959_0": [
                "source.transferFrom(msg.sender, this, amount)",
                "source.transferFrom(msg.sender, this, amount)"
            ],
            "jump8522_0": [
                "reserve.trade.value(callValue)(source, amount, dest, destAddress, validate )",
                "reserve.trade.value(callValue)(source, amount, dest, destAddress, validate )"
            ],
            "block5760_0": [
                "reserves[reserveIndex].getPairInfo(source,dest)"
            ],
            "block7959": [
                "source.transferFrom(msg.sender, this, amount)"
            ],
            "block8825": [
                "source.approve( reserve, 0)"
            ],
            "jump5760": [
                "reserves[reserveIndex].getPairInfo(source,dest)",
                "reserves[reserveIndex].getPairInfo(source,dest)"
            ],
            "block9058_0": [
                "source.transfer(msg.sender, amount)"
            ],
            "block3829": [
                "msg.sender.send(tradeInfo.remainedSourceAmount)"
            ],
            "jump2896": [
                "msg.sender.send(msg.value)",
                "msg.sender.send(msg.value)"
            ],
            "block9375_0": [
                "source.approve( reserve, 0)"
            ],
            "jump9058_0": [
                "source.transfer(msg.sender, amount)",
                "source.transfer(msg.sender, amount)"
            ],
            "block5411_1": [
                "token.decimals()"
            ],
            "jump6869_0": [
                "source.allowance(msg.sender,this)",
                "source.allowance(msg.sender,this)"
            ],
            "jump8182_0": [
                "source.approve( reserve, amount)",
                "source.approve( reserve, amount)"
            ],
            "jump6869": [
                "source.allowance(msg.sender,this)",
                "source.allowance(msg.sender,this)"
            ],
            "jump7366": [
                "reserves[i].getPairInfo(source,dest)",
                "reserves[i].getPairInfo(source,dest)"
            ]
        }
    }
}