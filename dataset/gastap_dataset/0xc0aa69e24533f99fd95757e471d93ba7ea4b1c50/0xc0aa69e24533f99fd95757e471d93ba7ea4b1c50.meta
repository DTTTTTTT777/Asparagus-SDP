{
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "ERC20Basic": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "balanceOf(address)": [
                124,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                202,
                75
            ],
            "transfer(address,uint256)": [
                873,
                273
            ],
            "balanceOf(address)": [
                601,
                185
            ],
            "transferFrom(address,address,uint256)": [
                346,
                119
            ],
            "allowance(address,address)": [
                1061,
                317
            ]
        },
        "block_CALL_mapping": {}
    },
    "Owned": {
        "function_list": [
            "Owned()",
            "changeOwner(address)",
            "confirmOwner()"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {}
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "confirmOwner()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "confirmOwner()": [
                257,
                119
            ],
            "changeOwner(address)": [
                190,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "Blocked": {
        "function_list": [],
        "initial_state": {},
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "DividendToken": {
        "function_list": [
            "Owned()",
            "changeOwner(address)",
            "confirmOwner()",
            "balanceOf(address)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transfer(address,uint256)",
            "transferSimple(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "reward()",
            "withdrawReward()",
            "divideUpReward(uint256)",
            "withdrawLeft()",
            "beforeBalanceChanges(address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {
                    "totalReward": "uint256",
                    "lastDivideRewardTime": "uint256",
                    "rewardDays": "uint256"
                }
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {
                    "totalReward": "uint256",
                    "lastDivideRewardTime": "uint256",
                    "rewardDays": "uint256"
                }
            },
            "confirmOwner()": {
                "argument": {},
                "contract": {
                    "totalReward": "uint256",
                    "lastDivideRewardTime": "uint256",
                    "rewardDays": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalReward": "uint256",
                    "lastDivideRewardTime": "uint256",
                    "rewardDays": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "totalReward": "uint256",
                    "lastDivideRewardTime": "uint256",
                    "rewardDays": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalReward": "uint256",
                    "lastDivideRewardTime": "uint256",
                    "rewardDays": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalReward": "uint256",
                    "lastDivideRewardTime": "uint256",
                    "rewardDays": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalReward": "uint256",
                    "lastDivideRewardTime": "uint256",
                    "rewardDays": "uint256"
                }
            },
            "transferSimple(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalReward": "uint256",
                    "lastDivideRewardTime": "uint256",
                    "rewardDays": "uint256"
                }
            },
            "reward()": {
                "argument": {},
                "contract": {
                    "totalReward": "uint256",
                    "lastDivideRewardTime": "uint256",
                    "rewardDays": "uint256"
                }
            },
            "withdrawReward()": {
                "argument": {},
                "contract": {
                    "totalReward": "uint256",
                    "lastDivideRewardTime": "uint256",
                    "rewardDays": "uint256"
                }
            },
            "divideUpReward(uint256)": {
                "argument": {
                    "inDays": "uint256"
                },
                "contract": {
                    "totalReward": "uint256",
                    "lastDivideRewardTime": "uint256",
                    "rewardDays": "uint256"
                }
            },
            "withdrawLeft()": {
                "argument": {},
                "contract": {
                    "totalReward": "uint256",
                    "lastDivideRewardTime": "uint256",
                    "rewardDays": "uint256"
                }
            },
            "beforeBalanceChanges(address)": {
                "argument": {},
                "contract": {
                    "totalReward": "uint256",
                    "lastDivideRewardTime": "uint256",
                    "rewardDays": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "withdrawReward()": [
                1475,
                471
            ],
            "approve(address,uint256)": [
                290,
                75
            ],
            "changeOwner(address)": [
                1209,
                361
            ],
            "confirmOwner()": [
                1452,
                449
            ],
            "transfer(address,uint256)": [
                1319,
                405
            ],
            "balanceOf(address)": [
                992,
                295
            ],
            "withdrawLeft()": [
                740,
                207
            ],
            "divideUpReward(uint256)": [
                1420,
                427
            ],
            "transferFrom(address,address,uint256)": [
                477,
                141
            ],
            "reward()": [
                434,
                119
            ],
            "beforeBalanceChanges(address)": [
                763,
                229
            ],
            "allowance(address,address)": [
                1605,
                515
            ]
        },
        "block_CALL_mapping": {
            "block4891": [
                "msg.sender.call.gas(3000000).value(rewardValue)()"
            ],
            "jump4891": [
                "msg.sender.call.gas(3000000).value(rewardValue)()",
                "msg.sender.call.gas(3000000).value(rewardValue)()"
            ],
            "block3407": [
                "msg.sender.call.gas(3000000).value(this.balance)()"
            ],
            "jump3407": [
                "msg.sender.call.gas(3000000).value(this.balance)()",
                "msg.sender.call.gas(3000000).value(this.balance)()"
            ]
        }
    },
    "RENTCoin": {
        "function_list": [
            "transfer(address,uint256)",
            "transferSimple(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "reward()",
            "withdrawReward()",
            "divideUpReward(uint256)",
            "withdrawLeft()",
            "beforeBalanceChanges(address)",
            "Owned()",
            "changeOwner(address)",
            "confirmOwner()",
            "balanceOf(address)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "RENTCoin(uint256,uint256)",
            "manualTransfer(address,uint256)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint32"
                }
            },
            "transferSimple(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint32"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint32"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint32"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint32"
                }
            },
            "reward()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint32"
                }
            },
            "withdrawReward()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint32"
                }
            },
            "divideUpReward(uint256)": {
                "argument": {
                    "inDays": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint32"
                }
            },
            "withdrawLeft()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint32"
                }
            },
            "beforeBalanceChanges(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint32"
                }
            },
            "Owned()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint32"
                }
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint32"
                }
            },
            "confirmOwner()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint32"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint32"
                }
            },
            "RENTCoin(uint256,uint256)": {
                "argument": {
                    "initialSupply": "uint256",
                    "unblockTime": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint32"
                }
            },
            "manualTransfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint32"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint32"
                }
            }
        },
        "function_block_mapping": {
            "balanceOf(address)": [
                1336,
                361
            ],
            "allowance(address,address)": [
                2093,
                603
            ],
            "confirmOwner()": [
                1940,
                537
            ],
            "approve(address,uint256)": [
                478,
                97
            ],
            "divideUpReward(uint256)": [
                1908,
                515
            ],
            "withdrawReward()": [
                1963,
                559
            ],
            "reward()": [
                622,
                141
            ],
            "changeOwner(address)": [
                1697,
                449
            ],
            "transferFrom(address,address,uint256)": [
                665,
                163
            ],
            "manualTransfer(address,uint256)": [
                1235,
                339
            ],
            "beforeBalanceChanges(address)": [
                1006,
                273
            ],
            "withdrawLeft()": [
                983,
                251
            ],
            "transfer(address,uint256)": [
                1807,
                493
            ]
        },
        "block_CALL_mapping": {
            "jump5635": [
                "msg.sender.call.gas(3000000).value(rewardValue)()",
                "msg.sender.call.gas(3000000).value(rewardValue)()"
            ],
            "block5635": [
                "msg.sender.call.gas(3000000).value(rewardValue)()"
            ],
            "jump3957": [
                "msg.sender.call.gas(3000000).value(this.balance)()",
                "msg.sender.call.gas(3000000).value(this.balance)()"
            ],
            "block3957": [
                "msg.sender.call.gas(3000000).value(this.balance)()"
            ]
        }
    },
    "TimingCrowdsale": {
        "function_list": [
            "currentTime()",
            "isPreICO()",
            "isICO()",
            "isPreICOFinished()",
            "isICOFinished()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "currentTime()": {
                "argument": {},
                "contract": {
                    "preICOstartTime": "uint256",
                    "ICOstartTime": "uint256",
                    "ICOendTime": "uint256"
                }
            },
            "isPreICO()": {
                "argument": {},
                "contract": {
                    "preICOstartTime": "uint256",
                    "ICOstartTime": "uint256",
                    "ICOendTime": "uint256"
                }
            },
            "isICO()": {
                "argument": {},
                "contract": {
                    "preICOstartTime": "uint256",
                    "ICOstartTime": "uint256",
                    "ICOendTime": "uint256"
                }
            },
            "isPreICOFinished()": {
                "argument": {},
                "contract": {
                    "preICOstartTime": "uint256",
                    "ICOstartTime": "uint256",
                    "ICOendTime": "uint256"
                }
            },
            "isICOFinished()": {
                "argument": {},
                "contract": {
                    "preICOstartTime": "uint256",
                    "ICOstartTime": "uint256",
                    "ICOendTime": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "preICOstartTime": "uint256",
                    "ICOstartTime": "uint256",
                    "ICOendTime": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "isPreICO()": [
                316,
                163
            ],
            "isPreICOFinished()": [
                226,
                119
            ],
            "isICO()": [
                179,
                97
            ],
            "isICOFinished()": [
                406,
                207
            ]
        },
        "block_CALL_mapping": {}
    },
    "BonusCrowdsale": {
        "function_list": [
            "currentTime()",
            "isPreICO()",
            "isICO()",
            "isPreICOFinished()",
            "isICOFinished()",
            "getBonus(uint256)",
            "getAmountBonus(uint256)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "currentTime()": {
                "argument": {},
                "contract": {}
            },
            "isPreICO()": {
                "argument": {},
                "contract": {}
            },
            "isICO()": {
                "argument": {},
                "contract": {}
            },
            "isPreICOFinished()": {
                "argument": {},
                "contract": {}
            },
            "isICOFinished()": {
                "argument": {},
                "contract": {}
            },
            "getBonus(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {}
            },
            "getAmountBonus(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {}
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "getAmountBonus(uint256)": [
                493,
                229
            ],
            "isPreICO()": [
                403,
                185
            ],
            "isPreICOFinished()": [
                313,
                141
            ],
            "getBonus(uint256)": [
                158,
                75
            ],
            "isICO()": [
                266,
                119
            ],
            "isICOFinished()": [
                558,
                251
            ]
        },
        "block_CALL_mapping": {}
    },
    "RefundableCrowdsale": {
        "function_list": [
            "isWithdrawAllowed()",
            "withdraw()",
            "withdrawAmount(uint256)",
            "addCurrency(uint256)",
            "addCurrencyInternal(uint256)",
            "manualTransferTokensToInternal(address,uint256,uint256,uint256)",
            "transferTokensTo(address,uint256)",
            "Owned()",
            "changeOwner(address)",
            "confirmOwner()",
            "getBonus(uint256)",
            "getAmountBonus(uint256)",
            "currentTime()",
            "isPreICO()",
            "isICO()",
            "isPreICOFinished()",
            "isICOFinished()",
            "refund(address)",
            "isRefundAllowed()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "isWithdrawAllowed()": {
                "argument": {},
                "contract": {}
            },
            "withdraw()": {
                "argument": {},
                "contract": {}
            },
            "withdrawAmount(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {}
            },
            "addCurrency(uint256)": {
                "argument": {
                    "currency": "uint256"
                },
                "contract": {}
            },
            "addCurrencyInternal(uint256)": {
                "argument": {
                    "currency": "uint256"
                },
                "contract": {}
            },
            "manualTransferTokensToInternal(address,uint256,uint256,uint256)": {
                "argument": {
                    "givenTokens": "uint256",
                    "currency": "uint256",
                    "amount": "uint256"
                },
                "contract": {}
            },
            "transferTokensTo(address,uint256)": {
                "argument": {
                    "givenTokens": "uint256"
                },
                "contract": {}
            },
            "Owned()": {
                "argument": {},
                "contract": {}
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "confirmOwner()": {
                "argument": {},
                "contract": {}
            },
            "getBonus(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {}
            },
            "getAmountBonus(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {}
            },
            "currentTime()": {
                "argument": {},
                "contract": {}
            },
            "isPreICO()": {
                "argument": {},
                "contract": {}
            },
            "isICO()": {
                "argument": {},
                "contract": {}
            },
            "isPreICOFinished()": {
                "argument": {},
                "contract": {}
            },
            "isICOFinished()": {
                "argument": {},
                "contract": {}
            },
            "refund(address)": {
                "argument": {},
                "contract": {}
            },
            "isRefundAllowed()": {
                "argument": {},
                "contract": {}
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {
            "jump3563": [
                "vault.enableRefunds()",
                "vault.enableRefunds()"
            ],
            "block1987": [
                "token.mint(beneficiary, bonus)"
            ],
            "jump3400": [
                "vault.close()",
                "vault.close()"
            ],
            "jump1987": [
                "token.mint(beneficiary, bonus)",
                "token.mint(beneficiary, bonus)"
            ],
            "jump2765": [
                "vault.refund(msg.sender)",
                "vault.refund(msg.sender)"
            ],
            "jump1414": [
                "token.mint(beneficiary, tokens)",
                "token.mint(beneficiary, tokens)"
            ],
            "block1987_1": [
                "token.mint(beneficiary, bonus)"
            ],
            "jump3226_0": [
                "vault.deposit.value(msg.value)(msg.sender)",
                "vault.deposit.value(msg.value)(msg.sender)"
            ],
            "jump3226_1": [
                "vault.deposit.value(msg.value)(msg.sender)",
                "vault.deposit.value(msg.value)(msg.sender)"
            ],
            "jump3226": [
                "vault.deposit.value(msg.value)(msg.sender)",
                "vault.deposit.value(msg.value)(msg.sender)"
            ],
            "block3226": [
                "vault.deposit.value(msg.value)(msg.sender)"
            ],
            "block3563": [
                "vault.enableRefunds()"
            ],
            "block3226_0": [
                "vault.deposit.value(msg.value)(msg.sender)"
            ],
            "block3226_1": [
                "vault.deposit.value(msg.value)(msg.sender)"
            ],
            "block3400": [
                "vault.close()"
            ],
            "block2765": [
                "vault.refund(msg.sender)"
            ],
            "block1987_0": [
                "token.mint(beneficiary, bonus)"
            ],
            "block1414_1": [
                "token.mint(beneficiary, tokens)"
            ],
            "block1414_0": [
                "token.mint(beneficiary, tokens)"
            ],
            "jump1414_1": [
                "token.mint(beneficiary, tokens)",
                "token.mint(beneficiary, tokens)"
            ],
            "jump1414_0": [
                "token.mint(beneficiary, tokens)",
                "token.mint(beneficiary, tokens)"
            ],
            "block1414": [
                "token.mint(beneficiary, tokens)"
            ],
            "jump1987_0": [
                "token.mint(beneficiary, bonus)",
                "token.mint(beneficiary, bonus)"
            ],
            "jump1987_1": [
                "token.mint(beneficiary, bonus)",
                "token.mint(beneficiary, bonus)"
            ]
        }
    },
    "Crowdsale": {
        "function_list": [
            "refund(address)",
            "isRefundAllowed()",
            "isWithdrawAllowed()",
            "withdraw()",
            "withdrawAmount(uint256)",
            "addCurrency(uint256)",
            "addCurrencyInternal(uint256)",
            "manualTransferTokensToInternal(address,uint256,uint256,uint256)",
            "transferTokensTo(address,uint256)",
            "Owned()",
            "changeOwner(address)",
            "confirmOwner()",
            "getBonus(uint256)",
            "getAmountBonus(uint256)",
            "currentTime()",
            "isPreICO()",
            "isICO()",
            "isPreICOFinished()",
            "isICOFinished()",
            "Crowdsale()",
            "isFinished()",
            "isWithdrawAllowed()",
            "isRefundAllowed()",
            "fallback()",
            "manualTransferTokensTo(address,uint256,uint256,uint256)",
            "finishCrowdsale()",
            "takeBounty()",
            "addToSoldTokens(uint256)",
            "transferTokensTo(address,uint256)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "refund(address)": {
                "argument": {},
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "isRefundAllowed()": {
                "argument": {},
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "isWithdrawAllowed()": {
                "argument": {},
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "withdraw()": {
                "argument": {},
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "withdrawAmount(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "addCurrency(uint256)": {
                "argument": {
                    "currency": "uint256"
                },
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "addCurrencyInternal(uint256)": {
                "argument": {
                    "currency": "uint256"
                },
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "manualTransferTokensToInternal(address,uint256,uint256,uint256)": {
                "argument": {
                    "givenTokens": "uint256",
                    "currency": "uint256",
                    "amount": "uint256"
                },
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "transferTokensTo(address,uint256)": {
                "argument": {
                    "givenTokens": "uint256"
                },
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "Owned()": {
                "argument": {},
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "confirmOwner()": {
                "argument": {},
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "getBonus(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "getAmountBonus(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "currentTime()": {
                "argument": {},
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "isPreICO()": {
                "argument": {},
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "isICO()": {
                "argument": {},
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "isPreICOFinished()": {
                "argument": {},
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "isICOFinished()": {
                "argument": {},
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "Crowdsale()": {
                "argument": {},
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "isFinished()": {
                "argument": {},
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "manualTransferTokensTo(address,uint256,uint256,uint256)": {
                "argument": {
                    "givenTokens": "uint256",
                    "currency": "uint256",
                    "amount": "uint256"
                },
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "finishCrowdsale()": {
                "argument": {},
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "takeBounty()": {
                "argument": {},
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "addToSoldTokens(uint256)": {
                "argument": {
                    "providedTokens": "uint256"
                },
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "maxTokenAmount": "uint256",
                    "bountyTokens": "uint256",
                    "softCapTokens": "uint256",
                    "unblockTokenTime": "uint256",
                    "leftTokens": "uint256",
                    "totalAmount": "uint256",
                    "transactionCounter": "uint256",
                    "rateToEther": "uint256",
                    "minAmountForDeal": "uint256",
                    "soldTokens": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "isPreICO()": [
                2078,
                581
            ],
            "manualTransferTokensTo(address,uint256,uint256,uint256)": [
                2468,
                757
            ],
            "withdrawAmount(uint256)": [
                1064,
                97
            ],
            "isWithdrawAllowed()": [
                1631,
                383
            ],
            "confirmOwner()": [
                2148,
                625
            ],
            "takeBounty()": [
                1898,
                493
            ],
            "finishCrowdsale()": [
                2125,
                603
            ],
            "isPreICOFinished()": [
                1921,
                515
            ],
            "refund(address)": [
                2766,
                845
            ],
            "changeOwner(address)": [
                2011,
                559
            ],
            "getBonus(uint256)": [
                1347,
                251
            ],
            "withdraw()": [
                1281,
                207
            ],
            "isICOFinished()": [
                2672,
                801
            ],
            "getAmountBonus(uint256)": [
                2271,
                691
            ],
            "addCurrency(uint256)": [
                2423,
                735
            ],
            "isFinished()": [
                1584,
                361
            ],
            "isICO()": [
                1678,
                405
            ]
        },
        "block_CALL_mapping": {
            "jump4647": [
                "token.changeOwner(msg.sender)",
                "token.changeOwner(msg.sender)"
            ],
            "block723_0": [
                "investor.call.gas(3000000).value(amount - needAmount)()"
            ],
            "jump723": [
                "investor.call.gas(3000000).value(amount - needAmount)()",
                "investor.call.gas(3000000).value(amount - needAmount)()"
            ],
            "jump3504": [
                "token.manualTransfer(to, providedTokens)",
                "token.manualTransfer(to, providedTokens)"
            ],
            "jump4079": [
                "msg.sender.call.gas(3000000).value(this.balance)()",
                "msg.sender.call.gas(3000000).value(this.balance)()"
            ],
            "jump3872": [
                "msg.sender.call.gas(3000000).value(givenAmount)()",
                "msg.sender.call.gas(3000000).value(givenAmount)()"
            ],
            "block4647": [
                "token.changeOwner(msg.sender)"
            ],
            "jump5142": [
                "token.transfer(msg.sender, token.balanceOf(this))",
                "token.transfer(msg.sender, token.balanceOf(this))"
            ],
            "jump6348": [
                "investor.call.gas(3000000).value(depositedValue)()",
                "investor.call.gas(3000000).value(depositedValue)()"
            ],
            "block4079": [
                "msg.sender.call.gas(3000000).value(this.balance)()"
            ],
            "block5142": [
                "token.transfer(msg.sender, token.balanceOf(this))"
            ],
            "jump723_0": [
                "investor.call.gas(3000000).value(amount - needAmount)()",
                "investor.call.gas(3000000).value(amount - needAmount)()"
            ],
            "block3504": [
                "token.manualTransfer(to, providedTokens)"
            ],
            "block6348": [
                "investor.call.gas(3000000).value(depositedValue)()"
            ],
            "jump3504_1": [
                "token.manualTransfer(to, providedTokens)",
                "token.manualTransfer(to, providedTokens)"
            ],
            "jump3504_0": [
                "token.manualTransfer(to, providedTokens)",
                "token.manualTransfer(to, providedTokens)"
            ],
            "block3872": [
                "msg.sender.call.gas(3000000).value(givenAmount)()"
            ],
            "block723": [
                "investor.call.gas(3000000).value(amount - needAmount)()"
            ],
            "block3504_1": [
                "token.manualTransfer(to, providedTokens)"
            ],
            "block3504_0": [
                "token.manualTransfer(to, providedTokens)"
            ],
            "jump4950": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "block4950": [
                "token.balanceOf(this)"
            ]
        }
    }
}