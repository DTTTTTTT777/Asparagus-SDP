{
    "ERC20": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                346,
                97
            ],
            "balanceOf(address)": [
                773,
                207
            ],
            "transferFrom(address,address,uint256)": [
                490,
                141
            ],
            "allowance(address,address)": [
                1394,
                339
            ],
            "transfer(address,uint256)": [
                1091,
                273
            ]
        },
        "block_CALL_mapping": {}
    },
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "Controlled": {
        "function_list": [
            "Controlled()",
            "changeController(address)"
        ],
        "initial_state": {
            "Controlled()": {
                "argument": {},
                "contract": {}
            },
            "changeController(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "changeController(address)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Crowdsale": {
        "function_list": [
            "Crowdsale(uint256,uint256,uint256,address)",
            "fallback()",
            "buyTokens(address)",
            "buyTokens(address,uint256)",
            "transferToken(address,uint256)",
            "forwardFunds(uint256)",
            "validPurchase(uint256)",
            "hasEnded()",
            "hasStarted()"
        ],
        "initial_state": {
            "Crowdsale(uint256,uint256,uint256,address)": {
                "argument": {
                    "_startTime": "uint256",
                    "_endTime": "uint256",
                    "_rate": "uint256"
                },
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "rate": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "rate": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "buyTokens(address)": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "rate": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "buyTokens(address,uint256)": {
                "argument": {
                    "weiAmount": "uint256"
                },
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "rate": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "transferToken(address,uint256)": {
                "argument": {
                    "weiAmount": "uint256"
                },
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "rate": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "forwardFunds(uint256)": {
                "argument": {
                    "weiAmount": "uint256"
                },
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "rate": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "validPurchase(uint256)": {
                "argument": {
                    "weiAmount": "uint256"
                },
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "rate": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "hasEnded()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "rate": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "hasStarted()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "rate": "uint256",
                    "weiRaised": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "hasStarted()": [
                293,
                141
            ],
            "hasEnded()": [
                524,
                229
            ],
            "buyTokens(address)": [
                470,
                207
            ]
        },
        "block_CALL_mapping": {
            "block1381_0": [
                "wallet.transfer(weiAmount)"
            ],
            "block1381_1": [
                "wallet.transfer(weiAmount)"
            ],
            "jump1381_0": [
                "wallet.transfer(weiAmount)",
                "wallet.transfer(weiAmount)"
            ],
            "jump1381_1": [
                "wallet.transfer(weiAmount)",
                "wallet.transfer(weiAmount)"
            ],
            "jump1207_1": [
                "token.generateTokens(beneficiary, tokens)",
                "token.generateTokens(beneficiary, tokens)"
            ],
            "jump1207_0": [
                "token.generateTokens(beneficiary, tokens)",
                "token.generateTokens(beneficiary, tokens)"
            ],
            "block1207_1": [
                "token.generateTokens(beneficiary, tokens)"
            ],
            "block1207_0": [
                "token.generateTokens(beneficiary, tokens)"
            ],
            "block1207": [
                "token.generateTokens(beneficiary, tokens)"
            ],
            "jump1207": [
                "token.generateTokens(beneficiary, tokens)",
                "token.generateTokens(beneficiary, tokens)"
            ],
            "jump1381": [
                "wallet.transfer(weiAmount)",
                "wallet.transfer(weiAmount)"
            ],
            "block1381": [
                "wallet.transfer(weiAmount)"
            ]
        }
    },
    "CappedCrowdsale": {
        "function_list": [
            "Crowdsale(uint256,uint256,uint256,address)",
            "fallback()",
            "buyTokens(address)",
            "buyTokens(address,uint256)",
            "transferToken(address,uint256)",
            "forwardFunds(uint256)",
            "validPurchase(uint256)",
            "hasEnded()",
            "hasStarted()",
            "CappedCrowdsale(uint256)",
            "validPurchase(uint256)",
            "hasEnded()",
            "capReached()",
            "buyTokens(address)"
        ],
        "initial_state": {
            "Crowdsale(uint256,uint256,uint256,address)": {
                "argument": {
                    "_startTime": "uint256",
                    "_endTime": "uint256",
                    "_rate": "uint256"
                },
                "contract": {
                    "cap": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "cap": "uint256"
                }
            },
            "buyTokens(address)": {
                "argument": {},
                "contract": {
                    "cap": "uint256"
                }
            },
            "buyTokens(address,uint256)": {
                "argument": {
                    "weiAmount": "uint256"
                },
                "contract": {
                    "cap": "uint256"
                }
            },
            "transferToken(address,uint256)": {
                "argument": {
                    "weiAmount": "uint256"
                },
                "contract": {
                    "cap": "uint256"
                }
            },
            "forwardFunds(uint256)": {
                "argument": {
                    "weiAmount": "uint256"
                },
                "contract": {
                    "cap": "uint256"
                }
            },
            "validPurchase(uint256)": {
                "argument": {
                    "weiAmount": "uint256"
                },
                "contract": {
                    "cap": "uint256"
                }
            },
            "hasEnded()": {
                "argument": {},
                "contract": {
                    "cap": "uint256"
                }
            },
            "hasStarted()": {
                "argument": {},
                "contract": {
                    "cap": "uint256"
                }
            },
            "CappedCrowdsale(uint256)": {
                "argument": {
                    "_cap": "uint256"
                },
                "contract": {
                    "cap": "uint256"
                }
            },
            "capReached()": {
                "argument": {},
                "contract": {
                    "cap": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "hasEnded()": [
                717,
                273
            ],
            "buyTokens(address)": [
                663,
                251
            ]
        },
        "block_CALL_mapping": {
            "block1629": [
                "token.mint(bounty, bountyAmount)"
            ],
            "block2143_1": [
                "token.mint(reserve, reserveAmount)"
            ],
            "block2143_0": [
                "token.mint(reserve, reserveAmount)"
            ],
            "jump1886_0": [
                "token.mint(team, teamAmount)",
                "token.mint(team, teamAmount)"
            ],
            "jump1886_1": [
                "token.mint(team, teamAmount)",
                "token.mint(team, teamAmount)"
            ],
            "block1886": [
                "token.mint(team, teamAmount)"
            ],
            "jump2648": [
                "token.mint(_to, mintAmount)",
                "token.mint(_to, mintAmount)"
            ],
            "jump2143": [
                "token.mint(reserve, reserveAmount)",
                "token.mint(reserve, reserveAmount)"
            ],
            "jump1372": [
                "token.mint(beneficiary, tokens)",
                "token.mint(beneficiary, tokens)"
            ],
            "block1886_0": [
                "token.mint(team, teamAmount)"
            ],
            "block1886_1": [
                "token.mint(team, teamAmount)"
            ],
            "block3343_0": [
                "wallet.transfer(msg.value)"
            ],
            "block3343_1": [
                "wallet.transfer(msg.value)"
            ],
            "jump3343_0": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ],
            "jump3343_1": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ],
            "block2143": [
                "token.mint(reserve, reserveAmount)"
            ],
            "jump3343": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ],
            "block1629_1": [
                "token.mint(bounty, bountyAmount)"
            ],
            "block1629_0": [
                "token.mint(bounty, bountyAmount)"
            ],
            "block3343": [
                "wallet.transfer(msg.value)"
            ],
            "jump1372_0": [
                "token.mint(beneficiary, tokens)",
                "token.mint(beneficiary, tokens)"
            ],
            "jump1372_1": [
                "token.mint(beneficiary, tokens)",
                "token.mint(beneficiary, tokens)"
            ],
            "jump1886": [
                "token.mint(team, teamAmount)",
                "token.mint(team, teamAmount)"
            ],
            "jump2143_1": [
                "token.mint(reserve, reserveAmount)",
                "token.mint(reserve, reserveAmount)"
            ],
            "jump2143_0": [
                "token.mint(reserve, reserveAmount)",
                "token.mint(reserve, reserveAmount)"
            ],
            "block1372_0": [
                "token.mint(beneficiary, tokens)"
            ],
            "block1372_1": [
                "token.mint(beneficiary, tokens)"
            ],
            "jump1629_1": [
                "token.mint(bounty, bountyAmount)",
                "token.mint(bounty, bountyAmount)"
            ],
            "jump1629_0": [
                "token.mint(bounty, bountyAmount)",
                "token.mint(bounty, bountyAmount)"
            ],
            "block2648": [
                "token.mint(_to, mintAmount)"
            ],
            "block1372": [
                "token.mint(beneficiary, tokens)"
            ],
            "jump1629": [
                "token.mint(bounty, bountyAmount)",
                "token.mint(bounty, bountyAmount)"
            ]
        }
    },
    "FinalizableCrowdsale": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "Crowdsale(uint256,uint256,uint256,address)",
            "fallback()",
            "buyTokens(address)",
            "buyTokens(address,uint256)",
            "transferToken(address,uint256)",
            "forwardFunds(uint256)",
            "validPurchase(uint256)",
            "hasEnded()",
            "hasStarted()",
            "finalize()",
            "finalization()",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "Crowdsale(uint256,uint256,uint256,address)": {
                "argument": {
                    "_startTime": "uint256",
                    "_endTime": "uint256",
                    "_rate": "uint256"
                },
                "contract": {}
            },
            "fallback()": {
                "argument": {},
                "contract": {}
            },
            "buyTokens(address)": {
                "argument": {},
                "contract": {}
            },
            "buyTokens(address,uint256)": {
                "argument": {
                    "weiAmount": "uint256"
                },
                "contract": {}
            },
            "transferToken(address,uint256)": {
                "argument": {
                    "weiAmount": "uint256"
                },
                "contract": {}
            },
            "forwardFunds(uint256)": {
                "argument": {
                    "weiAmount": "uint256"
                },
                "contract": {}
            },
            "validPurchase(uint256)": {
                "argument": {
                    "weiAmount": "uint256"
                },
                "contract": {}
            },
            "hasEnded()": {
                "argument": {},
                "contract": {}
            },
            "hasStarted()": {
                "argument": {},
                "contract": {}
            },
            "finalize()": {
                "argument": {},
                "contract": {}
            },
            "finalization()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "finalize()": [
                326,
                141
            ],
            "hasEnded()": [
                710,
                295
            ],
            "buyTokens(address)": [
                656,
                273
            ]
        },
        "block_CALL_mapping": {
            "block2472_0": [
                "wallet.transfer(msg.value)"
            ],
            "block2472_1": [
                "wallet.transfer(msg.value)"
            ],
            "block1170_1": [
                "token.mint(beneficiary, tokens)"
            ],
            "jump2472_0": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ],
            "jump2472_1": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ],
            "block1743_0": [
                "token.mint(beneficiary, bonus)"
            ],
            "jump1170": [
                "token.mint(beneficiary, tokens)",
                "token.mint(beneficiary, tokens)"
            ],
            "block1743": [
                "token.mint(beneficiary, bonus)"
            ],
            "block1743_1": [
                "token.mint(beneficiary, bonus)"
            ],
            "jump1170_0": [
                "token.mint(beneficiary, tokens)",
                "token.mint(beneficiary, tokens)"
            ],
            "jump1170_1": [
                "token.mint(beneficiary, tokens)",
                "token.mint(beneficiary, tokens)"
            ],
            "jump1743_1": [
                "token.mint(beneficiary, bonus)",
                "token.mint(beneficiary, bonus)"
            ],
            "block1170": [
                "token.mint(beneficiary, tokens)"
            ],
            "jump1743": [
                "token.mint(beneficiary, bonus)",
                "token.mint(beneficiary, bonus)"
            ],
            "block1170_0": [
                "token.mint(beneficiary, tokens)"
            ],
            "block2472": [
                "wallet.transfer(msg.value)"
            ],
            "jump1743_0": [
                "token.mint(beneficiary, bonus)",
                "token.mint(beneficiary, bonus)"
            ],
            "jump2472": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ]
        }
    },
    "HasNoTokens": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "extractTokens(address,address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "extractTokens(address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "extractTokens(address,address)": [
                179,
                97
            ],
            "transferOwnership(address)": [
                278,
                119
            ]
        },
        "block_CALL_mapping": {
            "block988": [
                "token.transfer(_claimer, balance)"
            ],
            "block508": [
                "_claimer.transfer(this.balance)"
            ],
            "block764": [
                "token.balanceOf(this)"
            ],
            "jump764": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "jump988": [
                "token.transfer(_claimer, balance)",
                "token.transfer(_claimer, balance)"
            ],
            "jump508": [
                "_claimer.transfer(this.balance)",
                "_claimer.transfer(this.balance)"
            ]
        }
    },
    "RefundVault": {
        "function_list": [
            "extractTokens(address,address)",
            "Ownable()",
            "transferOwnership(address)",
            "RefundVault(address)",
            "deposit(address)",
            "close()",
            "enableRefunds()",
            "refund(address)"
        ],
        "initial_state": {
            "extractTokens(address,address)": {
                "argument": {},
                "contract": {}
            },
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "RefundVault(address)": {
                "argument": {},
                "contract": {}
            },
            "deposit(address)": {
                "argument": {},
                "contract": {}
            },
            "close()": {
                "argument": {},
                "contract": {}
            },
            "enableRefunds()": {
                "argument": {},
                "contract": {}
            },
            "refund(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "enableRefunds()": [
                279,
                119
            ],
            "extractTokens(address,address)": [
                533,
                207
            ],
            "refund(address)": [
                753,
                273
            ],
            "close()": [
                169,
                75
            ],
            "deposit(address)": [
                699,
                251
            ],
            "transferOwnership(address)": [
                632,
                229
            ]
        },
        "block_CALL_mapping": {
            "block2121": [
                "token.transfer(_claimer, balance)"
            ],
            "jump1641": [
                "_claimer.transfer(this.balance)",
                "_claimer.transfer(this.balance)"
            ],
            "block1897": [
                "token.balanceOf(this)"
            ],
            "jump2121": [
                "token.transfer(_claimer, balance)",
                "token.transfer(_claimer, balance)"
            ],
            "jump1897": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "jump993": [
                "wallet.transfer(this.balance)",
                "wallet.transfer(this.balance)"
            ],
            "block993": [
                "wallet.transfer(this.balance)"
            ],
            "block1641": [
                "_claimer.transfer(this.balance)"
            ],
            "jump2979": [
                "investor.transfer(depositedValue)",
                "investor.transfer(depositedValue)"
            ],
            "block2979": [
                "investor.transfer(depositedValue)"
            ]
        }
    },
    "RefundableCrowdsale": {
        "function_list": [
            "finalize()",
            "finalization()",
            "Ownable()",
            "transferOwnership(address)",
            "Crowdsale(uint256,uint256,uint256,address)",
            "fallback()",
            "buyTokens(address)",
            "buyTokens(address,uint256)",
            "transferToken(address,uint256)",
            "forwardFunds(uint256)",
            "validPurchase(uint256)",
            "hasEnded()",
            "hasStarted()",
            "RefundableCrowdsale(uint256)",
            "forwardFunds(uint256)",
            "claimRefund()",
            "finalization()",
            "goalReached()",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "finalize()": {
                "argument": {},
                "contract": {
                    "goal": "uint256"
                }
            },
            "finalization()": {
                "argument": {},
                "contract": {
                    "goal": "uint256"
                }
            },
            "Ownable()": {
                "argument": {},
                "contract": {
                    "goal": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "goal": "uint256"
                }
            },
            "Crowdsale(uint256,uint256,uint256,address)": {
                "argument": {
                    "_startTime": "uint256",
                    "_endTime": "uint256",
                    "_rate": "uint256"
                },
                "contract": {
                    "goal": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "goal": "uint256"
                }
            },
            "buyTokens(address)": {
                "argument": {},
                "contract": {
                    "goal": "uint256"
                }
            },
            "buyTokens(address,uint256)": {
                "argument": {
                    "weiAmount": "uint256"
                },
                "contract": {
                    "goal": "uint256"
                }
            },
            "transferToken(address,uint256)": {
                "argument": {
                    "weiAmount": "uint256"
                },
                "contract": {
                    "goal": "uint256"
                }
            },
            "forwardFunds(uint256)": {
                "argument": {
                    "weiAmount": "uint256"
                },
                "contract": {
                    "goal": "uint256"
                }
            },
            "validPurchase(uint256)": {
                "argument": {
                    "weiAmount": "uint256"
                },
                "contract": {
                    "goal": "uint256"
                }
            },
            "hasEnded()": {
                "argument": {},
                "contract": {
                    "goal": "uint256"
                }
            },
            "hasStarted()": {
                "argument": {},
                "contract": {
                    "goal": "uint256"
                }
            },
            "RefundableCrowdsale(uint256)": {
                "argument": {
                    "_goal": "uint256"
                },
                "contract": {
                    "goal": "uint256"
                }
            },
            "claimRefund()": {
                "argument": {},
                "contract": {
                    "goal": "uint256"
                }
            },
            "goalReached()": {
                "argument": {},
                "contract": {
                    "goal": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "claimRefund()": [
                790,
                317
            ],
            "finalize()": [
                413,
                163
            ],
            "hasEnded()": [
                867,
                361
            ],
            "buyTokens(address)": [
                813,
                339
            ],
            "goalReached()": [
                609,
                251
            ]
        },
        "block_CALL_mapping": {
            "jump3563": [
                "vault.enableRefunds()",
                "vault.enableRefunds()"
            ],
            "block1987": [
                "token.mint(beneficiary, bonus)"
            ],
            "jump3400": [
                "vault.close()",
                "vault.close()"
            ],
            "jump1987": [
                "token.mint(beneficiary, bonus)",
                "token.mint(beneficiary, bonus)"
            ],
            "jump2765": [
                "vault.refund(msg.sender)",
                "vault.refund(msg.sender)"
            ],
            "jump1414": [
                "token.mint(beneficiary, tokens)",
                "token.mint(beneficiary, tokens)"
            ],
            "block1987_1": [
                "token.mint(beneficiary, bonus)"
            ],
            "jump3226_0": [
                "vault.deposit.value(msg.value)(msg.sender)",
                "vault.deposit.value(msg.value)(msg.sender)"
            ],
            "jump3226_1": [
                "vault.deposit.value(msg.value)(msg.sender)",
                "vault.deposit.value(msg.value)(msg.sender)"
            ],
            "jump3226": [
                "vault.deposit.value(msg.value)(msg.sender)",
                "vault.deposit.value(msg.value)(msg.sender)"
            ],
            "block3226": [
                "vault.deposit.value(msg.value)(msg.sender)"
            ],
            "block3563": [
                "vault.enableRefunds()"
            ],
            "block3226_0": [
                "vault.deposit.value(msg.value)(msg.sender)"
            ],
            "block3226_1": [
                "vault.deposit.value(msg.value)(msg.sender)"
            ],
            "block3400": [
                "vault.close()"
            ],
            "block2765": [
                "vault.refund(msg.sender)"
            ],
            "block1987_0": [
                "token.mint(beneficiary, bonus)"
            ],
            "block1414_1": [
                "token.mint(beneficiary, tokens)"
            ],
            "block1414_0": [
                "token.mint(beneficiary, tokens)"
            ],
            "jump1414_1": [
                "token.mint(beneficiary, tokens)",
                "token.mint(beneficiary, tokens)"
            ],
            "jump1414_0": [
                "token.mint(beneficiary, tokens)",
                "token.mint(beneficiary, tokens)"
            ],
            "block1414": [
                "token.mint(beneficiary, tokens)"
            ],
            "jump1987_0": [
                "token.mint(beneficiary, bonus)",
                "token.mint(beneficiary, bonus)"
            ],
            "jump1987_1": [
                "token.mint(beneficiary, bonus)",
                "token.mint(beneficiary, bonus)"
            ]
        }
    },
    "Pausable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "pause()",
            "unpause()",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "pause()": {
                "argument": {},
                "contract": {}
            },
            "unpause()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "pause()": [
                184,
                119
            ],
            "unpause()": [
                114,
                75
            ],
            "transferOwnership(address)": [
                294,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "EthealPreSale": {
        "function_list": [
            "RefundableCrowdsale(uint256)",
            "forwardFunds(uint256)",
            "claimRefund()",
            "finalization()",
            "goalReached()",
            "finalize()",
            "finalization()",
            "Ownable()",
            "transferOwnership(address)",
            "Crowdsale(uint256,uint256,uint256,address)",
            "fallback()",
            "buyTokens(address)",
            "buyTokens(address,uint256)",
            "transferToken(address,uint256)",
            "forwardFunds(uint256)",
            "validPurchase(uint256)",
            "hasEnded()",
            "hasStarted()",
            "CappedCrowdsale(uint256)",
            "validPurchase(uint256)",
            "hasEnded()",
            "capReached()",
            "buyTokens(address)",
            "pause()",
            "unpause()",
            "EthealPreSale(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)",
            "buyTokens(address)",
            "transferToken(address,uint256)",
            "validPurchase(uint256)",
            "hasEnded()",
            "claimRefund()",
            "finalization()",
            "setWhitelist(address[],address[],uint256[])",
            "setMaxGas(uint256,uint256)",
            "setMinContribution(uint256)",
            "setCaps(uint256,uint256,uint256,uint256)",
            "setTimes(uint256,uint256)",
            "setRate(uint256)",
            "claimRefundFor(address)",
            "claimRefundsFor(address[])",
            "claimToken()",
            "claimTokenFor(address)",
            "claimTokensFor(address[])",
            "extractVaultTokens(address,address)",
            "howMuchCanIContributeNow()",
            "howMuchCanXContributeNow(address)",
            "getSaleDay(uint256)",
            "getSaleDayNow()",
            "uint8Min(uint8,uint8)",
            "uint256Min(uint256,uint256)",
            "wasSuccess()",
            "getContributorsCount()",
            "getContributors(bool,bool)",
            "getHealBalance()",
            "getNow()",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "RefundableCrowdsale(uint256)": {
                "argument": {
                    "_goal": "uint256"
                },
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "forwardFunds(uint256)": {
                "argument": {
                    "weiAmount": "uint256"
                },
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "claimRefund()": {
                "argument": {},
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "finalization()": {
                "argument": {},
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "goalReached()": {
                "argument": {},
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "finalize()": {
                "argument": {},
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "Ownable()": {
                "argument": {},
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "Crowdsale(uint256,uint256,uint256,address)": {
                "argument": {
                    "_startTime": "uint256",
                    "_endTime": "uint256",
                    "_rate": "uint256"
                },
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "buyTokens(address)": {
                "argument": {},
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "buyTokens(address,uint256)": {
                "argument": {
                    "weiAmount": "uint256"
                },
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "transferToken(address,uint256)": {
                "argument": {
                    "_weiAmount": "uint256"
                },
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "validPurchase(uint256)": {
                "argument": {
                    "_weiAmount": "uint256"
                },
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "hasEnded()": {
                "argument": {},
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "hasStarted()": {
                "argument": {},
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "CappedCrowdsale(uint256)": {
                "argument": {
                    "_cap": "uint256"
                },
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "capReached()": {
                "argument": {},
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "pause()": {
                "argument": {},
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "unpause()": {
                "argument": {},
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "EthealPreSale(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)": {
                "argument": {
                    "_startTime": "uint256",
                    "_endTime": "uint256",
                    "_minContribution": "uint256",
                    "_rate": "uint256",
                    "_goal": "uint256",
                    "_softCap": "uint256",
                    "_softCapTime": "uint256",
                    "_cap": "uint256",
                    "_gasPrice": "uint256",
                    "_gasPenalty": "uint256"
                },
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "setWhitelist(address[],address[],uint256[])": {
                "argument": {
                    "_add": "address[]",
                    "_remove": "address[]",
                    "_whitelistLimits": "uint256[]"
                },
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "setMaxGas(uint256,uint256)": {
                "argument": {
                    "_maxGas": "uint256",
                    "_penalty": "uint256"
                },
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "setMinContribution(uint256)": {
                "argument": {
                    "_minContribution": "uint256"
                },
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "setCaps(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_goal": "uint256",
                    "_softCap": "uint256",
                    "_softCapTime": "uint256",
                    "_cap": "uint256"
                },
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "setTimes(uint256,uint256)": {
                "argument": {
                    "_startTime": "uint256",
                    "_endTime": "uint256"
                },
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "setRate(uint256)": {
                "argument": {
                    "_rate": "uint256"
                },
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "claimRefundFor(address)": {
                "argument": {},
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "claimRefundsFor(address[])": {
                "argument": {
                    "_beneficiaries": "address[]"
                },
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "claimToken()": {
                "argument": {},
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "claimTokenFor(address)": {
                "argument": {},
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "claimTokensFor(address[])": {
                "argument": {
                    "_beneficiaries": "address[]"
                },
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "extractVaultTokens(address,address)": {
                "argument": {},
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "howMuchCanIContributeNow()": {
                "argument": {},
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "howMuchCanXContributeNow(address)": {
                "argument": {},
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "getSaleDay(uint256)": {
                "argument": {
                    "_time": "uint256"
                },
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "getSaleDayNow()": {
                "argument": {},
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "uint8Min(uint8,uint8)": {
                "argument": {
                    "a": "uint8",
                    "b": "uint8"
                },
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "uint256Min(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "wasSuccess()": {
                "argument": {},
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "getContributorsCount()": {
                "argument": {},
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "getContributors(bool,bool)": {
                "argument": {},
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "getHealBalance()": {
                "argument": {},
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            },
            "getNow()": {
                "argument": {},
                "contract": {
                    "rate": "uint256",
                    "cap": "uint256",
                    "goal": "uint256",
                    "softCap": "uint256",
                    "softCapTime": "uint256",
                    "softCapClose": "uint256",
                    "tokenBalance": "uint256",
                    "tokenSold": "uint256",
                    "maxGasPrice": "uint256",
                    "maxGasPricePenalty": "uint256",
                    "minContribution": "uint256",
                    "whitelistDayCount": "uint8",
                    "contributorsKeys": "address[]"
                }
            }
        },
        "function_block_mapping": {
            "setMaxGas(uint256,uint256)": [
                3150,
                1021
            ],
            "claimRefundFor(address)": [
                2925,
                911
            ],
            "claimTokensFor(address[])": [
                2459,
                735
            ],
            "getSaleDayNow()": [
                2992,
                933
            ],
            "claimRefund()": [
                3127,
                999
            ],
            "extractVaultTokens(address,address)": [
                3709,
                1219
            ],
            "setRate(uint256)": [
                1418,
                273
            ],
            "claimTokenFor(address)": [
                3406,
                1109
            ],
            "claimToken()": [
                1658,
                405
            ],
            "pause()": [
                2436,
                713
            ],
            "setMinContribution(uint256)": [
                1837,
                471
            ],
            "unpause()": [
                1549,
                339
            ],
            "hasEnded()": [
                3595,
                1175
            ],
            "getHealBalance()": [
                909,
                163
            ],
            "goalReached()": [
                2255,
                647
            ],
            "transferOwnership(address)": [
                3642,
                1197
            ],
            "claimRefundsFor(address[])": [
                2302,
                669
            ],
            "getNow()": [
                3205,
                1043
            ],
            "hasStarted()": [
                1681,
                427
            ],
            "howMuchCanXContributeNow(address)": [
                3248,
                1065
            ],
            "getContributors(bool,bool)": [
                1274,
                251
            ],
            "setWhitelist(address[],address[],uint256[])": [
                995,
                207
            ],
            "setCaps(uint256,uint256,uint256,uint256)": [
                2361,
                691
            ],
            "wasSuccess()": [
                2744,
                845
            ],
            "getContributorsCount()": [
                3982,
                1285
            ],
            "finalize()": [
                1882,
                493
            ],
            "setTimes(uint256,uint256)": [
                854,
                141
            ],
            "howMuchCanIContributeNow()": [
                2035,
                559
            ],
            "getSaleDay(uint256)": [
                3335,
                1087
            ],
            "buyTokens(address)": [
                3541,
                1153
            ]
        },
        "block_CALL_mapping": {
            "block10030": [
                "vault.refund(_beneficiary)"
            ],
            "block15475_0": [
                "vault.deposit.value(weiAmount)(msg.sender)"
            ],
            "jump15814": [
                "vault.enableRefunds()",
                "vault.enableRefunds()"
            ],
            "block15177": [
                "wallet.transfer(weiAmount)"
            ],
            "block11268": [
                "ethealController.addHodlerStake(_beneficiary, tokens.mul(2))"
            ],
            "jump11426": [
                "ethealController.ethealToken()",
                "ethealController.ethealToken()"
            ],
            "jump5013_0": [
                "ethealController.ethealToken().balanceOf(address(this))",
                "ethealController.ethealToken().balanceOf(address(this))"
            ],
            "block13650": [
                "ethealController.ethealToken().transfer(ethealController.SALE(), _balance.sub(tokenBalance))"
            ],
            "block4396": [
                "msg.sender.transfer(refund)"
            ],
            "block13884": [
                "ethealController.ethealToken()"
            ],
            "jump11426_0": [
                "ethealController.ethealToken()",
                "ethealController.ethealToken()"
            ],
            "block15475": [
                "vault.deposit.value(weiAmount)(msg.sender)"
            ],
            "jump11647_1": [
                "ethealController.ethealToken().transfer(_beneficiary, tokens)",
                "ethealController.ethealToken().transfer(_beneficiary, tokens)"
            ],
            "block13437": [
                "ethealController.SALE()"
            ],
            "block11268_0": [
                "ethealController.addHodlerStake(_beneficiary, tokens.mul(2))"
            ],
            "block14104": [
                "ethealController.SALE()"
            ],
            "jump11647": [
                "ethealController.ethealToken().transfer(_beneficiary, tokens)",
                "ethealController.ethealToken().transfer(_beneficiary, tokens)"
            ],
            "jump15651": [
                "vault.close()",
                "vault.close()"
            ],
            "block11426": [
                "ethealController.ethealToken()"
            ],
            "jump5013": [
                "ethealController.ethealToken().balanceOf(address(this))",
                "ethealController.ethealToken().balanceOf(address(this))"
            ],
            "block13217": [
                "ethealController.ethealToken()"
            ],
            "jump15475": [
                "vault.deposit.value(weiAmount)(msg.sender)",
                "vault.deposit.value(weiAmount)(msg.sender)"
            ],
            "block10030_0": [
                "vault.refund(_beneficiary)"
            ],
            "block10030_1": [
                "vault.refund(_beneficiary)"
            ],
            "jump10030_0": [
                "vault.refund(_beneficiary)",
                "vault.refund(_beneficiary)"
            ],
            "jump10030_1": [
                "vault.refund(_beneficiary)",
                "vault.refund(_beneficiary)"
            ],
            "jump4396_1": [
                "msg.sender.transfer(refund)",
                "msg.sender.transfer(refund)"
            ],
            "jump4396_0": [
                "msg.sender.transfer(refund)",
                "msg.sender.transfer(refund)"
            ],
            "jump14297": [
                "ethealController.ethealToken().transfer(ethealController.SALE(), _balance)",
                "ethealController.ethealToken().transfer(ethealController.SALE(), _balance)"
            ],
            "jump13650": [
                "ethealController.ethealToken().transfer(ethealController.SALE(), _balance.sub(tokenBalance))",
                "ethealController.ethealToken().transfer(ethealController.SALE(), _balance.sub(tokenBalance))"
            ],
            "block11647_1": [
                "ethealController.ethealToken().transfer(_beneficiary, tokens)"
            ],
            "block11426_1": [
                "ethealController.ethealToken()"
            ],
            "jump10030": [
                "vault.refund(_beneficiary)",
                "vault.refund(_beneficiary)"
            ],
            "block4396_1": [
                "msg.sender.transfer(refund)"
            ],
            "jump13437": [
                "ethealController.SALE()",
                "ethealController.SALE()"
            ],
            "jump11268": [
                "ethealController.addHodlerStake(_beneficiary, tokens.mul(2))",
                "ethealController.addHodlerStake(_beneficiary, tokens.mul(2))"
            ],
            "jump14104": [
                "ethealController.SALE()",
                "ethealController.SALE()"
            ],
            "block4800": [
                "ethealController.ethealToken()"
            ],
            "block15177_0": [
                "wallet.transfer(weiAmount)"
            ],
            "jump4800": [
                "ethealController.ethealToken()",
                "ethealController.ethealToken()"
            ],
            "block7226": [
                "vault.deposited(contributorsKeys[i])"
            ],
            "jump11426_1": [
                "ethealController.ethealToken()",
                "ethealController.ethealToken()"
            ],
            "block15651": [
                "vault.close()"
            ],
            "jump15475_1": [
                "vault.deposit.value(weiAmount)(msg.sender)",
                "vault.deposit.value(weiAmount)(msg.sender)"
            ],
            "block11268_1": [
                "ethealController.addHodlerStake(_beneficiary, tokens.mul(2))"
            ],
            "jump4396": [
                "msg.sender.transfer(refund)",
                "msg.sender.transfer(refund)"
            ],
            "jump15177": [
                "wallet.transfer(weiAmount)",
                "wallet.transfer(weiAmount)"
            ],
            "block12735": [
                "vault.extractTokens(_token, _claimer)"
            ],
            "block11426_0": [
                "ethealController.ethealToken()"
            ],
            "jump7226": [
                "vault.deposited(contributorsKeys[i])",
                "vault.deposited(contributorsKeys[i])"
            ],
            "block15177_1": [
                "wallet.transfer(weiAmount)"
            ],
            "jump13884": [
                "ethealController.ethealToken()",
                "ethealController.ethealToken()"
            ],
            "block11647_0": [
                "ethealController.ethealToken().transfer(_beneficiary, tokens)"
            ],
            "block14297": [
                "ethealController.ethealToken().transfer(ethealController.SALE(), _balance)"
            ],
            "jump7549": [
                "vault.deposited(contributorsKeys[i])",
                "vault.deposited(contributorsKeys[i])"
            ],
            "block15475_1": [
                "vault.deposit.value(weiAmount)(msg.sender)"
            ],
            "jump4800_0": [
                "ethealController.ethealToken()",
                "ethealController.ethealToken()"
            ],
            "block11647": [
                "ethealController.ethealToken().transfer(_beneficiary, tokens)"
            ],
            "jump11647_0": [
                "ethealController.ethealToken().transfer(_beneficiary, tokens)",
                "ethealController.ethealToken().transfer(_beneficiary, tokens)"
            ],
            "jump13217": [
                "ethealController.ethealToken()",
                "ethealController.ethealToken()"
            ],
            "block15814": [
                "vault.enableRefunds()"
            ],
            "block7549": [
                "vault.deposited(contributorsKeys[i])"
            ],
            "block5013": [
                "ethealController.ethealToken().balanceOf(address(this))"
            ],
            "block4800_0": [
                "ethealController.ethealToken()"
            ],
            "jump11268_0": [
                "ethealController.addHodlerStake(_beneficiary, tokens.mul(2))",
                "ethealController.addHodlerStake(_beneficiary, tokens.mul(2))"
            ],
            "jump11268_1": [
                "ethealController.addHodlerStake(_beneficiary, tokens.mul(2))",
                "ethealController.addHodlerStake(_beneficiary, tokens.mul(2))"
            ],
            "block5013_0": [
                "ethealController.ethealToken().balanceOf(address(this))"
            ],
            "block4396_0": [
                "msg.sender.transfer(refund)"
            ],
            "jump15475_0": [
                "vault.deposit.value(weiAmount)(msg.sender)",
                "vault.deposit.value(weiAmount)(msg.sender)"
            ],
            "jump12735": [
                "vault.extractTokens(_token, _claimer)",
                "vault.extractTokens(_token, _claimer)"
            ],
            "jump15177_1": [
                "wallet.transfer(weiAmount)",
                "wallet.transfer(weiAmount)"
            ],
            "jump15177_0": [
                "wallet.transfer(weiAmount)",
                "wallet.transfer(weiAmount)"
            ]
        }
    }
}