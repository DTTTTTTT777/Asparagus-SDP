{
    "PresaleToken": {
        "function_list": [
            "PresaleToken(address,address)",
            "reward(address,uint256)",
            "isIcoSuccessful()",
            "isIcoOver()",
            "buyTokens(address)",
            "addAddressToList(address)",
            "burnTokens(address)",
            "balanceOf(address)",
            "setPresaleState(PresaleToken.State)",
            "returnToFunders()",
            "withdrawEther()",
            "returnFunds()",
            "returnFundsFor(address)",
            "setTokenManager(address)",
            "setCrowdsaleManager(address)",
            "fallback()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "PresaleToken(address,address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "PRICE": "uint256",
                    "HARDCAP_ETH_LIMIT": "uint256",
                    "SOFTCAP_ETH_LIMIT": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "SOFTCAP_LIMIT": "uint256",
                    "icoDeadline": "uint256",
                    "BOUNTY_LIMIT": "uint256",
                    "totalSupply": "uint256",
                    "bountySupply": "uint256",
                    "addressList": "address[]",
                    "nextInListToReturn": "uint256",
                    "transfersPerIteration": "uint256"
                }
            },
            "reward(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "PRICE": "uint256",
                    "HARDCAP_ETH_LIMIT": "uint256",
                    "SOFTCAP_ETH_LIMIT": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "SOFTCAP_LIMIT": "uint256",
                    "icoDeadline": "uint256",
                    "BOUNTY_LIMIT": "uint256",
                    "totalSupply": "uint256",
                    "bountySupply": "uint256",
                    "addressList": "address[]",
                    "nextInListToReturn": "uint256",
                    "transfersPerIteration": "uint256"
                }
            },
            "isIcoSuccessful()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "PRICE": "uint256",
                    "HARDCAP_ETH_LIMIT": "uint256",
                    "SOFTCAP_ETH_LIMIT": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "SOFTCAP_LIMIT": "uint256",
                    "icoDeadline": "uint256",
                    "BOUNTY_LIMIT": "uint256",
                    "totalSupply": "uint256",
                    "bountySupply": "uint256",
                    "addressList": "address[]",
                    "nextInListToReturn": "uint256",
                    "transfersPerIteration": "uint256"
                }
            },
            "isIcoOver()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "PRICE": "uint256",
                    "HARDCAP_ETH_LIMIT": "uint256",
                    "SOFTCAP_ETH_LIMIT": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "SOFTCAP_LIMIT": "uint256",
                    "icoDeadline": "uint256",
                    "BOUNTY_LIMIT": "uint256",
                    "totalSupply": "uint256",
                    "bountySupply": "uint256",
                    "addressList": "address[]",
                    "nextInListToReturn": "uint256",
                    "transfersPerIteration": "uint256"
                }
            },
            "buyTokens(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "PRICE": "uint256",
                    "HARDCAP_ETH_LIMIT": "uint256",
                    "SOFTCAP_ETH_LIMIT": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "SOFTCAP_LIMIT": "uint256",
                    "icoDeadline": "uint256",
                    "BOUNTY_LIMIT": "uint256",
                    "totalSupply": "uint256",
                    "bountySupply": "uint256",
                    "addressList": "address[]",
                    "nextInListToReturn": "uint256",
                    "transfersPerIteration": "uint256"
                }
            },
            "addAddressToList(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "PRICE": "uint256",
                    "HARDCAP_ETH_LIMIT": "uint256",
                    "SOFTCAP_ETH_LIMIT": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "SOFTCAP_LIMIT": "uint256",
                    "icoDeadline": "uint256",
                    "BOUNTY_LIMIT": "uint256",
                    "totalSupply": "uint256",
                    "bountySupply": "uint256",
                    "addressList": "address[]",
                    "nextInListToReturn": "uint256",
                    "transfersPerIteration": "uint256"
                }
            },
            "burnTokens(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "PRICE": "uint256",
                    "HARDCAP_ETH_LIMIT": "uint256",
                    "SOFTCAP_ETH_LIMIT": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "SOFTCAP_LIMIT": "uint256",
                    "icoDeadline": "uint256",
                    "BOUNTY_LIMIT": "uint256",
                    "totalSupply": "uint256",
                    "bountySupply": "uint256",
                    "addressList": "address[]",
                    "nextInListToReturn": "uint256",
                    "transfersPerIteration": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "PRICE": "uint256",
                    "HARDCAP_ETH_LIMIT": "uint256",
                    "SOFTCAP_ETH_LIMIT": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "SOFTCAP_LIMIT": "uint256",
                    "icoDeadline": "uint256",
                    "BOUNTY_LIMIT": "uint256",
                    "totalSupply": "uint256",
                    "bountySupply": "uint256",
                    "addressList": "address[]",
                    "nextInListToReturn": "uint256",
                    "transfersPerIteration": "uint256"
                }
            },
            "setPresaleState(PresaleToken.State)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "PRICE": "uint256",
                    "HARDCAP_ETH_LIMIT": "uint256",
                    "SOFTCAP_ETH_LIMIT": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "SOFTCAP_LIMIT": "uint256",
                    "icoDeadline": "uint256",
                    "BOUNTY_LIMIT": "uint256",
                    "totalSupply": "uint256",
                    "bountySupply": "uint256",
                    "addressList": "address[]",
                    "nextInListToReturn": "uint256",
                    "transfersPerIteration": "uint256"
                }
            },
            "returnToFunders()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "PRICE": "uint256",
                    "HARDCAP_ETH_LIMIT": "uint256",
                    "SOFTCAP_ETH_LIMIT": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "SOFTCAP_LIMIT": "uint256",
                    "icoDeadline": "uint256",
                    "BOUNTY_LIMIT": "uint256",
                    "totalSupply": "uint256",
                    "bountySupply": "uint256",
                    "addressList": "address[]",
                    "nextInListToReturn": "uint256",
                    "transfersPerIteration": "uint256"
                }
            },
            "withdrawEther()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "PRICE": "uint256",
                    "HARDCAP_ETH_LIMIT": "uint256",
                    "SOFTCAP_ETH_LIMIT": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "SOFTCAP_LIMIT": "uint256",
                    "icoDeadline": "uint256",
                    "BOUNTY_LIMIT": "uint256",
                    "totalSupply": "uint256",
                    "bountySupply": "uint256",
                    "addressList": "address[]",
                    "nextInListToReturn": "uint256",
                    "transfersPerIteration": "uint256"
                }
            },
            "returnFunds()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "PRICE": "uint256",
                    "HARDCAP_ETH_LIMIT": "uint256",
                    "SOFTCAP_ETH_LIMIT": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "SOFTCAP_LIMIT": "uint256",
                    "icoDeadline": "uint256",
                    "BOUNTY_LIMIT": "uint256",
                    "totalSupply": "uint256",
                    "bountySupply": "uint256",
                    "addressList": "address[]",
                    "nextInListToReturn": "uint256",
                    "transfersPerIteration": "uint256"
                }
            },
            "returnFundsFor(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "PRICE": "uint256",
                    "HARDCAP_ETH_LIMIT": "uint256",
                    "SOFTCAP_ETH_LIMIT": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "SOFTCAP_LIMIT": "uint256",
                    "icoDeadline": "uint256",
                    "BOUNTY_LIMIT": "uint256",
                    "totalSupply": "uint256",
                    "bountySupply": "uint256",
                    "addressList": "address[]",
                    "nextInListToReturn": "uint256",
                    "transfersPerIteration": "uint256"
                }
            },
            "setTokenManager(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "PRICE": "uint256",
                    "HARDCAP_ETH_LIMIT": "uint256",
                    "SOFTCAP_ETH_LIMIT": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "SOFTCAP_LIMIT": "uint256",
                    "icoDeadline": "uint256",
                    "BOUNTY_LIMIT": "uint256",
                    "totalSupply": "uint256",
                    "bountySupply": "uint256",
                    "addressList": "address[]",
                    "nextInListToReturn": "uint256",
                    "transfersPerIteration": "uint256"
                }
            },
            "setCrowdsaleManager(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "PRICE": "uint256",
                    "HARDCAP_ETH_LIMIT": "uint256",
                    "SOFTCAP_ETH_LIMIT": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "SOFTCAP_LIMIT": "uint256",
                    "icoDeadline": "uint256",
                    "BOUNTY_LIMIT": "uint256",
                    "totalSupply": "uint256",
                    "bountySupply": "uint256",
                    "addressList": "address[]",
                    "nextInListToReturn": "uint256",
                    "transfersPerIteration": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "PRICE": "uint256",
                    "HARDCAP_ETH_LIMIT": "uint256",
                    "SOFTCAP_ETH_LIMIT": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "SOFTCAP_LIMIT": "uint256",
                    "icoDeadline": "uint256",
                    "BOUNTY_LIMIT": "uint256",
                    "totalSupply": "uint256",
                    "bountySupply": "uint256",
                    "addressList": "address[]",
                    "nextInListToReturn": "uint256",
                    "transfersPerIteration": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "PRICE": "uint256",
                    "HARDCAP_ETH_LIMIT": "uint256",
                    "SOFTCAP_ETH_LIMIT": "uint256",
                    "TOKEN_SUPPLY_LIMIT": "uint256",
                    "SOFTCAP_LIMIT": "uint256",
                    "icoDeadline": "uint256",
                    "BOUNTY_LIMIT": "uint256",
                    "totalSupply": "uint256",
                    "bountySupply": "uint256",
                    "addressList": "address[]",
                    "nextInListToReturn": "uint256",
                    "transfersPerIteration": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "setTokenManager(address)": [
                1548,
                471
            ],
            "isIcoSuccessful()": [
                1682,
                515
            ],
            "returnFundsFor(address)": [
                1615,
                493
            ],
            "burnTokens(address)": [
                2050,
                647
            ],
            "withdrawEther()": [
                1482,
                427
            ],
            "balanceOf(address)": [
                1395,
                405
            ],
            "returnFunds()": [
                708,
                163
            ],
            "isIcoOver()": [
                618,
                119
            ],
            "setCrowdsaleManager(address)": [
                1328,
                383
            ],
            "reward(address,uint256)": [
                731,
                185
            ],
            "buyTokens(address)": [
                2399,
                757
            ]
        },
        "block_CALL_mapping": {
            "jump4841": [
                "_user.transfer(ethBalances[_user])",
                "_user.transfer(ethBalances[_user])"
            ],
            "jump4268": [
                "escrow.transfer(this.balance)",
                "escrow.transfer(this.balance)"
            ],
            "block4841": [
                "_user.transfer(ethBalances[_user])"
            ],
            "jump4841_0": [
                "_user.transfer(ethBalances[_user])",
                "_user.transfer(ethBalances[_user])"
            ],
            "block4841_0": [
                "_user.transfer(ethBalances[_user])"
            ],
            "block4268": [
                "escrow.transfer(this.balance)"
            ],
            "jump7005": [
                "currentUser.transfer(ethBalances[currentUser])",
                "currentUser.transfer(ethBalances[currentUser])"
            ],
            "block7005": [
                "currentUser.transfer(ethBalances[currentUser])"
            ]
        }
    }
}