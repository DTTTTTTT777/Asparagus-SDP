{
    "FederatedOracleBytes8": {
        "function_list": [
            "FederatedOracleBytes8(uint8,uint8)",
            "addVoter(address)",
            "submitValue(bytes8)"
        ],
        "initial_state": {
            "FederatedOracleBytes8(uint8,uint8)": {
                "argument": {
                    "m_": "uint8",
                    "n_": "uint8"
                },
                "contract": {
                    "m": "uint8",
                    "n": "uint8",
                    "finalValue": "bytes8",
                    "voterCount": "uint8"
                }
            },
            "addVoter(address)": {
                "argument": {},
                "contract": {
                    "m": "uint8",
                    "n": "uint8",
                    "finalValue": "bytes8",
                    "voterCount": "uint8"
                }
            },
            "submitValue(bytes8)": {
                "argument": {
                    "value": "bytes8"
                },
                "contract": {
                    "m": "uint8",
                    "n": "uint8",
                    "finalValue": "bytes8",
                    "voterCount": "uint8"
                }
            }
        },
        "function_block_mapping": {
            "submitValue(bytes8)": [
                531,
                185
            ],
            "addVoter(address)": [
                603,
                207
            ]
        },
        "block_CALL_mapping": {}
    },
    "ByteBracket": {
        "function_list": [
            "getBracketScore(bytes8,bytes8,uint64)",
            "getScoringMask(bytes8)",
            "pairwiseOr(uint64)",
            "popcount(uint64)"
        ],
        "initial_state": {
            "getBracketScore(bytes8,bytes8,uint64)": {
                "argument": {
                    "bracket": "bytes8",
                    "results": "bytes8",
                    "filter": "uint64"
                },
                "contract": {}
            },
            "getScoringMask(bytes8)": {
                "argument": {
                    "results": "bytes8"
                },
                "contract": {}
            },
            "pairwiseOr(uint64)": {
                "argument": {
                    "bits": "uint64"
                },
                "contract": {}
            },
            "popcount(uint64)": {
                "argument": {
                    "bits": "uint64"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "getScoringMask(bytes8)": [
                104,
                83
            ],
            "getBracketScore(bytes8,bytes8,uint64)": [
                203,
                105
            ]
        },
        "block_CALL_mapping": {}
    }
}