{
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "RelestToken": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "RelestToken()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "fallback()",
            "checkPeriod()",
            "buyTokens(address)",
            "finalize()",
            "mint(address,uint256)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "ethRaised": "uint256",
                    "minEth": "uint256",
                    "priceRate": "uint256",
                    "step1Price": "uint256",
                    "step2Price": "uint256",
                    "step3Price": "uint256",
                    "minPriceRate": "uint256",
                    "ethGoal": "uint256",
                    "startPreICOTimestamp": "uint256",
                    "endPreICOTimestamp": "uint256",
                    "startICOTimestamp": "uint256",
                    "step1End": "uint256",
                    "step2End": "uint256",
                    "step3End": "uint256",
                    "endICOTimestamp": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "ethRaised": "uint256",
                    "minEth": "uint256",
                    "priceRate": "uint256",
                    "step1Price": "uint256",
                    "step2Price": "uint256",
                    "step3Price": "uint256",
                    "minPriceRate": "uint256",
                    "ethGoal": "uint256",
                    "startPreICOTimestamp": "uint256",
                    "endPreICOTimestamp": "uint256",
                    "startICOTimestamp": "uint256",
                    "step1End": "uint256",
                    "step2End": "uint256",
                    "step3End": "uint256",
                    "endICOTimestamp": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "ethRaised": "uint256",
                    "minEth": "uint256",
                    "priceRate": "uint256",
                    "step1Price": "uint256",
                    "step2Price": "uint256",
                    "step3Price": "uint256",
                    "minPriceRate": "uint256",
                    "ethGoal": "uint256",
                    "startPreICOTimestamp": "uint256",
                    "endPreICOTimestamp": "uint256",
                    "startICOTimestamp": "uint256",
                    "step1End": "uint256",
                    "step2End": "uint256",
                    "step3End": "uint256",
                    "endICOTimestamp": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "ethRaised": "uint256",
                    "minEth": "uint256",
                    "priceRate": "uint256",
                    "step1Price": "uint256",
                    "step2Price": "uint256",
                    "step3Price": "uint256",
                    "minPriceRate": "uint256",
                    "ethGoal": "uint256",
                    "startPreICOTimestamp": "uint256",
                    "endPreICOTimestamp": "uint256",
                    "startICOTimestamp": "uint256",
                    "step1End": "uint256",
                    "step2End": "uint256",
                    "step3End": "uint256",
                    "endICOTimestamp": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "ethRaised": "uint256",
                    "minEth": "uint256",
                    "priceRate": "uint256",
                    "step1Price": "uint256",
                    "step2Price": "uint256",
                    "step3Price": "uint256",
                    "minPriceRate": "uint256",
                    "ethGoal": "uint256",
                    "startPreICOTimestamp": "uint256",
                    "endPreICOTimestamp": "uint256",
                    "startICOTimestamp": "uint256",
                    "step1End": "uint256",
                    "step2End": "uint256",
                    "step3End": "uint256",
                    "endICOTimestamp": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "ethRaised": "uint256",
                    "minEth": "uint256",
                    "priceRate": "uint256",
                    "step1Price": "uint256",
                    "step2Price": "uint256",
                    "step3Price": "uint256",
                    "minPriceRate": "uint256",
                    "ethGoal": "uint256",
                    "startPreICOTimestamp": "uint256",
                    "endPreICOTimestamp": "uint256",
                    "startICOTimestamp": "uint256",
                    "step1End": "uint256",
                    "step2End": "uint256",
                    "step3End": "uint256",
                    "endICOTimestamp": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "ethRaised": "uint256",
                    "minEth": "uint256",
                    "priceRate": "uint256",
                    "step1Price": "uint256",
                    "step2Price": "uint256",
                    "step3Price": "uint256",
                    "minPriceRate": "uint256",
                    "ethGoal": "uint256",
                    "startPreICOTimestamp": "uint256",
                    "endPreICOTimestamp": "uint256",
                    "startICOTimestamp": "uint256",
                    "step1End": "uint256",
                    "step2End": "uint256",
                    "step3End": "uint256",
                    "endICOTimestamp": "uint256"
                }
            },
            "RelestToken()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "ethRaised": "uint256",
                    "minEth": "uint256",
                    "priceRate": "uint256",
                    "step1Price": "uint256",
                    "step2Price": "uint256",
                    "step3Price": "uint256",
                    "minPriceRate": "uint256",
                    "ethGoal": "uint256",
                    "startPreICOTimestamp": "uint256",
                    "endPreICOTimestamp": "uint256",
                    "startICOTimestamp": "uint256",
                    "step1End": "uint256",
                    "step2End": "uint256",
                    "step3End": "uint256",
                    "endICOTimestamp": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "ethRaised": "uint256",
                    "minEth": "uint256",
                    "priceRate": "uint256",
                    "step1Price": "uint256",
                    "step2Price": "uint256",
                    "step3Price": "uint256",
                    "minPriceRate": "uint256",
                    "ethGoal": "uint256",
                    "startPreICOTimestamp": "uint256",
                    "endPreICOTimestamp": "uint256",
                    "startICOTimestamp": "uint256",
                    "step1End": "uint256",
                    "step2End": "uint256",
                    "step3End": "uint256",
                    "endICOTimestamp": "uint256"
                }
            },
            "checkPeriod()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "ethRaised": "uint256",
                    "minEth": "uint256",
                    "priceRate": "uint256",
                    "step1Price": "uint256",
                    "step2Price": "uint256",
                    "step3Price": "uint256",
                    "minPriceRate": "uint256",
                    "ethGoal": "uint256",
                    "startPreICOTimestamp": "uint256",
                    "endPreICOTimestamp": "uint256",
                    "startICOTimestamp": "uint256",
                    "step1End": "uint256",
                    "step2End": "uint256",
                    "step3End": "uint256",
                    "endICOTimestamp": "uint256"
                }
            },
            "buyTokens(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "ethRaised": "uint256",
                    "minEth": "uint256",
                    "priceRate": "uint256",
                    "step1Price": "uint256",
                    "step2Price": "uint256",
                    "step3Price": "uint256",
                    "minPriceRate": "uint256",
                    "ethGoal": "uint256",
                    "startPreICOTimestamp": "uint256",
                    "endPreICOTimestamp": "uint256",
                    "startICOTimestamp": "uint256",
                    "step1End": "uint256",
                    "step2End": "uint256",
                    "step3End": "uint256",
                    "endICOTimestamp": "uint256"
                }
            },
            "finalize()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "ethRaised": "uint256",
                    "minEth": "uint256",
                    "priceRate": "uint256",
                    "step1Price": "uint256",
                    "step2Price": "uint256",
                    "step3Price": "uint256",
                    "minPriceRate": "uint256",
                    "ethGoal": "uint256",
                    "startPreICOTimestamp": "uint256",
                    "endPreICOTimestamp": "uint256",
                    "startICOTimestamp": "uint256",
                    "step1End": "uint256",
                    "step2End": "uint256",
                    "step3End": "uint256",
                    "endICOTimestamp": "uint256"
                }
            },
            "mint(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "ethRaised": "uint256",
                    "minEth": "uint256",
                    "priceRate": "uint256",
                    "step1Price": "uint256",
                    "step2Price": "uint256",
                    "step3Price": "uint256",
                    "minPriceRate": "uint256",
                    "ethGoal": "uint256",
                    "startPreICOTimestamp": "uint256",
                    "endPreICOTimestamp": "uint256",
                    "startICOTimestamp": "uint256",
                    "step1End": "uint256",
                    "step2End": "uint256",
                    "step3End": "uint256",
                    "endICOTimestamp": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "checkPeriod()": [
                981,
                251
            ],
            "allowance(address,address)": [
                1935,
                581
            ],
            "transferFrom(address,address,uint256)": [
                805,
                207
            ],
            "approve(address,uint256)": [
                571,
                119
            ],
            "balanceOf(address)": [
                1246,
                361
            ],
            "transferOwnership(address)": [
                2194,
                669
            ],
            "finalize()": [
                1176,
                317
            ],
            "mint(address,uint256)": [
                1028,
                273
            ],
            "transfer(address,uint256)": [
                1748,
                515
            ],
            "buyTokens(address)": [
                2097,
                625
            ]
        },
        "block_CALL_mapping": {
            "block2691_1": [
                "wallet.transfer(msg.value)"
            ],
            "block2691_0": [
                "wallet.transfer(msg.value)"
            ],
            "jump2691_1": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ],
            "jump2691_0": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ],
            "block2691": [
                "wallet.transfer(msg.value)"
            ],
            "jump2691": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ]
        }
    }
}