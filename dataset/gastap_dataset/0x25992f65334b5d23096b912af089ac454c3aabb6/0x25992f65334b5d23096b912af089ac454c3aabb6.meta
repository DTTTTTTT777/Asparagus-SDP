{
    "SafeMath": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeDiv(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeDiv(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "DateTime": {
        "function_list": [
            "isLeapYear(uint16)",
            "leapYearsBefore(uint256)",
            "getDaysInMonth(uint8,uint16)",
            "parseTimestamp(uint256)",
            "getYear(uint256)",
            "getMonth(uint256)",
            "getDay(uint256)",
            "getHour(uint256)",
            "getMinute(uint256)",
            "getSecond(uint256)",
            "getWeekday(uint256)",
            "toTimestamp(uint16,uint8,uint8)",
            "toTimestamp(uint16,uint8,uint8,uint8)",
            "toTimestamp(uint16,uint8,uint8,uint8,uint8)",
            "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "isLeapYear(uint16)": {
                "argument": {
                    "year": "uint16"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "leapYearsBefore(uint256)": {
                "argument": {
                    "year": "uint256"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "getDaysInMonth(uint8,uint16)": {
                "argument": {
                    "month": "uint8",
                    "year": "uint16"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "parseTimestamp(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "getYear(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "getMonth(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "getDay(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "getHour(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "getMinute(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "getSecond(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "getWeekday(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "toTimestamp(uint16,uint8,uint8)": {
                "argument": {
                    "year": "uint16",
                    "month": "uint8",
                    "day": "uint8"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "toTimestamp(uint16,uint8,uint8,uint8)": {
                "argument": {
                    "year": "uint16",
                    "month": "uint8",
                    "day": "uint8",
                    "hour": "uint8"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "toTimestamp(uint16,uint8,uint8,uint8,uint8)": {
                "argument": {
                    "year": "uint16",
                    "month": "uint8",
                    "day": "uint8",
                    "hour": "uint8",
                    "minute": "uint8"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)": {
                "argument": {
                    "year": "uint16",
                    "month": "uint8",
                    "day": "uint8",
                    "hour": "uint8",
                    "minute": "uint8",
                    "second": "uint8"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                202,
                75
            ],
            "transfer(address,uint256)": [
                873,
                273
            ],
            "balanceOf(address)": [
                601,
                185
            ],
            "totalSupply()": [
                303,
                97
            ],
            "transferFrom(address,address,uint256)": [
                346,
                119
            ],
            "allowance(address,address)": [
                1061,
                317
            ]
        },
        "block_CALL_mapping": {}
    },
    "EdgeSmartToken": {
        "function_list": [
            "isLeapYear(uint16)",
            "leapYearsBefore(uint256)",
            "getDaysInMonth(uint8,uint16)",
            "parseTimestamp(uint256)",
            "getYear(uint256)",
            "getMonth(uint256)",
            "getDay(uint256)",
            "getHour(uint256)",
            "getMinute(uint256)",
            "getSecond(uint256)",
            "getWeekday(uint256)",
            "toTimestamp(uint16,uint8,uint8)",
            "toTimestamp(uint16,uint8,uint8,uint8)",
            "toTimestamp(uint16,uint8,uint8,uint8,uint8)",
            "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)",
            "safeMul(uint256,uint256)",
            "safeDiv(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "EdgeSmartToken()",
            "transferOwnership(address)",
            "decimals()",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "unapprove(address)",
            "allowance(address,address)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "isLeapYear(uint16)": {
                "argument": {
                    "year": "uint16"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "leapYearsBefore(uint256)": {
                "argument": {
                    "year": "uint256"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "getDaysInMonth(uint8,uint16)": {
                "argument": {
                    "month": "uint8",
                    "year": "uint16"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "parseTimestamp(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "getYear(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "getMonth(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "getDay(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "getHour(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "getMinute(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "getSecond(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "getWeekday(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "toTimestamp(uint16,uint8,uint8)": {
                "argument": {
                    "year": "uint16",
                    "month": "uint8",
                    "day": "uint8"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "toTimestamp(uint16,uint8,uint8,uint8)": {
                "argument": {
                    "year": "uint16",
                    "month": "uint8",
                    "day": "uint8",
                    "hour": "uint8"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "toTimestamp(uint16,uint8,uint8,uint8,uint8)": {
                "argument": {
                    "year": "uint16",
                    "month": "uint8",
                    "day": "uint8",
                    "hour": "uint8",
                    "minute": "uint8"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)": {
                "argument": {
                    "year": "uint16",
                    "month": "uint8",
                    "day": "uint8",
                    "hour": "uint8",
                    "minute": "uint8",
                    "second": "uint8"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "safeDiv(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "EdgeSmartToken()": {
                "argument": {},
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "decimals()": {
                "argument": {},
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "unapprove(address)": {
                "argument": {},
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "_decimals": "uint256",
                    "_totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                357,
                97
            ],
            "balanceOf(address)": [
                850,
                251
            ],
            "unapprove(address)": [
                1368,
                361
            ],
            "transfer(address,uint256)": [
                1081,
                295
            ],
            "totalSupply()": [
                458,
                119
            ],
            "transferFrom(address,address,uint256)": [
                501,
                141
            ],
            "transferOwnership(address)": [
                1301,
                339
            ],
            "allowance(address,address)": [
                1182,
                317
            ],
            "decimals()": [
                721,
                185
            ]
        },
        "block_CALL_mapping": {}
    },
    "EdgeICO": {
        "function_list": [
            "EdgeSmartToken()",
            "transferOwnership(address)",
            "decimals()",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "unapprove(address)",
            "allowance(address,address)",
            "isLeapYear(uint16)",
            "leapYearsBefore(uint256)",
            "getDaysInMonth(uint8,uint16)",
            "parseTimestamp(uint256)",
            "getYear(uint256)",
            "getMonth(uint256)",
            "getDay(uint256)",
            "getHour(uint256)",
            "getMinute(uint256)",
            "getSecond(uint256)",
            "getWeekday(uint256)",
            "toTimestamp(uint16,uint8,uint8)",
            "toTimestamp(uint16,uint8,uint8,uint8)",
            "toTimestamp(uint16,uint8,uint8,uint8,uint8)",
            "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)",
            "safeMul(uint256,uint256)",
            "safeDiv(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "EdgeICO()",
            "getTotalTokensSold()",
            "getPreSaleTokensSold()",
            "getIcoTokensSold()",
            "setPreSaleStatus(bool)",
            "setICOStatus(bool)",
            "setIcoEndDate(uint256)",
            "fallback()",
            "createTokens(address)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "EdgeSmartToken()": {
                "argument": {},
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "decimals()": {
                "argument": {},
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "unapprove(address)": {
                "argument": {},
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "isLeapYear(uint16)": {
                "argument": {
                    "year": "uint16"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "leapYearsBefore(uint256)": {
                "argument": {
                    "year": "uint256"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "getDaysInMonth(uint8,uint16)": {
                "argument": {
                    "month": "uint8",
                    "year": "uint16"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "parseTimestamp(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "getYear(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "getMonth(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "getDay(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "getHour(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "getMinute(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "getSecond(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "getWeekday(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "toTimestamp(uint16,uint8,uint8)": {
                "argument": {
                    "year": "uint16",
                    "month": "uint8",
                    "day": "uint8"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "toTimestamp(uint16,uint8,uint8,uint8)": {
                "argument": {
                    "year": "uint16",
                    "month": "uint8",
                    "day": "uint8",
                    "hour": "uint8"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "toTimestamp(uint16,uint8,uint8,uint8,uint8)": {
                "argument": {
                    "year": "uint16",
                    "month": "uint8",
                    "day": "uint8",
                    "hour": "uint8",
                    "minute": "uint8"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)": {
                "argument": {
                    "year": "uint16",
                    "month": "uint8",
                    "day": "uint8",
                    "hour": "uint8",
                    "minute": "uint8",
                    "second": "uint8"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "safeDiv(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "EdgeICO()": {
                "argument": {},
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "getTotalTokensSold()": {
                "argument": {},
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "getPreSaleTokensSold()": {
                "argument": {},
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "getIcoTokensSold()": {
                "argument": {},
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "setPreSaleStatus(bool)": {
                "argument": {},
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "setICOStatus(bool)": {
                "argument": {},
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "setIcoEndDate(uint256)": {
                "argument": {
                    "endDate": "uint256"
                },
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "createTokens(address)": {
                "argument": {},
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "totalCollected": "uint256",
                    "preSaleCollected": "uint256",
                    "ICOCollected": "uint256",
                    "totalTokensCap": "uint256",
                    "preSaleTokensLimit": "uint256",
                    "icoSaleSoftCap": "uint256",
                    "icoSaleHardCap": "uint256",
                    "preSaleTokenPrice": "uint256",
                    "ICOTokenPrice": "uint256",
                    "pre_ICO_end_date": "uint256",
                    "ICO_end_date": "uint256",
                    "ICO_hardcoded_expiry_date": "uint256",
                    "tokensToBuy": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "getIcoTokensSold()": [
                1662,
                418
            ],
            "balanceOf(address)": [
                1152,
                264
            ],
            "totalSupply()": [
                670,
                88
            ],
            "allowance(address,address)": [
                1802,
                484
            ],
            "transferFrom(address,address,uint256)": [
                713,
                110
            ],
            "setPreSaleStatus(bool)": [
                1105,
                242
            ],
            "approve(address,uint256)": [
                569,
                66
            ],
            "getTotalTokensSold()": [
                1284,
                308
            ],
            "getPreSaleTokensSold()": [
                1062,
                220
            ],
            "setIcoEndDate(uint256)": [
                1239,
                286
            ],
            "unapprove(address)": [
                1988,
                528
            ],
            "transferOwnership(address)": [
                1921,
                506
            ],
            "setICOStatus(bool)": [
                1471,
                352
            ],
            "createTokens(address)": [
                1705,
                440
            ],
            "transfer(address,uint256)": [
                1518,
                374
            ],
            "decimals()": [
                933,
                154
            ]
        },
        "block_CALL_mapping": {
            "block3281_1": [
                "ICOEdgeWallet.transfer(msg.value)"
            ],
            "block3281_0": [
                "ICOEdgeWallet.transfer(msg.value)"
            ],
            "jump2514_1": [
                "ICOEdgeWallet.transfer(msg.value)",
                "ICOEdgeWallet.transfer(msg.value)"
            ],
            "block2514_1": [
                "ICOEdgeWallet.transfer(msg.value)"
            ],
            "block2514_0": [
                "ICOEdgeWallet.transfer(msg.value)"
            ],
            "block2514": [
                "ICOEdgeWallet.transfer(msg.value)"
            ],
            "block3281": [
                "ICOEdgeWallet.transfer(msg.value)"
            ],
            "jump3281_0": [
                "ICOEdgeWallet.transfer(msg.value)",
                "ICOEdgeWallet.transfer(msg.value)"
            ],
            "jump3281": [
                "ICOEdgeWallet.transfer(msg.value)",
                "ICOEdgeWallet.transfer(msg.value)"
            ],
            "jump2514_0": [
                "ICOEdgeWallet.transfer(msg.value)",
                "ICOEdgeWallet.transfer(msg.value)"
            ],
            "jump2514": [
                "ICOEdgeWallet.transfer(msg.value)",
                "ICOEdgeWallet.transfer(msg.value)"
            ],
            "jump3281_1": [
                "ICOEdgeWallet.transfer(msg.value)",
                "ICOEdgeWallet.transfer(msg.value)"
            ]
        }
    }
}