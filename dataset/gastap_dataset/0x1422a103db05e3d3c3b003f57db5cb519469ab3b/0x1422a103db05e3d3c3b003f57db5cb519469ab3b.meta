{
    "Token": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "balanceOf(address)": [
                10550,
                21043
            ],
            "totalSupply()": [
                3430,
                889
            ],
            "allowance(address,address)": [
                9610,
                961
            ],
            "transferFrom(address,address,uint256)": [
                806,
                207
            ],
            "approve(address,uint256)": [
                511,
                97
            ],
            "transfer(address,uint256)": [
                1788,
                515
            ]
        },
        "block_CALL_mapping": {
            "block10171": [
                "ledger.changeUsed(msg.sender, needed)"
            ],
            "block7196": [
                "ledger.tokenTransfer(msg.sender, rentalContract, num)"
            ],
            "block10550_0": [
                "ledger.balanceOf(_seizeAddr)"
            ],
            "jump6025": [
                "rentalContract.claimBalance(msg.sender)",
                "rentalContract.claimBalance(msg.sender)"
            ],
            "block3430": [
                "ledger.totalSupply()"
            ],
            "jump8146": [
                "ledger.tokenTransfer(msg.sender, _to, _amount)",
                "ledger.tokenTransfer(msg.sender, _to, _amount)"
            ],
            "block10825": [
                "ledger.setBalance(_seizeAddr, 0)"
            ],
            "block8146": [
                "ledger.tokenTransfer(msg.sender, _to, _amount)"
            ],
            "jump6369": [
                "ledger.tokenTransfer(rentalContract, msg.sender, amount)",
                "ledger.tokenTransfer(rentalContract, msg.sender, amount)"
            ],
            "block5768": [
                "ledger.balanceOf(_addr)"
            ],
            "jump7196": [
                "ledger.tokenTransfer(msg.sender, rentalContract, num)",
                "ledger.tokenTransfer(msg.sender, rentalContract, num)"
            ],
            "block10825_0": [
                "ledger.setBalance(_seizeAddr, 0)"
            ],
            "jump9909": [
                "ledger.balanceOf(msg.sender)",
                "ledger.balanceOf(msg.sender)"
            ],
            "block2795": [
                "ledger.tokenApprove(msg.sender, _spender, _value)"
            ],
            "jump2795": [
                "ledger.tokenApprove(msg.sender, _spender, _value)",
                "ledger.tokenApprove(msg.sender, _spender, _value)"
            ],
            "jump4092": [
                "ledger.tokenTransferFrom(msg.sender, _from, _to, _amount)",
                "ledger.tokenTransferFrom(msg.sender, _from, _to, _amount)"
            ],
            "block6369": [
                "ledger.tokenTransfer(rentalContract, msg.sender, amount)"
            ],
            "jump10550_0": [
                "ledger.balanceOf(_seizeAddr)",
                "ledger.balanceOf(_seizeAddr)"
            ],
            "jump4652": [
                "ledger.balanceOf(msg.sender)",
                "ledger.balanceOf(msg.sender)"
            ],
            "block9610": [
                "ledger.allowance(_from, _to)"
            ],
            "block9909": [
                "ledger.balanceOf(msg.sender)"
            ],
            "block4092": [
                "ledger.tokenTransferFrom(msg.sender, _from, _to, _amount)"
            ],
            "block4925": [
                "ledger.setBalance(msg.sender, balance - _amount)"
            ],
            "block6889": [
                "rentalContract.offer(msg.sender, num)"
            ],
            "jump4925": [
                "ledger.setBalance(msg.sender, balance - _amount)",
                "ledger.setBalance(msg.sender, balance - _amount)"
            ],
            "jump3430": [
                "ledger.totalSupply()",
                "ledger.totalSupply()"
            ],
            "jump9068": [
                "ledger.balanceOf(_destAddr)",
                "ledger.balanceOf(_destAddr)"
            ],
            "jump10550": [
                "ledger.balanceOf(_seizeAddr)",
                "ledger.balanceOf(_seizeAddr)"
            ],
            "jump10171": [
                "ledger.changeUsed(msg.sender, needed)",
                "ledger.changeUsed(msg.sender, needed)"
            ],
            "block9068": [
                "ledger.balanceOf(_destAddr)"
            ],
            "jump9338": [
                "ledger.setBalance(_destAddr, curBalance)",
                "ledger.setBalance(_destAddr, curBalance)"
            ],
            "block4652": [
                "ledger.balanceOf(msg.sender)"
            ],
            "jump6622": [
                "ledger.balanceOf(msg.sender)",
                "ledger.balanceOf(msg.sender)"
            ],
            "jump5768": [
                "ledger.balanceOf(_addr)",
                "ledger.balanceOf(_addr)"
            ],
            "block9338": [
                "ledger.setBalance(_destAddr, curBalance)"
            ],
            "jump10825_0": [
                "ledger.setBalance(_seizeAddr, 0)",
                "ledger.setBalance(_seizeAddr, 0)"
            ],
            "block6622": [
                "ledger.balanceOf(msg.sender)"
            ],
            "block6025": [
                "rentalContract.claimBalance(msg.sender)"
            ],
            "jump6889": [
                "rentalContract.offer(msg.sender, num)",
                "rentalContract.offer(msg.sender, num)"
            ],
            "jump10825": [
                "ledger.setBalance(_seizeAddr, 0)",
                "ledger.setBalance(_seizeAddr, 0)"
            ],
            "block10550": [
                "ledger.balanceOf(_seizeAddr)"
            ],
            "jump9610": [
                "ledger.allowance(_from, _to)",
                "ledger.allowance(_from, _to)"
            ]
        }
    },
    "E4Token": {
        "function_list": [
            "checkDividends(address)",
            "withdrawDividends()",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "E4Token()",
            "applySettings(E4Token.SettingStateValue,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
            "getPayIdAndHeld(uint256)",
            "getHeld(uint256)",
            "addAccount(address)",
            "totalSupply()",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "fallback()",
            "purchaseToken()",
            "feePayment()",
            "setE4RowPartner(address)",
            "getNumTokensPurchased()",
            "getNumGames()",
            "getSpecialAddresses()",
            "updateIcoStatus()",
            "requestRefund()",
            "doPayout(uint256)",
            "withdrawDividends()",
            "setOpGas(uint256,uint256,uint256)",
            "getOpGas()",
            "checkDividends(address)",
            "icoCheckup()",
            "changeOwner(address)",
            "changeDevevoperAccont(address)",
            "changeFounder(address)",
            "changeAuxPartner(address)",
            "haraKiri()",
            "getIcoInfo()",
            "flushDividends(uint256)",
            "doDeveloperGrant()"
        ],
        "initial_state": {
            "checkDividends(address)": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "withdrawDividends()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "E4Token()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "applySettings(E4Token.SettingStateValue,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_saleStart": "uint256",
                    "_saleEnd": "uint256",
                    "_usageEnd": "uint256",
                    "_minUsage": "uint256",
                    "_tokGoal": "uint256",
                    "_maxMintable": "uint256",
                    "_threshold": "uint256",
                    "_price": "uint256",
                    "_mpp": "uint256",
                    "_mpi": "uint256"
                },
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "getPayIdAndHeld(uint256)": {
                "argument": {
                    "_tokHeld": "uint256"
                },
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "getHeld(uint256)": {
                "argument": {
                    "_tokHeld": "uint256"
                },
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "addAccount(address)": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "purchaseToken()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "feePayment()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "setE4RowPartner(address)": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "getNumTokensPurchased()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "getNumGames()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "getSpecialAddresses()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "updateIcoStatus()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "requestRefund()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "doPayout(uint256)": {
                "argument": {
                    "_numPays": "uint256"
                },
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "setOpGas(uint256,uint256,uint256)": {
                "argument": {
                    "_rm": "uint256",
                    "_rf": "uint256",
                    "_rw": "uint256"
                },
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "getOpGas()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "icoCheckup()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "changeDevevoperAccont(address)": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "changeFounder(address)": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "changeAuxPartner(address)": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "haraKiri()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "getIcoInfo()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "flushDividends(uint256)": {
                "argument": {
                    "_numPays": "uint256"
                },
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "doDeveloperGrant()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "requestRefund()": [
                2929,
                867
            ],
            "balanceOf(address)": [
                1579,
                471
            ],
            "totalSupply()": [
                772,
                119
            ],
            "getNumGames()": [
                1536,
                449
            ],
            "allowance(address,address)": [
                2952,
                889
            ],
            "purchaseToken()": [
                2810,
                779
            ],
            "feePayment()": [
                1230,
                295
            ],
            "transferFrom(address,address,uint256)": [
                988,
                207
            ],
            "approve(address,uint256)": [
                671,
                97
            ],
            "haraKiri()": [
                2863,
                823
            ],
            "withdrawDividends()": [
                1187,
                273
            ],
            "setE4RowPartner(address)": [
                1909,
                581
            ],
            "setOpGas(uint256,uint256,uint256)": [
                1240,
                317
            ],
            "getSpecialAddresses()": [
                2469,
                735
            ],
            "changeFounder(address)": [
                2211,
                647
            ],
            "changeOwner(address)": [
                2402,
                713
            ],
            "getNumTokensPurchased()": [
                2820,
                801
            ],
            "changeAuxPartner(address)": [
                2335,
                691
            ],
            "checkDividends(address)": [
                901,
                185
            ],
            "getOpGas()": [
                2278,
                669
            ],
            "icoCheckup()": [
                1666,
                493
            ],
            "getIcoInfo()": [
                1775,
                559
            ],
            "changeDevevoperAccont(address)": [
                604,
                75
            ],
            "updateIcoStatus()": [
                1164,
                251
            ],
            "flushDividends(uint256)": [
                1348,
                361
            ],
            "transfer(address,uint256)": [
                2709,
                757
            ]
        },
        "block_CALL_mapping": {
            "block7031": [
                "msg.sender.call.gas(rwGas).value(_amount)()"
            ],
            "jump7985_4": [
                "pe4.getNumGamesStarted()",
                "pe4.getNumGamesStarted()"
            ],
            "block7985": [
                "pe4.getNumGamesStarted()"
            ],
            "block8733": [
                "founderOrg.call.gas(rmGas).value(ntmp)()"
            ],
            "block8875": [
                "auxPartner.call.gas(rmGas).value(ntmp)()"
            ],
            "jump7985": [
                "pe4.getNumGamesStarted()",
                "pe4.getNumGamesStarted()"
            ],
            "jump13782": [
                "nrequester.call.gas(rfGas).value(nrefund)()",
                "nrequester.call.gas(rfGas).value(nrefund)()"
            ],
            "block7985_7": [
                "pe4.getNumGamesStarted()"
            ],
            "jump7031": [
                "msg.sender.call.gas(rwGas).value(_amount)()",
                "msg.sender.call.gas(rwGas).value(_amount)()"
            ],
            "jump10571": [
                "owner.call.gas(rfGas).value(this.balance)()",
                "owner.call.gas(rfGas).value(this.balance)()"
            ],
            "block7985_8": [
                "pe4.getNumGamesStarted()"
            ],
            "jump7985_8": [
                "pe4.getNumGamesStarted()",
                "pe4.getNumGamesStarted()"
            ],
            "jump7985_2": [
                "pe4.getNumGamesStarted()",
                "pe4.getNumGamesStarted()"
            ],
            "jump7985_3": [
                "pe4.getNumGamesStarted()",
                "pe4.getNumGamesStarted()"
            ],
            "jump7985_0": [
                "pe4.getNumGamesStarted()",
                "pe4.getNumGamesStarted()"
            ],
            "jump7985_1": [
                "pe4.getNumGamesStarted()",
                "pe4.getNumGamesStarted()"
            ],
            "jump7985_6": [
                "pe4.getNumGamesStarted()",
                "pe4.getNumGamesStarted()"
            ],
            "jump7985_7": [
                "pe4.getNumGamesStarted()",
                "pe4.getNumGamesStarted()"
            ],
            "block13782": [
                "nrequester.call.gas(rfGas).value(nrefund)()"
            ],
            "jump7985_5": [
                "pe4.getNumGamesStarted()",
                "pe4.getNumGamesStarted()"
            ],
            "block7985_4": [
                "pe4.getNumGamesStarted()"
            ],
            "block7985_5": [
                "pe4.getNumGamesStarted()"
            ],
            "block7985_6": [
                "pe4.getNumGamesStarted()"
            ],
            "block10571": [
                "owner.call.gas(rfGas).value(this.balance)()"
            ],
            "block7985_0": [
                "pe4.getNumGamesStarted()"
            ],
            "block7985_1": [
                "pe4.getNumGamesStarted()"
            ],
            "block7985_2": [
                "pe4.getNumGamesStarted()"
            ],
            "block7985_3": [
                "pe4.getNumGamesStarted()"
            ],
            "jump8875": [
                "auxPartner.call.gas(rmGas).value(ntmp)()",
                "auxPartner.call.gas(rmGas).value(ntmp)()"
            ],
            "jump8733": [
                "founderOrg.call.gas(rmGas).value(ntmp)()",
                "founderOrg.call.gas(rmGas).value(ntmp)()"
            ]
        }
    }
}