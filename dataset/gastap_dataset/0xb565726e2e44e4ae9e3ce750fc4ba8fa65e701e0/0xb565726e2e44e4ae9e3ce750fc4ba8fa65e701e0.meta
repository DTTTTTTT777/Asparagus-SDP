{
    "ERC20": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                202,
                75
            ],
            "transfer(address,uint256)": [
                873,
                273
            ],
            "balanceOf(address)": [
                601,
                185
            ],
            "transferFrom(address,address,uint256)": [
                346,
                119
            ],
            "allowance(address,address)": [
                1061,
                317
            ]
        },
        "block_CALL_mapping": {}
    },
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Controlled": {
        "function_list": [
            "Controlled()",
            "changeController(address)"
        ],
        "initial_state": {
            "Controlled()": {
                "argument": {},
                "contract": {}
            },
            "changeController(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "changeController(address)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "Crowdsale": {
        "function_list": [
            "Crowdsale(uint256,uint256,uint256,address)",
            "fallback()",
            "buyTokens(address)",
            "buyTokens(address,uint256)",
            "transferToken(address,uint256)",
            "forwardFunds(uint256)",
            "validPurchase(uint256)",
            "hasEnded()",
            "hasStarted()"
        ],
        "initial_state": {
            "Crowdsale(uint256,uint256,uint256,address)": {
                "argument": {
                    "_startTime": "uint256",
                    "_endTime": "uint256",
                    "_rate": "uint256"
                },
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "rate": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "rate": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "buyTokens(address)": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "rate": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "buyTokens(address,uint256)": {
                "argument": {
                    "weiAmount": "uint256"
                },
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "rate": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "transferToken(address,uint256)": {
                "argument": {
                    "weiAmount": "uint256"
                },
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "rate": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "forwardFunds(uint256)": {
                "argument": {
                    "weiAmount": "uint256"
                },
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "rate": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "validPurchase(uint256)": {
                "argument": {
                    "weiAmount": "uint256"
                },
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "rate": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "hasEnded()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "rate": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "hasStarted()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "rate": "uint256",
                    "weiRaised": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "hasStarted()": [
                293,
                141
            ],
            "hasEnded()": [
                524,
                229
            ],
            "buyTokens(address)": [
                470,
                207
            ]
        },
        "block_CALL_mapping": {
            "block1381_0": [
                "wallet.transfer(weiAmount)"
            ],
            "block1381_1": [
                "wallet.transfer(weiAmount)"
            ],
            "jump1381_0": [
                "wallet.transfer(weiAmount)",
                "wallet.transfer(weiAmount)"
            ],
            "jump1381_1": [
                "wallet.transfer(weiAmount)",
                "wallet.transfer(weiAmount)"
            ],
            "jump1207_1": [
                "token.generateTokens(beneficiary, tokens)",
                "token.generateTokens(beneficiary, tokens)"
            ],
            "jump1207_0": [
                "token.generateTokens(beneficiary, tokens)",
                "token.generateTokens(beneficiary, tokens)"
            ],
            "block1207_1": [
                "token.generateTokens(beneficiary, tokens)"
            ],
            "block1207_0": [
                "token.generateTokens(beneficiary, tokens)"
            ],
            "block1207": [
                "token.generateTokens(beneficiary, tokens)"
            ],
            "jump1207": [
                "token.generateTokens(beneficiary, tokens)",
                "token.generateTokens(beneficiary, tokens)"
            ],
            "jump1381": [
                "wallet.transfer(weiAmount)",
                "wallet.transfer(weiAmount)"
            ],
            "block1381": [
                "wallet.transfer(weiAmount)"
            ]
        }
    },
    "Pausable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "pause()",
            "unpause()",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "pause()": {
                "argument": {},
                "contract": {}
            },
            "unpause()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "pause()": [
                184,
                119
            ],
            "unpause()": [
                114,
                75
            ],
            "transferOwnership(address)": [
                294,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "Hodler": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "Hodler(uint256,uint256,uint256)",
            "addHodlerStake(address,uint256)",
            "setHodlerStake(address,uint256)",
            "setHodlerTime(uint256)",
            "invalidate(address)",
            "claimHodlReward()",
            "claimHodlRewardFor(address)",
            "claimHodlRewardsFor(address[])",
            "updateAndGetHodlTotalValue()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {
                    "hodlerTotalValue": "uint256",
                    "hodlerTotalCount": "uint256",
                    "hodlerTotalValue3M": "uint256",
                    "hodlerTotalValue6M": "uint256",
                    "hodlerTotalValue9M": "uint256",
                    "hodlerTimeStart": "uint256",
                    "hodlerTime3M": "uint256",
                    "hodlerTime6M": "uint256",
                    "hodlerTime9M": "uint256",
                    "TOKEN_HODL_3M": "uint256",
                    "TOKEN_HODL_6M": "uint256",
                    "TOKEN_HODL_9M": "uint256",
                    "claimedTokens": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "hodlerTotalValue": "uint256",
                    "hodlerTotalCount": "uint256",
                    "hodlerTotalValue3M": "uint256",
                    "hodlerTotalValue6M": "uint256",
                    "hodlerTotalValue9M": "uint256",
                    "hodlerTimeStart": "uint256",
                    "hodlerTime3M": "uint256",
                    "hodlerTime6M": "uint256",
                    "hodlerTime9M": "uint256",
                    "TOKEN_HODL_3M": "uint256",
                    "TOKEN_HODL_6M": "uint256",
                    "TOKEN_HODL_9M": "uint256",
                    "claimedTokens": "uint256"
                }
            },
            "Hodler(uint256,uint256,uint256)": {
                "argument": {
                    "_stake3m": "uint256",
                    "_stake6m": "uint256",
                    "_stake9m": "uint256"
                },
                "contract": {
                    "hodlerTotalValue": "uint256",
                    "hodlerTotalCount": "uint256",
                    "hodlerTotalValue3M": "uint256",
                    "hodlerTotalValue6M": "uint256",
                    "hodlerTotalValue9M": "uint256",
                    "hodlerTimeStart": "uint256",
                    "hodlerTime3M": "uint256",
                    "hodlerTime6M": "uint256",
                    "hodlerTime9M": "uint256",
                    "TOKEN_HODL_3M": "uint256",
                    "TOKEN_HODL_6M": "uint256",
                    "TOKEN_HODL_9M": "uint256",
                    "claimedTokens": "uint256"
                }
            },
            "addHodlerStake(address,uint256)": {
                "argument": {
                    "_stake": "uint256"
                },
                "contract": {
                    "hodlerTotalValue": "uint256",
                    "hodlerTotalCount": "uint256",
                    "hodlerTotalValue3M": "uint256",
                    "hodlerTotalValue6M": "uint256",
                    "hodlerTotalValue9M": "uint256",
                    "hodlerTimeStart": "uint256",
                    "hodlerTime3M": "uint256",
                    "hodlerTime6M": "uint256",
                    "hodlerTime9M": "uint256",
                    "TOKEN_HODL_3M": "uint256",
                    "TOKEN_HODL_6M": "uint256",
                    "TOKEN_HODL_9M": "uint256",
                    "claimedTokens": "uint256"
                }
            },
            "setHodlerStake(address,uint256)": {
                "argument": {
                    "_stake": "uint256"
                },
                "contract": {
                    "hodlerTotalValue": "uint256",
                    "hodlerTotalCount": "uint256",
                    "hodlerTotalValue3M": "uint256",
                    "hodlerTotalValue6M": "uint256",
                    "hodlerTotalValue9M": "uint256",
                    "hodlerTimeStart": "uint256",
                    "hodlerTime3M": "uint256",
                    "hodlerTime6M": "uint256",
                    "hodlerTime9M": "uint256",
                    "TOKEN_HODL_3M": "uint256",
                    "TOKEN_HODL_6M": "uint256",
                    "TOKEN_HODL_9M": "uint256",
                    "claimedTokens": "uint256"
                }
            },
            "setHodlerTime(uint256)": {
                "argument": {
                    "_time": "uint256"
                },
                "contract": {
                    "hodlerTotalValue": "uint256",
                    "hodlerTotalCount": "uint256",
                    "hodlerTotalValue3M": "uint256",
                    "hodlerTotalValue6M": "uint256",
                    "hodlerTotalValue9M": "uint256",
                    "hodlerTimeStart": "uint256",
                    "hodlerTime3M": "uint256",
                    "hodlerTime6M": "uint256",
                    "hodlerTime9M": "uint256",
                    "TOKEN_HODL_3M": "uint256",
                    "TOKEN_HODL_6M": "uint256",
                    "TOKEN_HODL_9M": "uint256",
                    "claimedTokens": "uint256"
                }
            },
            "invalidate(address)": {
                "argument": {},
                "contract": {
                    "hodlerTotalValue": "uint256",
                    "hodlerTotalCount": "uint256",
                    "hodlerTotalValue3M": "uint256",
                    "hodlerTotalValue6M": "uint256",
                    "hodlerTotalValue9M": "uint256",
                    "hodlerTimeStart": "uint256",
                    "hodlerTime3M": "uint256",
                    "hodlerTime6M": "uint256",
                    "hodlerTime9M": "uint256",
                    "TOKEN_HODL_3M": "uint256",
                    "TOKEN_HODL_6M": "uint256",
                    "TOKEN_HODL_9M": "uint256",
                    "claimedTokens": "uint256"
                }
            },
            "claimHodlReward()": {
                "argument": {},
                "contract": {
                    "hodlerTotalValue": "uint256",
                    "hodlerTotalCount": "uint256",
                    "hodlerTotalValue3M": "uint256",
                    "hodlerTotalValue6M": "uint256",
                    "hodlerTotalValue9M": "uint256",
                    "hodlerTimeStart": "uint256",
                    "hodlerTime3M": "uint256",
                    "hodlerTime6M": "uint256",
                    "hodlerTime9M": "uint256",
                    "TOKEN_HODL_3M": "uint256",
                    "TOKEN_HODL_6M": "uint256",
                    "TOKEN_HODL_9M": "uint256",
                    "claimedTokens": "uint256"
                }
            },
            "claimHodlRewardFor(address)": {
                "argument": {},
                "contract": {
                    "hodlerTotalValue": "uint256",
                    "hodlerTotalCount": "uint256",
                    "hodlerTotalValue3M": "uint256",
                    "hodlerTotalValue6M": "uint256",
                    "hodlerTotalValue9M": "uint256",
                    "hodlerTimeStart": "uint256",
                    "hodlerTime3M": "uint256",
                    "hodlerTime6M": "uint256",
                    "hodlerTime9M": "uint256",
                    "TOKEN_HODL_3M": "uint256",
                    "TOKEN_HODL_6M": "uint256",
                    "TOKEN_HODL_9M": "uint256",
                    "claimedTokens": "uint256"
                }
            },
            "claimHodlRewardsFor(address[])": {
                "argument": {
                    "_beneficiaries": "address[]"
                },
                "contract": {
                    "hodlerTotalValue": "uint256",
                    "hodlerTotalCount": "uint256",
                    "hodlerTotalValue3M": "uint256",
                    "hodlerTotalValue6M": "uint256",
                    "hodlerTotalValue9M": "uint256",
                    "hodlerTimeStart": "uint256",
                    "hodlerTime3M": "uint256",
                    "hodlerTime6M": "uint256",
                    "hodlerTime9M": "uint256",
                    "TOKEN_HODL_3M": "uint256",
                    "TOKEN_HODL_6M": "uint256",
                    "TOKEN_HODL_9M": "uint256",
                    "claimedTokens": "uint256"
                }
            },
            "updateAndGetHodlTotalValue()": {
                "argument": {},
                "contract": {
                    "hodlerTotalValue": "uint256",
                    "hodlerTotalCount": "uint256",
                    "hodlerTotalValue3M": "uint256",
                    "hodlerTotalValue6M": "uint256",
                    "hodlerTotalValue9M": "uint256",
                    "hodlerTimeStart": "uint256",
                    "hodlerTime3M": "uint256",
                    "hodlerTime6M": "uint256",
                    "hodlerTime9M": "uint256",
                    "TOKEN_HODL_3M": "uint256",
                    "TOKEN_HODL_6M": "uint256",
                    "TOKEN_HODL_9M": "uint256",
                    "claimedTokens": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "updateAndGetHodlTotalValue()": [
                1471,
                462
            ],
            "addHodlerStake(address,uint256)": [
                979,
                286
            ],
            "setHodlerTime(uint256)": [
                1056,
                308
            ],
            "claimHodlRewardsFor(address[])": [
                790,
                220
            ],
            "invalidate(address)": [
                614,
                132
            ],
            "transferOwnership(address)": [
                1514,
                484
            ],
            "claimHodlRewardFor(address)": [
                1230,
                396
            ],
            "claimHodlReward()": [
                767,
                198
            ]
        },
        "block_CALL_mapping": {
            "block5830_1": [
                "TokenController(owner).ethealToken().transfer(_beneficiary, _stake)"
            ],
            "block5830_0": [
                "TokenController(owner).ethealToken().transfer(_beneficiary, _stake)"
            ],
            "block5609_1": [
                "TokenController(owner).ethealToken()"
            ],
            "block5609_0": [
                "TokenController(owner).ethealToken()"
            ],
            "jump5609_1": [
                "TokenController(owner).ethealToken()",
                "TokenController(owner).ethealToken()"
            ],
            "jump5609_0": [
                "TokenController(owner).ethealToken()",
                "TokenController(owner).ethealToken()"
            ],
            "jump6588": [
                "TokenController(owner).ethealToken().balanceOf(this)",
                "TokenController(owner).ethealToken().balanceOf(this)"
            ],
            "jump6375_2": [
                "TokenController(owner).ethealToken()",
                "TokenController(owner).ethealToken()"
            ],
            "jump6375_3": [
                "TokenController(owner).ethealToken()",
                "TokenController(owner).ethealToken()"
            ],
            "jump6375_0": [
                "TokenController(owner).ethealToken()",
                "TokenController(owner).ethealToken()"
            ],
            "jump6375_1": [
                "TokenController(owner).ethealToken()",
                "TokenController(owner).ethealToken()"
            ],
            "jump5830": [
                "TokenController(owner).ethealToken().transfer(_beneficiary, _stake)",
                "TokenController(owner).ethealToken().transfer(_beneficiary, _stake)"
            ],
            "jump6588_0": [
                "TokenController(owner).ethealToken().balanceOf(this)",
                "TokenController(owner).ethealToken().balanceOf(this)"
            ],
            "jump6588_1": [
                "TokenController(owner).ethealToken().balanceOf(this)",
                "TokenController(owner).ethealToken().balanceOf(this)"
            ],
            "jump6588_2": [
                "TokenController(owner).ethealToken().balanceOf(this)",
                "TokenController(owner).ethealToken().balanceOf(this)"
            ],
            "jump6588_3": [
                "TokenController(owner).ethealToken().balanceOf(this)",
                "TokenController(owner).ethealToken().balanceOf(this)"
            ],
            "block6588_2": [
                "TokenController(owner).ethealToken().balanceOf(this)"
            ],
            "jump5830_1": [
                "TokenController(owner).ethealToken().transfer(_beneficiary, _stake)",
                "TokenController(owner).ethealToken().transfer(_beneficiary, _stake)"
            ],
            "jump5830_0": [
                "TokenController(owner).ethealToken().transfer(_beneficiary, _stake)",
                "TokenController(owner).ethealToken().transfer(_beneficiary, _stake)"
            ],
            "block6588_0": [
                "TokenController(owner).ethealToken().balanceOf(this)"
            ],
            "block6588_1": [
                "TokenController(owner).ethealToken().balanceOf(this)"
            ],
            "block6375_0": [
                "TokenController(owner).ethealToken()"
            ],
            "block6375_1": [
                "TokenController(owner).ethealToken()"
            ],
            "block6375_2": [
                "TokenController(owner).ethealToken()"
            ],
            "block6375_3": [
                "TokenController(owner).ethealToken()"
            ],
            "jump6375": [
                "TokenController(owner).ethealToken()",
                "TokenController(owner).ethealToken()"
            ],
            "block6375": [
                "TokenController(owner).ethealToken()"
            ],
            "block5830": [
                "TokenController(owner).ethealToken().transfer(_beneficiary, _stake)"
            ],
            "jump5609": [
                "TokenController(owner).ethealToken()",
                "TokenController(owner).ethealToken()"
            ],
            "block6588": [
                "TokenController(owner).ethealToken().balanceOf(this)"
            ],
            "block5609": [
                "TokenController(owner).ethealToken()"
            ],
            "block6588_3": [
                "TokenController(owner).ethealToken().balanceOf(this)"
            ]
        }
    },
    "TokenVesting": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "TokenVesting(address,uint256,uint256,uint256,bool)",
            "release(ERC20MiniMe)",
            "revoke(ERC20MiniMe)",
            "releasableAmount(ERC20MiniMe)",
            "vestedAmount(ERC20MiniMe)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {
                    "cliff": "uint256",
                    "start": "uint256",
                    "duration": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "cliff": "uint256",
                    "start": "uint256",
                    "duration": "uint256"
                }
            },
            "TokenVesting(address,uint256,uint256,uint256,bool)": {
                "argument": {
                    "_start": "uint256",
                    "_cliff": "uint256",
                    "_duration": "uint256"
                },
                "contract": {
                    "cliff": "uint256",
                    "start": "uint256",
                    "duration": "uint256"
                }
            },
            "release(ERC20MiniMe)": {
                "argument": {},
                "contract": {
                    "cliff": "uint256",
                    "start": "uint256",
                    "duration": "uint256"
                }
            },
            "revoke(ERC20MiniMe)": {
                "argument": {},
                "contract": {
                    "cliff": "uint256",
                    "start": "uint256",
                    "duration": "uint256"
                }
            },
            "releasableAmount(ERC20MiniMe)": {
                "argument": {},
                "contract": {
                    "cliff": "uint256",
                    "start": "uint256",
                    "duration": "uint256"
                }
            },
            "vestedAmount(ERC20MiniMe)": {
                "argument": {},
                "contract": {
                    "cliff": "uint256",
                    "start": "uint256",
                    "duration": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                947,
                317
            ]
        },
        "block_CALL_mapping": {
            "block1879_2": [
                "token.balanceOf(this)"
            ],
            "block2640": [
                "token.balanceOf(this)"
            ],
            "jump3017": [
                "token.transfer(owner, refund)",
                "token.transfer(owner, refund)"
            ],
            "jump1879_0": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "block1879_0": [
                "token.balanceOf(this)"
            ],
            "jump1879_2": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "block3017": [
                "token.transfer(owner, refund)"
            ],
            "block1590": [
                "token.transfer(beneficiary, unreleased)"
            ],
            "block1879": [
                "token.balanceOf(this)"
            ],
            "jump1879": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "block1879_1": [
                "token.balanceOf(this)"
            ],
            "jump1590": [
                "token.transfer(beneficiary, unreleased)",
                "token.transfer(beneficiary, unreleased)"
            ],
            "jump2640": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "jump1879_1": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ]
        }
    },
    "HasNoTokens": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "extractTokens(address,address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "extractTokens(address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "extractTokens(address,address)": [
                179,
                97
            ],
            "transferOwnership(address)": [
                278,
                119
            ]
        },
        "block_CALL_mapping": {
            "block988": [
                "token.transfer(_claimer, balance)"
            ],
            "block508": [
                "_claimer.transfer(this.balance)"
            ],
            "block764": [
                "token.balanceOf(this)"
            ],
            "jump764": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "jump988": [
                "token.transfer(_claimer, balance)",
                "token.transfer(_claimer, balance)"
            ],
            "jump508": [
                "_claimer.transfer(this.balance)",
                "_claimer.transfer(this.balance)"
            ]
        }
    }
}