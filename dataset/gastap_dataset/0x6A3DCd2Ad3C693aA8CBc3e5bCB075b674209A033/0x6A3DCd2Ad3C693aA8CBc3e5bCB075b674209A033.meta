{
    "PassDao": {
        "function_list": [
            "ActualCommitteeRoom()",
            "MetaProject()",
            "ActualShareManager()",
            "ActualTokenManager()",
            "PassDao()",
            "upgrade(address,address,address)",
            "addMetaProject(address)",
            "addProject(address)"
        ],
        "initial_state": {
            "ActualCommitteeRoom()": {
                "argument": {},
                "contract": {
                    "revisions": "PassDao.revision[]",
                    "projects": "PassDao.project[]"
                }
            },
            "MetaProject()": {
                "argument": {},
                "contract": {
                    "revisions": "PassDao.revision[]",
                    "projects": "PassDao.project[]"
                }
            },
            "ActualShareManager()": {
                "argument": {},
                "contract": {
                    "revisions": "PassDao.revision[]",
                    "projects": "PassDao.project[]"
                }
            },
            "ActualTokenManager()": {
                "argument": {},
                "contract": {
                    "revisions": "PassDao.revision[]",
                    "projects": "PassDao.project[]"
                }
            },
            "PassDao()": {
                "argument": {},
                "contract": {
                    "revisions": "PassDao.revision[]",
                    "projects": "PassDao.project[]"
                }
            },
            "upgrade(address,address,address)": {
                "argument": {},
                "contract": {
                    "revisions": "PassDao.revision[]",
                    "projects": "PassDao.project[]"
                }
            },
            "addMetaProject(address)": {
                "argument": {},
                "contract": {
                    "revisions": "PassDao.revision[]",
                    "projects": "PassDao.project[]"
                }
            },
            "addProject(address)": {
                "argument": {},
                "contract": {
                    "revisions": "PassDao.revision[]",
                    "projects": "PassDao.project[]"
                }
            }
        },
        "function_block_mapping": {
            "addProject(address)": [
                646,
                163
            ],
            "ActualTokenManager()": [
                800,
                207
            ],
            "ActualCommitteeRoom()": [
                887,
                229
            ],
            "upgrade(address,address,address)": [
                974,
                251
            ],
            "MetaProject()": [
                559,
                141
            ],
            "ActualShareManager()": [
                713,
                185
            ],
            "addMetaProject(address)": [
                158,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "PassTokenManager": {
        "function_list": [
            "Client()",
            "totalSupply()",
            "balanceOf(address)",
            "Transferable()",
            "allowance(address,address)",
            "FundedAmount(uint256)",
            "AmountToFund(uint256)",
            "priceMultiplier(uint256)",
            "priceDivisor(uint256,uint256)",
            "actualPriceDivisor(uint256)",
            "TokenAmount(uint256,uint256,uint256)",
            "weiAmount(uint256,uint256,uint256)",
            "TokenPriceInWei(uint256,uint256)",
            "LastProposalID()",
            "numberOfHolders()",
            "HolderAddress(uint256)",
            "initialTokenSupply(address,uint256,bool)",
            "cloneTokens(uint256,uint256)",
            "addHolder(address)",
            "createTokens(address,uint256)",
            "rewardTokensForClient(address,uint256)",
            "setFundingRules(address,uint256,uint256,uint256,uint256,uint256)",
            "sale(uint256,address,uint256,uint256,bool)",
            "closeFunding(uint256)",
            "sendPendingAmounts(uint256,uint256,address)",
            "withdrawPendingAmounts()",
            "setFundingStartTime(uint256,uint256)",
            "setFundingFueled(uint256)",
            "ableTransfer()",
            "disableTransfer()",
            "blockTransfer(address,uint256)",
            "transferFromTo(address,address,uint256)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "Client()",
            "totalSupply()",
            "balanceOf(address)",
            "Transferable()",
            "allowance(address,address)",
            "FundedAmount(uint256)",
            "AmountToFund(uint256)",
            "priceMultiplier(uint256)",
            "priceDivisor(uint256,uint256)",
            "actualPriceDivisor(uint256)",
            "TokenAmount(uint256,uint256,uint256)",
            "weiAmount(uint256,uint256,uint256)",
            "TokenPriceInWei(uint256,uint256)",
            "LastProposalID()",
            "numberOfHolders()",
            "HolderAddress(uint256)",
            "PassTokenManager(PassDao,address,string,string,uint8,bool,bool,uint256,uint256)",
            "initialTokenSupply(address,uint256,bool)",
            "cloneTokens(uint256,uint256)",
            "addHolder(address)",
            "createTokens(address,uint256)",
            "rewardTokensForClient(address,uint256)",
            "setFundingRules(address,uint256,uint256,uint256,uint256,uint256)",
            "sale(uint256,address,uint256,uint256,bool)",
            "closeFunding(uint256)",
            "sendPendingAmounts(uint256,uint256,address)",
            "withdrawPendingAmounts()",
            "setFundingStartTime(uint256,uint256)",
            "setFundingFueled(uint256)",
            "ableTransfer()",
            "disableTransfer()",
            "blockTransfer(address,uint256)",
            "transferFromTo(address,address,uint256)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "Client()": {
                "argument": {},
                "contract": {}
            },
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "Transferable()": {
                "argument": {},
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "FundedAmount(uint256)": {
                "argument": {
                    "_proposalID": "uint256"
                },
                "contract": {}
            },
            "AmountToFund(uint256)": {
                "argument": {
                    "_proposalID": "uint256"
                },
                "contract": {}
            },
            "priceMultiplier(uint256)": {
                "argument": {
                    "_proposalID": "uint256"
                },
                "contract": {}
            },
            "priceDivisor(uint256,uint256)": {
                "argument": {
                    "_proposalID": "uint256",
                    "_saleDate": "uint256"
                },
                "contract": {}
            },
            "actualPriceDivisor(uint256)": {
                "argument": {
                    "_proposalID": "uint256"
                },
                "contract": {}
            },
            "TokenAmount(uint256,uint256,uint256)": {
                "argument": {
                    "_weiAmount": "uint256",
                    "_priceMultiplier": "uint256",
                    "_priceDivisor": "uint256"
                },
                "contract": {}
            },
            "weiAmount(uint256,uint256,uint256)": {
                "argument": {
                    "_tokenAmount": "uint256",
                    "_priceMultiplier": "uint256",
                    "_priceDivisor": "uint256"
                },
                "contract": {}
            },
            "TokenPriceInWei(uint256,uint256)": {
                "argument": {
                    "_tokenAmount": "uint256",
                    "_proposalID": "uint256"
                },
                "contract": {}
            },
            "LastProposalID()": {
                "argument": {},
                "contract": {}
            },
            "numberOfHolders()": {
                "argument": {},
                "contract": {}
            },
            "HolderAddress(uint256)": {
                "argument": {
                    "_index": "uint256"
                },
                "contract": {}
            },
            "initialTokenSupply(address,uint256,bool)": {
                "argument": {
                    "_quantity": "uint256"
                },
                "contract": {}
            },
            "cloneTokens(uint256,uint256)": {
                "argument": {
                    "_from": "uint256",
                    "_to": "uint256"
                },
                "contract": {}
            },
            "addHolder(address)": {
                "argument": {},
                "contract": {}
            },
            "createTokens(address,uint256)": {
                "argument": {
                    "_tokenAmount": "uint256"
                },
                "contract": {}
            },
            "rewardTokensForClient(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "setFundingRules(address,uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_initialPriceMultiplier": "uint256",
                    "_amountToFund": "uint256",
                    "_minutesFundingPeriod": "uint256",
                    "_inflationRate": "uint256",
                    "_proposalID": "uint256"
                },
                "contract": {}
            },
            "sale(uint256,address,uint256,uint256,bool)": {
                "argument": {
                    "_proposalID": "uint256",
                    "_amount": "uint256",
                    "_saleDate": "uint256"
                },
                "contract": {}
            },
            "closeFunding(uint256)": {
                "argument": {
                    "_proposalID": "uint256"
                },
                "contract": {}
            },
            "sendPendingAmounts(uint256,uint256,address)": {
                "argument": {
                    "_from": "uint256",
                    "_to": "uint256"
                },
                "contract": {}
            },
            "withdrawPendingAmounts()": {
                "argument": {},
                "contract": {}
            },
            "setFundingStartTime(uint256,uint256)": {
                "argument": {
                    "_proposalID": "uint256",
                    "_startTime": "uint256"
                },
                "contract": {}
            },
            "setFundingFueled(uint256)": {
                "argument": {
                    "_proposalID": "uint256"
                },
                "contract": {}
            },
            "ableTransfer()": {
                "argument": {},
                "contract": {}
            },
            "disableTransfer()": {
                "argument": {},
                "contract": {}
            },
            "blockTransfer(address,uint256)": {
                "argument": {
                    "_deadLine": "uint256"
                },
                "contract": {}
            },
            "transferFromTo(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "PassTokenManager(PassDao,address,string,string,uint8,bool,bool,uint256,uint256)": {
                "argument": {
                    "_tokenName": "string",
                    "_tokenSymbol": "string",
                    "_tokenDecimals": "uint8",
                    "_initialPriceMultiplier": "uint256",
                    "_inflationRate": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "HolderAddress(uint256)": [
                2628,
                691
            ],
            "AmountToFund(uint256)": [
                2812,
                735
            ],
            "cloneTokens(uint256,uint256)": [
                834,
                163
            ],
            "totalSupply()": [
                913,
                185
            ],
            "Transferable()": [
                956,
                207
            ],
            "allowance(address,address)": [
                3122,
                801
            ],
            "transferFrom(address,address,uint256)": [
                1026,
                251
            ],
            "sendPendingAmounts(uint256,uint256,address)": [
                1833,
                471
            ],
            "TokenPriceInWei(uint256,uint256)": [
                2737,
                713
            ],
            "approve(address,uint256)": [
                620,
                119
            ],
            "initialTokenSupply(address,uint256,bool)": [
                721,
                141
            ],
            "numberOfHolders()": [
                3881,
                894
            ],
            "setFundingStartTime(uint256,uint256)": [
                1778,
                449
            ],
            "setFundingRules(address,uint256,uint256,uint256,uint256,uint256)": [
                1393,
                361
            ],
            "setFundingFueled(uint256)": [
                1159,
                273
            ],
            "LastProposalID()": [
                1350,
                339
            ],
            "FundedAmount(uint256)": [
                1944,
                493
            ],
            "disableTransfer()": [
                2605,
                669
            ],
            "ableTransfer()": [
                1003,
                229
            ],
            "balanceOf(address)": [
                2056,
                537
            ],
            "rewardTokensForClient(address,uint256)": [
                1253,
                317
            ],
            "withdrawPendingAmounts()": [
                2009,
                515
            ],
            "blockTransfer(address,uint256)": [
                1510,
                383
            ],
            "Client()": [
                2273,
                603
            ],
            "transfer(address,uint256)": [
                2504,
                647
            ]
        },
        "block_CALL_mapping": {
            "block7673_0": [
                "_buyer.send(_amount)"
            ],
            "jump8128_5": [
                "passDao.ActualCommitteeRoom()",
                "passDao.ActualCommitteeRoom()"
            ],
            "jump8128_0": [
                "passDao.ActualCommitteeRoom()",
                "passDao.ActualCommitteeRoom()"
            ],
            "block8128": [
                "passDao.ActualCommitteeRoom()"
            ],
            "jump8128_2": [
                "passDao.ActualCommitteeRoom()",
                "passDao.ActualCommitteeRoom()"
            ],
            "jump8128_3": [
                "passDao.ActualCommitteeRoom()",
                "passDao.ActualCommitteeRoom()"
            ],
            "jump7673_0": [
                "_buyer.send(_amount)",
                "_buyer.send(_amount)"
            ],
            "jump4305": [
                "_clonedFrom.balanceOf(_holder)",
                "_clonedFrom.balanceOf(_holder)"
            ],
            "block3881": [
                "_clonedFrom.numberOfHolders()"
            ],
            "jump8128": [
                "passDao.ActualCommitteeRoom()",
                "passDao.ActualCommitteeRoom()"
            ],
            "block8128_2": [
                "passDao.ActualCommitteeRoom()"
            ],
            "block8128_3": [
                "passDao.ActualCommitteeRoom()"
            ],
            "block8128_0": [
                "passDao.ActualCommitteeRoom()"
            ],
            "block8128_1": [
                "passDao.ActualCommitteeRoom()"
            ],
            "block8128_4": [
                "passDao.ActualCommitteeRoom()"
            ],
            "block8128_5": [
                "passDao.ActualCommitteeRoom()"
            ],
            "jump8128_4": [
                "passDao.ActualCommitteeRoom()",
                "passDao.ActualCommitteeRoom()"
            ],
            "block7673": [
                "_buyer.send(_amount)"
            ],
            "jump3881": [
                "_clonedFrom.numberOfHolders()",
                "_clonedFrom.numberOfHolders()"
            ],
            "jump7673": [
                "_buyer.send(_amount)",
                "_buyer.send(_amount)"
            ],
            "block4305": [
                "_clonedFrom.balanceOf(_holder)"
            ],
            "jump4089": [
                "_clonedFrom.HolderAddress(i)",
                "_clonedFrom.HolderAddress(i)"
            ],
            "block4089": [
                "_clonedFrom.HolderAddress(i)"
            ],
            "jump8128_1": [
                "passDao.ActualCommitteeRoom()",
                "passDao.ActualCommitteeRoom()"
            ]
        }
    },
    "PassManager": {
        "function_list": [
            "Client()",
            "totalSupply()",
            "balanceOf(address)",
            "Transferable()",
            "allowance(address,address)",
            "FundedAmount(uint256)",
            "AmountToFund(uint256)",
            "priceMultiplier(uint256)",
            "priceDivisor(uint256,uint256)",
            "actualPriceDivisor(uint256)",
            "TokenAmount(uint256,uint256,uint256)",
            "weiAmount(uint256,uint256,uint256)",
            "TokenPriceInWei(uint256,uint256)",
            "LastProposalID()",
            "numberOfHolders()",
            "HolderAddress(uint256)",
            "PassTokenManager(PassDao,address,string,string,uint8,bool,bool,uint256,uint256)",
            "initialTokenSupply(address,uint256,bool)",
            "cloneTokens(uint256,uint256)",
            "addHolder(address)",
            "createTokens(address,uint256)",
            "rewardTokensForClient(address,uint256)",
            "setFundingRules(address,uint256,uint256,uint256,uint256,uint256)",
            "sale(uint256,address,uint256,uint256,bool)",
            "closeFunding(uint256)",
            "sendPendingAmounts(uint256,uint256,address)",
            "withdrawPendingAmounts()",
            "setFundingStartTime(uint256,uint256)",
            "setFundingFueled(uint256)",
            "ableTransfer()",
            "disableTransfer()",
            "blockTransfer(address,uint256)",
            "transferFromTo(address,address,uint256)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "Client()",
            "totalSupply()",
            "balanceOf(address)",
            "Transferable()",
            "allowance(address,address)",
            "FundedAmount(uint256)",
            "AmountToFund(uint256)",
            "priceMultiplier(uint256)",
            "priceDivisor(uint256,uint256)",
            "actualPriceDivisor(uint256)",
            "TokenAmount(uint256,uint256,uint256)",
            "weiAmount(uint256,uint256,uint256)",
            "TokenPriceInWei(uint256,uint256)",
            "LastProposalID()",
            "numberOfHolders()",
            "HolderAddress(uint256)",
            "initialTokenSupply(address,uint256,bool)",
            "cloneTokens(uint256,uint256)",
            "addHolder(address)",
            "createTokens(address,uint256)",
            "rewardTokensForClient(address,uint256)",
            "setFundingRules(address,uint256,uint256,uint256,uint256,uint256)",
            "sale(uint256,address,uint256,uint256,bool)",
            "closeFunding(uint256)",
            "sendPendingAmounts(uint256,uint256,address)",
            "withdrawPendingAmounts()",
            "setFundingStartTime(uint256,uint256)",
            "setFundingFueled(uint256)",
            "ableTransfer()",
            "disableTransfer()",
            "blockTransfer(address,uint256)",
            "transferFromTo(address,address,uint256)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "PassManager(PassDao,address,string,string,uint8,bool,bool,uint256,uint256)",
            "fallback()",
            "sendTo(address,uint256)",
            "buyTokensFor(uint256,address,uint256,bool)",
            "buyTokensForProposal(uint256,address)",
            "buyTokenFromModerator(uint256,address,uint256,bool)",
            "addOrder(address,uint256)",
            "removeOrder(uint256)",
            "buyTokens()",
            "sellTokens(uint256,uint256,uint256)",
            "removeOrders(uint256,uint256)"
        ],
        "initial_state": {
            "Client()": {
                "argument": {},
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "Transferable()": {
                "argument": {},
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "FundedAmount(uint256)": {
                "argument": {
                    "_proposalID": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "AmountToFund(uint256)": {
                "argument": {
                    "_proposalID": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "priceMultiplier(uint256)": {
                "argument": {
                    "_proposalID": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "priceDivisor(uint256,uint256)": {
                "argument": {
                    "_proposalID": "uint256",
                    "_saleDate": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "actualPriceDivisor(uint256)": {
                "argument": {
                    "_proposalID": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "TokenAmount(uint256,uint256,uint256)": {
                "argument": {
                    "_weiAmount": "uint256",
                    "_priceMultiplier": "uint256",
                    "_priceDivisor": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "weiAmount(uint256,uint256,uint256)": {
                "argument": {
                    "_tokenAmount": "uint256",
                    "_priceMultiplier": "uint256",
                    "_priceDivisor": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "TokenPriceInWei(uint256,uint256)": {
                "argument": {
                    "_tokenAmount": "uint256",
                    "_proposalID": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "LastProposalID()": {
                "argument": {},
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "numberOfHolders()": {
                "argument": {},
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "HolderAddress(uint256)": {
                "argument": {
                    "_index": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "PassTokenManager(PassDao,address,string,string,uint8,bool,bool,uint256,uint256)": {
                "argument": {
                    "_tokenName": "string",
                    "_tokenSymbol": "string",
                    "_tokenDecimals": "uint8",
                    "_initialPriceMultiplier": "uint256",
                    "_inflationRate": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "initialTokenSupply(address,uint256,bool)": {
                "argument": {
                    "_quantity": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "cloneTokens(uint256,uint256)": {
                "argument": {
                    "_from": "uint256",
                    "_to": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "addHolder(address)": {
                "argument": {},
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "createTokens(address,uint256)": {
                "argument": {
                    "_tokenAmount": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "rewardTokensForClient(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "setFundingRules(address,uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_initialPriceMultiplier": "uint256",
                    "_amountToFund": "uint256",
                    "_minutesFundingPeriod": "uint256",
                    "_inflationRate": "uint256",
                    "_proposalID": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "sale(uint256,address,uint256,uint256,bool)": {
                "argument": {
                    "_proposalID": "uint256",
                    "_amount": "uint256",
                    "_saleDate": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "closeFunding(uint256)": {
                "argument": {
                    "_proposalID": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "sendPendingAmounts(uint256,uint256,address)": {
                "argument": {
                    "_from": "uint256",
                    "_to": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "withdrawPendingAmounts()": {
                "argument": {},
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "setFundingStartTime(uint256,uint256)": {
                "argument": {
                    "_proposalID": "uint256",
                    "_startTime": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "setFundingFueled(uint256)": {
                "argument": {
                    "_proposalID": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "ableTransfer()": {
                "argument": {},
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "disableTransfer()": {
                "argument": {},
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "blockTransfer(address,uint256)": {
                "argument": {
                    "_deadLine": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "transferFromTo(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "PassManager(PassDao,address,string,string,uint8,bool,bool,uint256,uint256)": {
                "argument": {
                    "_tokenName": "string",
                    "_tokenSymbol": "string",
                    "_tokenDecimals": "uint8",
                    "_initialPriceMultiplier": "uint256",
                    "_inflationRate": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "sendTo(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "buyTokensFor(uint256,address,uint256,bool)": {
                "argument": {
                    "_proposalID": "uint256",
                    "_date": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "buyTokensForProposal(uint256,address)": {
                "argument": {
                    "_proposalID": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "buyTokenFromModerator(uint256,address,uint256,bool)": {
                "argument": {
                    "_proposalID": "uint256",
                    "_date": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "addOrder(address,uint256)": {
                "argument": {
                    "_weiGiven": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "removeOrder(uint256)": {
                "argument": {
                    "_order": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "buyTokens()": {
                "argument": {},
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "sellTokens(uint256,uint256,uint256)": {
                "argument": {
                    "_tokenAmount": "uint256",
                    "_from": "uint256",
                    "_to": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            },
            "removeOrders(uint256,uint256)": {
                "argument": {
                    "_from": "uint256",
                    "_to": "uint256"
                },
                "contract": {
                    "orders": "PassManager.order[]",
                    "numberOfOrders": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "HolderAddress(uint256)": [
                3306,
                748
            ],
            "AmountToFund(uint256)": [
                3490,
                792
            ],
            "cloneTokens(uint256,uint256)": [
                1021,
                110
            ],
            "totalSupply()": [
                1100,
                132
            ],
            "removeOrders(uint256,uint256)": [
                2655,
                594
            ],
            "Transferable()": [
                1143,
                154
            ],
            "allowance(address,address)": [
                3834,
                880
            ],
            "transferFrom(address,address,uint256)": [
                1213,
                198
            ],
            "sendPendingAmounts(uint256,uint256,address)": [
                2130,
                440
            ],
            "buyTokenFromModerator(uint256,address,uint256,bool)": [
                1774,
                352
            ],
            "approve(address,uint256)": [
                807,
                66
            ],
            "initialTokenSupply(address,uint256,bool)": [
                908,
                88
            ],
            "numberOfHolders()": [
                4741,
                894
            ],
            "setFundingStartTime(uint256,uint256)": [
                2075,
                418
            ],
            "setFundingRules(address,uint256,uint256,uint256,uint256,uint256)": [
                1580,
                308
            ],
            "setFundingFueled(uint256)": [
                1346,
                220
            ],
            "LastProposalID()": [
                1537,
                286
            ],
            "FundedAmount(uint256)": [
                2241,
                462
            ],
            "disableTransfer()": [
                3283,
                726
            ],
            "sellTokens(uint256,uint256,uint256)": [
                2353,
                506
            ],
            "sendTo(address,uint256)": [
                2965,
                660
            ],
            "ableTransfer()": [
                1190,
                176
            ],
            "balanceOf(address)": [
                2438,
                528
            ],
            "rewardTokensForClient(address,uint256)": [
                1440,
                264
            ],
            "withdrawPendingAmounts()": [
                2306,
                484
            ],
            "blockTransfer(address,uint256)": [
                1697,
                330
            ],
            "TokenPriceInWei(uint256,uint256)": [
                3415,
                770
            ],
            "Client()": [
                2734,
                616
            ],
            "transfer(address,uint256)": [
                3182,
                704
            ],
            "buyTokens()": [
                3555,
                814
            ]
        },
        "block_CALL_mapping": {
            "block10035": [
                "msg.sender.send(_totalAmount)"
            ],
            "block10247_4": [
                "passDao.ActualCommitteeRoom()"
            ],
            "jump4741": [
                "_clonedFrom.numberOfHolders()",
                "_clonedFrom.numberOfHolders()"
            ],
            "jump5165": [
                "_clonedFrom.balanceOf(_holder)",
                "_clonedFrom.balanceOf(_holder)"
            ],
            "block10247_0": [
                "passDao.ActualCommitteeRoom()"
            ],
            "block10247_1": [
                "passDao.ActualCommitteeRoom()"
            ],
            "block10247_2": [
                "passDao.ActualCommitteeRoom()"
            ],
            "block10247_3": [
                "passDao.ActualCommitteeRoom()"
            ],
            "block4741": [
                "_clonedFrom.numberOfHolders()"
            ],
            "block10247_5": [
                "passDao.ActualCommitteeRoom()"
            ],
            "block10247_6": [
                "passDao.ActualCommitteeRoom()"
            ],
            "block4949": [
                "_clonedFrom.HolderAddress(i)"
            ],
            "jump4949": [
                "_clonedFrom.HolderAddress(i)",
                "_clonedFrom.HolderAddress(i)"
            ],
            "jump10035": [
                "msg.sender.send(_totalAmount)",
                "msg.sender.send(_totalAmount)"
            ],
            "block5165": [
                "_clonedFrom.balanceOf(_holder)"
            ],
            "jump10247_2": [
                "passDao.ActualCommitteeRoom()",
                "passDao.ActualCommitteeRoom()"
            ],
            "jump10247_3": [
                "passDao.ActualCommitteeRoom()",
                "passDao.ActualCommitteeRoom()"
            ],
            "jump10247_0": [
                "passDao.ActualCommitteeRoom()",
                "passDao.ActualCommitteeRoom()"
            ],
            "jump10247_1": [
                "passDao.ActualCommitteeRoom()",
                "passDao.ActualCommitteeRoom()"
            ],
            "jump10247_6": [
                "passDao.ActualCommitteeRoom()",
                "passDao.ActualCommitteeRoom()"
            ],
            "jump10247_4": [
                "passDao.ActualCommitteeRoom()",
                "passDao.ActualCommitteeRoom()"
            ],
            "jump10247_5": [
                "passDao.ActualCommitteeRoom()",
                "passDao.ActualCommitteeRoom()"
            ],
            "block10247": [
                "passDao.ActualCommitteeRoom()"
            ],
            "block9614": [
                "msg.sender.send(_totalAmount)"
            ],
            "jump10247": [
                "passDao.ActualCommitteeRoom()",
                "passDao.ActualCommitteeRoom()"
            ],
            "jump10536": [
                "_recipient.send(_amount)",
                "_recipient.send(_amount)"
            ],
            "block8669_0": [
                "_buyer.send(_amount)"
            ],
            "jump8669_0": [
                "_buyer.send(_amount)",
                "_buyer.send(_amount)"
            ],
            "block8669": [
                "_buyer.send(_amount)"
            ],
            "block10536": [
                "_recipient.send(_amount)"
            ],
            "jump9614": [
                "msg.sender.send(_totalAmount)",
                "msg.sender.send(_totalAmount)"
            ],
            "jump8669": [
                "_buyer.send(_amount)",
                "_buyer.send(_amount)"
            ]
        }
    },
    "PassProject": {
        "function_list": [
            "Client()",
            "numberOfOrders()",
            "ProjectManager()",
            "numberOfResolutions()",
            "PassProject(PassDao,string,string,bytes32)",
            "addOrder(address,uint256,uint256,uint256)",
            "cloneOrder(address,uint256,uint256,uint256)",
            "setProjectManager(address)",
            "updateDescription(string,bytes32)",
            "newOrder(address,uint256,uint256)",
            "newResolution(string,string)"
        ],
        "initial_state": {
            "Client()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "description": "string",
                    "hashOfTheDocument": "bytes32",
                    "orders": "PassProject.order[]",
                    "totalAmountOfOrders": "uint256",
                    "resolutions": "PassProject.resolution[]"
                }
            },
            "numberOfOrders()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "description": "string",
                    "hashOfTheDocument": "bytes32",
                    "orders": "PassProject.order[]",
                    "totalAmountOfOrders": "uint256",
                    "resolutions": "PassProject.resolution[]"
                }
            },
            "ProjectManager()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "description": "string",
                    "hashOfTheDocument": "bytes32",
                    "orders": "PassProject.order[]",
                    "totalAmountOfOrders": "uint256",
                    "resolutions": "PassProject.resolution[]"
                }
            },
            "numberOfResolutions()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "description": "string",
                    "hashOfTheDocument": "bytes32",
                    "orders": "PassProject.order[]",
                    "totalAmountOfOrders": "uint256",
                    "resolutions": "PassProject.resolution[]"
                }
            },
            "PassProject(PassDao,string,string,bytes32)": {
                "argument": {
                    "_name": "string",
                    "_description": "string",
                    "_hashOfTheDocument": "bytes32"
                },
                "contract": {
                    "name": "string",
                    "description": "string",
                    "hashOfTheDocument": "bytes32",
                    "orders": "PassProject.order[]",
                    "totalAmountOfOrders": "uint256",
                    "resolutions": "PassProject.resolution[]"
                }
            },
            "addOrder(address,uint256,uint256,uint256)": {
                "argument": {
                    "_contractorProposalID": "uint256",
                    "_amount": "uint256",
                    "_orderDate": "uint256"
                },
                "contract": {
                    "name": "string",
                    "description": "string",
                    "hashOfTheDocument": "bytes32",
                    "orders": "PassProject.order[]",
                    "totalAmountOfOrders": "uint256",
                    "resolutions": "PassProject.resolution[]"
                }
            },
            "cloneOrder(address,uint256,uint256,uint256)": {
                "argument": {
                    "_contractorProposalID": "uint256",
                    "_orderAmount": "uint256",
                    "_lastOrderDate": "uint256"
                },
                "contract": {
                    "name": "string",
                    "description": "string",
                    "hashOfTheDocument": "bytes32",
                    "orders": "PassProject.order[]",
                    "totalAmountOfOrders": "uint256",
                    "resolutions": "PassProject.resolution[]"
                }
            },
            "setProjectManager(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "description": "string",
                    "hashOfTheDocument": "bytes32",
                    "orders": "PassProject.order[]",
                    "totalAmountOfOrders": "uint256",
                    "resolutions": "PassProject.resolution[]"
                }
            },
            "updateDescription(string,bytes32)": {
                "argument": {
                    "_projectDescription": "string",
                    "_hashOfTheDocument": "bytes32"
                },
                "contract": {
                    "name": "string",
                    "description": "string",
                    "hashOfTheDocument": "bytes32",
                    "orders": "PassProject.order[]",
                    "totalAmountOfOrders": "uint256",
                    "resolutions": "PassProject.resolution[]"
                }
            },
            "newOrder(address,uint256,uint256)": {
                "argument": {
                    "_contractorProposalID": "uint256",
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "description": "string",
                    "hashOfTheDocument": "bytes32",
                    "orders": "PassProject.order[]",
                    "totalAmountOfOrders": "uint256",
                    "resolutions": "PassProject.resolution[]"
                }
            },
            "newResolution(string,string)": {
                "argument": {
                    "_name": "string",
                    "_description": "string"
                },
                "contract": {
                    "name": "string",
                    "description": "string",
                    "hashOfTheDocument": "bytes32",
                    "orders": "PassProject.order[]",
                    "totalAmountOfOrders": "uint256",
                    "resolutions": "PassProject.resolution[]"
                }
            }
        },
        "function_block_mapping": {
            "Client()": [
                844,
                229
            ],
            "ProjectManager()": [
                1342,
                295
            ],
            "numberOfOrders()": [
                1548,
                339
            ],
            "newOrder(address,uint256,uint256)": [
                1591,
                361
            ],
            "updateDescription(string,bytes32)": [
                1429,
                317
            ],
            "numberOfResolutions()": [
                379,
                97
            ],
            "newResolution(string,string)": [
                1678,
                383
            ],
            "setProjectManager(address)": [
                1853,
                405
            ],
            "cloneOrder(address,uint256,uint256,uint256)": [
                704,
                185
            ]
        },
        "block_CALL_mapping": {
            "jump2549_1": [
                "passDao.ActualCommitteeRoom()",
                "passDao.ActualCommitteeRoom()"
            ],
            "block2549_1": [
                "passDao.ActualCommitteeRoom()"
            ],
            "block2549_0": [
                "passDao.ActualCommitteeRoom()"
            ],
            "jump2549": [
                "passDao.ActualCommitteeRoom()",
                "passDao.ActualCommitteeRoom()"
            ],
            "block2549": [
                "passDao.ActualCommitteeRoom()"
            ],
            "jump2549_0": [
                "passDao.ActualCommitteeRoom()",
                "passDao.ActualCommitteeRoom()"
            ]
        }
    },
    "PassContractor": {
        "function_list": [
            "Client()",
            "Project()",
            "proposalChecked(address,uint256,uint256)",
            "numberOfProposals()",
            "PassContractor(address,PassProject,address,bool)",
            "cloneProposal(uint256,string,bytes32,uint256,uint256,uint256,bool)",
            "closeSetup()",
            "updateRecipient(address)",
            "fallback()",
            "withdraw(uint256)",
            "updateProjectDescription(string,bytes32)",
            "newProposal(address,uint256,string,bytes32)",
            "submitProposal(address,uint256,uint256)",
            "order(uint256,uint256)"
        ],
        "initial_state": {
            "Client()": {
                "argument": {},
                "contract": {
                    "smartContractStartDate": "uint256",
                    "proposals": "PassContractor.proposal[]"
                }
            },
            "Project()": {
                "argument": {},
                "contract": {
                    "smartContractStartDate": "uint256",
                    "proposals": "PassContractor.proposal[]"
                }
            },
            "proposalChecked(address,uint256,uint256)": {
                "argument": {
                    "_proposalID": "uint256",
                    "_amount": "uint256"
                },
                "contract": {
                    "smartContractStartDate": "uint256",
                    "proposals": "PassContractor.proposal[]"
                }
            },
            "numberOfProposals()": {
                "argument": {},
                "contract": {
                    "smartContractStartDate": "uint256",
                    "proposals": "PassContractor.proposal[]"
                }
            },
            "PassContractor(address,PassProject,address,bool)": {
                "argument": {},
                "contract": {
                    "smartContractStartDate": "uint256",
                    "proposals": "PassContractor.proposal[]"
                }
            },
            "cloneProposal(uint256,string,bytes32,uint256,uint256,uint256,bool)": {
                "argument": {
                    "_amount": "uint256",
                    "_description": "string",
                    "_hashOfTheDocument": "bytes32",
                    "_dateOfProposal": "uint256",
                    "_orderAmount": "uint256",
                    "_dateOfOrder": "uint256"
                },
                "contract": {
                    "smartContractStartDate": "uint256",
                    "proposals": "PassContractor.proposal[]"
                }
            },
            "closeSetup()": {
                "argument": {},
                "contract": {
                    "smartContractStartDate": "uint256",
                    "proposals": "PassContractor.proposal[]"
                }
            },
            "updateRecipient(address)": {
                "argument": {},
                "contract": {
                    "smartContractStartDate": "uint256",
                    "proposals": "PassContractor.proposal[]"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "smartContractStartDate": "uint256",
                    "proposals": "PassContractor.proposal[]"
                }
            },
            "withdraw(uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "smartContractStartDate": "uint256",
                    "proposals": "PassContractor.proposal[]"
                }
            },
            "updateProjectDescription(string,bytes32)": {
                "argument": {
                    "_projectDescription": "string",
                    "_hashOfTheDocument": "bytes32"
                },
                "contract": {
                    "smartContractStartDate": "uint256",
                    "proposals": "PassContractor.proposal[]"
                }
            },
            "newProposal(address,uint256,string,bytes32)": {
                "argument": {
                    "_amount": "uint256",
                    "_description": "string",
                    "_hashOfTheDocument": "bytes32"
                },
                "contract": {
                    "smartContractStartDate": "uint256",
                    "proposals": "PassContractor.proposal[]"
                }
            },
            "submitProposal(address,uint256,uint256)": {
                "argument": {
                    "_proposalID": "uint256",
                    "_amount": "uint256"
                },
                "contract": {
                    "smartContractStartDate": "uint256",
                    "proposals": "PassContractor.proposal[]"
                }
            },
            "order(uint256,uint256)": {
                "argument": {
                    "_proposalID": "uint256",
                    "_orderAmount": "uint256"
                },
                "contract": {
                    "smartContractStartDate": "uint256",
                    "proposals": "PassContractor.proposal[]"
                }
            }
        },
        "function_block_mapping": {
            "numberOfProposals()": [
                1237,
                295
            ],
            "Client()": [
                4226,
                889
            ],
            "updateProjectDescription(string,bytes32)": [
                622,
                141
            ],
            "Project()": [
                535,
                119
            ],
            "withdraw(uint256)": [
                936,
                185
            ],
            "closeSetup()": [
                1060,
                229
            ],
            "updateRecipient(address)": [
                1700,
                405
            ],
            "submitProposal(address,uint256,uint256)": [
                1613,
                383
            ],
            "proposalChecked(address,uint256,uint256)": [
                1502,
                361
            ],
            "order(uint256,uint256)": [
                981,
                207
            ],
            "newProposal(address,uint256,string,bytes32)": [
                1367,
                339
            ],
            "cloneProposal(uint256,string,bytes32,uint256,uint256,uint256,bool)": [
                741,
                163
            ]
        },
        "block_CALL_mapping": {
            "jump4226_1": [
                "passProject.Client()",
                "passProject.Client()"
            ],
            "jump2432": [
                "passProject.updateDescription(_projectDescription, _hashOfTheDocument)",
                "passProject.updateDescription(_projectDescription, _hashOfTheDocument)"
            ],
            "jump4226_3": [
                "passProject.Client()",
                "passProject.Client()"
            ],
            "jump3349": [
                "recipient.send(_amount)",
                "recipient.send(_amount)"
            ],
            "jump4226_0": [
                "passProject.Client()",
                "passProject.Client()"
            ],
            "block4226_2": [
                "passProject.Client()"
            ],
            "block4226_1": [
                "passProject.Client()"
            ],
            "block4226_0": [
                "passProject.Client()"
            ],
            "block4226_3": [
                "passProject.Client()"
            ],
            "block4226_5": [
                "passProject.Client()"
            ],
            "block4226": [
                "passProject.Client()"
            ],
            "block3349": [
                "recipient.send(_amount)"
            ],
            "block4226_4": [
                "passProject.Client()"
            ],
            "jump4226_2": [
                "passProject.Client()",
                "passProject.Client()"
            ],
            "block2432": [
                "passProject.updateDescription(_projectDescription, _hashOfTheDocument)"
            ],
            "jump3215": [
                "passProject.cloneOrder(address(this), _proposalID, _orderAmount, _dateOfOrder)",
                "passProject.cloneOrder(address(this), _proposalID, _orderAmount, _dateOfOrder)"
            ],
            "jump4226": [
                "passProject.Client()",
                "passProject.Client()"
            ],
            "block3215": [
                "passProject.cloneOrder(address(this), _proposalID, _orderAmount, _dateOfOrder)"
            ],
            "jump4226_5": [
                "passProject.Client()",
                "passProject.Client()"
            ],
            "jump4226_4": [
                "passProject.Client()",
                "passProject.Client()"
            ]
        }
    },
    "PassCommitteeRoom": {
        "function_list": [
            "ShareManager()",
            "TokenManager()",
            "Balance()",
            "HasVoted(uint256,address)",
            "minQuorum()",
            "numberOfCommittees()",
            "init(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
            "createContractor(PassContractorCreator,address,bool,PassProject,string,string)",
            "contractorProposal(uint256,PassContractor,uint256,string,bytes32,address,uint256,uint256,uint256)",
            "resolutionProposal(string,string,PassProject,uint256)",
            "rulesProposal(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
            "upgradeProposal(address,address,address,uint256)",
            "newCommittee(PassCommitteeRoomInterface.ProposalTypes,uint256,uint256)",
            "vote(uint256,bool)",
            "executeDecision(uint256)",
            "orderToContractor(uint256)",
            "buySharesForProposal(uint256)",
            "sendPendingAmounts(uint256,uint256,address)",
            "withdrawPendingAmounts()",
            "ShareManager()",
            "TokenManager()",
            "Balance()",
            "HasVoted(uint256,address)",
            "minQuorum()",
            "numberOfCommittees()",
            "PassCommitteeRoom(address)",
            "init(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
            "createContractor(PassContractorCreator,address,bool,PassProject,string,string)",
            "contractorProposal(uint256,PassContractor,uint256,string,bytes32,address,uint256,uint256,uint256)",
            "resolutionProposal(string,string,PassProject,uint256)",
            "rulesProposal(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
            "upgradeProposal(address,address,address,uint256)",
            "newCommittee(PassCommitteeRoomInterface.ProposalTypes,uint256,uint256)",
            "vote(uint256,bool)",
            "executeDecision(uint256)",
            "orderToContractor(uint256)",
            "buySharesForProposal(uint256)",
            "sendPendingAmounts(uint256,uint256,address)",
            "withdrawPendingAmounts()"
        ],
        "initial_state": {
            "ShareManager()": {
                "argument": {},
                "contract": {}
            },
            "TokenManager()": {
                "argument": {},
                "contract": {}
            },
            "Balance()": {
                "argument": {},
                "contract": {}
            },
            "HasVoted(uint256,address)": {
                "argument": {
                    "_committeeID": "uint256"
                },
                "contract": {}
            },
            "minQuorum()": {
                "argument": {},
                "contract": {}
            },
            "numberOfCommittees()": {
                "argument": {},
                "contract": {}
            },
            "init(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_maxInflationRate": "uint256",
                    "_minMinutesPeriods": "uint256",
                    "_minQuorumDivisor": "uint256",
                    "_minCommitteeFees": "uint256",
                    "_minPercentageOfLikes": "uint256",
                    "_minutesSetProposalPeriod": "uint256",
                    "_minMinutesDebatePeriod": "uint256",
                    "_feesRewardInflationRate": "uint256",
                    "_tokenPriceInflationRate": "uint256",
                    "_defaultMinutesFundingPeriod": "uint256"
                },
                "contract": {}
            },
            "createContractor(PassContractorCreator,address,bool,PassProject,string,string)": {
                "argument": {
                    "_projectName": "string",
                    "_projectDescription": "string"
                },
                "contract": {}
            },
            "contractorProposal(uint256,PassContractor,uint256,string,bytes32,address,uint256,uint256,uint256)": {
                "argument": {
                    "_amount": "uint256",
                    "_contractorProposalID": "uint256",
                    "_proposalDescription": "string",
                    "_hashOfTheContractorProposalDocument": "bytes32",
                    "_initialSharePriceMultiplier": "uint256",
                    "_minutesFundingPeriod": "uint256",
                    "_minutesDebatingPeriod": "uint256"
                },
                "contract": {}
            },
            "resolutionProposal(string,string,PassProject,uint256)": {
                "argument": {
                    "_name": "string",
                    "_description": "string",
                    "_minutesDebatingPeriod": "uint256"
                },
                "contract": {}
            },
            "rulesProposal(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_minQuorumDivisor": "uint256",
                    "_minCommitteeFees": "uint256",
                    "_minPercentageOfLikes": "uint256",
                    "_minutesSetProposalPeriod": "uint256",
                    "_minMinutesDebatePeriod": "uint256",
                    "_feesRewardInflationRate": "uint256",
                    "_defaultMinutesFundingPeriod": "uint256",
                    "_tokenPriceInflationRate": "uint256"
                },
                "contract": {}
            },
            "upgradeProposal(address,address,address,uint256)": {
                "argument": {
                    "_minutesDebatingPeriod": "uint256"
                },
                "contract": {}
            },
            "newCommittee(PassCommitteeRoomInterface.ProposalTypes,uint256,uint256)": {
                "argument": {
                    "_proposalID": "uint256",
                    "_minutesDebatingPeriod": "uint256"
                },
                "contract": {}
            },
            "vote(uint256,bool)": {
                "argument": {
                    "_committeeID": "uint256"
                },
                "contract": {}
            },
            "executeDecision(uint256)": {
                "argument": {
                    "_committeeID": "uint256"
                },
                "contract": {}
            },
            "orderToContractor(uint256)": {
                "argument": {
                    "_proposalID": "uint256"
                },
                "contract": {}
            },
            "buySharesForProposal(uint256)": {
                "argument": {
                    "_proposalID": "uint256"
                },
                "contract": {}
            },
            "sendPendingAmounts(uint256,uint256,address)": {
                "argument": {
                    "_from": "uint256",
                    "_to": "uint256"
                },
                "contract": {}
            },
            "withdrawPendingAmounts()": {
                "argument": {},
                "contract": {}
            },
            "PassCommitteeRoom(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "ShareManager()": [
                3093,
                559
            ],
            "executeDecision(uint256)": [
                1052,
                185
            ],
            "Balance()": [
                576,
                119
            ],
            "TokenManager()": [
                2581,
                471
            ],
            "sendPendingAmounts(uint256,uint256,address)": [
                10419,
                876
            ],
            "buySharesForProposal(uint256)": [
                323,
                75
            ],
            "upgradeProposal(address,address,address,uint256)": [
                2945,
                537
            ],
            "rulesProposal(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": [
                1784,
                339
            ],
            "orderToContractor(uint256)": [
                2512,
                449
            ],
            "numberOfCommittees()": [
                1454,
                273
            ],
            "withdrawPendingAmounts()": [
                1497,
                295
            ],
            "HasVoted(uint256,address)": [
                951,
                163
            ],
            "vote(uint256,bool)": [
                2668,
                493
            ],
            "init(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": [
                1121,
                207
            ],
            "minQuorum()": [
                2469,
                427
            ]
        },
        "block_CALL_mapping": {
            "jump19155_1": [
                "passDao.ActualShareManager()",
                "passDao.ActualShareManager()"
            ],
            "jump5363": [
                "_shareManager.rewardTokensForClient(b.creator, rulesProposals[0].minCommitteeFees)",
                "_shareManager.rewardTokensForClient(b.creator, rulesProposals[0].minCommitteeFees)"
            ],
            "block16091_0": [
                "TokenManager().sendTo(p.contractor, _amountForTokens)"
            ],
            "jump6562": [
                "_tokenManager.setFundingRules(p.moderator, 0, p.amountForTokens, p.minutesFundingPeriod, rulesProposals[0].tokenPriceInflationRate, b.proposalID)",
                "_tokenManager.setFundingRules(p.moderator, 0, p.amountForTokens, p.minutesFundingPeriod, rulesProposals[0].tokenPriceInflationRate, b.proposalID)"
            ],
            "jump8212": [
                "_shareManager.sendTo(u.newShareManager, _shareManager.balance)",
                "_shareManager.sendTo(u.newShareManager, _shareManager.balance)"
            ],
            "jump20231": [
                "passDao.ActualCommitteeRoom()",
                "passDao.ActualCommitteeRoom()"
            ],
            "jump15805": [
                "ShareManager().sendTo(p.contractor, p.amount + _amountForShares)",
                "ShareManager().sendTo(p.contractor, p.amount + _amountForShares)"
            ],
            "block14643_0": [
                "ShareManager().FundedAmount(_proposalID)"
            ],
            "block16470_0": [
                "passDao.addProject(_project)"
            ],
            "jump11432": [
                "_contractor.newProposal(msg.sender, _amount, _proposalDescription, _hashOfTheContractorProposalDocument)",
                "_contractor.newProposal(msg.sender, _amount, _proposalDescription, _hashOfTheContractorProposalDocument)"
            ],
            "jump8969": [
                "passDao.upgrade(u.newCommitteeRoom, u.newShareManager, u.newTokenManager)",
                "passDao.upgrade(u.newCommitteeRoom, u.newShareManager, u.newTokenManager)"
            ],
            "jump7934": [
                "_shareManager.disableTransfer()",
                "_shareManager.disableTransfer()"
            ],
            "jump20231_1": [
                "passDao.ActualCommitteeRoom()",
                "passDao.ActualCommitteeRoom()"
            ],
            "block11866": [
                "_contractor.Project()"
            ],
            "jump15153": [
                "p.contractor.Project()",
                "p.contractor.Project()"
            ],
            "block19155_10": [
                "passDao.ActualShareManager()"
            ],
            "jump20231_2": [
                "passDao.ActualCommitteeRoom()",
                "passDao.ActualCommitteeRoom()"
            ],
            "jump20231_0": [
                "passDao.ActualCommitteeRoom()",
                "passDao.ActualCommitteeRoom()"
            ],
            "block7097": [
                "q.project.newResolution(q.name, q.description)"
            ],
            "block5448": [
                "address(_shareManager).send(_sentToDaoManager)"
            ],
            "jump16705_0": [
                "_project.newOrder(p.contractor, p.contractorProposalID, _amount)",
                "_project.newOrder(p.contractor, p.contractorProposalID, _amount)"
            ],
            "jump17866": [
                "_shareManager.totalSupply()",
                "_shareManager.totalSupply()"
            ],
            "block4063_0": [
                "passDao.ActualShareManager()"
            ],
            "block20231_0": [
                "passDao.ActualCommitteeRoom()"
            ],
            "jump3698": [
                "ShareManager().buyTokensForProposal.value(msg.value)(_proposalID, msg.sender)",
                "ShareManager().buyTokensForProposal.value(msg.value)(_proposalID, msg.sender)"
            ],
            "jump15508_0": [
                "p.contractor.order(p.contractorProposalID, _amount)",
                "p.contractor.order(p.contractorProposalID, _amount)"
            ],
            "block18051": [
                "msg.sender.send(_rewardedamount)"
            ],
            "block20231_2": [
                "passDao.ActualCommitteeRoom()"
            ],
            "block20231": [
                "passDao.ActualCommitteeRoom()"
            ],
            "jump16470": [
                "passDao.addProject(_project)",
                "passDao.addProject(_project)"
            ],
            "block15153_0": [
                "p.contractor.Project()"
            ],
            "block17630": [
                "_shareManager.blockTransfer(msg.sender, b.votingDeadline)"
            ],
            "block16470": [
                "passDao.addProject(_project)"
            ],
            "block19155_2": [
                "passDao.ActualShareManager()"
            ],
            "jump16470_0": [
                "passDao.addProject(_project)",
                "passDao.addProject(_project)"
            ],
            "jump18051": [
                "msg.sender.send(_rewardedamount)",
                "msg.sender.send(_rewardedamount)"
            ],
            "block15805": [
                "ShareManager().sendTo(p.contractor, p.amount + _amountForShares)"
            ],
            "jump14306": [
                "ShareManager().totalSupply()",
                "ShareManager().totalSupply()"
            ],
            "block10776": [
                "_contractor.proposalChecked(msg.sender, _contractorProposalID, _amount)"
            ],
            "block6246": [
                "_shareManager.setFundingRules(p.moderator, p.initialSharePriceMultiplier, p.amountForShares, p.minutesFundingPeriod, 0, b.proposalID)"
            ],
            "block19155_5": [
                "passDao.ActualShareManager()"
            ],
            "block19155_4": [
                "passDao.ActualShareManager()"
            ],
            "block19155_7": [
                "passDao.ActualShareManager()"
            ],
            "block19155_6": [
                "passDao.ActualShareManager()"
            ],
            "block19155_1": [
                "passDao.ActualShareManager()"
            ],
            "block19155_0": [
                "passDao.ActualShareManager()"
            ],
            "block19155_3": [
                "passDao.ActualShareManager()"
            ],
            "block8544": [
                "_tokenManager.disableTransfer()"
            ],
            "block19155_9": [
                "passDao.ActualShareManager()"
            ],
            "block19155_8": [
                "passDao.ActualShareManager()"
            ],
            "block16091": [
                "TokenManager().sendTo(p.contractor, _amountForTokens)"
            ],
            "jump14876_0": [
                "TokenManager().FundedAmount(_proposalID)",
                "TokenManager().FundedAmount(_proposalID)"
            ],
            "block17866": [
                "_shareManager.totalSupply()"
            ],
            "jump12024": [
                "_contractor.Project().ProjectManager()",
                "_contractor.Project().ProjectManager()"
            ],
            "jump8544": [
                "_tokenManager.disableTransfer()",
                "_tokenManager.disableTransfer()"
            ],
            "jump5023": [
                "_shareManager.totalSupply()",
                "_shareManager.totalSupply()"
            ],
            "block8212": [
                "_shareManager.sendTo(u.newShareManager, _shareManager.balance)"
            ],
            "block14306_0": [
                "ShareManager().totalSupply()"
            ],
            "block7934": [
                "_shareManager.disableTransfer()"
            ],
            "jump14643": [
                "ShareManager().FundedAmount(_proposalID)",
                "ShareManager().FundedAmount(_proposalID)"
            ],
            "block6562": [
                "_tokenManager.setFundingRules(p.moderator, 0, p.amountForTokens, p.minutesFundingPeriod, rulesProposals[0].tokenPriceInflationRate, b.proposalID)"
            ],
            "block8969": [
                "passDao.upgrade(u.newCommitteeRoom, u.newShareManager, u.newTokenManager)"
            ],
            "block16880_4": [
                "passDao.ActualTokenManager()"
            ],
            "block16880_3": [
                "passDao.ActualTokenManager()"
            ],
            "block16880_2": [
                "passDao.ActualTokenManager()"
            ],
            "block16880_1": [
                "passDao.ActualTokenManager()"
            ],
            "block16880_0": [
                "passDao.ActualTokenManager()"
            ],
            "jump16705": [
                "_project.newOrder(p.contractor, p.contractorProposalID, _amount)",
                "_project.newOrder(p.contractor, p.contractorProposalID, _amount)"
            ],
            "jump15153_0": [
                "p.contractor.Project()",
                "p.contractor.Project()"
            ],
            "block3698": [
                "ShareManager().buyTokensForProposal.value(msg.value)(_proposalID, msg.sender)"
            ],
            "block16705": [
                "_project.newOrder(p.contractor, p.contractorProposalID, _amount)"
            ],
            "block15508": [
                "p.contractor.order(p.contractorProposalID, _amount)"
            ],
            "block5363": [
                "_shareManager.rewardTokensForClient(b.creator, rulesProposals[0].minCommitteeFees)"
            ],
            "jump19724": [
                "_contractorCreator.createContractor(msg.sender, _recipient, \n            _metaProject, _passProject, _projectName, _projectDescription, false)",
                "_contractorCreator.createContractor(msg.sender, _recipient, \n            _metaProject, _passProject, _projectName, _projectDescription, false)"
            ],
            "jump6246": [
                "_shareManager.setFundingRules(p.moderator, p.initialSharePriceMultiplier, p.amountForShares, p.minutesFundingPeriod, 0, b.proposalID)",
                "_shareManager.setFundingRules(p.moderator, p.initialSharePriceMultiplier, p.amountForShares, p.minutesFundingPeriod, 0, b.proposalID)"
            ],
            "block15805_0": [
                "ShareManager().sendTo(p.contractor, p.amount + _amountForShares)"
            ],
            "jump15805_0": [
                "ShareManager().sendTo(p.contractor, p.amount + _amountForShares)",
                "ShareManager().sendTo(p.contractor, p.amount + _amountForShares)"
            ],
            "jump13345": [
                "passDao.MetaProject()",
                "passDao.MetaProject()"
            ],
            "block16705_0": [
                "_project.newOrder(p.contractor, p.contractorProposalID, _amount)"
            ],
            "jump14306_0": [
                "ShareManager().totalSupply()",
                "ShareManager().totalSupply()"
            ],
            "jump10155": [
                "ShareManager().sendPendingAmounts(_from, _to, _buyer)",
                "ShareManager().sendPendingAmounts(_from, _to, _buyer)"
            ],
            "jump19155_7": [
                "passDao.ActualShareManager()",
                "passDao.ActualShareManager()"
            ],
            "jump19155_6": [
                "passDao.ActualShareManager()",
                "passDao.ActualShareManager()"
            ],
            "jump19155_5": [
                "passDao.ActualShareManager()",
                "passDao.ActualShareManager()"
            ],
            "jump19155_4": [
                "passDao.ActualShareManager()",
                "passDao.ActualShareManager()"
            ],
            "jump19155_3": [
                "passDao.ActualShareManager()",
                "passDao.ActualShareManager()"
            ],
            "jump19155_2": [
                "passDao.ActualShareManager()",
                "passDao.ActualShareManager()"
            ],
            "jump10419": [
                "ShareManager().sendPendingAmounts(0, 0, msg.sender)",
                "ShareManager().sendPendingAmounts(0, 0, msg.sender)"
            ],
            "jump19155_0": [
                "passDao.ActualShareManager()",
                "passDao.ActualShareManager()"
            ],
            "jump17630": [
                "_shareManager.blockTransfer(msg.sender, b.votingDeadline)",
                "_shareManager.blockTransfer(msg.sender, b.votingDeadline)"
            ],
            "jump5448": [
                "address(_shareManager).send(_sentToDaoManager)",
                "address(_shareManager).send(_sentToDaoManager)"
            ],
            "jump19155_9": [
                "passDao.ActualShareManager()",
                "passDao.ActualShareManager()"
            ],
            "jump19155_8": [
                "passDao.ActualShareManager()",
                "passDao.ActualShareManager()"
            ],
            "jump19155": [
                "passDao.ActualShareManager()",
                "passDao.ActualShareManager()"
            ],
            "jump14876": [
                "TokenManager().FundedAmount(_proposalID)",
                "TokenManager().FundedAmount(_proposalID)"
            ],
            "block10419": [
                "ShareManager().sendPendingAmounts(0, 0, msg.sender)"
            ],
            "jump16091": [
                "TokenManager().sendTo(p.contractor, _amountForTokens)",
                "TokenManager().sendTo(p.contractor, _amountForTokens)"
            ],
            "jump19155_10": [
                "passDao.ActualShareManager()",
                "passDao.ActualShareManager()"
            ],
            "jump16880": [
                "passDao.ActualTokenManager()",
                "passDao.ActualTokenManager()"
            ],
            "jump11866": [
                "_contractor.Project()",
                "_contractor.Project()"
            ],
            "jump11719": [
                "_contractor.submitProposal(msg.sender, _contractorProposalID, _amount)",
                "_contractor.submitProposal(msg.sender, _contractorProposalID, _amount)"
            ],
            "block10155": [
                "ShareManager().sendPendingAmounts(_from, _to, _buyer)"
            ],
            "block15153": [
                "p.contractor.Project()"
            ],
            "jump4063_0": [
                "passDao.ActualShareManager()",
                "passDao.ActualShareManager()"
            ],
            "block14306": [
                "ShareManager().totalSupply()"
            ],
            "block17283": [
                "_shareManager.balanceOf(msg.sender)"
            ],
            "jump16091_0": [
                "TokenManager().sendTo(p.contractor, _amountForTokens)",
                "TokenManager().sendTo(p.contractor, _amountForTokens)"
            ],
            "jump7097": [
                "q.project.newResolution(q.name, q.description)",
                "q.project.newResolution(q.name, q.description)"
            ],
            "block11719": [
                "_contractor.submitProposal(msg.sender, _contractorProposalID, _amount)"
            ],
            "jump16880_0": [
                "passDao.ActualTokenManager()",
                "passDao.ActualTokenManager()"
            ],
            "block5023": [
                "_shareManager.totalSupply()"
            ],
            "jump17283": [
                "_shareManager.balanceOf(msg.sender)",
                "_shareManager.balanceOf(msg.sender)"
            ],
            "block20231_1": [
                "passDao.ActualCommitteeRoom()"
            ],
            "block14876_0": [
                "TokenManager().FundedAmount(_proposalID)"
            ],
            "block15508_0": [
                "p.contractor.order(p.contractorProposalID, _amount)"
            ],
            "block19724": [
                "_contractorCreator.createContractor(msg.sender, _recipient, \n            _metaProject, _passProject, _projectName, _projectDescription, false)"
            ],
            "block19155": [
                "passDao.ActualShareManager()"
            ],
            "jump4063": [
                "passDao.ActualShareManager()",
                "passDao.ActualShareManager()"
            ],
            "block16880": [
                "passDao.ActualTokenManager()"
            ],
            "jump15508": [
                "p.contractor.order(p.contractorProposalID, _amount)",
                "p.contractor.order(p.contractorProposalID, _amount)"
            ],
            "jump10776": [
                "_contractor.proposalChecked(msg.sender, _contractorProposalID, _amount)",
                "_contractor.proposalChecked(msg.sender, _contractorProposalID, _amount)"
            ],
            "jump14643_0": [
                "ShareManager().FundedAmount(_proposalID)",
                "ShareManager().FundedAmount(_proposalID)"
            ],
            "block14643": [
                "ShareManager().FundedAmount(_proposalID)"
            ],
            "block11432": [
                "_contractor.newProposal(msg.sender, _amount, _proposalDescription, _hashOfTheContractorProposalDocument)"
            ],
            "block14876": [
                "TokenManager().FundedAmount(_proposalID)"
            ],
            "jump16880_1": [
                "passDao.ActualTokenManager()",
                "passDao.ActualTokenManager()"
            ],
            "block13345": [
                "passDao.MetaProject()"
            ],
            "jump16880_3": [
                "passDao.ActualTokenManager()",
                "passDao.ActualTokenManager()"
            ],
            "jump16880_2": [
                "passDao.ActualTokenManager()",
                "passDao.ActualTokenManager()"
            ],
            "jump16880_4": [
                "passDao.ActualTokenManager()",
                "passDao.ActualTokenManager()"
            ],
            "block4063": [
                "passDao.ActualShareManager()"
            ],
            "block12024": [
                "_contractor.Project().ProjectManager()"
            ]
        }
    }
}