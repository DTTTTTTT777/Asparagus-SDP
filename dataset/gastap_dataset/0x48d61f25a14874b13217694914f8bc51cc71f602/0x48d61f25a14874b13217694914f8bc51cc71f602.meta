{
    "ERC20Basic": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "balanceOf(address)": [
                124,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "BasicToken": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transfer(address,uint256)": [
                222,
                119
            ],
            "balanceOf(address)": [
                135,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                368,
                97
            ],
            "balanceOf(address)": [
                858,
                229
            ],
            "transferFrom(address,address,uint256)": [
                512,
                141
            ],
            "transfer(address,uint256)": [
                1233,
                317
            ]
        },
        "block_CALL_mapping": {
            "jump5183": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "block5183": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "StandardToken": {
        "function_list": [
            "transfer(address,uint256)",
            "balanceOf(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "increaseApproval(address,uint256)",
            "decreaseApproval(address,uint256)"
        ],
        "initial_state": {
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "increaseApproval(address,uint256)": {
                "argument": {
                    "_addedValue": "uint256"
                },
                "contract": {}
            },
            "decreaseApproval(address,uint256)": {
                "argument": {
                    "_subtractedValue": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                147,
                75
            ],
            "increaseApproval(address,uint256)": [
                713,
                207
            ],
            "balanceOf(address)": [
                525,
                163
            ],
            "allowance(address,address)": [
                814,
                229
            ],
            "decreaseApproval(address,uint256)": [
                424,
                141
            ],
            "transferFrom(address,address,uint256)": [
                291,
                119
            ],
            "transfer(address,uint256)": [
                612,
                185
            ]
        },
        "block_CALL_mapping": {}
    },
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "MintableToken": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "increaseApproval(address,uint256)",
            "decreaseApproval(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "mint(address,uint256)",
            "finishMinting()",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "increaseApproval(address,uint256)": {
                "argument": {
                    "_addedValue": "uint256"
                },
                "contract": {}
            },
            "decreaseApproval(address,uint256)": {
                "argument": {
                    "_subtractedValue": "uint256"
                },
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "mint(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "finishMinting()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                249,
                97
            ],
            "increaseApproval(address,uint256)": [
                1050,
                295
            ],
            "mint(address,uint256)": [
                526,
                163
            ],
            "balanceOf(address)": [
                728,
                207
            ],
            "finishMinting()": [
                815,
                229
            ],
            "allowance(address,address)": [
                1151,
                317
            ],
            "decreaseApproval(address,uint256)": [
                627,
                185
            ],
            "transferFrom(address,address,uint256)": [
                393,
                141
            ],
            "transfer(address,uint256)": [
                949,
                273
            ],
            "transferOwnership(address)": [
                1270,
                339
            ]
        },
        "block_CALL_mapping": {}
    },
    "PullPayment": {
        "function_list": [
            "asyncSend(address,uint256)",
            "withdrawPayments()"
        ],
        "initial_state": {
            "asyncSend(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "totalPayments": "uint256"
                }
            },
            "withdrawPayments()": {
                "argument": {},
                "contract": {
                    "totalPayments": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "withdrawPayments()": [
                134,
                22
            ]
        },
        "block_CALL_mapping": {
            "block396": [
                "payee.send(payment)"
            ],
            "jump396": [
                "payee.send(payment)",
                "payee.send(payment)"
            ]
        }
    },
    "EvaCoin": {
        "function_list": [
            "asyncSend(address,uint256)",
            "withdrawPayments()",
            "mint(address,uint256)",
            "finishMinting()",
            "Ownable()",
            "transferOwnership(address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "increaseApproval(address,uint256)",
            "decreaseApproval(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "EvaCoin()",
            "sale1Started()",
            "sale2Started()",
            "sale2Stopped()",
            "activateDividendsFunc(address)",
            "activateBonusFunc(address)",
            "transferFrom(address,address,uint256)",
            "transfer(address,uint256)",
            "allowTransfer()",
            "raisedUSD(uint256)",
            "canStartSale2()",
            "sendDividends(uint256)",
            "mint(address,uint256)",
            "withdrawPayments()",
            "checkPayments()",
            "paymentsOf()",
            "checkBalance()",
            "withdraw()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "asyncSend(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "withdrawPayments()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "mint(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "finishMinting()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "Ownable()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "increaseApproval(address,uint256)": {
                "argument": {
                    "_addedValue": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "decreaseApproval(address,uint256)": {
                "argument": {
                    "_subtractedValue": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "EvaCoin()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "sale1Started()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "sale2Started()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "sale2Stopped()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "activateDividendsFunc(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "activateBonusFunc(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "allowTransfer()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "raisedUSD(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "canStartSale2()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "sendDividends(uint256)": {
                "argument": {
                    "ethrate": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "checkPayments()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "paymentsOf()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "checkBalance()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "withdraw()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "raisedPreSaleUSD": "uint256",
                    "raisedSale1USD": "uint256",
                    "raisedSale2USD": "uint256",
                    "payedDividendsUSD": "uint256",
                    "totalSupplyPreSale": "uint256",
                    "totalSupplySale1": "uint256",
                    "totalSupplySale2": "uint256",
                    "MULTIPLIER": "uint256",
                    "totalDividendsPerCoin": "uint256",
                    "etherBalance": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "checkBalance()": [
                2436,
                682
            ],
            "canStartSale2()": [
                563,
                22
            ],
            "balanceOf(address)": [
                1606,
                396
            ],
            "allowance(address,address)": [
                2623,
                748
            ],
            "decreaseApproval(address,uint256)": [
                1482,
                352
            ],
            "transferFrom(address,address,uint256)": [
                1020,
                176
            ],
            "sale2Started()": [
                2125,
                572
            ],
            "approve(address,uint256)": [
                801,
                88
            ],
            "paymentsOf()": [
                1153,
                198
            ],
            "increaseApproval(address,uint256)": [
                2479,
                704
            ],
            "sale1Started()": [
                1583,
                374
            ],
            "raisedUSD(uint256)": [
                1783,
                462
            ],
            "transferOwnership(address)": [
                3001,
                880
            ],
            "withdrawPayments()": [
                1459,
                330
            ],
            "finishMinting()": [
                1693,
                418
            ],
            "sendDividends(uint256)": [
                988,
                154
            ],
            "mint(address,uint256)": [
                1358,
                308
            ],
            "allowTransfer()": [
                2102,
                550
            ],
            "sale2Stopped()": [
                3068,
                902
            ],
            "checkPayments()": [
                1740,
                440
            ],
            "transfer(address,uint256)": [
                2148,
                594
            ],
            "withdraw()": [
                1335,
                286
            ]
        },
        "block_CALL_mapping": {
            "block3961": [
                "owner.transfer(this.balance - etherBalance)"
            ],
            "block15840": [
                "payee.send(payment)"
            ],
            "jump15840": [
                "payee.send(payment)",
                "payee.send(payment)"
            ],
            "jump3961": [
                "owner.transfer(this.balance - etherBalance)",
                "owner.transfer(this.balance - etherBalance)"
            ]
        }
    },
    "Crowdsale": {
        "function_list": [
            "Crowdsale(uint256,uint256,uint256,address)",
            "createTokenContract()",
            "fallback()",
            "buyTokens(address)",
            "forwardFunds()",
            "validPurchase()",
            "hasEnded()"
        ],
        "initial_state": {
            "Crowdsale(uint256,uint256,uint256,address)": {
                "argument": {
                    "_startTime": "uint256",
                    "_endTime": "uint256",
                    "_rate": "uint256"
                },
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "rate": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "createTokenContract()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "rate": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "rate": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "buyTokens(address)": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "rate": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "forwardFunds()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "rate": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "validPurchase()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "rate": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "hasEnded()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "rate": "uint256",
                    "weiRaised": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "hasEnded()": [
                466,
                207
            ],
            "buyTokens(address)": [
                412,
                185
            ]
        },
        "block_CALL_mapping": {
            "jump931": [
                "token.mint(beneficiary, tokens)",
                "token.mint(beneficiary, tokens)"
            ],
            "block1364_1": [
                "wallet.transfer(msg.value)"
            ],
            "block1364_0": [
                "wallet.transfer(msg.value)"
            ],
            "jump931_1": [
                "token.mint(beneficiary, tokens)",
                "token.mint(beneficiary, tokens)"
            ],
            "jump931_0": [
                "token.mint(beneficiary, tokens)",
                "token.mint(beneficiary, tokens)"
            ],
            "jump1364": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ],
            "block1364": [
                "wallet.transfer(msg.value)"
            ],
            "jump1364_1": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ],
            "block931_1": [
                "token.mint(beneficiary, tokens)"
            ],
            "block931_0": [
                "token.mint(beneficiary, tokens)"
            ],
            "block931": [
                "token.mint(beneficiary, tokens)"
            ],
            "jump1364_0": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ]
        }
    },
    "CappedCrowdsale": {
        "function_list": [
            "Crowdsale(uint256,uint256,uint256,address)",
            "createTokenContract()",
            "fallback()",
            "buyTokens(address)",
            "forwardFunds()",
            "validPurchase()",
            "hasEnded()",
            "CappedCrowdsale(uint256)",
            "validPurchase()",
            "hasEnded()"
        ],
        "initial_state": {
            "Crowdsale(uint256,uint256,uint256,address)": {
                "argument": {
                    "_startTime": "uint256",
                    "_endTime": "uint256",
                    "_rate": "uint256"
                },
                "contract": {
                    "cap": "uint256"
                }
            },
            "createTokenContract()": {
                "argument": {},
                "contract": {
                    "cap": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "cap": "uint256"
                }
            },
            "buyTokens(address)": {
                "argument": {},
                "contract": {
                    "cap": "uint256"
                }
            },
            "forwardFunds()": {
                "argument": {},
                "contract": {
                    "cap": "uint256"
                }
            },
            "validPurchase()": {
                "argument": {},
                "contract": {
                    "cap": "uint256"
                }
            },
            "hasEnded()": {
                "argument": {},
                "contract": {
                    "cap": "uint256"
                }
            },
            "CappedCrowdsale(uint256)": {
                "argument": {
                    "_cap": "uint256"
                },
                "contract": {
                    "cap": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "hasEnded()": [
                574,
                251
            ],
            "buyTokens(address)": [
                520,
                229
            ]
        },
        "block_CALL_mapping": {
            "block1034_1": [
                "token.mint(beneficiary, tokens)"
            ],
            "block1034_0": [
                "token.mint(beneficiary, tokens)"
            ],
            "block2091_1": [
                "wallet.transfer(msg.value)"
            ],
            "block2091_0": [
                "wallet.transfer(msg.value)"
            ],
            "block1607": [
                "token.mint(beneficiary, bonus)"
            ],
            "block1607_1": [
                "token.mint(beneficiary, bonus)"
            ],
            "jump1034_1": [
                "token.mint(beneficiary, tokens)",
                "token.mint(beneficiary, tokens)"
            ],
            "jump1034_0": [
                "token.mint(beneficiary, tokens)",
                "token.mint(beneficiary, tokens)"
            ],
            "block2091": [
                "wallet.transfer(msg.value)"
            ],
            "block1607_0": [
                "token.mint(beneficiary, bonus)"
            ],
            "jump2091_1": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ],
            "jump2091_0": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ],
            "block1034": [
                "token.mint(beneficiary, tokens)"
            ],
            "jump1607_0": [
                "token.mint(beneficiary, bonus)",
                "token.mint(beneficiary, bonus)"
            ],
            "jump1607": [
                "token.mint(beneficiary, bonus)",
                "token.mint(beneficiary, bonus)"
            ],
            "jump1607_1": [
                "token.mint(beneficiary, bonus)",
                "token.mint(beneficiary, bonus)"
            ],
            "jump2091": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ],
            "jump1034": [
                "token.mint(beneficiary, tokens)",
                "token.mint(beneficiary, tokens)"
            ]
        }
    },
    "EvaCoinPreSale": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "CappedCrowdsale(uint256)",
            "validPurchase()",
            "hasEnded()",
            "Crowdsale(uint256,uint256,uint256,address)",
            "createTokenContract()",
            "fallback()",
            "buyTokens(address)",
            "forwardFunds()",
            "validPurchase()",
            "hasEnded()",
            "EvaCoinPreSale(address,uint256,uint256)",
            "createTokenContract()",
            "buyTokens(address)",
            "finalize()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {
                    "SALE_RATE": "uint256",
                    "PRESALE_RATE": "uint256",
                    "ETH_RATE": "uint256",
                    "RAISE_USD": "uint256",
                    "EARLY_FOUNDERS_USD": "uint256",
                    "HARD_CAP": "uint256",
                    "EARLY_FOUNDERS_CAP": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "SALE_RATE": "uint256",
                    "PRESALE_RATE": "uint256",
                    "ETH_RATE": "uint256",
                    "RAISE_USD": "uint256",
                    "EARLY_FOUNDERS_USD": "uint256",
                    "HARD_CAP": "uint256",
                    "EARLY_FOUNDERS_CAP": "uint256"
                }
            },
            "CappedCrowdsale(uint256)": {
                "argument": {
                    "_cap": "uint256"
                },
                "contract": {
                    "SALE_RATE": "uint256",
                    "PRESALE_RATE": "uint256",
                    "ETH_RATE": "uint256",
                    "RAISE_USD": "uint256",
                    "EARLY_FOUNDERS_USD": "uint256",
                    "HARD_CAP": "uint256",
                    "EARLY_FOUNDERS_CAP": "uint256"
                }
            },
            "validPurchase()": {
                "argument": {},
                "contract": {
                    "SALE_RATE": "uint256",
                    "PRESALE_RATE": "uint256",
                    "ETH_RATE": "uint256",
                    "RAISE_USD": "uint256",
                    "EARLY_FOUNDERS_USD": "uint256",
                    "HARD_CAP": "uint256",
                    "EARLY_FOUNDERS_CAP": "uint256"
                }
            },
            "hasEnded()": {
                "argument": {},
                "contract": {
                    "SALE_RATE": "uint256",
                    "PRESALE_RATE": "uint256",
                    "ETH_RATE": "uint256",
                    "RAISE_USD": "uint256",
                    "EARLY_FOUNDERS_USD": "uint256",
                    "HARD_CAP": "uint256",
                    "EARLY_FOUNDERS_CAP": "uint256"
                }
            },
            "Crowdsale(uint256,uint256,uint256,address)": {
                "argument": {
                    "_startTime": "uint256",
                    "_endTime": "uint256",
                    "_rate": "uint256"
                },
                "contract": {
                    "SALE_RATE": "uint256",
                    "PRESALE_RATE": "uint256",
                    "ETH_RATE": "uint256",
                    "RAISE_USD": "uint256",
                    "EARLY_FOUNDERS_USD": "uint256",
                    "HARD_CAP": "uint256",
                    "EARLY_FOUNDERS_CAP": "uint256"
                }
            },
            "createTokenContract()": {
                "argument": {},
                "contract": {
                    "SALE_RATE": "uint256",
                    "PRESALE_RATE": "uint256",
                    "ETH_RATE": "uint256",
                    "RAISE_USD": "uint256",
                    "EARLY_FOUNDERS_USD": "uint256",
                    "HARD_CAP": "uint256",
                    "EARLY_FOUNDERS_CAP": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "SALE_RATE": "uint256",
                    "PRESALE_RATE": "uint256",
                    "ETH_RATE": "uint256",
                    "RAISE_USD": "uint256",
                    "EARLY_FOUNDERS_USD": "uint256",
                    "HARD_CAP": "uint256",
                    "EARLY_FOUNDERS_CAP": "uint256"
                }
            },
            "buyTokens(address)": {
                "argument": {},
                "contract": {
                    "SALE_RATE": "uint256",
                    "PRESALE_RATE": "uint256",
                    "ETH_RATE": "uint256",
                    "RAISE_USD": "uint256",
                    "EARLY_FOUNDERS_USD": "uint256",
                    "HARD_CAP": "uint256",
                    "EARLY_FOUNDERS_CAP": "uint256"
                }
            },
            "forwardFunds()": {
                "argument": {},
                "contract": {
                    "SALE_RATE": "uint256",
                    "PRESALE_RATE": "uint256",
                    "ETH_RATE": "uint256",
                    "RAISE_USD": "uint256",
                    "EARLY_FOUNDERS_USD": "uint256",
                    "HARD_CAP": "uint256",
                    "EARLY_FOUNDERS_CAP": "uint256"
                }
            },
            "EvaCoinPreSale(address,uint256,uint256)": {
                "argument": {
                    "_startTime": "uint256",
                    "_endTime": "uint256"
                },
                "contract": {
                    "SALE_RATE": "uint256",
                    "PRESALE_RATE": "uint256",
                    "ETH_RATE": "uint256",
                    "RAISE_USD": "uint256",
                    "EARLY_FOUNDERS_USD": "uint256",
                    "HARD_CAP": "uint256",
                    "EARLY_FOUNDERS_CAP": "uint256"
                }
            },
            "finalize()": {
                "argument": {},
                "contract": {
                    "SALE_RATE": "uint256",
                    "PRESALE_RATE": "uint256",
                    "ETH_RATE": "uint256",
                    "RAISE_USD": "uint256",
                    "EARLY_FOUNDERS_USD": "uint256",
                    "HARD_CAP": "uint256",
                    "EARLY_FOUNDERS_CAP": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "SALE_RATE": "uint256",
                    "PRESALE_RATE": "uint256",
                    "ETH_RATE": "uint256",
                    "RAISE_USD": "uint256",
                    "EARLY_FOUNDERS_USD": "uint256",
                    "HARD_CAP": "uint256",
                    "EARLY_FOUNDERS_CAP": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "finalize()": [
                619,
                229
            ],
            "hasEnded()": [
                1089,
                427
            ],
            "buyTokens(address)": [
                1035,
                405
            ],
            "transferOwnership(address)": [
                1136,
                449
            ]
        },
        "block_CALL_mapping": {
            "block3456": [
                "token.mint(beneficiary, tokens)"
            ],
            "block3820_0": [
                "wallet.transfer(msg.value)"
            ],
            "block3820_1": [
                "wallet.transfer(msg.value)"
            ],
            "jump2070": [
                "coin.mint(owner, founderCoins)",
                "coin.mint(owner, founderCoins)"
            ],
            "block1541_0": [
                "coin.raisedUSD(ETH_RATE.mul(msg.value).div(1 ether))"
            ],
            "block1541_1": [
                "coin.raisedUSD(ETH_RATE.mul(msg.value).div(1 ether))"
            ],
            "block3820": [
                "wallet.transfer(msg.value)"
            ],
            "block2326": [
                "coin.keeper()"
            ],
            "block2511": [
                "coin.transferOwnership(coin.keeper())"
            ],
            "block1541": [
                "coin.raisedUSD(ETH_RATE.mul(msg.value).div(1 ether))"
            ],
            "jump2511": [
                "coin.transferOwnership(coin.keeper())",
                "coin.transferOwnership(coin.keeper())"
            ],
            "jump3456": [
                "token.mint(beneficiary, tokens)",
                "token.mint(beneficiary, tokens)"
            ],
            "jump3456_1": [
                "token.mint(beneficiary, tokens)",
                "token.mint(beneficiary, tokens)"
            ],
            "jump3456_0": [
                "token.mint(beneficiary, tokens)",
                "token.mint(beneficiary, tokens)"
            ],
            "jump1541_0": [
                "coin.raisedUSD(ETH_RATE.mul(msg.value).div(1 ether))",
                "coin.raisedUSD(ETH_RATE.mul(msg.value).div(1 ether))"
            ],
            "jump1541_1": [
                "coin.raisedUSD(ETH_RATE.mul(msg.value).div(1 ether))",
                "coin.raisedUSD(ETH_RATE.mul(msg.value).div(1 ether))"
            ],
            "jump3820": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ],
            "block2070": [
                "coin.mint(owner, founderCoins)"
            ],
            "jump3820_0": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ],
            "jump3820_1": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ],
            "jump1541": [
                "coin.raisedUSD(ETH_RATE.mul(msg.value).div(1 ether))",
                "coin.raisedUSD(ETH_RATE.mul(msg.value).div(1 ether))"
            ],
            "block3456_1": [
                "token.mint(beneficiary, tokens)"
            ],
            "block3456_0": [
                "token.mint(beneficiary, tokens)"
            ],
            "jump2326": [
                "coin.keeper()",
                "coin.keeper()"
            ]
        }
    }
}