{
    "Token": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "totalSupply()": [
                226,
                97
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "E4Token": {
        "function_list": [
            "checkDividends(address)",
            "withdrawDividends()",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "E4Token()",
            "applySettings(E4Token.SettingStateValue,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
            "getPayIdAndHeld(uint256)",
            "getHeld(uint256)",
            "addAccount(address)",
            "totalSupply()",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "fallback()",
            "purchaseToken()",
            "feePayment()",
            "setE4RowPartner(address)",
            "getNumTokensPurchased()",
            "getNumGames()",
            "getSpecialAddresses()",
            "updateIcoStatus()",
            "requestRefund()",
            "doPayout(uint256)",
            "withdrawDividends()",
            "setOpGas(uint256,uint256,uint256)",
            "getOpGas()",
            "checkDividends(address)",
            "icoCheckup()",
            "changeOwner(address)",
            "changeDevevoperAccont(address)",
            "changeFounder(address)",
            "changeAuxPartner(address)",
            "haraKiri()",
            "getIcoInfo()",
            "flushDividends(uint256)",
            "doDeveloperGrant()"
        ],
        "initial_state": {
            "checkDividends(address)": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "withdrawDividends()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "E4Token()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "applySettings(E4Token.SettingStateValue,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_saleStart": "uint256",
                    "_saleEnd": "uint256",
                    "_usageEnd": "uint256",
                    "_minUsage": "uint256",
                    "_tokGoal": "uint256",
                    "_maxMintable": "uint256",
                    "_threshold": "uint256",
                    "_price": "uint256",
                    "_mpp": "uint256",
                    "_mpi": "uint256"
                },
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "getPayIdAndHeld(uint256)": {
                "argument": {
                    "_tokHeld": "uint256"
                },
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "getHeld(uint256)": {
                "argument": {
                    "_tokHeld": "uint256"
                },
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "addAccount(address)": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "purchaseToken()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "feePayment()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "setE4RowPartner(address)": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "getNumTokensPurchased()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "getNumGames()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "getSpecialAddresses()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "updateIcoStatus()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "requestRefund()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "doPayout(uint256)": {
                "argument": {
                    "_numPays": "uint256"
                },
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "setOpGas(uint256,uint256,uint256)": {
                "argument": {
                    "_rm": "uint256",
                    "_rf": "uint256",
                    "_rw": "uint256"
                },
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "getOpGas()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "icoCheckup()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "changeDevevoperAccont(address)": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "changeFounder(address)": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "changeAuxPartner(address)": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "haraKiri()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "getIcoInfo()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "flushDividends(uint256)": {
                "argument": {
                    "_numPays": "uint256"
                },
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            },
            "doDeveloperGrant()": {
                "argument": {},
                "contract": {
                    "numAccounts": "uint256",
                    "partnerCredits": "uint256",
                    "maxMintableTokens": "uint256",
                    "minIcoTokenGoal": "uint256",
                    "minUsageGoal": "uint256",
                    "tokenPrice": "uint256",
                    "payoutThreshold": "uint256",
                    "totalTokenFundsReceived": "uint256",
                    "totalTokensMinted": "uint256",
                    "holdoverBalance": "uint256",
                    "prOrigTokensMint": "uint256",
                    "curPayoutId": "uint256",
                    "lastPayoutIndex": "uint256",
                    "maxPaysPer": "uint256",
                    "minPayInterval": "uint256",
                    "fundingStart": "uint256",
                    "fundingDeadline": "uint256",
                    "usageDeadline": "uint256",
                    "lastPayoutTime": "uint256",
                    "vestTime": "uint256",
                    "numDevTokens": "uint256",
                    "remunerationStage": "uint256",
                    "remunerationBalance": "uint256",
                    "auxPartnerBalance": "uint256",
                    "rmGas": "uint256",
                    "rwGas": "uint256",
                    "rfGas": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "requestRefund()": [
                2929,
                867
            ],
            "balanceOf(address)": [
                1579,
                471
            ],
            "totalSupply()": [
                772,
                119
            ],
            "getNumGames()": [
                1536,
                449
            ],
            "allowance(address,address)": [
                2952,
                889
            ],
            "purchaseToken()": [
                2810,
                779
            ],
            "feePayment()": [
                1230,
                295
            ],
            "transferFrom(address,address,uint256)": [
                988,
                207
            ],
            "approve(address,uint256)": [
                671,
                97
            ],
            "haraKiri()": [
                2863,
                823
            ],
            "withdrawDividends()": [
                1187,
                273
            ],
            "setE4RowPartner(address)": [
                1909,
                581
            ],
            "setOpGas(uint256,uint256,uint256)": [
                1240,
                317
            ],
            "getSpecialAddresses()": [
                2469,
                735
            ],
            "changeFounder(address)": [
                2211,
                647
            ],
            "changeOwner(address)": [
                2402,
                713
            ],
            "getNumTokensPurchased()": [
                2820,
                801
            ],
            "changeAuxPartner(address)": [
                2335,
                691
            ],
            "checkDividends(address)": [
                901,
                185
            ],
            "getOpGas()": [
                2278,
                669
            ],
            "icoCheckup()": [
                1666,
                493
            ],
            "getIcoInfo()": [
                1775,
                559
            ],
            "changeDevevoperAccont(address)": [
                604,
                75
            ],
            "updateIcoStatus()": [
                1164,
                251
            ],
            "flushDividends(uint256)": [
                1348,
                361
            ],
            "transfer(address,uint256)": [
                2709,
                757
            ]
        },
        "block_CALL_mapping": {
            "block10493": [
                "owner.call.gas(rfGas).value(this.balance)()"
            ],
            "block8797": [
                "auxPartner.call.gas(rmGas).value(ntmp)()"
            ],
            "block13652": [
                "nrequester.call.gas(rfGas).value(nrefund)()"
            ],
            "jump7907": [
                "pe4.getNumGamesStarted()",
                "pe4.getNumGamesStarted()"
            ],
            "block6953": [
                "msg.sender.call.gas(rwGas).value(_amount)()"
            ],
            "block8655": [
                "founderOrg.call.gas(rmGas).value(ntmp)()"
            ],
            "jump8655": [
                "founderOrg.call.gas(rmGas).value(ntmp)()",
                "founderOrg.call.gas(rmGas).value(ntmp)()"
            ],
            "block7907": [
                "pe4.getNumGamesStarted()"
            ],
            "jump13652": [
                "nrequester.call.gas(rfGas).value(nrefund)()",
                "nrequester.call.gas(rfGas).value(nrefund)()"
            ],
            "jump6953": [
                "msg.sender.call.gas(rwGas).value(_amount)()",
                "msg.sender.call.gas(rwGas).value(_amount)()"
            ],
            "jump10493": [
                "owner.call.gas(rfGas).value(this.balance)()",
                "owner.call.gas(rfGas).value(this.balance)()"
            ],
            "block7907_2": [
                "pe4.getNumGamesStarted()"
            ],
            "block7907_3": [
                "pe4.getNumGamesStarted()"
            ],
            "block7907_0": [
                "pe4.getNumGamesStarted()"
            ],
            "block7907_1": [
                "pe4.getNumGamesStarted()"
            ],
            "block7907_6": [
                "pe4.getNumGamesStarted()"
            ],
            "block7907_7": [
                "pe4.getNumGamesStarted()"
            ],
            "block7907_4": [
                "pe4.getNumGamesStarted()"
            ],
            "jump8797": [
                "auxPartner.call.gas(rmGas).value(ntmp)()",
                "auxPartner.call.gas(rmGas).value(ntmp)()"
            ],
            "block7907_8": [
                "pe4.getNumGamesStarted()"
            ],
            "block7907_5": [
                "pe4.getNumGamesStarted()"
            ],
            "jump7907_8": [
                "pe4.getNumGamesStarted()",
                "pe4.getNumGamesStarted()"
            ],
            "jump7907_4": [
                "pe4.getNumGamesStarted()",
                "pe4.getNumGamesStarted()"
            ],
            "jump7907_5": [
                "pe4.getNumGamesStarted()",
                "pe4.getNumGamesStarted()"
            ],
            "jump7907_6": [
                "pe4.getNumGamesStarted()",
                "pe4.getNumGamesStarted()"
            ],
            "jump7907_7": [
                "pe4.getNumGamesStarted()",
                "pe4.getNumGamesStarted()"
            ],
            "jump7907_0": [
                "pe4.getNumGamesStarted()",
                "pe4.getNumGamesStarted()"
            ],
            "jump7907_1": [
                "pe4.getNumGamesStarted()",
                "pe4.getNumGamesStarted()"
            ],
            "jump7907_2": [
                "pe4.getNumGamesStarted()",
                "pe4.getNumGamesStarted()"
            ],
            "jump7907_3": [
                "pe4.getNumGamesStarted()",
                "pe4.getNumGamesStarted()"
            ]
        }
    }
}