{
    "SHA3_512": {
        "function_list": [
            "SHA3_512()",
            "keccak_f(uint256[25])",
            "sponge(uint256[9])"
        ],
        "initial_state": {
            "SHA3_512()": {
                "argument": {},
                "contract": {}
            },
            "keccak_f(uint256[25])": {
                "argument": {
                    "A": "uint256[25]"
                },
                "contract": {}
            },
            "sponge(uint256[9])": {
                "argument": {
                    "M": "uint256[9]"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Ethash": {
        "function_list": [
            "SHA3_512()",
            "keccak_f(uint256[25])",
            "sponge(uint256[9])",
            "Ethash(address[3])",
            "fnv(uint256,uint256)",
            "computeCacheRoot(uint256,uint256,uint256[],uint256[],uint256)",
            "toBE(uint256)",
            "computeSha3(uint256[16],uint256[8])",
            "computeLeaf(uint256[],uint256)",
            "computeS(uint256,uint256)",
            "reverseBytes(uint256)",
            "getEpochData(uint256,uint256)",
            "isEpochDataSet(uint256)",
            "setEpochData(uint256,uint256,uint256,uint256[],uint256,uint256)",
            "getMerkleLeave(uint256,uint256)",
            "hashimoto(bytes32,bytes8,uint256[],uint256[],uint256)"
        ],
        "initial_state": {
            "SHA3_512()": {
                "argument": {},
                "contract": {}
            },
            "keccak_f(uint256[25])": {
                "argument": {
                    "A": "uint256[25]"
                },
                "contract": {}
            },
            "sponge(uint256[9])": {
                "argument": {
                    "M": "uint256[9]"
                },
                "contract": {}
            },
            "Ethash(address[3])": {
                "argument": {},
                "contract": {}
            },
            "fnv(uint256,uint256)": {
                "argument": {
                    "v1": "uint256",
                    "v2": "uint256"
                },
                "contract": {}
            },
            "computeCacheRoot(uint256,uint256,uint256[],uint256[],uint256)": {
                "argument": {
                    "index": "uint256",
                    "indexInElementsArray": "uint256",
                    "elements": "uint256[]",
                    "witness": "uint256[]",
                    "branchSize": "uint256"
                },
                "contract": {}
            },
            "toBE(uint256)": {
                "argument": {
                    "x": "uint256"
                },
                "contract": {}
            },
            "computeSha3(uint256[16],uint256[8])": {
                "argument": {
                    "s": "uint256[16]",
                    "cmix": "uint256[8]"
                },
                "contract": {}
            },
            "computeLeaf(uint256[],uint256)": {
                "argument": {
                    "dataSetLookup": "uint256[]",
                    "index": "uint256"
                },
                "contract": {}
            },
            "computeS(uint256,uint256)": {
                "argument": {
                    "header": "uint256",
                    "nonceLe": "uint256"
                },
                "contract": {}
            },
            "reverseBytes(uint256)": {
                "argument": {
                    "input": "uint256"
                },
                "contract": {}
            },
            "getEpochData(uint256,uint256)": {
                "argument": {
                    "epochIndex": "uint256",
                    "nodeIndex": "uint256"
                },
                "contract": {}
            },
            "isEpochDataSet(uint256)": {
                "argument": {
                    "epochIndex": "uint256"
                },
                "contract": {}
            },
            "setEpochData(uint256,uint256,uint256,uint256[],uint256,uint256)": {
                "argument": {
                    "epoch": "uint256",
                    "fullSizeIn128Resultion": "uint256",
                    "branchDepth": "uint256",
                    "merkleNodes": "uint256[]",
                    "start": "uint256",
                    "numElems": "uint256"
                },
                "contract": {}
            },
            "getMerkleLeave(uint256,uint256)": {
                "argument": {
                    "epochIndex": "uint256",
                    "p": "uint256"
                },
                "contract": {}
            },
            "hashimoto(bytes32,bytes8,uint256[],uint256[],uint256)": {
                "argument": {
                    "header": "bytes32",
                    "nonceLe": "bytes8",
                    "dataSetLookup": "uint256[]",
                    "witnessForLookup": "uint256[]",
                    "epochIndex": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "isEpochDataSet(uint256)": [
                570,
                141
            ],
            "getEpochData(uint256,uint256)": [
                455,
                119
            ],
            "hashimoto(bytes32,bytes8,uint256[],uint256[],uint256)": [
                205,
                97
            ],
            "setEpochData(uint256,uint256,uint256,uint256[],uint256,uint256)": [
                639,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "RLP": {
        "function_list": [
            "next(RLP.Iterator)",
            "next(RLP.Iterator,bool)",
            "hasNext(RLP.Iterator)",
            "toRLPItem(bytes)",
            "toRLPItem(bytes,bool)",
            "isNull(RLP.RLPItem)",
            "isList(RLP.RLPItem)",
            "isData(RLP.RLPItem)",
            "isEmpty(RLP.RLPItem)",
            "items(RLP.RLPItem)",
            "iterator(RLP.RLPItem)",
            "toBytes(RLP.RLPItem)",
            "toData(RLP.RLPItem)",
            "toList(RLP.RLPItem)",
            "toAscii(RLP.RLPItem)",
            "toUint(RLP.RLPItem)",
            "toBool(RLP.RLPItem)",
            "toByte(RLP.RLPItem)",
            "toInt(RLP.RLPItem)",
            "toBytes32(RLP.RLPItem)",
            "toAddress(RLP.RLPItem)",
            "_payloadOffset(RLP.RLPItem)",
            "_itemLength(uint256)",
            "_decode(RLP.RLPItem)",
            "_copyToBytes(uint256,bytes,uint256)",
            "_validate(RLP.RLPItem)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "next(RLP.Iterator)": {
                "argument": {},
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "next(RLP.Iterator,bool)": {
                "argument": {},
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "hasNext(RLP.Iterator)": {
                "argument": {},
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "toRLPItem(bytes)": {
                "argument": {
                    "self": "bytes"
                },
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "toRLPItem(bytes,bool)": {
                "argument": {
                    "self": "bytes"
                },
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "isNull(RLP.RLPItem)": {
                "argument": {},
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "isList(RLP.RLPItem)": {
                "argument": {},
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "isData(RLP.RLPItem)": {
                "argument": {},
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "isEmpty(RLP.RLPItem)": {
                "argument": {},
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "items(RLP.RLPItem)": {
                "argument": {},
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "iterator(RLP.RLPItem)": {
                "argument": {},
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "toBytes(RLP.RLPItem)": {
                "argument": {},
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "toData(RLP.RLPItem)": {
                "argument": {},
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "toList(RLP.RLPItem)": {
                "argument": {},
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "toAscii(RLP.RLPItem)": {
                "argument": {},
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "toUint(RLP.RLPItem)": {
                "argument": {},
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "toBool(RLP.RLPItem)": {
                "argument": {},
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "toByte(RLP.RLPItem)": {
                "argument": {},
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "toInt(RLP.RLPItem)": {
                "argument": {},
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "toBytes32(RLP.RLPItem)": {
                "argument": {},
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "toAddress(RLP.RLPItem)": {
                "argument": {},
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "_payloadOffset(RLP.RLPItem)": {
                "argument": {},
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "_itemLength(uint256)": {
                "argument": {
                    "memPtr": "uint256"
                },
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "_decode(RLP.RLPItem)": {
                "argument": {},
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "_copyToBytes(uint256,bytes,uint256)": {
                "argument": {
                    "btsPtr": "uint256",
                    "tgt": "bytes",
                    "btsLen": "uint256"
                },
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "_validate(RLP.RLPItem)": {
                "argument": {},
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "DATA_SHORT_START": "uint256",
                    "DATA_LONG_START": "uint256",
                    "LIST_SHORT_START": "uint256",
                    "LIST_LONG_START": "uint256",
                    "DATA_LONG_OFFSET": "uint256",
                    "LIST_LONG_OFFSET": "uint256"
                }
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Agt": {
        "function_list": [
            "Agt()",
            "parseBlockHeader(bytes)",
            "verifyAgt(Agt.VerifyAgtData,uint256,uint256[],uint256[])",
            "verifyAgtDebugForTesting(uint256,uint256,uint256,uint256,uint256,uint256,uint256[],uint256[])"
        ],
        "initial_state": {
            "Agt()": {
                "argument": {},
                "contract": {}
            },
            "parseBlockHeader(bytes)": {
                "argument": {
                    "rlpHeader": "bytes"
                },
                "contract": {}
            },
            "verifyAgt(Agt.VerifyAgtData,uint256,uint256[],uint256[])": {
                "argument": {
                    "branchIndex": "uint256",
                    "countersBranch": "uint256[]",
                    "hashesBranch": "uint256[]"
                },
                "contract": {}
            },
            "verifyAgtDebugForTesting(uint256,uint256,uint256,uint256,uint256,uint256,uint256[],uint256[])": {
                "argument": {
                    "rootHash": "uint256",
                    "rootMin": "uint256",
                    "rootMax": "uint256",
                    "leafHash": "uint256",
                    "leafCounter": "uint256",
                    "branchIndex": "uint256",
                    "countersBranch": "uint256[]",
                    "hashesBranch": "uint256[]"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "verifyAgtDebugForTesting(uint256,uint256,uint256,uint256,uint256,uint256,uint256[],uint256[])": [
                70,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "WeightedSubmission": {
        "function_list": [
            "WeightedSubmission()",
            "submitClaim(uint256,uint256,uint256,uint256,uint256,bool)",
            "getClaimSeed(address)",
            "storeClaimSeed(address)",
            "verifySubmissionIndex(address,uint256,uint256,uint256)",
            "calculateSubmissionIndex(address,uint256)",
            "closeSubmission(address)",
            "getClaimData(address,uint256,uint256,uint256)",
            "debugGetNumPendingSubmissions(address)",
            "debugResetSubmissions()"
        ],
        "initial_state": {
            "WeightedSubmission()": {
                "argument": {},
                "contract": {}
            },
            "submitClaim(uint256,uint256,uint256,uint256,uint256,bool)": {
                "argument": {
                    "numShares": "uint256",
                    "difficulty": "uint256",
                    "min": "uint256",
                    "max": "uint256",
                    "augRoot": "uint256"
                },
                "contract": {}
            },
            "getClaimSeed(address)": {
                "argument": {},
                "contract": {}
            },
            "storeClaimSeed(address)": {
                "argument": {},
                "contract": {}
            },
            "verifySubmissionIndex(address,uint256,uint256,uint256)": {
                "argument": {
                    "seed": "uint256",
                    "submissionNumber": "uint256",
                    "shareIndex": "uint256"
                },
                "contract": {}
            },
            "calculateSubmissionIndex(address,uint256)": {
                "argument": {
                    "seed": "uint256"
                },
                "contract": {}
            },
            "closeSubmission(address)": {
                "argument": {},
                "contract": {}
            },
            "getClaimData(address,uint256,uint256,uint256)": {
                "argument": {
                    "submissionIndex": "uint256",
                    "shareIndex": "uint256",
                    "seed": "uint256"
                },
                "contract": {}
            },
            "debugGetNumPendingSubmissions(address)": {
                "argument": {},
                "contract": {}
            },
            "debugResetSubmissions()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "submitClaim(uint256,uint256,uint256,uint256,uint256,bool)": [
                658,
                207
            ],
            "storeClaimSeed(address)": [
                591,
                185
            ],
            "calculateSubmissionIndex(address,uint256)": [
                246,
                119
            ],
            "getClaimSeed(address)": [
                383,
                141
            ],
            "verifySubmissionIndex(address,uint256,uint256,uint256)": [
                470,
                163
            ],
            "debugGetNumPendingSubmissions(address)": [
                136,
                75
            ],
            "debugResetSubmissions()": [
                223,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "SmartPool": {
        "function_list": [
            "WeightedSubmission()",
            "submitClaim(uint256,uint256,uint256,uint256,uint256,bool)",
            "getClaimSeed(address)",
            "storeClaimSeed(address)",
            "verifySubmissionIndex(address,uint256,uint256,uint256)",
            "calculateSubmissionIndex(address,uint256)",
            "closeSubmission(address)",
            "getClaimData(address,uint256,uint256,uint256)",
            "debugGetNumPendingSubmissions(address)",
            "debugResetSubmissions()",
            "Agt()",
            "parseBlockHeader(bytes)",
            "verifyAgt(Agt.VerifyAgtData,uint256,uint256[],uint256[])",
            "verifyAgtDebugForTesting(uint256,uint256,uint256,uint256,uint256,uint256,uint256[],uint256[])",
            "SmartPool(address[3],Ethash,address,bool)",
            "declareNewerVersion()",
            "withdraw(uint256)",
            "to62Encoding(uint256,uint256)",
            "register(address)",
            "canRegister(address)",
            "isRegistered(address)",
            "getMinerId(address)",
            "updateWhiteList(address,bool)",
            "verifyExtraData(bytes32,bytes32,uint256)",
            "verifyClaim(bytes,uint256,uint256,uint256,uint256[],uint256[],uint256[],uint256[])",
            "fallback()",
            "setUnlceRateAndFees(uint256,uint256)",
            "doPayment(uint256,address)",
            "getPoolETHBalance()",
            "getShareIndexDebugForTestRPC(address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "WeightedSubmission()": {
                "argument": {},
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "submitClaim(uint256,uint256,uint256,uint256,uint256,bool)": {
                "argument": {
                    "numShares": "uint256",
                    "difficulty": "uint256",
                    "min": "uint256",
                    "max": "uint256",
                    "augRoot": "uint256"
                },
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "getClaimSeed(address)": {
                "argument": {},
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "storeClaimSeed(address)": {
                "argument": {},
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "verifySubmissionIndex(address,uint256,uint256,uint256)": {
                "argument": {
                    "seed": "uint256",
                    "submissionNumber": "uint256",
                    "shareIndex": "uint256"
                },
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "calculateSubmissionIndex(address,uint256)": {
                "argument": {
                    "seed": "uint256"
                },
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "closeSubmission(address)": {
                "argument": {},
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "getClaimData(address,uint256,uint256,uint256)": {
                "argument": {
                    "submissionIndex": "uint256",
                    "shareIndex": "uint256",
                    "seed": "uint256"
                },
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "debugGetNumPendingSubmissions(address)": {
                "argument": {},
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "debugResetSubmissions()": {
                "argument": {},
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "Agt()": {
                "argument": {},
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "parseBlockHeader(bytes)": {
                "argument": {
                    "rlpHeader": "bytes"
                },
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "verifyAgt(Agt.VerifyAgtData,uint256,uint256[],uint256[])": {
                "argument": {
                    "branchIndex": "uint256",
                    "countersBranch": "uint256[]",
                    "hashesBranch": "uint256[]"
                },
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "verifyAgtDebugForTesting(uint256,uint256,uint256,uint256,uint256,uint256,uint256[],uint256[])": {
                "argument": {
                    "rootHash": "uint256",
                    "rootMin": "uint256",
                    "rootMax": "uint256",
                    "leafHash": "uint256",
                    "leafCounter": "uint256",
                    "branchIndex": "uint256",
                    "countersBranch": "uint256[]",
                    "hashesBranch": "uint256[]"
                },
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "SmartPool(address[3],Ethash,address,bool)": {
                "argument": {},
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "declareNewerVersion()": {
                "argument": {},
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "withdraw(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "to62Encoding(uint256,uint256)": {
                "argument": {
                    "id": "uint256",
                    "numChars": "uint256"
                },
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "register(address)": {
                "argument": {},
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "canRegister(address)": {
                "argument": {},
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "isRegistered(address)": {
                "argument": {},
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "getMinerId(address)": {
                "argument": {},
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "updateWhiteList(address,bool)": {
                "argument": {},
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "verifyExtraData(bytes32,bytes32,uint256)": {
                "argument": {
                    "extraData": "bytes32",
                    "minerId": "bytes32",
                    "difficulty": "uint256"
                },
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "verifyClaim(bytes,uint256,uint256,uint256,uint256[],uint256[],uint256[],uint256[])": {
                "argument": {
                    "rlpHeader": "bytes",
                    "nonce": "uint256",
                    "submissionIndex": "uint256",
                    "shareIndex": "uint256",
                    "dataSetLookup": "uint256[]",
                    "witnessForLookup": "uint256[]",
                    "augCountersBranch": "uint256[]",
                    "augHashesBranch": "uint256[]"
                },
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "setUnlceRateAndFees(uint256,uint256)": {
                "argument": {
                    "_uncleRate": "uint256",
                    "_poolFees": "uint256"
                },
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "doPayment(uint256,address)": {
                "argument": {
                    "submissionValue": "uint256"
                },
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "getPoolETHBalance()": {
                "argument": {},
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            },
            "getShareIndexDebugForTestRPC(address)": {
                "argument": {},
                "contract": {
                    "version": "string",
                    "uncleRate": "uint256",
                    "poolFees": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "storeClaimSeed(address)": [
                2586,
                537
            ],
            "calculateSubmissionIndex(address,uint256)": [
                1261,
                339
            ],
            "verifySubmissionIndex(address,uint256,uint256,uint256)": [
                1892,
                449
            ],
            "isRegistered(address)": [
                2495,
                515
            ],
            "verifyAgtDebugForTesting(uint256,uint256,uint256,uint256,uint256,uint256,uint256[],uint256[])": [
                1485,
                383
            ],
            "to62Encoding(uint256,uint256)": [
                3075,
                691
            ],
            "submitClaim(uint256,uint256,uint256,uint256,uint256,bool)": [
                2653,
                559
            ],
            "withdraw(uint256)": [
                793,
                185
            ],
            "updateWhiteList(address,bool)": [
                2013,
                471
            ],
            "debugResetSubmissions()": [
                1238,
                317
            ],
            "setUnlceRateAndFees(uint256,uint256)": [
                1039,
                273
            ],
            "getMinerId(address)": [
                2750,
                581
            ],
            "verifyClaim(bytes,uint256,uint256,uint256,uint256[],uint256[],uint256[],uint256[])": [
                2092,
                493
            ],
            "getPoolETHBalance()": [
                620,
                119
            ],
            "register(address)": [
                972,
                251
            ],
            "declareNewerVersion()": [
                2892,
                625
            ],
            "getShareIndexDebugForTestRPC(address)": [
                1825,
                427
            ],
            "getClaimSeed(address)": [
                1398,
                361
            ],
            "debugGetNumPendingSubmissions(address)": [
                706,
                163
            ],
            "canRegister(address)": [
                838,
                207
            ]
        },
        "block_CALL_mapping": {
            "block3529": [
                "withdrawalAddress.send( amount )"
            ],
            "block20542": [
                "paymentAddress.send( payment )"
            ],
            "jump20542": [
                "paymentAddress.send( payment )",
                "paymentAddress.send( payment )"
            ],
            "block10858": [
                "ethashContract.hashimoto( bytes32(leafHash),\n                                                bytes8(nonce),\n                                                dataSetLookup,\n                                                witnessForLookup,\n                                                header.blockNumber / 30000 )"
            ],
            "jump10858": [
                "ethashContract.hashimoto( bytes32(leafHash),\n                                                bytes8(nonce),\n                                                dataSetLookup,\n                                                witnessForLookup,\n                                                header.blockNumber / 30000 )",
                "ethashContract.hashimoto( bytes32(leafHash),\n                                                bytes8(nonce),\n                                                dataSetLookup,\n                                                witnessForLookup,\n                                                header.blockNumber / 30000 )"
            ],
            "jump3529": [
                "withdrawalAddress.send( amount )",
                "withdrawalAddress.send( amount )"
            ]
        }
    }
}