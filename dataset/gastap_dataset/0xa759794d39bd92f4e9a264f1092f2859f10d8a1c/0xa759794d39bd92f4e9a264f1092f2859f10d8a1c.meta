{
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                401,
                97
            ],
            "transfer(address,uint256)": [
                1385,
                361
            ],
            "allowance(address,address)": [
                1704,
                427
            ],
            "balanceOf(address)": [
                1044,
                273
            ],
            "transferFrom(address,address,uint256)": [
                588,
                163
            ]
        },
        "block_CALL_mapping": {
            "block3721": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "jump3721": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "TKT": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "TKT(address)",
            "mint(address,uint256)",
            "defrost()",
            "burn(uint256)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "TKT(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "mint(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "defrost()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "burn(uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                357,
                97
            ],
            "defrost()": [
                1384,
                361
            ],
            "mint(address,uint256)": [
                677,
                185
            ],
            "burn(uint256)": [
                754,
                207
            ],
            "balanceOf(address)": [
                886,
                251
            ],
            "transferFrom(address,address,uint256)": [
                501,
                141
            ],
            "allowance(address,address)": [
                1265,
                339
            ],
            "transfer(address,uint256)": [
                1117,
                295
            ]
        },
        "block_CALL_mapping": {}
    },
    "CryptoTicketsICO": {
        "function_list": [
            "CryptoTicketsICO(address,address,address,address,address,address,address,address,address,address,address)",
            "setRate(uint256)",
            "startIco()",
            "pauseIco()",
            "finishIco()",
            "fallback()",
            "buyForInvestor(address,uint256,string)",
            "swapToken(address)",
            "buy(address,uint256)",
            "withdrawEther(uint256)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "CryptoTicketsICO(address,address,address,address,address,address,address,address,address,address,address)": {
                "argument": {},
                "contract": {
                    "Tokens_For_Sale": "uint256",
                    "Rate_Eth": "uint256",
                    "Token_Price": "uint256",
                    "SoldNoBonuses": "uint256",
                    "bountyPart": "uint256",
                    "advisorsPart": "uint256",
                    "itdPart": "uint256",
                    "storagePart": "uint256",
                    "icoAndPOfPart": "uint256"
                }
            },
            "setRate(uint256)": {
                "argument": {
                    "_RateEth": "uint256"
                },
                "contract": {
                    "Tokens_For_Sale": "uint256",
                    "Rate_Eth": "uint256",
                    "Token_Price": "uint256",
                    "SoldNoBonuses": "uint256",
                    "bountyPart": "uint256",
                    "advisorsPart": "uint256",
                    "itdPart": "uint256",
                    "storagePart": "uint256",
                    "icoAndPOfPart": "uint256"
                }
            },
            "startIco()": {
                "argument": {},
                "contract": {
                    "Tokens_For_Sale": "uint256",
                    "Rate_Eth": "uint256",
                    "Token_Price": "uint256",
                    "SoldNoBonuses": "uint256",
                    "bountyPart": "uint256",
                    "advisorsPart": "uint256",
                    "itdPart": "uint256",
                    "storagePart": "uint256",
                    "icoAndPOfPart": "uint256"
                }
            },
            "pauseIco()": {
                "argument": {},
                "contract": {
                    "Tokens_For_Sale": "uint256",
                    "Rate_Eth": "uint256",
                    "Token_Price": "uint256",
                    "SoldNoBonuses": "uint256",
                    "bountyPart": "uint256",
                    "advisorsPart": "uint256",
                    "itdPart": "uint256",
                    "storagePart": "uint256",
                    "icoAndPOfPart": "uint256"
                }
            },
            "finishIco()": {
                "argument": {},
                "contract": {
                    "Tokens_For_Sale": "uint256",
                    "Rate_Eth": "uint256",
                    "Token_Price": "uint256",
                    "SoldNoBonuses": "uint256",
                    "bountyPart": "uint256",
                    "advisorsPart": "uint256",
                    "itdPart": "uint256",
                    "storagePart": "uint256",
                    "icoAndPOfPart": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "Tokens_For_Sale": "uint256",
                    "Rate_Eth": "uint256",
                    "Token_Price": "uint256",
                    "SoldNoBonuses": "uint256",
                    "bountyPart": "uint256",
                    "advisorsPart": "uint256",
                    "itdPart": "uint256",
                    "storagePart": "uint256",
                    "icoAndPOfPart": "uint256"
                }
            },
            "buyForInvestor(address,uint256,string)": {
                "argument": {
                    "_tokenValue": "uint256",
                    "_txHash": "string"
                },
                "contract": {
                    "Tokens_For_Sale": "uint256",
                    "Rate_Eth": "uint256",
                    "Token_Price": "uint256",
                    "SoldNoBonuses": "uint256",
                    "bountyPart": "uint256",
                    "advisorsPart": "uint256",
                    "itdPart": "uint256",
                    "storagePart": "uint256",
                    "icoAndPOfPart": "uint256"
                }
            },
            "swapToken(address)": {
                "argument": {},
                "contract": {
                    "Tokens_For_Sale": "uint256",
                    "Rate_Eth": "uint256",
                    "Token_Price": "uint256",
                    "SoldNoBonuses": "uint256",
                    "bountyPart": "uint256",
                    "advisorsPart": "uint256",
                    "itdPart": "uint256",
                    "storagePart": "uint256",
                    "icoAndPOfPart": "uint256"
                }
            },
            "buy(address,uint256)": {
                "argument": {
                    "_tokenValue": "uint256"
                },
                "contract": {
                    "Tokens_For_Sale": "uint256",
                    "Rate_Eth": "uint256",
                    "Token_Price": "uint256",
                    "SoldNoBonuses": "uint256",
                    "bountyPart": "uint256",
                    "advisorsPart": "uint256",
                    "itdPart": "uint256",
                    "storagePart": "uint256",
                    "icoAndPOfPart": "uint256"
                }
            },
            "withdrawEther(uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "Tokens_For_Sale": "uint256",
                    "Rate_Eth": "uint256",
                    "Token_Price": "uint256",
                    "SoldNoBonuses": "uint256",
                    "bountyPart": "uint256",
                    "advisorsPart": "uint256",
                    "itdPart": "uint256",
                    "storagePart": "uint256",
                    "icoAndPOfPart": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "Tokens_For_Sale": "uint256",
                    "Rate_Eth": "uint256",
                    "Token_Price": "uint256",
                    "SoldNoBonuses": "uint256",
                    "bountyPart": "uint256",
                    "advisorsPart": "uint256",
                    "itdPart": "uint256",
                    "storagePart": "uint256",
                    "icoAndPOfPart": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "setRate(uint256)": [
                640,
                88
            ],
            "startIco()": [
                1362,
                308
            ],
            "swapToken(address)": [
                1208,
                264
            ],
            "pauseIco()": [
                1559,
                374
            ],
            "withdrawEther(uint256)": [
                859,
                154
            ],
            "finishIco()": [
                1625,
                418
            ]
        },
        "block_CALL_mapping": {
            "block3065": [
                "Company.transfer(_value)"
            ],
            "block5991": [
                "token.mint(ItdFund, itdPart * totalAmount / 100)"
            ],
            "jump2160_1": [
                "token.mint(_investor, _tokenValue)",
                "token.mint(_investor, _tokenValue)"
            ],
            "jump2160": [
                "token.mint(_investor, _tokenValue)",
                "token.mint(_investor, _tokenValue)"
            ],
            "jump3723": [
                "tkt.balanceOf(_investor)",
                "tkt.balanceOf(_investor)"
            ],
            "block2160_0": [
                "token.mint(_investor, _tokenValue)"
            ],
            "block2160_1": [
                "token.mint(_investor, _tokenValue)"
            ],
            "jump5120": [
                "token.totalSupply()",
                "token.totalSupply()"
            ],
            "block2160": [
                "token.mint(_investor, _tokenValue)"
            ],
            "jump5991": [
                "token.mint(ItdFund, itdPart * totalAmount / 100)",
                "token.mint(ItdFund, itdPart * totalAmount / 100)"
            ],
            "jump6262": [
                "token.mint(StorageFund, storagePart * totalAmount / 100)",
                "token.mint(StorageFund, storagePart * totalAmount / 100)"
            ],
            "block5720": [
                "token.mint(AdvisorsFund, advisorsPart * totalAmount / 1000)"
            ],
            "block6262": [
                "token.mint(StorageFund, storagePart * totalAmount / 100)"
            ],
            "block5120": [
                "token.totalSupply()"
            ],
            "jump2160_0": [
                "token.mint(_investor, _tokenValue)",
                "token.mint(_investor, _tokenValue)"
            ],
            "block6420": [
                "token.defrost()"
            ],
            "block3723": [
                "tkt.balanceOf(_investor)"
            ],
            "jump5720": [
                "token.mint(AdvisorsFund, advisorsPart * totalAmount / 1000)",
                "token.mint(AdvisorsFund, advisorsPart * totalAmount / 1000)"
            ],
            "jump5448": [
                "token.mint(BountyFund, bountyPart * totalAmount / 100)",
                "token.mint(BountyFund, bountyPart * totalAmount / 100)"
            ],
            "jump6420": [
                "token.defrost()",
                "token.defrost()"
            ],
            "jump3065": [
                "Company.transfer(_value)",
                "Company.transfer(_value)"
            ],
            "block5448": [
                "token.mint(BountyFund, bountyPart * totalAmount / 100)"
            ],
            "block4084": [
                "token.mint(_investor, tktTokens)"
            ],
            "jump4084": [
                "token.mint(_investor, tktTokens)",
                "token.mint(_investor, tktTokens)"
            ]
        }
    }
}