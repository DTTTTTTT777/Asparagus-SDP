{
    "usingOraclize": {
        "function_list": [
            "oraclize_setNetwork()",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)",
            "matchBytes32Prefix(bytes32,bytes)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "matchBytes32Prefix(bytes32,bytes)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            }
        },
        "function_block_mapping": {
            "__callback(bytes32,string,bytes)": [
                200,
                97
            ],
            "__callback(bytes32,string)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "token": {
        "function_list": [
            "transfer(address,uint256)"
        ],
        "initial_state": {
            "transfer(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transfer(address,uint256)": [
                68,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "EtherFlip": {
        "function_list": [
            "oraclize_setNetwork()",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)",
            "matchBytes32Prefix(bytes32,bytes)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "EtherFlip()",
            "fallback()",
            "__callback(bytes32,string,bytes)",
            "updateMaxMinComparables(uint256,uint256,uint256,uint256)",
            "updateOwner(address)",
            "updateFlipAndMDT(address,uint256,address,uint256)",
            "refundTransfer(address,uint256)",
            "walletSend(address,uint256,address)",
            "updateGameSpecifics(uint256,uint256,uint256,uint256)",
            "setJackpotToken(address,uint256,uint256,address,uint256,uint256,uint256)",
            "setBonusToken(address,uint256,uint256,uint256,address,uint256,uint256,uint256)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork()": {
                "argument": {},
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "matchBytes32Prefix(bytes32,bytes)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "EtherFlip()": {
                "argument": {},
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "updateMaxMinComparables(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "updatedMaxBet": "uint256",
                    "updatedMinBet": "uint256",
                    "updatedBaseComparable": "uint256",
                    "updatedMDTComparable": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "updateOwner(address)": {
                "argument": {},
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "updateFlipAndMDT(address,uint256,address,uint256)": {
                "argument": {
                    "updatedFlipRewardAmount": "uint256",
                    "updatedMDTRewardAmount": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "refundTransfer(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "walletSend(address,uint256,address)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "updateGameSpecifics(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "newGas": "uint256",
                    "newOraclizeFee": "uint256",
                    "newFee": "uint256",
                    "newDivisor": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "setJackpotToken(address,uint256,uint256,address,uint256,uint256,uint256)": {
                "argument": {
                    "newJackpotAmount": "uint256",
                    "newJackpotHit": "uint256",
                    "newSponsoredJackpotAmount": "uint256",
                    "newSJackpotMin": "uint256",
                    "newSJackpotMax": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "setBonusToken(address,uint256,uint256,uint256,address,uint256,uint256,uint256)": {
                "argument": {
                    "newBonusAmount": "uint256",
                    "newBonusMin": "uint256",
                    "newBonusMax": "uint256",
                    "newSponsoredBonusAmount": "uint256",
                    "newSBonusMin": "uint256",
                    "newSBonusMax": "uint256"
                },
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "generatedBytes": "uint256",
                    "maxBet": "uint256",
                    "minBet": "uint256",
                    "oraclizeFee": "uint256",
                    "flipRewardAmount": "uint256",
                    "mdtRewardAmount": "uint256",
                    "jackpotAmount": "uint256",
                    "sponsoredJackpotAmount": "uint256",
                    "bonusAmount": "uint256",
                    "sponsoredBonusAmount": "uint256",
                    "callbackGas": "uint256",
                    "incrementFee": "uint256",
                    "incrementDivisor": "uint256",
                    "baseComparable": "uint256",
                    "jackpotHit": "uint256",
                    "sponsoredJackpotMin": "uint256",
                    "sponsoredJackpotMax": "uint256",
                    "bonusMin": "uint256",
                    "bonusMax": "uint256",
                    "sponsoredBonusMin": "uint256",
                    "sponsoredBonusMax": "uint256",
                    "mdtComparable": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "refundTransfer(address,uint256)": [
                2963,
                779
            ],
            "__callback(bytes32,string,bytes)": [
                1431,
                251
            ],
            "walletSend(address,uint256,address)": [
                2595,
                647
            ],
            "setBonusToken(address,uint256,uint256,uint256,address,uint256,uint256,uint256)": [
                3288,
                889
            ],
            "updateOwner(address)": [
                2182,
                493
            ],
            "setJackpotToken(address,uint256,uint256,address,uint256,uint256,uint256)": [
                1196,
                185
            ],
            "__callback(bytes32,string)": [
                1077,
                163
            ],
            "updateGameSpecifics(uint256,uint256,uint256,uint256)": [
                1002,
                141
            ],
            "updateMaxMinComparables(uint256,uint256,uint256,uint256)": [
                3213,
                867
            ],
            "updateFlipAndMDT(address,uint256,address,uint256)": [
                840,
                97
            ]
        },
        "block_CALL_mapping": {
            "block6664_0": [
                "playerAddress[_queryId].transfer((amount - oraclizeFee - eFee) * 2)"
            ],
            "jump14391_0": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump15381_0": [
                "sha256(context_name, queryId)",
                "sha256(context_name, queryId)"
            ],
            "jump15927_0": [
                "sha256(sig1)",
                "sha256(sig1)"
            ],
            "block14866_0": [
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)"
            ],
            "block4680": [
                "sha256(args[0])"
            ],
            "jump11606_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump15927": [
                "sha256(sig1)",
                "sha256(sig1)"
            ],
            "jump3749_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block5940": [
                "playerAddress[_queryId].transfer(amount)"
            ],
            "jump11606": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block12190_0": [
                "OAR.getAddress()"
            ],
            "jump6664": [
                "playerAddress[_queryId].transfer((amount - oraclizeFee - eFee) * 2)",
                "playerAddress[_queryId].transfer((amount - oraclizeFee - eFee) * 2)"
            ],
            "block8332": [
                "bonusToken.transfer(playerAddress[_queryId], bonusAmount)"
            ],
            "block11863": [
                "oraclize.randomDS_getSessionPubKeyHash()"
            ],
            "block16281_0": [
                "sha256(sessionPubkey)"
            ],
            "block7090": [
                "flipTokenReward.transfer(playerAddress[_queryId], flipRewardAmount * feeMultiple)"
            ],
            "block7708_0": [
                "jackpotToken.transfer(playerAddress[_queryId], jackpotAmount)"
            ],
            "jump8644": [
                "sponsoredBonusToken.transfer(playerAddress[_queryId], sponsoredBonusAmount)",
                "sponsoredBonusToken.transfer(playerAddress[_queryId], sponsoredBonusAmount)"
            ],
            "jump4085_0": [
                "oraclize.setProofType(proofP)",
                "oraclize.setProofType(proofP)"
            ],
            "jump4085": [
                "oraclize.setProofType(proofP)",
                "oraclize.setProofType(proofP)"
            ],
            "jump8332_0": [
                "bonusToken.transfer(playerAddress[_queryId], bonusAmount)",
                "bonusToken.transfer(playerAddress[_queryId], bonusAmount)"
            ],
            "block20705_0": [
                "sha256(tosign3)"
            ],
            "jump14014": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump7708_0": [
                "jackpotToken.transfer(playerAddress[_queryId], jackpotAmount)",
                "jackpotToken.transfer(playerAddress[_queryId], jackpotAmount)"
            ],
            "jump16281": [
                "sha256(sessionPubkey)",
                "sha256(sessionPubkey)"
            ],
            "jump12836": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump5940": [
                "playerAddress[_queryId].transfer(amount)",
                "playerAddress[_queryId].transfer(amount)"
            ],
            "block16721": [
                "sha256(tosign1)"
            ],
            "jump3749": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump7708": [
                "jackpotToken.transfer(playerAddress[_queryId], jackpotAmount)",
                "jackpotToken.transfer(playerAddress[_queryId], jackpotAmount)"
            ],
            "jump8020": [
                "sponsoredJackpotToken.transfer(playerAddress[_queryId], sponsoredJackpotAmount)",
                "sponsoredJackpotToken.transfer(playerAddress[_queryId], sponsoredJackpotAmount)"
            ],
            "block16721_0": [
                "sha256(tosign1)"
            ],
            "block7708": [
                "jackpotToken.transfer(playerAddress[_queryId], jackpotAmount)"
            ],
            "jump4680": [
                "sha256(args[0])",
                "sha256(args[0])"
            ],
            "block7090_0": [
                "flipTokenReward.transfer(playerAddress[_queryId], flipRewardAmount * feeMultiple)"
            ],
            "block15927": [
                "sha256(sig1)"
            ],
            "jump12190": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block3749_0": [
                "OAR.getAddress()"
            ],
            "block4680_0": [
                "sha256(args[0])"
            ],
            "block7400_0": [
                "millionDollarTokenReward.transfer(playerAddress[_queryId], mdtRewardAmount)"
            ],
            "block20045_0": [
                "sha256(tosign2)"
            ],
            "jump8332": [
                "bonusToken.transfer(playerAddress[_queryId], bonusAmount)",
                "bonusToken.transfer(playerAddress[_queryId], bonusAmount)"
            ],
            "jump8020_0": [
                "sponsoredJackpotToken.transfer(playerAddress[_queryId], sponsoredJackpotAmount)",
                "sponsoredJackpotToken.transfer(playerAddress[_queryId], sponsoredJackpotAmount)"
            ],
            "jump15381": [
                "sha256(context_name, queryId)",
                "sha256(context_name, queryId)"
            ],
            "block11606": [
                "OAR.getAddress()"
            ],
            "block4085_0": [
                "oraclize.setProofType(proofP)"
            ],
            "block13093_0": [
                "oraclize.cbAddress()"
            ],
            "jump4680_0": [
                "sha256(args[0])",
                "sha256(args[0])"
            ],
            "block13093": [
                "oraclize.cbAddress()"
            ],
            "jump16721_0": [
                "sha256(tosign1)",
                "sha256(tosign1)"
            ],
            "jump12836_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block8332_0": [
                "bonusToken.transfer(playerAddress[_queryId], bonusAmount)"
            ],
            "block20045": [
                "sha256(tosign2)"
            ],
            "jump14866_0": [
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)",
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)"
            ],
            "jump5940_0": [
                "playerAddress[_queryId].transfer(amount)",
                "playerAddress[_queryId].transfer(amount)"
            ],
            "block20838_10": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block12836_0": [
                "OAR.getAddress()"
            ],
            "block11606_0": [
                "OAR.getAddress()"
            ],
            "jump20705": [
                "sha256(tosign3)",
                "sha256(tosign3)"
            ],
            "block20838_9": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block20838_8": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "jump14014_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block20838_2": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block20838_1": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block20838_0": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block20838_7": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "jump20045_0": [
                "sha256(tosign2)",
                "sha256(tosign2)"
            ],
            "block20838_5": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block20838_4": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block3749": [
                "OAR.getAddress()"
            ],
            "jump14391": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block20838_3": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block9631": [
                "outboundAddress.transfer(amount)"
            ],
            "jump20045": [
                "sha256(tosign2)",
                "sha256(tosign2)"
            ],
            "block12836": [
                "OAR.getAddress()"
            ],
            "block6664": [
                "playerAddress[_queryId].transfer((amount - oraclizeFee - eFee) * 2)"
            ],
            "block14014": [
                "OAR.getAddress()"
            ],
            "jump20705_0": [
                "sha256(tosign3)",
                "sha256(tosign3)"
            ],
            "block8644": [
                "sponsoredBonusToken.transfer(playerAddress[_queryId], sponsoredBonusAmount)"
            ],
            "jump16281_0": [
                "sha256(sessionPubkey)",
                "sha256(sessionPubkey)"
            ],
            "block14391": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump8644_0": [
                "sponsoredBonusToken.transfer(playerAddress[_queryId], sponsoredBonusAmount)",
                "sponsoredBonusToken.transfer(playerAddress[_queryId], sponsoredBonusAmount)"
            ],
            "block20838": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block20838_6": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "jump9631": [
                "outboundAddress.transfer(amount)",
                "outboundAddress.transfer(amount)"
            ],
            "jump11863": [
                "oraclize.randomDS_getSessionPubKeyHash()",
                "oraclize.randomDS_getSessionPubKeyHash()"
            ],
            "jump12190_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump16721": [
                "sha256(tosign1)",
                "sha256(tosign1)"
            ],
            "jump7090_0": [
                "flipTokenReward.transfer(playerAddress[_queryId], flipRewardAmount * feeMultiple)",
                "flipTokenReward.transfer(playerAddress[_queryId], flipRewardAmount * feeMultiple)"
            ],
            "block15927_0": [
                "sha256(sig1)"
            ],
            "block20705": [
                "sha256(tosign3)"
            ],
            "block12190": [
                "OAR.getAddress()"
            ],
            "jump14866": [
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)",
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)"
            ],
            "jump13093_0": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "block16281": [
                "sha256(sessionPubkey)"
            ],
            "jump7090": [
                "flipTokenReward.transfer(playerAddress[_queryId], flipRewardAmount * feeMultiple)",
                "flipTokenReward.transfer(playerAddress[_queryId], flipRewardAmount * feeMultiple)"
            ],
            "block9447": [
                "chosenToken.transfer(outboundAddress, amount)"
            ],
            "block14866": [
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)"
            ],
            "block8644_0": [
                "sponsoredBonusToken.transfer(playerAddress[_queryId], sponsoredBonusAmount)"
            ],
            "block14391_0": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump6664_0": [
                "playerAddress[_queryId].transfer((amount - oraclizeFee - eFee) * 2)",
                "playerAddress[_queryId].transfer((amount - oraclizeFee - eFee) * 2)"
            ],
            "block5940_0": [
                "playerAddress[_queryId].transfer(amount)"
            ],
            "block15381_0": [
                "sha256(context_name, queryId)"
            ],
            "jump7400_0": [
                "millionDollarTokenReward.transfer(playerAddress[_queryId], mdtRewardAmount)",
                "millionDollarTokenReward.transfer(playerAddress[_queryId], mdtRewardAmount)"
            ],
            "jump7400": [
                "millionDollarTokenReward.transfer(playerAddress[_queryId], mdtRewardAmount)",
                "millionDollarTokenReward.transfer(playerAddress[_queryId], mdtRewardAmount)"
            ],
            "block8020_0": [
                "sponsoredJackpotToken.transfer(playerAddress[_queryId], sponsoredJackpotAmount)"
            ],
            "block15381": [
                "sha256(context_name, queryId)"
            ],
            "block8020": [
                "sponsoredJackpotToken.transfer(playerAddress[_queryId], sponsoredJackpotAmount)"
            ],
            "block14014_0": [
                "OAR.getAddress()"
            ],
            "block11863_0": [
                "oraclize.randomDS_getSessionPubKeyHash()"
            ],
            "jump13093": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "jump9447": [
                "chosenToken.transfer(outboundAddress, amount)",
                "chosenToken.transfer(outboundAddress, amount)"
            ],
            "jump11863_0": [
                "oraclize.randomDS_getSessionPubKeyHash()",
                "oraclize.randomDS_getSessionPubKeyHash()"
            ],
            "block4085": [
                "oraclize.setProofType(proofP)"
            ],
            "block7400": [
                "millionDollarTokenReward.transfer(playerAddress[_queryId], mdtRewardAmount)"
            ]
        }
    }
}