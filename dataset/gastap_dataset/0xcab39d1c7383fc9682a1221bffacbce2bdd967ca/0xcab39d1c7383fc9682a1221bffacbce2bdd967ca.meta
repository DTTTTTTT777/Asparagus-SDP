{
    "RecoveryWithTenant": {
        "function_list": [
            "RecoveryWithTenant()",
            "_checkSigned(bytes32,uint256,uint8,bytes32,bytes32)",
            "setOracle(address)",
            "configure(address,address,uint256,uint8,bytes32,bytes32)",
            "addUser(address,uint256,uint8,bytes32,bytes32)",
            "recoverUser(address,address,uint256,uint8,bytes32,bytes32)",
            "fallback()",
            "isUser(address)"
        ],
        "initial_state": {
            "RecoveryWithTenant()": {
                "argument": {},
                "contract": {
                    "users": "RecoveryWithTenant.User[]"
                }
            },
            "_checkSigned(bytes32,uint256,uint8,bytes32,bytes32)": {
                "argument": {
                    "_hash": "bytes32",
                    "_nonce": "uint256",
                    "_v": "uint8",
                    "_r": "bytes32",
                    "_s": "bytes32"
                },
                "contract": {
                    "users": "RecoveryWithTenant.User[]"
                }
            },
            "setOracle(address)": {
                "argument": {},
                "contract": {
                    "users": "RecoveryWithTenant.User[]"
                }
            },
            "configure(address,address,uint256,uint8,bytes32,bytes32)": {
                "argument": {
                    "_nonce": "uint256",
                    "_v": "uint8",
                    "_r": "bytes32",
                    "_s": "bytes32"
                },
                "contract": {
                    "users": "RecoveryWithTenant.User[]"
                }
            },
            "addUser(address,uint256,uint8,bytes32,bytes32)": {
                "argument": {
                    "_nonce": "uint256",
                    "_v": "uint8",
                    "_r": "bytes32",
                    "_s": "bytes32"
                },
                "contract": {
                    "users": "RecoveryWithTenant.User[]"
                }
            },
            "recoverUser(address,address,uint256,uint8,bytes32,bytes32)": {
                "argument": {
                    "_nonce": "uint256",
                    "_v": "uint8",
                    "_r": "bytes32",
                    "_s": "bytes32"
                },
                "contract": {
                    "users": "RecoveryWithTenant.User[]"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "users": "RecoveryWithTenant.User[]"
                }
            },
            "isUser(address)": {
                "argument": {},
                "contract": {
                    "users": "RecoveryWithTenant.User[]"
                }
            }
        },
        "function_block_mapping": {
            "configure(address,address,uint256,uint8,bytes32,bytes32)": [
                327,
                97
            ],
            "addUser(address,uint256,uint8,bytes32,bytes32)": [
                185,
                75
            ],
            "recoverUser(address,address,uint256,uint8,bytes32,bytes32)": [
                1029,
                251
            ],
            "isUser(address)": [
                610,
                141
            ],
            "setOracle(address)": [
                788,
                185
            ]
        },
        "block_CALL_mapping": {
            "block4219_1": [
                "ecrecover(_hash, _v, _r, _s)"
            ],
            "block4219_0": [
                "ecrecover(_hash, _v, _r, _s)"
            ],
            "block4219": [
                "ecrecover(_hash, _v, _r, _s)"
            ],
            "jump3695": [
                "Destination(callDestination).recover(_oldAddr, _newAddr)",
                "Destination(callDestination).recover(_oldAddr, _newAddr)"
            ],
            "block3695": [
                "Destination(callDestination).recover(_oldAddr, _newAddr)"
            ],
            "jump4219_1": [
                "ecrecover(_hash, _v, _r, _s)",
                "ecrecover(_hash, _v, _r, _s)"
            ],
            "jump4219_0": [
                "ecrecover(_hash, _v, _r, _s)",
                "ecrecover(_hash, _v, _r, _s)"
            ],
            "jump4219": [
                "ecrecover(_hash, _v, _r, _s)",
                "ecrecover(_hash, _v, _r, _s)"
            ]
        }
    }
}