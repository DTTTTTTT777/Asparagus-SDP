{
    "SafeMath": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeDiv(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeDiv(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Owned": {
        "function_list": [
            "Owned()",
            "transferOwnership(address)",
            "acceptOwnership()"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "acceptOwnership()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                300,
                141
            ],
            "acceptOwnership()": [
                103,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                302,
                97
            ],
            "balanceOf(address)": [
                622,
                185
            ],
            "totalSupply()": [
                403,
                119
            ],
            "transferFrom(address,address,uint256)": [
                446,
                141
            ],
            "allowance(address,address)": [
                954,
                251
            ],
            "transfer(address,uint256)": [
                853,
                229
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20Token": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeDiv(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalTokens": "uint256"
                }
            },
            "safeDiv(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalTokens": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalTokens": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalTokens": "uint256"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "totalTokens": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalTokens": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalTokens": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalTokens": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalTokens": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "totalTokens": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                136,
                75
            ],
            "balanceOf(address)": [
                413,
                141
            ],
            "totalSupply()": [
                237,
                97
            ],
            "allowance(address,address)": [
                644,
                207
            ],
            "transferFrom(address,address,uint256)": [
                280,
                119
            ],
            "transfer(address,uint256)": [
                543,
                185
            ]
        },
        "block_CALL_mapping": {}
    },
    "Wolk": {
        "function_list": [
            "Owned()",
            "transferOwnership(address)",
            "acceptOwnership()",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "safeMul(uint256,uint256)",
            "safeDiv(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "reserveBalance": "uint256",
                    "percentageETHReserve": "uint8"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "reserveBalance": "uint256",
                    "percentageETHReserve": "uint8"
                }
            },
            "acceptOwnership()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "reserveBalance": "uint256",
                    "percentageETHReserve": "uint8"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "reserveBalance": "uint256",
                    "percentageETHReserve": "uint8"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "reserveBalance": "uint256",
                    "percentageETHReserve": "uint8"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "reserveBalance": "uint256",
                    "percentageETHReserve": "uint8"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "reserveBalance": "uint256",
                    "percentageETHReserve": "uint8"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "reserveBalance": "uint256",
                    "percentageETHReserve": "uint8"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "reserveBalance": "uint256",
                    "percentageETHReserve": "uint8"
                }
            },
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "reserveBalance": "uint256",
                    "percentageETHReserve": "uint8"
                }
            },
            "safeDiv(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "reserveBalance": "uint256",
                    "percentageETHReserve": "uint8"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "reserveBalance": "uint256",
                    "percentageETHReserve": "uint8"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "reserveBalance": "uint256",
                    "percentageETHReserve": "uint8"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "reserveBalance": "uint256",
                    "percentageETHReserve": "uint8"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                423,
                97
            ],
            "transfer(address,uint256)": [
                1306,
                361
            ],
            "balanceOf(address)": [
                743,
                185
            ],
            "totalSupply()": [
                524,
                119
            ],
            "transferFrom(address,address,uint256)": [
                567,
                141
            ],
            "acceptOwnership()": [
                830,
                207
            ],
            "allowance(address,address)": [
                1541,
                427
            ],
            "transferOwnership(address)": [
                1794,
                493
            ]
        },
        "block_CALL_mapping": {}
    },
    "WolkTGE": {
        "function_list": [
            "Owned()",
            "transferOwnership(address)",
            "acceptOwnership()",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "safeMul(uint256,uint256)",
            "safeDiv(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "wolkGenesis(uint256,uint256,uint256,address,address)",
            "addParticipant(address[],uint256[])",
            "removeParticipant(address[])",
            "participantBalance(address)",
            "tokenGenerationEvent(address)",
            "refund()",
            "finalizeOpenSale()",
            "finalize()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {
                    "tokenGenerationMin": "uint256",
                    "tokenGenerationMax": "uint256",
                    "presale_start_block": "uint256",
                    "start_block": "uint256",
                    "end_block": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "tokenGenerationMin": "uint256",
                    "tokenGenerationMax": "uint256",
                    "presale_start_block": "uint256",
                    "start_block": "uint256",
                    "end_block": "uint256"
                }
            },
            "acceptOwnership()": {
                "argument": {},
                "contract": {
                    "tokenGenerationMin": "uint256",
                    "tokenGenerationMax": "uint256",
                    "presale_start_block": "uint256",
                    "start_block": "uint256",
                    "end_block": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "tokenGenerationMin": "uint256",
                    "tokenGenerationMax": "uint256",
                    "presale_start_block": "uint256",
                    "start_block": "uint256",
                    "end_block": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "tokenGenerationMin": "uint256",
                    "tokenGenerationMax": "uint256",
                    "presale_start_block": "uint256",
                    "start_block": "uint256",
                    "end_block": "uint256"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "tokenGenerationMin": "uint256",
                    "tokenGenerationMax": "uint256",
                    "presale_start_block": "uint256",
                    "start_block": "uint256",
                    "end_block": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "tokenGenerationMin": "uint256",
                    "tokenGenerationMax": "uint256",
                    "presale_start_block": "uint256",
                    "start_block": "uint256",
                    "end_block": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "tokenGenerationMin": "uint256",
                    "tokenGenerationMax": "uint256",
                    "presale_start_block": "uint256",
                    "start_block": "uint256",
                    "end_block": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "tokenGenerationMin": "uint256",
                    "tokenGenerationMax": "uint256",
                    "presale_start_block": "uint256",
                    "start_block": "uint256",
                    "end_block": "uint256"
                }
            },
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "tokenGenerationMin": "uint256",
                    "tokenGenerationMax": "uint256",
                    "presale_start_block": "uint256",
                    "start_block": "uint256",
                    "end_block": "uint256"
                }
            },
            "safeDiv(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "tokenGenerationMin": "uint256",
                    "tokenGenerationMax": "uint256",
                    "presale_start_block": "uint256",
                    "start_block": "uint256",
                    "end_block": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "tokenGenerationMin": "uint256",
                    "tokenGenerationMax": "uint256",
                    "presale_start_block": "uint256",
                    "start_block": "uint256",
                    "end_block": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "tokenGenerationMin": "uint256",
                    "tokenGenerationMax": "uint256",
                    "presale_start_block": "uint256",
                    "start_block": "uint256",
                    "end_block": "uint256"
                }
            },
            "wolkGenesis(uint256,uint256,uint256,address,address)": {
                "argument": {
                    "_presaleStartBlock": "uint256",
                    "_startBlock": "uint256",
                    "_endBlock": "uint256"
                },
                "contract": {
                    "tokenGenerationMin": "uint256",
                    "tokenGenerationMax": "uint256",
                    "presale_start_block": "uint256",
                    "start_block": "uint256",
                    "end_block": "uint256"
                }
            },
            "addParticipant(address[],uint256[])": {
                "argument": {
                    "_presaleParticipants": "address[]",
                    "_contributionLimits": "uint256[]"
                },
                "contract": {
                    "tokenGenerationMin": "uint256",
                    "tokenGenerationMax": "uint256",
                    "presale_start_block": "uint256",
                    "start_block": "uint256",
                    "end_block": "uint256"
                }
            },
            "removeParticipant(address[])": {
                "argument": {
                    "_presaleParticipants": "address[]"
                },
                "contract": {
                    "tokenGenerationMin": "uint256",
                    "tokenGenerationMax": "uint256",
                    "presale_start_block": "uint256",
                    "start_block": "uint256",
                    "end_block": "uint256"
                }
            },
            "participantBalance(address)": {
                "argument": {},
                "contract": {
                    "tokenGenerationMin": "uint256",
                    "tokenGenerationMax": "uint256",
                    "presale_start_block": "uint256",
                    "start_block": "uint256",
                    "end_block": "uint256"
                }
            },
            "tokenGenerationEvent(address)": {
                "argument": {},
                "contract": {
                    "tokenGenerationMin": "uint256",
                    "tokenGenerationMax": "uint256",
                    "presale_start_block": "uint256",
                    "start_block": "uint256",
                    "end_block": "uint256"
                }
            },
            "refund()": {
                "argument": {},
                "contract": {
                    "tokenGenerationMin": "uint256",
                    "tokenGenerationMax": "uint256",
                    "presale_start_block": "uint256",
                    "start_block": "uint256",
                    "end_block": "uint256"
                }
            },
            "finalizeOpenSale()": {
                "argument": {},
                "contract": {
                    "tokenGenerationMin": "uint256",
                    "tokenGenerationMax": "uint256",
                    "presale_start_block": "uint256",
                    "start_block": "uint256",
                    "end_block": "uint256"
                }
            },
            "finalize()": {
                "argument": {},
                "contract": {
                    "tokenGenerationMin": "uint256",
                    "tokenGenerationMax": "uint256",
                    "presale_start_block": "uint256",
                    "start_block": "uint256",
                    "end_block": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "tokenGenerationMin": "uint256",
                    "tokenGenerationMax": "uint256",
                    "presale_start_block": "uint256",
                    "start_block": "uint256",
                    "end_block": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "addParticipant(address[],uint256[])": [
                566,
                97
            ],
            "totalSupply()": [
                860,
                141
            ],
            "wolkGenesis(uint256,uint256,uint256,address,address)": [
                1972,
                537
            ],
            "transferFrom(address,address,uint256)": [
                903,
                163
            ],
            "approve(address,uint256)": [
                759,
                119
            ],
            "finalizeOpenSale()": [
                1079,
                207
            ],
            "tokenGenerationEvent(address)": [
                2834,
                779
            ],
            "participantBalance(address)": [
                1374,
                383
            ],
            "balanceOf(address)": [
                1221,
                317
            ],
            "refund()": [
                1112,
                251
            ],
            "transferOwnership(address)": [
                2767,
                757
            ],
            "finalize()": [
                1102,
                229
            ],
            "removeParticipant(address[])": [
                2554,
                713
            ],
            "transfer(address,uint256)": [
                1871,
                515
            ],
            "allowance(address,address)": [
                2388,
                669
            ],
            "acceptOwnership()": [
                1308,
                339
            ]
        },
        "block_CALL_mapping": {
            "block6060": [
                "msg.sender.transfer(refundBalance)"
            ],
            "jump6060": [
                "msg.sender.transfer(refundBalance)",
                "msg.sender.transfer(refundBalance)"
            ],
            "jump4867": [
                "msg.sender.transfer(withdrawalBalance)",
                "msg.sender.transfer(withdrawalBalance)"
            ],
            "block4867": [
                "msg.sender.transfer(withdrawalBalance)"
            ]
        }
    },
    "WolkProtocol": {
        "function_list": [
            "Owned()",
            "transferOwnership(address)",
            "acceptOwnership()",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "safeMul(uint256,uint256)",
            "safeDiv(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "setBurnRate(uint256)",
            "setBurnFormula(address)",
            "setFeeFormula(address)",
            "updateSettlementStatus(bool)",
            "setServiceFee(address,uint256)",
            "checkServiceFee(address)",
            "checkFeeSchedule(address)",
            "estWolkToBurn(address,uint256)",
            "estProviderFee(address,uint256)",
            "settleBuyer(address,uint256)",
            "settleSeller(address,uint256)",
            "authorizeProvider(address)",
            "deauthorizeProvider(address)",
            "checkAuthorization(address,address)",
            "grantService(address,address)",
            "removeService(address,address)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "acceptOwnership()": {
                "argument": {},
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "safeDiv(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "setBurnRate(uint256)": {
                "argument": {
                    "_burnBasisPoints": "uint256"
                },
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "setBurnFormula(address)": {
                "argument": {},
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "setFeeFormula(address)": {
                "argument": {},
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "updateSettlementStatus(bool)": {
                "argument": {},
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "setServiceFee(address,uint256)": {
                "argument": {
                    "_feeBasisPoints": "uint256"
                },
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "checkServiceFee(address)": {
                "argument": {},
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "checkFeeSchedule(address)": {
                "argument": {},
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "estWolkToBurn(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "estProviderFee(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "settleBuyer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "settleSeller(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "authorizeProvider(address)": {
                "argument": {},
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "deauthorizeProvider(address)": {
                "argument": {},
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "checkAuthorization(address,address)": {
                "argument": {},
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "grantService(address,address)": {
                "argument": {},
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "removeService(address,address)": {
                "argument": {},
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "burnBasisPoints": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "checkServiceFee(address)": [
                1506,
                317
            ],
            "removeService(address,address)": [
                2092,
                493
            ],
            "settleBuyer(address,uint256)": [
                1090,
                229
            ],
            "totalSupply()": [
                802,
                141
            ],
            "checkAuthorization(address,address)": [
                1383,
                295
            ],
            "transferFrom(address,address,uint256)": [
                914,
                185
            ],
            "setBurnFormula(address)": [
                3306,
                823
            ],
            "approve(address,uint256)": [
                610,
                97
            ],
            "deauthorizeProvider(address)": [
                1292,
                273
            ],
            "setFeeFormula(address)": [
                3397,
                845
            ],
            "checkFeeSchedule(address)": [
                3488,
                867
            ],
            "settleSeller(address,uint256)": [
                1191,
                251
            ],
            "setServiceFee(address,uint256)": [
                3051,
                757
            ],
            "authorizeProvider(address)": [
                711,
                119
            ],
            "balanceOf(address)": [
                1593,
                339
            ],
            "transferOwnership(address)": [
                3239,
                801
            ],
            "grantService(address,address)": [
                1680,
                361
            ],
            "setBurnRate(uint256)": [
                845,
                163
            ],
            "updateSettlementStatus(bool)": [
                2727,
                669
            ],
            "transfer(address,uint256)": [
                2532,
                603
            ],
            "allowance(address,address)": [
                2885,
                713
            ],
            "acceptOwnership()": [
                1803,
                383
            ]
        },
        "block_CALL_mapping": {
            "jump11879_0": [
                "IBurnFormula(_burnFormula).calculateWolkToBurn(_value)",
                "IBurnFormula(_burnFormula).calculateWolkToBurn(_value)"
            ],
            "jump12322_0": [
                "IFeeFormula(ProviderFeeFormula).calculateProviderFee(_value)",
                "IFeeFormula(ProviderFeeFormula).calculateProviderFee(_value)"
            ],
            "block12322_0": [
                "IFeeFormula(ProviderFeeFormula).calculateProviderFee(_value)"
            ],
            "block12322": [
                "IFeeFormula(ProviderFeeFormula).calculateProviderFee(_value)"
            ],
            "block11879": [
                "IBurnFormula(_burnFormula).calculateWolkToBurn(_value)"
            ],
            "block11879_0": [
                "IBurnFormula(_burnFormula).calculateWolkToBurn(_value)"
            ],
            "jump12322": [
                "IFeeFormula(ProviderFeeFormula).calculateProviderFee(_value)",
                "IFeeFormula(ProviderFeeFormula).calculateProviderFee(_value)"
            ],
            "jump11879": [
                "IBurnFormula(_burnFormula).calculateWolkToBurn(_value)",
                "IBurnFormula(_burnFormula).calculateWolkToBurn(_value)"
            ]
        }
    },
    "WolkExchange": {
        "function_list": [
            "wolkGenesis(uint256,uint256,uint256,address,address)",
            "addParticipant(address[],uint256[])",
            "removeParticipant(address[])",
            "participantBalance(address)",
            "tokenGenerationEvent(address)",
            "refund()",
            "finalizeOpenSale()",
            "finalize()",
            "Owned()",
            "transferOwnership(address)",
            "acceptOwnership()",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "safeMul(uint256,uint256)",
            "safeDiv(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "setBurnRate(uint256)",
            "setBurnFormula(address)",
            "setFeeFormula(address)",
            "updateSettlementStatus(bool)",
            "setServiceFee(address,uint256)",
            "checkServiceFee(address)",
            "checkFeeSchedule(address)",
            "estWolkToBurn(address,uint256)",
            "estProviderFee(address,uint256)",
            "settleBuyer(address,uint256)",
            "settleSeller(address,uint256)",
            "authorizeProvider(address)",
            "deauthorizeProvider(address)",
            "checkAuthorization(address,address)",
            "grantService(address,address)",
            "removeService(address,address)",
            "setExchangeFormula(address)",
            "updateExchangeStatus(bool)",
            "setMaxPerExchange(uint256)",
            "estLiquidationCap()",
            "sellWolkEstimate(uint256,address)",
            "purchaseWolkEstimate(uint256,address)",
            "sellWolk(uint256)",
            "purchaseWolk(address)",
            "fallback()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "wolkGenesis(uint256,uint256,uint256,address,address)": {
                "argument": {
                    "_presaleStartBlock": "uint256",
                    "_startBlock": "uint256",
                    "_endBlock": "uint256"
                },
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "addParticipant(address[],uint256[])": {
                "argument": {
                    "_presaleParticipants": "address[]",
                    "_contributionLimits": "uint256[]"
                },
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "removeParticipant(address[])": {
                "argument": {
                    "_presaleParticipants": "address[]"
                },
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "participantBalance(address)": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "tokenGenerationEvent(address)": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "refund()": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "finalizeOpenSale()": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "finalize()": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "Owned()": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "acceptOwnership()": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "safeDiv(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "setBurnRate(uint256)": {
                "argument": {
                    "_burnBasisPoints": "uint256"
                },
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "setBurnFormula(address)": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "setFeeFormula(address)": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "updateSettlementStatus(bool)": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "setServiceFee(address,uint256)": {
                "argument": {
                    "_feeBasisPoints": "uint256"
                },
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "checkServiceFee(address)": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "checkFeeSchedule(address)": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "estWolkToBurn(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "estProviderFee(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "settleBuyer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "settleSeller(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "authorizeProvider(address)": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "deauthorizeProvider(address)": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "checkAuthorization(address,address)": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "grantService(address,address)": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "removeService(address,address)": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "setExchangeFormula(address)": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "updateExchangeStatus(bool)": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "setMaxPerExchange(uint256)": {
                "argument": {
                    "_maxPerExchange": "uint256"
                },
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "estLiquidationCap()": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "sellWolkEstimate(uint256,address)": {
                "argument": {
                    "_wolkAmountest": "uint256"
                },
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "purchaseWolkEstimate(uint256,address)": {
                "argument": {
                    "_ethAmountest": "uint256"
                },
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "sellWolk(uint256)": {
                "argument": {
                    "_wolkAmount": "uint256"
                },
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "purchaseWolk(address)": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "maxPerExchangeBP": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "checkServiceFee(address)": [
                2974,
                506
            ],
            "addParticipant(address[],uint256[])": [
                1373,
                44
            ],
            "purchaseWolk(address)": [
                1090,
                839
            ],
            "settleBuyer(address,uint256)": [
                2449,
                352
            ],
            "checkAuthorization(address,address)": [
                2851,
                484
            ],
            "totalSupply()": [
                1758,
                110
            ],
            "wolkGenesis(uint256,uint256,uint256,address,address)": [
                4343,
                902
            ],
            "updateExchangeStatus(bool)": [
                2271,
                264
            ],
            "setExchangeFormula(address)": [
                2003,
                176
            ],
            "updateSettlementStatus(bool)": [
                4676,
                1012
            ],
            "transferFrom(address,address,uint256)": [
                1870,
                154
            ],
            "setBurnFormula(address)": [
                5424,
                1210
            ],
            "approve(address,uint256)": [
                1566,
                66
            ],
            "setFeeFormula(address)": [
                5515,
                1232
            ],
            "deauthorizeProvider(address)": [
                2760,
                462
            ],
            "acceptOwnership()": [
                3314,
                594
            ],
            "finalizeOpenSale()": [
                2416,
                308
            ],
            "removeService(address,address)": [
                3690,
                726
            ],
            "transferOwnership(address)": [
                5357,
                1188
            ],
            "settleSeller(address,uint256)": [
                2616,
                418
            ],
            "estLiquidationCap()": [
                4044,
                792
            ],
            "setServiceFee(address,uint256)": [
                5169,
                1144
            ],
            "authorizeProvider(address)": [
                1667,
                88
            ],
            "setMaxPerExchange(uint256)": [
                4274,
                880
            ],
            "participantBalance(address)": [
                3467,
                660
            ],
            "balanceOf(address)": [
                3061,
                528
            ],
            "refund()": [
                2550,
                374
            ],
            "grantService(address,address)": [
                3191,
                572
            ],
            "tokenGenerationEvent(address)": [
                894,
                839
            ],
            "checkFeeSchedule(address)": [
                5660,
                1276
            ],
            "finalize()": [
                2439,
                330
            ],
            "setBurnRate(uint256)": [
                1801,
                132
            ],
            "removeParticipant(address[])": [
                5043,
                1122
            ],
            "transfer(address,uint256)": [
                4173,
                858
            ],
            "allowance(address,address)": [
                4877,
                1078
            ]
        },
        "block_CALL_mapping": {
            "block1090_0": [
                "this.purchaseWolk.value(msg.value)(msg.sender)"
            ],
            "block1090": [
                "this.purchaseWolk.value(msg.value)(msg.sender)"
            ],
            "jump12288": [
                "msg.sender.transfer(refundBalance)",
                "msg.sender.transfer(refundBalance)"
            ],
            "jump20955_0": [
                "IFeeFormula(ProviderFeeFormula).calculateProviderFee(_value)",
                "IFeeFormula(ProviderFeeFormula).calculateProviderFee(_value)"
            ],
            "jump20955": [
                "IFeeFormula(ProviderFeeFormula).calculateProviderFee(_value)",
                "IFeeFormula(ProviderFeeFormula).calculateProviderFee(_value)"
            ],
            "block20008": [
                "IBancorFormula(_formula).calculateSaleReturn(totalTokens, reserveBalance, percentageETHReserve, _wolkAmountest)"
            ],
            "block894": [
                "this.tokenGenerationEvent.value(msg.value)(msg.sender)"
            ],
            "jump6221": [
                "msg.sender.transfer(ethReceivable)",
                "msg.sender.transfer(ethReceivable)"
            ],
            "jump20346_1": [
                "IBancorFormula(_formula).calculatePurchaseReturn(totalTokens, reserveBalance, percentageETHReserve, _ethAmountest)",
                "IBancorFormula(_formula).calculatePurchaseReturn(totalTokens, reserveBalance, percentageETHReserve, _ethAmountest)"
            ],
            "block20628": [
                "IBurnFormula(_burnFormula).calculateWolkToBurn(_value)"
            ],
            "jump894_0": [
                "this.tokenGenerationEvent.value(msg.value)(msg.sender)",
                "this.tokenGenerationEvent.value(msg.value)(msg.sender)"
            ],
            "block6221": [
                "msg.sender.transfer(ethReceivable)"
            ],
            "jump20346_0": [
                "IBancorFormula(_formula).calculatePurchaseReturn(totalTokens, reserveBalance, percentageETHReserve, _ethAmountest)",
                "IBancorFormula(_formula).calculatePurchaseReturn(totalTokens, reserveBalance, percentageETHReserve, _ethAmountest)"
            ],
            "block20628_0": [
                "IBurnFormula(_burnFormula).calculateWolkToBurn(_value)"
            ],
            "block20346_1": [
                "IBancorFormula(_formula).calculatePurchaseReturn(totalTokens, reserveBalance, percentageETHReserve, _ethAmountest)"
            ],
            "block20346_0": [
                "IBancorFormula(_formula).calculatePurchaseReturn(totalTokens, reserveBalance, percentageETHReserve, _ethAmountest)"
            ],
            "jump20008_0": [
                "IBancorFormula(_formula).calculateSaleReturn(totalTokens, reserveBalance, percentageETHReserve, _wolkAmountest)",
                "IBancorFormula(_formula).calculateSaleReturn(totalTokens, reserveBalance, percentageETHReserve, _wolkAmountest)"
            ],
            "jump20008_1": [
                "IBancorFormula(_formula).calculateSaleReturn(totalTokens, reserveBalance, percentageETHReserve, _wolkAmountest)",
                "IBancorFormula(_formula).calculateSaleReturn(totalTokens, reserveBalance, percentageETHReserve, _wolkAmountest)"
            ],
            "jump20628": [
                "IBurnFormula(_burnFormula).calculateWolkToBurn(_value)",
                "IBurnFormula(_burnFormula).calculateWolkToBurn(_value)"
            ],
            "block894_0": [
                "this.tokenGenerationEvent.value(msg.value)(msg.sender)"
            ],
            "jump1090_0": [
                "this.purchaseWolk.value(msg.value)(msg.sender)",
                "this.purchaseWolk.value(msg.value)(msg.sender)"
            ],
            "jump20346": [
                "IBancorFormula(_formula).calculatePurchaseReturn(totalTokens, reserveBalance, percentageETHReserve, _ethAmountest)",
                "IBancorFormula(_formula).calculatePurchaseReturn(totalTokens, reserveBalance, percentageETHReserve, _ethAmountest)"
            ],
            "block20346": [
                "IBancorFormula(_formula).calculatePurchaseReturn(totalTokens, reserveBalance, percentageETHReserve, _ethAmountest)"
            ],
            "jump20628_0": [
                "IBurnFormula(_burnFormula).calculateWolkToBurn(_value)",
                "IBurnFormula(_burnFormula).calculateWolkToBurn(_value)"
            ],
            "jump1090": [
                "this.purchaseWolk.value(msg.value)(msg.sender)",
                "this.purchaseWolk.value(msg.value)(msg.sender)"
            ],
            "block12288": [
                "msg.sender.transfer(refundBalance)"
            ],
            "block10005": [
                "msg.sender.transfer(withdrawalBalance)"
            ],
            "block20008_0": [
                "IBancorFormula(_formula).calculateSaleReturn(totalTokens, reserveBalance, percentageETHReserve, _wolkAmountest)"
            ],
            "block20008_1": [
                "IBancorFormula(_formula).calculateSaleReturn(totalTokens, reserveBalance, percentageETHReserve, _wolkAmountest)"
            ],
            "jump894": [
                "this.tokenGenerationEvent.value(msg.value)(msg.sender)",
                "this.tokenGenerationEvent.value(msg.value)(msg.sender)"
            ],
            "jump20008": [
                "IBancorFormula(_formula).calculateSaleReturn(totalTokens, reserveBalance, percentageETHReserve, _wolkAmountest)",
                "IBancorFormula(_formula).calculateSaleReturn(totalTokens, reserveBalance, percentageETHReserve, _wolkAmountest)"
            ],
            "jump10005": [
                "msg.sender.transfer(withdrawalBalance)",
                "msg.sender.transfer(withdrawalBalance)"
            ],
            "block20955": [
                "IFeeFormula(ProviderFeeFormula).calculateProviderFee(_value)"
            ],
            "block20955_0": [
                "IFeeFormula(ProviderFeeFormula).calculateProviderFee(_value)"
            ]
        }
    }
}