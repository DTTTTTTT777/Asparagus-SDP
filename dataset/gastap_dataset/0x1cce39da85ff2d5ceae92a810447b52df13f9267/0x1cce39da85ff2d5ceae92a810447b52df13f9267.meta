{
    "owned": {
        "function_list": [
            "owned()",
            "changeOwner(address)"
        ],
        "initial_state": {
            "owned()": {
                "argument": {},
                "contract": {}
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "changeOwner(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "mortal": {
        "function_list": [
            "owned()",
            "changeOwner(address)",
            "close()"
        ],
        "initial_state": {
            "owned()": {
                "argument": {},
                "contract": {}
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "close()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "close()": [
                92,
                75
            ],
            "changeOwner(address)": [
                202,
                119
            ]
        },
        "block_CALL_mapping": {}
    },
    "blackjack": {
        "function_list": [
            "close()",
            "owned()",
            "changeOwner(address)",
            "blackjack(uint256,uint256,address)",
            "initGame(uint256,bytes32,bytes32,bytes32)",
            "stand(uint256,uint8[],bytes32,uint8,uint8,bytes32,bytes32)",
            "standAndRebet(uint256,uint8[],bytes32,uint8,uint8,bytes32,bytes32,uint256,bytes32,bytes32,bytes32)",
            "_initGame(uint256,bytes32,bytes32,bytes32,uint256)",
            "_stand(uint256,uint8[],bytes32,uint8,uint8,bytes32,bytes32,bool)",
            "checkDeck(uint256,uint8[],bytes32)",
            "convertToBytes(uint8[])",
            "checkNumCards(uint256,uint8,uint8,bytes32,bytes32)",
            "determineOutcome(uint256,uint8[],uint8)",
            "getPlayerValue(uint8[],uint8)",
            "getDealerValue(uint8[],uint8)",
            "isSuited(uint8,uint8)",
            "fallback()",
            "withdraw(uint256)",
            "setSigner(address)",
            "setMinimumBet(uint256)",
            "setMaximumBet(uint256)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "close()": {
                "argument": {},
                "contract": {
                    "cardValues": "uint8[13]",
                    "minimumBet": "uint256",
                    "maximumBet": "uint256"
                }
            },
            "owned()": {
                "argument": {},
                "contract": {
                    "cardValues": "uint8[13]",
                    "minimumBet": "uint256",
                    "maximumBet": "uint256"
                }
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {
                    "cardValues": "uint8[13]",
                    "minimumBet": "uint256",
                    "maximumBet": "uint256"
                }
            },
            "blackjack(uint256,uint256,address)": {
                "argument": {
                    "minBet": "uint256",
                    "maxBet": "uint256"
                },
                "contract": {
                    "cardValues": "uint8[13]",
                    "minimumBet": "uint256",
                    "maximumBet": "uint256"
                }
            },
            "initGame(uint256,bytes32,bytes32,bytes32)": {
                "argument": {
                    "id": "uint256",
                    "deck": "bytes32",
                    "srvSeed": "bytes32",
                    "cSeed": "bytes32"
                },
                "contract": {
                    "cardValues": "uint8[13]",
                    "minimumBet": "uint256",
                    "maximumBet": "uint256"
                }
            },
            "stand(uint256,uint8[],bytes32,uint8,uint8,bytes32,bytes32)": {
                "argument": {
                    "gameId": "uint256",
                    "deck": "uint8[]",
                    "seed": "bytes32",
                    "numCards": "uint8",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "cardValues": "uint8[13]",
                    "minimumBet": "uint256",
                    "maximumBet": "uint256"
                }
            },
            "standAndRebet(uint256,uint8[],bytes32,uint8,uint8,bytes32,bytes32,uint256,bytes32,bytes32,bytes32)": {
                "argument": {
                    "oldGameId": "uint256",
                    "oldDeck": "uint8[]",
                    "oldSeed": "bytes32",
                    "numCards": "uint8",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32",
                    "newGameId": "uint256",
                    "newDeck": "bytes32",
                    "newSrvSeed": "bytes32",
                    "newCSeed": "bytes32"
                },
                "contract": {
                    "cardValues": "uint8[13]",
                    "minimumBet": "uint256",
                    "maximumBet": "uint256"
                }
            },
            "_initGame(uint256,bytes32,bytes32,bytes32,uint256)": {
                "argument": {
                    "id": "uint256",
                    "deck": "bytes32",
                    "srvSeed": "bytes32",
                    "cSeed": "bytes32",
                    "bet": "uint256"
                },
                "contract": {
                    "cardValues": "uint8[13]",
                    "minimumBet": "uint256",
                    "maximumBet": "uint256"
                }
            },
            "_stand(uint256,uint8[],bytes32,uint8,uint8,bytes32,bytes32,bool)": {
                "argument": {
                    "gameId": "uint256",
                    "deck": "uint8[]",
                    "seed": "bytes32",
                    "numCards": "uint8",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "cardValues": "uint8[13]",
                    "minimumBet": "uint256",
                    "maximumBet": "uint256"
                }
            },
            "checkDeck(uint256,uint8[],bytes32)": {
                "argument": {
                    "gameId": "uint256",
                    "deck": "uint8[]",
                    "seed": "bytes32"
                },
                "contract": {
                    "cardValues": "uint8[13]",
                    "minimumBet": "uint256",
                    "maximumBet": "uint256"
                }
            },
            "convertToBytes(uint8[])": {
                "argument": {
                    "byteArray": "uint8[]"
                },
                "contract": {
                    "cardValues": "uint8[13]",
                    "minimumBet": "uint256",
                    "maximumBet": "uint256"
                }
            },
            "checkNumCards(uint256,uint8,uint8,bytes32,bytes32)": {
                "argument": {
                    "gameId": "uint256",
                    "numCards": "uint8",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "cardValues": "uint8[13]",
                    "minimumBet": "uint256",
                    "maximumBet": "uint256"
                }
            },
            "determineOutcome(uint256,uint8[],uint8)": {
                "argument": {
                    "gameId": "uint256",
                    "cards": "uint8[]",
                    "numCards": "uint8"
                },
                "contract": {
                    "cardValues": "uint8[13]",
                    "minimumBet": "uint256",
                    "maximumBet": "uint256"
                }
            },
            "getPlayerValue(uint8[],uint8)": {
                "argument": {
                    "cards": "uint8[]",
                    "numCards": "uint8"
                },
                "contract": {
                    "cardValues": "uint8[13]",
                    "minimumBet": "uint256",
                    "maximumBet": "uint256"
                }
            },
            "getDealerValue(uint8[],uint8)": {
                "argument": {
                    "cards": "uint8[]",
                    "numCards": "uint8"
                },
                "contract": {
                    "cardValues": "uint8[13]",
                    "minimumBet": "uint256",
                    "maximumBet": "uint256"
                }
            },
            "isSuited(uint8,uint8)": {
                "argument": {
                    "card1": "uint8",
                    "card2": "uint8"
                },
                "contract": {
                    "cardValues": "uint8[13]",
                    "minimumBet": "uint256",
                    "maximumBet": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "cardValues": "uint8[13]",
                    "minimumBet": "uint256",
                    "maximumBet": "uint256"
                }
            },
            "withdraw(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "cardValues": "uint8[13]",
                    "minimumBet": "uint256",
                    "maximumBet": "uint256"
                }
            },
            "setSigner(address)": {
                "argument": {},
                "contract": {
                    "cardValues": "uint8[13]",
                    "minimumBet": "uint256",
                    "maximumBet": "uint256"
                }
            },
            "setMinimumBet(uint256)": {
                "argument": {
                    "newMin": "uint256"
                },
                "contract": {
                    "cardValues": "uint8[13]",
                    "minimumBet": "uint256",
                    "maximumBet": "uint256"
                }
            },
            "setMaximumBet(uint256)": {
                "argument": {
                    "newMax": "uint256"
                },
                "contract": {
                    "cardValues": "uint8[13]",
                    "minimumBet": "uint256",
                    "maximumBet": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "checkNumCards(uint256,uint8,uint8,bytes32,bytes32)": [
                1740,
                405
            ],
            "withdraw(uint256)": [
                986,
                207
            ],
            "standAndRebet(uint256,uint8[],bytes32,uint8,uint8,bytes32,bytes32,uint256,bytes32,bytes32,bytes32)": [
                1031,
                229
            ],
            "checkDeck(uint256,uint8[],bytes32)": [
                1863,
                427
            ],
            "setMaximumBet(uint256)": [
                588,
                119
            ],
            "convertToBytes(uint8[])": [
                763,
                185
            ],
            "initGame(uint256,bytes32,bytes32,bytes32)": [
                514,
                97
            ],
            "setSigner(address)": [
                1286,
                273
            ],
            "determineOutcome(uint256,uint8[],uint8)": [
                1485,
                339
            ],
            "close()": [
                1263,
                251
            ],
            "stand(uint256,uint8[],bytes32,uint8,uint8,bytes32,bytes32)": [
                334,
                75
            ],
            "changeOwner(address)": [
                1630,
                361
            ],
            "setMinimumBet(uint256)": [
                1353,
                295
            ]
        },
        "block_CALL_mapping": {
            "block3955_1": [
                "ecrecover(msgHash, v, r, s)"
            ],
            "block3955": [
                "ecrecover(msgHash, v, r, s)"
            ],
            "jump3955_0": [
                "ecrecover(msgHash, v, r, s)",
                "ecrecover(msgHash, v, r, s)"
            ],
            "jump3955": [
                "ecrecover(msgHash, v, r, s)",
                "ecrecover(msgHash, v, r, s)"
            ],
            "block2856": [
                "msg.sender.send(win)"
            ],
            "block4985_0": [
                "msg.sender.send(win)"
            ],
            "block4985": [
                "msg.sender.send(win)"
            ],
            "block3955_0": [
                "ecrecover(msgHash, v, r, s)"
            ],
            "block2618": [
                "owner.send(amount)"
            ],
            "jump3955_1": [
                "ecrecover(msgHash, v, r, s)",
                "ecrecover(msgHash, v, r, s)"
            ],
            "jump2618": [
                "owner.send(amount)",
                "owner.send(amount)"
            ]
        }
    }
}