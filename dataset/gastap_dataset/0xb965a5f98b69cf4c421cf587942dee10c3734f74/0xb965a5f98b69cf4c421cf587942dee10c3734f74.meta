{
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "BasicToken": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "EtheeraToken": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "transfer(address,uint256)",
            "balanceOf(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "EtheeraToken(address)",
            "mint(address,address,uint256)",
            "showMyTokenBalance(address)",
            "showMyEtherBalance(address)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "INITIAL_SUPPLY": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "INITIAL_SUPPLY": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "INITIAL_SUPPLY": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "INITIAL_SUPPLY": "uint256"
                }
            },
            "EtheeraToken(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "INITIAL_SUPPLY": "uint256"
                }
            },
            "mint(address,address,uint256)": {
                "argument": {
                    "tokenAmount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "INITIAL_SUPPLY": "uint256"
                }
            },
            "showMyTokenBalance(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "INITIAL_SUPPLY": "uint256"
                }
            },
            "showMyEtherBalance(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "INITIAL_SUPPLY": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "INITIAL_SUPPLY": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "showMyEtherBalance(address)": [
                760,
                229
            ],
            "mint(address,address,uint256)": [
                847,
                251
            ],
            "showMyTokenBalance(address)": [
                529,
                185
            ],
            "transferOwnership(address)": [
                956,
                273
            ]
        },
        "block_CALL_mapping": {}
    },
    "Crowdsale": {
        "function_list": [
            "Crowdsale(uint256,address)",
            "createTokenContract(address)",
            "fallback()",
            "determineBonus(uint256)",
            "buyTokens(address)",
            "forwardFunds()",
            "validPurchase()",
            "hasEnded()",
            "showMyTokenBalance()",
            "showMyEtherBalance()",
            "burnRemainingTokens()",
            "addAddressToWhiteList(address)",
            "getRefund()",
            "debitAmountToRefund()",
            "updateTokensForEtheeraTeam(uint256)",
            "withdrawTokensForEtheeraTeam(uint256,address[])",
            "setPriceRate(uint256)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Crowdsale(uint256,address)": {
                "argument": {
                    "_startTime": "uint256"
                },
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "ratePerWei": "uint256",
                    "weiRaised": "uint256",
                    "softCap": "uint256",
                    "hardCap": "uint256",
                    "tokens_sold": "uint256",
                    "maxTokensForSale": "uint256",
                    "tokensForReservedFund": "uint256",
                    "tokensForAdvisors": "uint256",
                    "tokensForFoundersAndTeam": "uint256",
                    "tokensForMarketing": "uint256",
                    "tokensForTournament": "uint256",
                    "amountForRefundIfSoftCapNotReached": "uint256"
                }
            },
            "createTokenContract(address)": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "ratePerWei": "uint256",
                    "weiRaised": "uint256",
                    "softCap": "uint256",
                    "hardCap": "uint256",
                    "tokens_sold": "uint256",
                    "maxTokensForSale": "uint256",
                    "tokensForReservedFund": "uint256",
                    "tokensForAdvisors": "uint256",
                    "tokensForFoundersAndTeam": "uint256",
                    "tokensForMarketing": "uint256",
                    "tokensForTournament": "uint256",
                    "amountForRefundIfSoftCapNotReached": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "ratePerWei": "uint256",
                    "weiRaised": "uint256",
                    "softCap": "uint256",
                    "hardCap": "uint256",
                    "tokens_sold": "uint256",
                    "maxTokensForSale": "uint256",
                    "tokensForReservedFund": "uint256",
                    "tokensForAdvisors": "uint256",
                    "tokensForFoundersAndTeam": "uint256",
                    "tokensForMarketing": "uint256",
                    "tokensForTournament": "uint256",
                    "amountForRefundIfSoftCapNotReached": "uint256"
                }
            },
            "determineBonus(uint256)": {
                "argument": {
                    "tokens": "uint256"
                },
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "ratePerWei": "uint256",
                    "weiRaised": "uint256",
                    "softCap": "uint256",
                    "hardCap": "uint256",
                    "tokens_sold": "uint256",
                    "maxTokensForSale": "uint256",
                    "tokensForReservedFund": "uint256",
                    "tokensForAdvisors": "uint256",
                    "tokensForFoundersAndTeam": "uint256",
                    "tokensForMarketing": "uint256",
                    "tokensForTournament": "uint256",
                    "amountForRefundIfSoftCapNotReached": "uint256"
                }
            },
            "buyTokens(address)": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "ratePerWei": "uint256",
                    "weiRaised": "uint256",
                    "softCap": "uint256",
                    "hardCap": "uint256",
                    "tokens_sold": "uint256",
                    "maxTokensForSale": "uint256",
                    "tokensForReservedFund": "uint256",
                    "tokensForAdvisors": "uint256",
                    "tokensForFoundersAndTeam": "uint256",
                    "tokensForMarketing": "uint256",
                    "tokensForTournament": "uint256",
                    "amountForRefundIfSoftCapNotReached": "uint256"
                }
            },
            "forwardFunds()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "ratePerWei": "uint256",
                    "weiRaised": "uint256",
                    "softCap": "uint256",
                    "hardCap": "uint256",
                    "tokens_sold": "uint256",
                    "maxTokensForSale": "uint256",
                    "tokensForReservedFund": "uint256",
                    "tokensForAdvisors": "uint256",
                    "tokensForFoundersAndTeam": "uint256",
                    "tokensForMarketing": "uint256",
                    "tokensForTournament": "uint256",
                    "amountForRefundIfSoftCapNotReached": "uint256"
                }
            },
            "validPurchase()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "ratePerWei": "uint256",
                    "weiRaised": "uint256",
                    "softCap": "uint256",
                    "hardCap": "uint256",
                    "tokens_sold": "uint256",
                    "maxTokensForSale": "uint256",
                    "tokensForReservedFund": "uint256",
                    "tokensForAdvisors": "uint256",
                    "tokensForFoundersAndTeam": "uint256",
                    "tokensForMarketing": "uint256",
                    "tokensForTournament": "uint256",
                    "amountForRefundIfSoftCapNotReached": "uint256"
                }
            },
            "hasEnded()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "ratePerWei": "uint256",
                    "weiRaised": "uint256",
                    "softCap": "uint256",
                    "hardCap": "uint256",
                    "tokens_sold": "uint256",
                    "maxTokensForSale": "uint256",
                    "tokensForReservedFund": "uint256",
                    "tokensForAdvisors": "uint256",
                    "tokensForFoundersAndTeam": "uint256",
                    "tokensForMarketing": "uint256",
                    "tokensForTournament": "uint256",
                    "amountForRefundIfSoftCapNotReached": "uint256"
                }
            },
            "showMyTokenBalance()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "ratePerWei": "uint256",
                    "weiRaised": "uint256",
                    "softCap": "uint256",
                    "hardCap": "uint256",
                    "tokens_sold": "uint256",
                    "maxTokensForSale": "uint256",
                    "tokensForReservedFund": "uint256",
                    "tokensForAdvisors": "uint256",
                    "tokensForFoundersAndTeam": "uint256",
                    "tokensForMarketing": "uint256",
                    "tokensForTournament": "uint256",
                    "amountForRefundIfSoftCapNotReached": "uint256"
                }
            },
            "showMyEtherBalance()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "ratePerWei": "uint256",
                    "weiRaised": "uint256",
                    "softCap": "uint256",
                    "hardCap": "uint256",
                    "tokens_sold": "uint256",
                    "maxTokensForSale": "uint256",
                    "tokensForReservedFund": "uint256",
                    "tokensForAdvisors": "uint256",
                    "tokensForFoundersAndTeam": "uint256",
                    "tokensForMarketing": "uint256",
                    "tokensForTournament": "uint256",
                    "amountForRefundIfSoftCapNotReached": "uint256"
                }
            },
            "burnRemainingTokens()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "ratePerWei": "uint256",
                    "weiRaised": "uint256",
                    "softCap": "uint256",
                    "hardCap": "uint256",
                    "tokens_sold": "uint256",
                    "maxTokensForSale": "uint256",
                    "tokensForReservedFund": "uint256",
                    "tokensForAdvisors": "uint256",
                    "tokensForFoundersAndTeam": "uint256",
                    "tokensForMarketing": "uint256",
                    "tokensForTournament": "uint256",
                    "amountForRefundIfSoftCapNotReached": "uint256"
                }
            },
            "addAddressToWhiteList(address)": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "ratePerWei": "uint256",
                    "weiRaised": "uint256",
                    "softCap": "uint256",
                    "hardCap": "uint256",
                    "tokens_sold": "uint256",
                    "maxTokensForSale": "uint256",
                    "tokensForReservedFund": "uint256",
                    "tokensForAdvisors": "uint256",
                    "tokensForFoundersAndTeam": "uint256",
                    "tokensForMarketing": "uint256",
                    "tokensForTournament": "uint256",
                    "amountForRefundIfSoftCapNotReached": "uint256"
                }
            },
            "getRefund()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "ratePerWei": "uint256",
                    "weiRaised": "uint256",
                    "softCap": "uint256",
                    "hardCap": "uint256",
                    "tokens_sold": "uint256",
                    "maxTokensForSale": "uint256",
                    "tokensForReservedFund": "uint256",
                    "tokensForAdvisors": "uint256",
                    "tokensForFoundersAndTeam": "uint256",
                    "tokensForMarketing": "uint256",
                    "tokensForTournament": "uint256",
                    "amountForRefundIfSoftCapNotReached": "uint256"
                }
            },
            "debitAmountToRefund()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "ratePerWei": "uint256",
                    "weiRaised": "uint256",
                    "softCap": "uint256",
                    "hardCap": "uint256",
                    "tokens_sold": "uint256",
                    "maxTokensForSale": "uint256",
                    "tokensForReservedFund": "uint256",
                    "tokensForAdvisors": "uint256",
                    "tokensForFoundersAndTeam": "uint256",
                    "tokensForMarketing": "uint256",
                    "tokensForTournament": "uint256",
                    "amountForRefundIfSoftCapNotReached": "uint256"
                }
            },
            "updateTokensForEtheeraTeam(uint256)": {
                "argument": {
                    "tokens": "uint256"
                },
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "ratePerWei": "uint256",
                    "weiRaised": "uint256",
                    "softCap": "uint256",
                    "hardCap": "uint256",
                    "tokens_sold": "uint256",
                    "maxTokensForSale": "uint256",
                    "tokensForReservedFund": "uint256",
                    "tokensForAdvisors": "uint256",
                    "tokensForFoundersAndTeam": "uint256",
                    "tokensForMarketing": "uint256",
                    "tokensForTournament": "uint256",
                    "amountForRefundIfSoftCapNotReached": "uint256"
                }
            },
            "withdrawTokensForEtheeraTeam(uint256,address[])": {
                "argument": {
                    "whoseTokensToWithdraw": "uint256",
                    "whereToSendTokens": "address[]"
                },
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "ratePerWei": "uint256",
                    "weiRaised": "uint256",
                    "softCap": "uint256",
                    "hardCap": "uint256",
                    "tokens_sold": "uint256",
                    "maxTokensForSale": "uint256",
                    "tokensForReservedFund": "uint256",
                    "tokensForAdvisors": "uint256",
                    "tokensForFoundersAndTeam": "uint256",
                    "tokensForMarketing": "uint256",
                    "tokensForTournament": "uint256",
                    "amountForRefundIfSoftCapNotReached": "uint256"
                }
            },
            "setPriceRate(uint256)": {
                "argument": {
                    "newPrice": "uint256"
                },
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "ratePerWei": "uint256",
                    "weiRaised": "uint256",
                    "softCap": "uint256",
                    "hardCap": "uint256",
                    "tokens_sold": "uint256",
                    "maxTokensForSale": "uint256",
                    "tokensForReservedFund": "uint256",
                    "tokensForAdvisors": "uint256",
                    "tokensForFoundersAndTeam": "uint256",
                    "tokensForMarketing": "uint256",
                    "tokensForTournament": "uint256",
                    "amountForRefundIfSoftCapNotReached": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "setPriceRate(uint256)": [
                677,
                229
            ],
            "hasEnded()": [
                1203,
                471
            ],
            "showMyTokenBalance()": [
                1106,
                427
            ],
            "buyTokens(address)": [
                1149,
                449
            ],
            "getRefund()": [
                993,
                361
            ],
            "showMyEtherBalance()": [
                537,
                163
            ],
            "addAddressToWhiteList(address)": [
                926,
                339
            ],
            "debitAmountToRefund()": [
                667,
                207
            ],
            "withdrawTokensForEtheeraTeam(uint256,address[])": [
                382,
                119
            ]
        },
        "block_CALL_mapping": {
            "jump2275": [
                "token.mint(wallet, beneficiary, tokens)",
                "token.mint(wallet, beneficiary, tokens)"
            ],
            "jump6780_0": [
                "token.mint(wallet,burnAddress,tokensToBurn)",
                "token.mint(wallet,burnAddress,tokensToBurn)"
            ],
            "block2275_1": [
                "token.mint(wallet, beneficiary, tokens)"
            ],
            "jump4669": [
                "token.mint(wallet,whereToSendTokens[i],tokensToSend)",
                "token.mint(wallet,whereToSendTokens[i],tokensToSend)"
            ],
            "jump3463": [
                "token.mint(wallet,whereToSendTokens[i],tokensToSend)",
                "token.mint(wallet,whereToSendTokens[i],tokensToSend)"
            ],
            "jump8076_1": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ],
            "jump1532_1": [
                "beneficiary.transfer(msg.value)",
                "beneficiary.transfer(msg.value)"
            ],
            "jump2275_1": [
                "token.mint(wallet, beneficiary, tokens)",
                "token.mint(wallet, beneficiary, tokens)"
            ],
            "block3865": [
                "token.mint(wallet,whereToSendTokens[i],tokensToSend)"
            ],
            "jump6029": [
                "token.showMyTokenBalance(msg.sender)",
                "token.showMyTokenBalance(msg.sender)"
            ],
            "jump2275_0": [
                "token.mint(wallet, beneficiary, tokens)",
                "token.mint(wallet, beneficiary, tokens)"
            ],
            "jump8076_0": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ],
            "jump3039": [
                "token.mint(wallet,whereToSendTokens[i],tokensToSend)",
                "token.mint(wallet,whereToSendTokens[i],tokensToSend)"
            ],
            "block2275_0": [
                "token.mint(wallet, beneficiary, tokens)"
            ],
            "block4669": [
                "token.mint(wallet,whereToSendTokens[i],tokensToSend)"
            ],
            "block2275": [
                "token.mint(wallet, beneficiary, tokens)"
            ],
            "block8076": [
                "wallet.transfer(msg.value)"
            ],
            "jump1532": [
                "beneficiary.transfer(msg.value)",
                "beneficiary.transfer(msg.value)"
            ],
            "block5740": [
                "msg.sender.transfer(ethersSent)"
            ],
            "jump4944": [
                "token.showMyEtherBalance(msg.sender)",
                "token.showMyEtherBalance(msg.sender)"
            ],
            "jump6376_1": [
                "token.showMyTokenBalance(wallet)",
                "token.showMyTokenBalance(wallet)"
            ],
            "jump6376_0": [
                "token.showMyTokenBalance(wallet)",
                "token.showMyTokenBalance(wallet)"
            ],
            "block4944": [
                "token.showMyEtherBalance(msg.sender)"
            ],
            "jump1532_0": [
                "beneficiary.transfer(msg.value)",
                "beneficiary.transfer(msg.value)"
            ],
            "block3039": [
                "token.mint(wallet,whereToSendTokens[i],tokensToSend)"
            ],
            "block1532_0": [
                "beneficiary.transfer(msg.value)"
            ],
            "block1532_1": [
                "beneficiary.transfer(msg.value)"
            ],
            "block8076_0": [
                "wallet.transfer(msg.value)"
            ],
            "block8076_1": [
                "wallet.transfer(msg.value)"
            ],
            "jump6780_1": [
                "token.mint(wallet,burnAddress,tokensToBurn)",
                "token.mint(wallet,burnAddress,tokensToBurn)"
            ],
            "block6780_0": [
                "token.mint(wallet,burnAddress,tokensToBurn)"
            ],
            "block6780_1": [
                "token.mint(wallet,burnAddress,tokensToBurn)"
            ],
            "block3463": [
                "token.mint(wallet,whereToSendTokens[i],tokensToSend)"
            ],
            "block6780": [
                "token.mint(wallet,burnAddress,tokensToBurn)"
            ],
            "block6376_1": [
                "token.showMyTokenBalance(wallet)"
            ],
            "jump3865": [
                "token.mint(wallet,whereToSendTokens[i],tokensToSend)",
                "token.mint(wallet,whereToSendTokens[i],tokensToSend)"
            ],
            "jump4267": [
                "token.mint(wallet,whereToSendTokens[i],tokensToSend)",
                "token.mint(wallet,whereToSendTokens[i],tokensToSend)"
            ],
            "jump5740": [
                "msg.sender.transfer(ethersSent)",
                "msg.sender.transfer(ethersSent)"
            ],
            "block6376_0": [
                "token.showMyTokenBalance(wallet)"
            ],
            "block6029": [
                "token.showMyTokenBalance(msg.sender)"
            ],
            "jump6376": [
                "token.showMyTokenBalance(wallet)",
                "token.showMyTokenBalance(wallet)"
            ],
            "block6376": [
                "token.showMyTokenBalance(wallet)"
            ],
            "jump6780": [
                "token.mint(wallet,burnAddress,tokensToBurn)",
                "token.mint(wallet,burnAddress,tokensToBurn)"
            ],
            "jump8076": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ],
            "block4267": [
                "token.mint(wallet,whereToSendTokens[i],tokensToSend)"
            ],
            "block1532": [
                "beneficiary.transfer(msg.value)"
            ]
        }
    }
}