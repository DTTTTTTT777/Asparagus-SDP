{
    "usingOraclize": {
        "function_list": [
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            }
        },
        "function_block_mapping": {
            "__callback(bytes32,string,bytes)": [
                200,
                97
            ],
            "__callback(bytes32,string)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "DSSafeAddSub": {
        "function_list": [
            "safeToAdd(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "safeToSubtract(uint256,uint256)",
            "safeSub(uint256,uint256)"
        ],
        "initial_state": {
            "safeToAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeToSubtract(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "IDice": {
        "function_list": [
            "safeToAdd(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "safeToSubtract(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "IDice()",
            "playerRollDice(uint256)",
            "__callback(bytes32,string,bytes)",
            "playerWithdrawPendingTransactions()",
            "playerGetPendingTxByAddress(address)",
            "setMaxProfit()",
            "fallback()",
            "ownerAddBankroll()",
            "ownerSetOraclizeSafeGas(uint32)",
            "ownerSetHouseEdge(uint256)",
            "ownerSetMaxProfitAsPercentOfHouse(uint256)",
            "ownerSetMinBet(uint256)",
            "ownerTransferEther(address,uint256)",
            "ownerRefundPlayer(bytes32,address,uint256,uint256)",
            "ownerPauseGame(bool)",
            "ownerPausePayouts(bool)",
            "ownerSetTreasury(address)",
            "ownerChangeOwner(address)",
            "ownerkill()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "safeToAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "safeToSubtract(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "IDice()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "playerRollDice(uint256)": {
                "argument": {
                    "rollUnder": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "playerWithdrawPendingTransactions()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "playerGetPendingTxByAddress(address)": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "setMaxProfit()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "ownerAddBankroll()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "ownerSetOraclizeSafeGas(uint32)": {
                "argument": {
                    "newSafeGasToOraclize": "uint32"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "ownerSetHouseEdge(uint256)": {
                "argument": {
                    "newHouseEdge": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "ownerSetMaxProfitAsPercentOfHouse(uint256)": {
                "argument": {
                    "newMaxProfitAsPercent": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "ownerSetMinBet(uint256)": {
                "argument": {
                    "newMinimumBet": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "ownerTransferEther(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "ownerRefundPlayer(bytes32,address,uint256,uint256)": {
                "argument": {
                    "originalPlayerBetId": "bytes32",
                    "originalPlayerProfit": "uint256",
                    "originalPlayerBetValue": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "ownerPauseGame(bool)": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "ownerPausePayouts(bool)": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "ownerSetTreasury(address)": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "ownerChangeOwner(address)": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "ownerkill()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalUserProfit": "uint256",
                    "maxPendingPayouts": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "ownerTransferEther(address,uint256)": [
                1569,
                471
            ],
            "ownerkill()": [
                2194,
                713
            ],
            "playerGetPendingTxByAddress(address)": [
                1046,
                273
            ],
            "ownerSetHouseEdge(uint256)": [
                483,
                97
            ],
            "__callback(bytes32,string,bytes)": [
                771,
                207
            ],
            "ownerAddBankroll()": [
                761,
                185
            ],
            "ownerPausePayouts(bool)": [
                1133,
                295
            ],
            "ownerSetTreasury(address)": [
                694,
                163
            ],
            "ownerChangeOwner(address)": [
                1180,
                317
            ],
            "ownerSetOraclizeSafeGas(uint32)": [
                2143,
                691
            ],
            "__callback(bytes32,string)": [
                528,
                119
            ],
            "ownerSetMaxProfitAsPercentOfHouse(uint256)": [
                1290,
                361
            ],
            "playerWithdrawPendingTransactions()": [
                1819,
                559
            ],
            "playerRollDice(uint256)": [
                2260,
                757
            ],
            "ownerRefundPlayer(bytes32,address,uint256,uint256)": [
                2042,
                669
            ],
            "ownerPauseGame(bool)": [
                1467,
                427
            ],
            "ownerSetMinBet(uint256)": [
                1422,
                405
            ]
        },
        "block_CALL_mapping": {
            "jump11727_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump11984_0": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "jump7825": [
                "playerTempAddress[myid].send(1)",
                "playerTempAddress[myid].send(1)"
            ],
            "block9745": [
                "sendTo.send(originalPlayerBetValue)"
            ],
            "jump11331": [
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)",
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)"
            ],
            "jump9112": [
                "sendTo.send(amount)",
                "sendTo.send(amount)"
            ],
            "block10866_1": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block10866_0": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block9112": [
                "sendTo.send(amount)"
            ],
            "jump11984": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "jump9334": [
                "msg.sender.call.value(withdrawAmount)()",
                "msg.sender.call.value(withdrawAmount)()"
            ],
            "block11984": [
                "oraclize.cbAddress()"
            ],
            "block5062_0": [
                "playerTempAddress[myid].send(playerTempBetValue[myid])"
            ],
            "block11727_0": [
                "OAR.getAddress()"
            ],
            "jump11727": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump10489_1": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block5062": [
                "playerTempAddress[myid].send(playerTempBetValue[myid])"
            ],
            "jump11331_1": [
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)",
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)"
            ],
            "jump11331_0": [
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)",
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)"
            ],
            "block11331": [
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)"
            ],
            "block10489_0": [
                "OAR.getAddress()"
            ],
            "block6516_0": [
                "playerTempAddress[myid].send(playerTempReward[myid])"
            ],
            "block6516": [
                "playerTempAddress[myid].send(playerTempReward[myid])"
            ],
            "block10489_1": [
                "OAR.getAddress()"
            ],
            "block10489": [
                "OAR.getAddress()"
            ],
            "block10866": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block7825": [
                "playerTempAddress[myid].send(1)"
            ],
            "jump10489_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump5062": [
                "playerTempAddress[myid].send(playerTempBetValue[myid])",
                "playerTempAddress[myid].send(playerTempBetValue[myid])"
            ],
            "block11984_0": [
                "oraclize.cbAddress()"
            ],
            "block11727": [
                "OAR.getAddress()"
            ],
            "block11331_1": [
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)"
            ],
            "block11331_0": [
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)"
            ],
            "block9334": [
                "msg.sender.call.value(withdrawAmount)()"
            ],
            "jump6516": [
                "playerTempAddress[myid].send(playerTempReward[myid])",
                "playerTempAddress[myid].send(playerTempReward[myid])"
            ],
            "jump6516_0": [
                "playerTempAddress[myid].send(playerTempReward[myid])",
                "playerTempAddress[myid].send(playerTempReward[myid])"
            ],
            "jump10489": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump5062_0": [
                "playerTempAddress[myid].send(playerTempBetValue[myid])",
                "playerTempAddress[myid].send(playerTempBetValue[myid])"
            ],
            "jump7825_0": [
                "playerTempAddress[myid].send(1)",
                "playerTempAddress[myid].send(1)"
            ],
            "jump9745": [
                "sendTo.send(originalPlayerBetValue)",
                "sendTo.send(originalPlayerBetValue)"
            ],
            "jump10866_1": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump10866_0": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump10866": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block7825_0": [
                "playerTempAddress[myid].send(1)"
            ]
        }
    }
}