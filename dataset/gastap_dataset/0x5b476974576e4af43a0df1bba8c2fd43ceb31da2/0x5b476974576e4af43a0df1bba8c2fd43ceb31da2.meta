{
    "ERC20": {
        "function_list": [
            "balanceOf(address)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                401,
                97
            ],
            "transfer(address,uint256)": [
                1385,
                361
            ],
            "allowance(address,address)": [
                1704,
                427
            ],
            "balanceOf(address)": [
                1044,
                273
            ],
            "transferFrom(address,address,uint256)": [
                588,
                163
            ]
        },
        "block_CALL_mapping": {
            "block3721": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "jump3721": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "SafeMath": {
        "function_list": [
            "add(uint256,uint256)",
            "sub(uint256,uint256)",
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "min(uint256,uint256)",
            "max(uint256,uint256)"
        ],
        "initial_state": {
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "DateTime": {
        "function_list": [
            "isLeapYear(uint16)",
            "leapYearsBefore(uint256)",
            "getDaysInMonth(uint8,uint16)",
            "parseTimestamp(uint256)",
            "getYear(uint256)",
            "getMonth(uint256)",
            "getDay(uint256)",
            "getHour(uint256)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "isLeapYear(uint16)": {
                "argument": {
                    "year": "uint16"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "leapYearsBefore(uint256)": {
                "argument": {
                    "year": "uint256"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "getDaysInMonth(uint8,uint16)": {
                "argument": {
                    "month": "uint8",
                    "year": "uint16"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "parseTimestamp(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "getYear(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "getMonth(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "getDay(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "getHour(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            }
        },
        "function_block_mapping": {
            "getHour(uint256)": [
                136,
                75
            ],
            "isLeapYear(uint16)": [
                422,
                163
            ],
            "getDay(uint256)": [
                207,
                97
            ],
            "getMonth(uint256)": [
                351,
                141
            ],
            "leapYearsBefore(uint256)": [
                495,
                185
            ],
            "getDaysInMonth(uint8,uint16)": [
                560,
                207
            ],
            "getYear(uint256)": [
                278,
                119
            ]
        },
        "block_CALL_mapping": {}
    },
    "Authable": {
        "function_list": [
            "setOwner(address)",
            "setExecutor(address)"
        ],
        "initial_state": {
            "setOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "setExecutor(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "setExecutor(address)": [
                170,
                97
            ],
            "setOwner(address)": [
                103,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "CrowdSale": {
        "function_list": [
            "setOwner(address)",
            "setExecutor(address)",
            "add(uint256,uint256)",
            "sub(uint256,uint256)",
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "setAttrs(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
            "setAttrCustom(uint256,uint256,uint256,uint256)",
            "process(address,uint256)",
            "getToken(address)"
        ],
        "initial_state": {
            "setOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "setExecutor(address)": {
                "argument": {},
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "setAttrs(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "supplyPre": "uint256",
                    "supply1": "uint256",
                    "supply2": "uint256",
                    "supply3": "uint256",
                    "supply4": "uint256",
                    "preStart": "uint256",
                    "preEnd": "uint256",
                    "start": "uint256",
                    "end1": "uint256",
                    "end2": "uint256",
                    "end3": "uint256",
                    "end4": "uint256"
                },
                "contract": {}
            },
            "setAttrCustom(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "tokPerEth": "uint256",
                    "supply": "uint256"
                },
                "contract": {}
            },
            "process(address,uint256)": {
                "argument": {
                    "sendValue": "uint256"
                },
                "contract": {}
            },
            "getToken(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "setExecutor(address)": [
                291,
                97
            ],
            "setOwner(address)": [
                224,
                75
            ],
            "setAttrs(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": [
                358,
                119
            ],
            "process(address,uint256)": [
                852,
                229
            ],
            "getToken(address)": [
                591,
                163
            ],
            "setAttrCustom(uint256,uint256,uint256,uint256)": [
                1519,
                383
            ]
        },
        "block_CALL_mapping": {}
    },
    "Voting": {
        "function_list": [
            "setOwner(address)",
            "setExecutor(address)",
            "add(uint256,uint256)",
            "sub(uint256,uint256)",
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "voteInitiate(uint256,uint256,uint256,uint256,uint256,uint256)",
            "vote(address,uint256,uint256,uint256)"
        ],
        "initial_state": {
            "setOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "setExecutor(address)": {
                "argument": {},
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "voteInitiate(uint256,uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_voteId": "uint256",
                    "_voteRewardPerUnit": "uint256",
                    "_voteWeightUnit": "uint256",
                    "_voteStart": "uint256",
                    "_voteEnd": "uint256",
                    "_maxCandidateId": "uint256"
                },
                "contract": {}
            },
            "vote(address,uint256,uint256,uint256)": {
                "argument": {
                    "holding": "uint256",
                    "voteId": "uint256",
                    "candidateId": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "setExecutor(address)": [
                269,
                97
            ],
            "setOwner(address)": [
                202,
                75
            ],
            "voteInitiate(uint256,uint256,uint256,uint256,uint256,uint256)": [
                567,
                185
            ],
            "vote(address,uint256,uint256,uint256)": [
                1106,
                339
            ]
        },
        "block_CALL_mapping": {}
    },
    "Games": {
        "function_list": [
            "setOwner(address)",
            "setExecutor(address)",
            "isLeapYear(uint16)",
            "leapYearsBefore(uint256)",
            "getDaysInMonth(uint8,uint16)",
            "parseTimestamp(uint256)",
            "getYear(uint256)",
            "getMonth(uint256)",
            "getDay(uint256)",
            "getHour(uint256)",
            "add(uint256,uint256)",
            "sub(uint256,uint256)",
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "setPriceAttr(Games.GameType,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
            "setRangeGameAttr(uint256,uint256,uint256)",
            "process(address,uint256)",
            "processWithITG(address,uint256)",
            "RangeGameProcess(address,uint256)",
            "RangeGameWithITG(address,uint256)",
            "getTimeRangeInfo()",
            "refreshGameTime()",
            "gcFundAmount()",
            "selectWinner(uint256)",
            "getPrize(address)",
            "PointGameProcess(address,uint256)",
            "PointGameWithITG(address,uint256)",
            "PointGameParticipate(address,uint256,uint256)",
            "lossToCharity(uint256)",
            "charityAmtToCharity()",
            "distributeTokenSale(uint256,uint256,uint256,uint256)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "setOwner(address)": {
                "argument": {},
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "setExecutor(address)": {
                "argument": {},
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "isLeapYear(uint16)": {
                "argument": {
                    "year": "uint16"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "leapYearsBefore(uint256)": {
                "argument": {
                    "year": "uint256"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "getDaysInMonth(uint8,uint16)": {
                "argument": {
                    "month": "uint8",
                    "year": "uint16"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "parseTimestamp(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "getYear(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "getMonth(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "getDay(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "getHour(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "div(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "setPriceAttr(Games.GameType,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_bonusPerEth": "uint256",
                    "_inGameTokPricePerEth": "uint256",
                    "_inGameTokWinRatioMax": "uint256",
                    "_inGameTokWinRatioMin": "uint256",
                    "_currentInGameTokWinRatio": "uint256",
                    "_hourlyMinParticipateRatio": "uint256",
                    "_monthlyMinParticipateRatio": "uint256",
                    "_yearlyMinParticipateRatio": "uint256",
                    "_boostPrizeEth": "uint256"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "setRangeGameAttr(uint256,uint256,uint256)": {
                "argument": {
                    "_inTimeRange_H": "uint256",
                    "_inTimeRange_M": "uint256",
                    "_inTimeRange_Y": "uint256"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "process(address,uint256)": {
                "argument": {
                    "sendValue": "uint256"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "processWithITG(address,uint256)": {
                "argument": {
                    "tokenAmountToGame": "uint256"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "RangeGameProcess(address,uint256)": {
                "argument": {
                    "sendValue": "uint256"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "RangeGameWithITG(address,uint256)": {
                "argument": {
                    "tokenAmountToGame": "uint256"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "getTimeRangeInfo()": {
                "argument": {},
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "refreshGameTime()": {
                "argument": {},
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "gcFundAmount()": {
                "argument": {},
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "selectWinner(uint256)": {
                "argument": {
                    "rand": "uint256"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "getPrize(address)": {
                "argument": {},
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "PointGameProcess(address,uint256)": {
                "argument": {
                    "sendValue": "uint256"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "PointGameWithITG(address,uint256)": {
                "argument": {
                    "tokenAmountToGame": "uint256"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "PointGameParticipate(address,uint256,uint256)": {
                "argument": {
                    "sendValue": "uint256",
                    "currency": "uint256"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "lossToCharity(uint256)": {
                "argument": {
                    "year": "uint256"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "charityAmtToCharity()": {
                "argument": {},
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "distributeTokenSale(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "hour": "uint256",
                    "month": "uint256",
                    "year": "uint256",
                    "charity": "uint256"
                },
                "contract": {
                    "participants": "Games.Participant[]"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "participants": "Games.Participant[]"
                }
            }
        },
        "function_block_mapping": {
            "setExecutor(address)": [
                456,
                97
            ],
            "getDay(uint256)": [
                1227,
                295
            ],
            "leapYearsBefore(uint256)": [
                2039,
                537
            ],
            "getHour(uint256)": [
                1111,
                251
            ],
            "lossToCharity(uint256)": [
                2590,
                691
            ],
            "isLeapYear(uint16)": [
                1966,
                515
            ],
            "getPrize(address)": [
                756,
                185
            ],
            "process(address,uint256)": [
                1355,
                339
            ],
            "getDaysInMonth(uint8,uint16)": [
                2104,
                559
            ],
            "getYear(uint256)": [
                1583,
                405
            ],
            "setOwner(address)": [
                389,
                75
            ],
            "getMonth(uint256)": [
                1895,
                493
            ],
            "charityAmtToCharity()": [
                2482,
                647
            ],
            "setRangeGameAttr(uint256,uint256,uint256)": [
                691,
                163
            ],
            "distributeTokenSale(uint256,uint256,uint256,uint256)": [
                1721,
                449
            ],
            "selectWinner(uint256)": [
                1182,
                273
            ],
            "processWithITG(address,uint256)": [
                2655,
                713
            ]
        },
        "block_CALL_mapping": {}
    },
    "ITGToken": {
        "function_list": [
            "setOwner(address)",
            "setExecutor(address)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "add(uint256,uint256)",
            "sub(uint256,uint256)",
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "balanceOf(address)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "ITGToken()",
            "fallback()",
            "setAttrs(address,address,address,ITGToken.Status,uint256,uint256)",
            "USER_GET_CROWDSALE_TOKEN()",
            "USER_VOTE(uint256,uint256)",
            "voteInitiate(uint256,uint256,uint256,uint256,uint256,uint256)",
            "itgTokenTransfer(uint256,bool)",
            "ethTransfer(address,uint256)",
            "USER_GAME_WITH_TOKEN(uint256)",
            "USER_GET_PRIZE()",
            "selectWinner(uint256)",
            "burn(uint256)",
            "mint(uint256)",
            "lossToCharity(uint256,address)",
            "charityAmtToCharity(address)",
            "distributeTokenSale(uint256,uint256,uint256,uint256)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "setOwner(address)": {
                "argument": {},
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "setExecutor(address)": {
                "argument": {},
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "div(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "ITGToken()": {
                "argument": {},
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "setAttrs(address,address,address,ITGToken.Status,uint256,uint256)": {
                "argument": {
                    "amtEth": "uint256",
                    "amtTok": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "USER_GET_CROWDSALE_TOKEN()": {
                "argument": {},
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "USER_VOTE(uint256,uint256)": {
                "argument": {
                    "voteId": "uint256",
                    "candidateId": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "voteInitiate(uint256,uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "voteId": "uint256",
                    "voteRewardPerUnit": "uint256",
                    "voteWeightUnit": "uint256",
                    "voteStart": "uint256",
                    "voteEnd": "uint256",
                    "maxCandidateId": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "itgTokenTransfer(uint256,bool)": {
                "argument": {
                    "amt": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "ethTransfer(address,uint256)": {
                "argument": {
                    "amt": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "USER_GAME_WITH_TOKEN(uint256)": {
                "argument": {
                    "tokenAmountToGame": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "USER_GET_PRIZE()": {
                "argument": {},
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "selectWinner(uint256)": {
                "argument": {
                    "rand": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "burn(uint256)": {
                "argument": {
                    "amt": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "mint(uint256)": {
                "argument": {
                    "amt": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "lossToCharity(uint256,address)": {
                "argument": {
                    "year": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "charityAmtToCharity(address)": {
                "argument": {},
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            },
            "distributeTokenSale(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "hour": "uint256",
                    "month": "uint256",
                    "year": "uint256",
                    "charity": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32",
                    "minEtherParticipate": "uint256",
                    "minTokParticipate": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "setExecutor(address)": [
                1616,
                185
            ],
            "USER_GET_CROWDSALE_TOKEN()": [
                1331,
                75
            ],
            "allowance(address,address)": [
                3093,
                625
            ],
            "transferFrom(address,address,uint256)": [
                1740,
                229
            ],
            "approve(address,uint256)": [
                1405,
                119
            ],
            "voteInitiate(uint256,uint256,uint256,uint256,uint256,uint256)": [
                9043,
                1014
            ],
            "lossToCharity(uint256,address)": [
                3257,
                669
            ],
            "setOwner(address)": [
                1506,
                141
            ],
            "mint(uint256)": [
                2817,
                537
            ],
            "balanceOf(address)": [
                2422,
                427
            ],
            "USER_VOTE(uint256,uint256)": [
                2280,
                383
            ],
            "transfer(address,uint256)": [
                2862,
                559
            ],
            "distributeTokenSale(uint256,uint256,uint256,uint256)": [
                9462,
                974
            ],
            "USER_GET_PRIZE()": [
                3334,
                691
            ],
            "USER_GAME_WITH_TOKEN(uint256)": [
                3212,
                647
            ],
            "burn(uint256)": [
                1916,
                273
            ],
            "selectWinner(uint256)": [
                7604,
                914
            ],
            "charityAmtToCharity(address)": [
                1961,
                295
            ]
        },
        "block_CALL_mapping": {
            "block11572_0": [
                "target.transfer(amt)"
            ],
            "block11572_1": [
                "target.transfer(amt)"
            ],
            "jump1248_0": [
                "games.process(msg.sender, msg.value)",
                "games.process(msg.sender, msg.value)"
            ],
            "block7212": [
                "games.charityAmtToCharity()"
            ],
            "block11151": [
                "games.lossToCharity(year)"
            ],
            "block8347": [
                "voting.vote(msg.sender,balances[msg.sender],voteId,candidateId)"
            ],
            "block10795": [
                "games.processWithITG(msg.sender, tokenAmountToGame * 1 ether)"
            ],
            "jump784_0": [
                "crowdSale.process(msg.sender,msg.value)",
                "crowdSale.process(msg.sender,msg.value)"
            ],
            "jump7212": [
                "games.charityAmtToCharity()",
                "games.charityAmtToCharity()"
            ],
            "jump7604": [
                "games.selectWinner(rand)",
                "games.selectWinner(rand)"
            ],
            "jump8347": [
                "voting.vote(msg.sender,balances[msg.sender],voteId,candidateId)",
                "voting.vote(msg.sender,balances[msg.sender],voteId,candidateId)"
            ],
            "block7604": [
                "games.selectWinner(rand)"
            ],
            "block9462": [
                "games.distributeTokenSale(hour, month, year, charity)"
            ],
            "jump10795": [
                "games.processWithITG(msg.sender, tokenAmountToGame * 1 ether)",
                "games.processWithITG(msg.sender, tokenAmountToGame * 1 ether)"
            ],
            "block1248_0": [
                "games.process(msg.sender, msg.value)"
            ],
            "jump11410": [
                "games.getPrize(msg.sender)",
                "games.getPrize(msg.sender)"
            ],
            "block784": [
                "crowdSale.process(msg.sender,msg.value)"
            ],
            "jump11572_1": [
                "target.transfer(amt)",
                "target.transfer(amt)"
            ],
            "jump11572_0": [
                "target.transfer(amt)",
                "target.transfer(amt)"
            ],
            "jump11572": [
                "target.transfer(amt)",
                "target.transfer(amt)"
            ],
            "jump1248": [
                "games.process(msg.sender, msg.value)",
                "games.process(msg.sender, msg.value)"
            ],
            "block1248": [
                "games.process(msg.sender, msg.value)"
            ],
            "block9043": [
                "voting.voteInitiate(voteId, voteRewardPerUnit, voteWeightUnit, voteStart, voteEnd, maxCandidateId)"
            ],
            "jump9043": [
                "voting.voteInitiate(voteId, voteRewardPerUnit, voteWeightUnit, voteStart, voteEnd, maxCandidateId)",
                "voting.voteInitiate(voteId, voteRewardPerUnit, voteWeightUnit, voteStart, voteEnd, maxCandidateId)"
            ],
            "jump9462": [
                "games.distributeTokenSale(hour, month, year, charity)",
                "games.distributeTokenSale(hour, month, year, charity)"
            ],
            "block11410": [
                "games.getPrize(msg.sender)"
            ],
            "block11572": [
                "target.transfer(amt)"
            ],
            "jump784": [
                "crowdSale.process(msg.sender,msg.value)",
                "crowdSale.process(msg.sender,msg.value)"
            ],
            "block784_0": [
                "crowdSale.process(msg.sender,msg.value)"
            ],
            "jump4951": [
                "crowdSale.getToken(msg.sender)",
                "crowdSale.getToken(msg.sender)"
            ],
            "jump11151": [
                "games.lossToCharity(year)",
                "games.lossToCharity(year)"
            ],
            "block4951": [
                "crowdSale.getToken(msg.sender)"
            ]
        }
    }
}