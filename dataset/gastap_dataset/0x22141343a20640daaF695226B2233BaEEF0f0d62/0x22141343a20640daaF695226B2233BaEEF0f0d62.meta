{
    "ERC20": {
        "function_list": [
            "transfer(address,uint256)",
            "balanceOf(address)"
        ],
        "initial_state": {
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "balanceOf(address)": [
                491,
                163
            ],
            "transfer(address,uint256)": [
                777,
                251
            ]
        },
        "block_CALL_mapping": {}
    },
    "EnjinBuyer": {
        "function_list": [
            "set_sale_address(address)",
            "activate_kill_switch(string)",
            "withdraw(address,address)",
            "add_to_buy_bounty()",
            "add_to_withdraw_bounty()",
            "claim_bounty()",
            "fallback()",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "set_sale_address(address)": {
                "argument": {},
                "contract": {
                    "eth_minimum": "uint256",
                    "buy_bounty": "uint256",
                    "withdraw_bounty": "uint256",
                    "contract_eth_value": "uint256",
                    "password_hash": "bytes32",
                    "earliest_buy_time": "uint256",
                    "eth_cap": "uint256"
                }
            },
            "activate_kill_switch(string)": {
                "argument": {
                    "password": "string"
                },
                "contract": {
                    "eth_minimum": "uint256",
                    "buy_bounty": "uint256",
                    "withdraw_bounty": "uint256",
                    "contract_eth_value": "uint256",
                    "password_hash": "bytes32",
                    "earliest_buy_time": "uint256",
                    "eth_cap": "uint256"
                }
            },
            "withdraw(address,address)": {
                "argument": {},
                "contract": {
                    "eth_minimum": "uint256",
                    "buy_bounty": "uint256",
                    "withdraw_bounty": "uint256",
                    "contract_eth_value": "uint256",
                    "password_hash": "bytes32",
                    "earliest_buy_time": "uint256",
                    "eth_cap": "uint256"
                }
            },
            "add_to_buy_bounty()": {
                "argument": {},
                "contract": {
                    "eth_minimum": "uint256",
                    "buy_bounty": "uint256",
                    "withdraw_bounty": "uint256",
                    "contract_eth_value": "uint256",
                    "password_hash": "bytes32",
                    "earliest_buy_time": "uint256",
                    "eth_cap": "uint256"
                }
            },
            "add_to_withdraw_bounty()": {
                "argument": {},
                "contract": {
                    "eth_minimum": "uint256",
                    "buy_bounty": "uint256",
                    "withdraw_bounty": "uint256",
                    "contract_eth_value": "uint256",
                    "password_hash": "bytes32",
                    "earliest_buy_time": "uint256",
                    "eth_cap": "uint256"
                }
            },
            "claim_bounty()": {
                "argument": {},
                "contract": {
                    "eth_minimum": "uint256",
                    "buy_bounty": "uint256",
                    "withdraw_bounty": "uint256",
                    "contract_eth_value": "uint256",
                    "password_hash": "bytes32",
                    "earliest_buy_time": "uint256",
                    "eth_cap": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "eth_minimum": "uint256",
                    "buy_bounty": "uint256",
                    "withdraw_bounty": "uint256",
                    "contract_eth_value": "uint256",
                    "password_hash": "bytes32",
                    "earliest_buy_time": "uint256",
                    "eth_cap": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "claim_bounty()": [
                426,
                75
            ],
            "activate_kill_switch(string)": [
                996,
                339
            ],
            "add_to_buy_bounty()": [
                723,
                207
            ],
            "withdraw(address,address)": [
                1254,
                427
            ],
            "add_to_withdraw_bounty()": [
                579,
                141
            ],
            "set_sale_address(address)": [
                1144,
                383
            ]
        },
        "block_CALL_mapping": {
            "block3986": [
                "token.transfer(user, tokens_to_withdraw)"
            ],
            "jump3483": [
                "token.balanceOf(address(this))",
                "token.balanceOf(address(this))"
            ],
            "jump3019": [
                "user.transfer(eth_to_withdraw)",
                "user.transfer(eth_to_withdraw)"
            ],
            "jump1785": [
                "msg.sender.transfer(claimed_bounty)",
                "msg.sender.transfer(claimed_bounty)"
            ],
            "block4071": [
                "msg.sender.transfer(claimed_bounty)"
            ],
            "block1618": [
                "sale.call.value(contract_eth_value)()"
            ],
            "block3019": [
                "user.transfer(eth_to_withdraw)"
            ],
            "block1785": [
                "msg.sender.transfer(claimed_bounty)"
            ],
            "block3483": [
                "token.balanceOf(address(this))"
            ],
            "jump2454": [
                "msg.sender.transfer(claimed_bounty)",
                "msg.sender.transfer(claimed_bounty)"
            ],
            "jump3986": [
                "token.transfer(user, tokens_to_withdraw)",
                "token.transfer(user, tokens_to_withdraw)"
            ],
            "jump4071": [
                "msg.sender.transfer(claimed_bounty)",
                "msg.sender.transfer(claimed_bounty)"
            ],
            "jump1618": [
                "sale.call.value(contract_eth_value)()",
                "sale.call.value(contract_eth_value)()"
            ],
            "block2454": [
                "msg.sender.transfer(claimed_bounty)"
            ]
        }
    }
}