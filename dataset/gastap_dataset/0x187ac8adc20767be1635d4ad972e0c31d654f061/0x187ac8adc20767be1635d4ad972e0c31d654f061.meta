{
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "ERC20Basic": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "balanceOf(address)": [
                124,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "BasicToken": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transfer(address,uint256)": [
                222,
                119
            ],
            "balanceOf(address)": [
                135,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "StandardToken": {
        "function_list": [
            "transfer(address,uint256)",
            "balanceOf(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "increaseApproval(address,uint256)",
            "decreaseApproval(address,uint256)"
        ],
        "initial_state": {
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "increaseApproval(address,uint256)": {
                "argument": {
                    "_addedValue": "uint256"
                },
                "contract": {}
            },
            "decreaseApproval(address,uint256)": {
                "argument": {
                    "_subtractedValue": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                147,
                75
            ],
            "increaseApproval(address,uint256)": [
                713,
                207
            ],
            "balanceOf(address)": [
                525,
                163
            ],
            "allowance(address,address)": [
                814,
                229
            ],
            "decreaseApproval(address,uint256)": [
                424,
                141
            ],
            "transferFrom(address,address,uint256)": [
                291,
                119
            ],
            "transfer(address,uint256)": [
                612,
                185
            ]
        },
        "block_CALL_mapping": {}
    },
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "MintableToken": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "increaseApproval(address,uint256)",
            "decreaseApproval(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "mint(address,uint256)",
            "finishMinting()",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "increaseApproval(address,uint256)": {
                "argument": {
                    "_addedValue": "uint256"
                },
                "contract": {}
            },
            "decreaseApproval(address,uint256)": {
                "argument": {
                    "_subtractedValue": "uint256"
                },
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "mint(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "finishMinting()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                249,
                97
            ],
            "increaseApproval(address,uint256)": [
                1050,
                295
            ],
            "mint(address,uint256)": [
                526,
                163
            ],
            "balanceOf(address)": [
                728,
                207
            ],
            "finishMinting()": [
                815,
                229
            ],
            "allowance(address,address)": [
                1151,
                317
            ],
            "decreaseApproval(address,uint256)": [
                627,
                185
            ],
            "transferFrom(address,address,uint256)": [
                393,
                141
            ],
            "transfer(address,uint256)": [
                949,
                273
            ],
            "transferOwnership(address)": [
                1270,
                339
            ]
        },
        "block_CALL_mapping": {}
    },
    "SuperMegaTestToken": {
        "function_list": [
            "mint(address,uint256)",
            "finishMinting()",
            "Ownable()",
            "transferOwnership(address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "increaseApproval(address,uint256)",
            "decreaseApproval(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "unblock()",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "freezeTokens(address,uint256)",
            "allowTokenOperations(address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "mint(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "finishMinting()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "Ownable()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "increaseApproval(address,uint256)": {
                "argument": {
                    "_addedValue": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "decreaseApproval(address,uint256)": {
                "argument": {
                    "_subtractedValue": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "unblock()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "freezeTokens(address,uint256)": {
                "argument": {
                    "time": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "allowTokenOperations(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                481,
                119
            ],
            "increaseApproval(address,uint256)": [
                1794,
                471
            ],
            "unblock()": [
                1593,
                405
            ],
            "mint(address,uint256)": [
                801,
                207
            ],
            "finishMinting()": [
                1315,
                339
            ],
            "allowance(address,address)": [
                1895,
                493
            ],
            "freezeTokens(address,uint256)": [
                1616,
                427
            ],
            "balanceOf(address)": [
                1228,
                317
            ],
            "decreaseApproval(address,uint256)": [
                1127,
                295
            ],
            "transferFrom(address,address,uint256)": [
                625,
                163
            ],
            "transferOwnership(address)": [
                2014,
                515
            ],
            "allowTokenOperations(address)": [
                989,
                251
            ],
            "transfer(address,uint256)": [
                1693,
                449
            ]
        },
        "block_CALL_mapping": {}
    },
    "SuperMegaIco": {
        "function_list": [
            "SuperMegaIco()",
            "fallback()",
            "hasStarted()",
            "hasFinished()",
            "getBonus(uint256,uint256)",
            "isReachedLimit()",
            "manageStatus()",
            "calculateForValue(uint256)",
            "calculateTokens(uint256)",
            "addToStat(uint256,uint256)",
            "startIco()",
            "pauseIco()",
            "successICO()",
            "autoFinishICO()",
            "failICO()",
            "refund()",
            "withdraw(uint256)",
            "generateTeamTokens()",
            "transferOwnership(address)",
            "setRobot(address)",
            "setRate(uint256)",
            "robotRefund(address)",
            "autoFinishTime()",
            "setEndTime(uint256)",
            "min(uint256,uint256)",
            "percent(uint256,uint256)",
            "destroy()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "SuperMegaIco()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "hasStarted()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "hasFinished()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "getBonus(uint256,uint256)": {
                "argument": {
                    "_value": "uint256",
                    "_sold": "uint256"
                },
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "isReachedLimit()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "manageStatus()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "calculateForValue(uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "calculateTokens(uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "addToStat(uint256,uint256)": {
                "argument": {
                    "tokens": "uint256",
                    "bonus": "uint256"
                },
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "startIco()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "pauseIco()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "successICO()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "autoFinishICO()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "failICO()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "refund()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "withdraw(uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "generateTeamTokens()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "setRobot(address)": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "setRate(uint256)": {
                "argument": {
                    "newRate": "uint256"
                },
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "robotRefund(address)": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "autoFinishTime()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "setEndTime(uint256)": {
                "argument": {
                    "time": "uint256"
                },
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "percent(uint256,uint256)": {
                "argument": {
                    "value": "uint256",
                    "bonus": "uint256"
                },
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "destroy()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "multiplier": "uint256",
                    "minTokens": "uint256",
                    "mln": "uint256",
                    "tokensCap": "uint256",
                    "minSuccess": "uint256",
                    "totalSupply": "uint256",
                    "tokensSoldTotal": "uint256",
                    "rateDivider": "uint256",
                    "priceInWei": "uint256",
                    "listTeamTokens": "SuperMegaIco.teamTokens[]",
                    "bonusPatterns": "uint256[]",
                    "bonusLimit": "uint256[]"
                }
            }
        },
        "function_block_mapping": {
            "setEndTime(uint256)": [
                2774,
                713
            ],
            "setRate(uint256)": [
                1570,
                229
            ],
            "robotRefund(address)": [
                1329,
                119
            ],
            "destroy()": [
                2328,
                493
            ],
            "autoFinishTime()": [
                2508,
                581
            ],
            "hasFinished()": [
                3016,
                801
            ],
            "hasStarted()": [
                1725,
                295
            ],
            "pauseIco()": [
                2639,
                647
            ],
            "withdraw(uint256)": [
                1482,
                185
            ],
            "refund()": [
                2009,
                383
            ],
            "transferOwnership(address)": [
                2862,
                757
            ],
            "calculateForValue(uint256)": [
                2032,
                405
            ],
            "startIco()": [
                2351,
                515
            ],
            "setRobot(address)": [
                1658,
                273
            ]
        },
        "block_CALL_mapping": {
            "jump6168": [
                "token.balanceOf(msg.sender)",
                "token.balanceOf(msg.sender)"
            ],
            "block982_0": [
                "msg.sender.transfer(tokens.change)"
            ],
            "block4693": [
                "investor.transfer(refundVal)"
            ],
            "jump982": [
                "msg.sender.transfer(tokens.change)",
                "msg.sender.transfer(tokens.change)"
            ],
            "block775": [
                "token.mint(msg.sender, tokens.total)"
            ],
            "jump775_0": [
                "token.mint(msg.sender, tokens.total)",
                "token.mint(msg.sender, tokens.total)"
            ],
            "jump11071": [
                "token.freezeTokens(listTeamTokens[i].holder, endTime + listTeamTokens[i].freezePeriod)",
                "token.freezeTokens(listTeamTokens[i].holder, endTime + listTeamTokens[i].freezePeriod)"
            ],
            "block11071": [
                "token.freezeTokens(listTeamTokens[i].holder, endTime + listTeamTokens[i].freezePeriod)"
            ],
            "jump775": [
                "token.mint(msg.sender, tokens.total)",
                "token.mint(msg.sender, tokens.total)"
            ],
            "jump8906_1": [
                "token.unblock()",
                "token.unblock()"
            ],
            "jump8906": [
                "token.unblock()",
                "token.unblock()"
            ],
            "block775_0": [
                "token.mint(msg.sender, tokens.total)"
            ],
            "jump4906": [
                "owner.transfer(value)",
                "owner.transfer(value)"
            ],
            "jump4611": [
                "token.balanceOf(investor)",
                "token.balanceOf(investor)"
            ],
            "block4906": [
                "owner.transfer(value)"
            ],
            "jump982_0": [
                "msg.sender.transfer(tokens.change)",
                "msg.sender.transfer(tokens.change)"
            ],
            "block982": [
                "msg.sender.transfer(tokens.change)"
            ],
            "jump4693": [
                "investor.transfer(refundVal)",
                "investor.transfer(refundVal)"
            ],
            "jump9993": [
                "token.mint(listTeamTokens[i].holder, teamTokensPart)",
                "token.mint(listTeamTokens[i].holder, teamTokensPart)"
            ],
            "jump6250": [
                "msg.sender.transfer(refundVal)",
                "msg.sender.transfer(refundVal)"
            ],
            "jump8906_0": [
                "token.unblock()",
                "token.unblock()"
            ],
            "block8906_0": [
                "token.unblock()"
            ],
            "block8906_1": [
                "token.unblock()"
            ],
            "block9993": [
                "token.mint(listTeamTokens[i].holder, teamTokensPart)"
            ],
            "block4611": [
                "token.balanceOf(investor)"
            ],
            "block6250": [
                "msg.sender.transfer(refundVal)"
            ],
            "block8906": [
                "token.unblock()"
            ],
            "block6168": [
                "token.balanceOf(msg.sender)"
            ]
        }
    }
}