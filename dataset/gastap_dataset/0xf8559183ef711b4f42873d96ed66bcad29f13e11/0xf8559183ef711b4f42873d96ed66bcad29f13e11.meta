{
    "ERC20": {
        "function_list": [
            "balanceOf(address)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                337,
                97
            ],
            "allowance(address,address)": [
                1286,
                295
            ],
            "balanceOf(address)": [
                807,
                207
            ],
            "transferFrom(address,address,uint256)": [
                481,
                141
            ],
            "transfer(address,uint256)": [
                1038,
                251
            ]
        },
        "block_CALL_mapping": {
            "jump3655": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "block3655": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "SafeMath": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeDiv(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)",
            "assert(bool)"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeDiv(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "assert(bool)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "StandardToken": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeDiv(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)",
            "assert(bool)",
            "balanceOf(address)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "isToken()",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeDiv(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "assert(bool)": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "isToken()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                147,
                75
            ],
            "balanceOf(address)": [
                525,
                163
            ],
            "allowance(address,address)": [
                814,
                229
            ],
            "transferFrom(address,address,uint256)": [
                291,
                119
            ],
            "transfer(address,uint256)": [
                612,
                185
            ]
        },
        "block_CALL_mapping": {}
    },
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "TokenVault": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "TokenVault(address,uint256,StandardToken,uint256)",
            "setInvestor(address,uint256)",
            "lock()",
            "recoverFailedLock()",
            "getBalance()",
            "claim()",
            "getState()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {
                    "investorCount": "uint256",
                    "tokensToBeAllocated": "uint256",
                    "totalClaimed": "uint256",
                    "tokensAllocatedTotal": "uint256",
                    "freezeEndsAt": "uint256",
                    "lockedAt": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "investorCount": "uint256",
                    "tokensToBeAllocated": "uint256",
                    "totalClaimed": "uint256",
                    "tokensAllocatedTotal": "uint256",
                    "freezeEndsAt": "uint256",
                    "lockedAt": "uint256"
                }
            },
            "TokenVault(address,uint256,StandardToken,uint256)": {
                "argument": {
                    "_freezeEndsAt": "uint256",
                    "_tokensToBeAllocated": "uint256"
                },
                "contract": {
                    "investorCount": "uint256",
                    "tokensToBeAllocated": "uint256",
                    "totalClaimed": "uint256",
                    "tokensAllocatedTotal": "uint256",
                    "freezeEndsAt": "uint256",
                    "lockedAt": "uint256"
                }
            },
            "setInvestor(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "investorCount": "uint256",
                    "tokensToBeAllocated": "uint256",
                    "totalClaimed": "uint256",
                    "tokensAllocatedTotal": "uint256",
                    "freezeEndsAt": "uint256",
                    "lockedAt": "uint256"
                }
            },
            "lock()": {
                "argument": {},
                "contract": {
                    "investorCount": "uint256",
                    "tokensToBeAllocated": "uint256",
                    "totalClaimed": "uint256",
                    "tokensAllocatedTotal": "uint256",
                    "freezeEndsAt": "uint256",
                    "lockedAt": "uint256"
                }
            },
            "recoverFailedLock()": {
                "argument": {},
                "contract": {
                    "investorCount": "uint256",
                    "tokensToBeAllocated": "uint256",
                    "totalClaimed": "uint256",
                    "tokensAllocatedTotal": "uint256",
                    "freezeEndsAt": "uint256",
                    "lockedAt": "uint256"
                }
            },
            "getBalance()": {
                "argument": {},
                "contract": {
                    "investorCount": "uint256",
                    "tokensToBeAllocated": "uint256",
                    "totalClaimed": "uint256",
                    "tokensAllocatedTotal": "uint256",
                    "freezeEndsAt": "uint256",
                    "lockedAt": "uint256"
                }
            },
            "claim()": {
                "argument": {},
                "contract": {
                    "investorCount": "uint256",
                    "tokensToBeAllocated": "uint256",
                    "totalClaimed": "uint256",
                    "tokensAllocatedTotal": "uint256",
                    "freezeEndsAt": "uint256",
                    "lockedAt": "uint256"
                }
            },
            "getState()": {
                "argument": {},
                "contract": {
                    "investorCount": "uint256",
                    "tokensToBeAllocated": "uint256",
                    "totalClaimed": "uint256",
                    "tokensAllocatedTotal": "uint256",
                    "freezeEndsAt": "uint256",
                    "lockedAt": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                450,
                141
            ]
        },
        "block_CALL_mapping": {
            "jump767_0": [
                "Token(token).transfer(to, amount)",
                "Token(token).transfer(to, amount)"
            ],
            "jump1299": [
                "Token(token).balanceOf(self)",
                "Token(token).balanceOf(self)"
            ],
            "jump767_1": [
                "Token(token).transfer(to, amount)",
                "Token(token).transfer(to, amount)"
            ],
            "block767_0": [
                "Token(token).transfer(to, amount)"
            ],
            "block767_1": [
                "Token(token).transfer(to, amount)"
            ],
            "block1032": [
                "Token(token).balanceOf(self)"
            ],
            "block767": [
                "Token(token).transfer(to, amount)"
            ],
            "jump767": [
                "Token(token).transfer(to, amount)",
                "Token(token).transfer(to, amount)"
            ],
            "jump1032": [
                "Token(token).balanceOf(self)",
                "Token(token).balanceOf(self)"
            ],
            "block1299": [
                "Token(token).balanceOf(self)"
            ]
        }
    }
}