{
    "ERC20": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                412,
                97
            ],
            "transfer(address,uint256)": [
                1396,
                361
            ],
            "totalSupply()": [
                556,
                141
            ],
            "allowance(address,address)": [
                1802,
                449
            ],
            "balanceOf(address)": [
                1055,
                273
            ],
            "transferFrom(address,address,uint256)": [
                599,
                163
            ]
        },
        "block_CALL_mapping": {
            "block4085": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "jump4085": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "Owned": {
        "function_list": [
            "Owned()",
            "changeOwnership(address)",
            "proposeOwnership(address)",
            "acceptOwnership()",
            "removeOwnership(address)"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {}
            },
            "changeOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "proposeOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "acceptOwnership()": {
                "argument": {},
                "contract": {}
            },
            "removeOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "proposeOwnership(address)": [
                259,
                119
            ],
            "removeOwnership(address)": [
                192,
                97
            ],
            "changeOwnership(address)": [
                125,
                75
            ],
            "acceptOwnership()": [
                326,
                141
            ]
        },
        "block_CALL_mapping": {}
    },
    "Escapable": {
        "function_list": [
            "Owned()",
            "changeOwnership(address)",
            "proposeOwnership(address)",
            "acceptOwnership()",
            "removeOwnership(address)",
            "Escapable(address,address)",
            "blacklistEscapeToken(address)",
            "isTokenEscapable(address)",
            "escapeHatch(address)",
            "changeHatchEscapeCaller(address)"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {}
            },
            "changeOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "proposeOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "acceptOwnership()": {
                "argument": {},
                "contract": {}
            },
            "removeOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "Escapable(address,address)": {
                "argument": {},
                "contract": {}
            },
            "blacklistEscapeToken(address)": {
                "argument": {},
                "contract": {}
            },
            "isTokenEscapable(address)": {
                "argument": {},
                "contract": {}
            },
            "escapeHatch(address)": {
                "argument": {},
                "contract": {}
            },
            "changeHatchEscapeCaller(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "proposeOwnership(address)": [
                401,
                141
            ],
            "removeOwnership(address)": [
                334,
                119
            ],
            "changeHatchEscapeCaller(address)": [
                823,
                273
            ],
            "changeOwnership(address)": [
                267,
                97
            ],
            "escapeHatch(address)": [
                669,
                229
            ],
            "isTokenEscapable(address)": [
                491,
                185
            ],
            "acceptOwnership()": [
                468,
                163
            ]
        },
        "block_CALL_mapping": {
            "jump3540": [
                "token.transfer(escapeHatchDestination, balance)",
                "token.transfer(escapeHatchDestination, balance)"
            ],
            "jump2882": [
                "escapeHatchDestination.transfer(balance)",
                "escapeHatchDestination.transfer(balance)"
            ],
            "jump3282": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "block3282": [
                "token.balanceOf(this)"
            ],
            "block2882": [
                "escapeHatchDestination.transfer(balance)"
            ],
            "block3540": [
                "token.transfer(escapeHatchDestination, balance)"
            ]
        }
    },
    "MiniMeToken": {
        "function_list": [
            "balanceOfAt(address,uint256)",
            "totalSupplyAt(uint256)"
        ],
        "initial_state": {
            "balanceOfAt(address,uint256)": {
                "argument": {
                    "_blockNumber": "uint256"
                },
                "contract": {}
            },
            "totalSupplyAt(uint256)": {
                "argument": {
                    "_blockNumber": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "balanceOfAt(address,uint256)": [
                10086,
                26
            ],
            "totalSupplyAt(uint256)": [
                10086,
                26
            ]
        },
        "block_CALL_mapping": {
            "jump5977": [
                "tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            )",
                "tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            )"
            ],
            "block7175_1": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump8857": [
                "token.transfer(controller, balance)",
                "token.transfer(controller, balance)"
            ],
            "block5977": [
                "tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            )"
            ],
            "block5206_6": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5206_4": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5206_5": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5206_2": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5206_3": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5206_0": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5206_1": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block9708_0": [
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "jump9708_0": [
                "TokenController(controller).onTransfer(_from, _to, _amount)",
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "jump7175_2": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))",
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump3784": [
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)",
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)"
            ],
            "jump5206": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5206": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block9708": [
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "jump7175": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))",
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "block8857": [
                "token.transfer(controller, balance)"
            ],
            "jump3784_0": [
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)",
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)"
            ],
            "block570_0": [
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "jump5206_4": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5206_5": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5206_6": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5206_0": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5206_1": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5206_2": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5206_3": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump9708": [
                "TokenController(controller).onTransfer(_from, _to, _amount)",
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "block3784_0": [
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)"
            ],
            "block3784": [
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)"
            ],
            "block6193": [
                "cloneToken.changeController(msg.sender)"
            ],
            "jump7175_1": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))",
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7175_0": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))",
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "block570": [
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "block7689": [
                "ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        )"
            ],
            "block7175_0": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7175_2": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7689": [
                "ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        )",
                "ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        )"
            ],
            "block8600": [
                "token.balanceOf(this)"
            ],
            "jump8311": [
                "controller.transfer(this.balance)",
                "controller.transfer(this.balance)"
            ],
            "jump8600": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "block8311": [
                "controller.transfer(this.balance)"
            ],
            "block7175": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6193": [
                "cloneToken.changeController(msg.sender)",
                "cloneToken.changeController(msg.sender)"
            ],
            "jump570_0": [
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)",
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "jump570": [
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)",
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)"
            ]
        }
    },
    "WithdrawContract": {
        "function_list": [
            "Escapable(address,address)",
            "blacklistEscapeToken(address)",
            "isTokenEscapable(address)",
            "escapeHatch(address)",
            "changeHatchEscapeCaller(address)",
            "Owned()",
            "changeOwnership(address)",
            "proposeOwnership(address)",
            "acceptOwnership()",
            "removeOwnership(address)",
            "WithdrawContract(MiniMeToken,address,address)",
            "fallback()",
            "newEtherDeposit(uint256)",
            "newTokenDeposit(ERC20,uint256,uint256)",
            "cancelPaymentGlobally(uint256)",
            "withdraw()",
            "skipPayment(uint256,bool)",
            "getPendingReward(ERC20,address)",
            "canWithdraw(address)",
            "nDeposits()",
            "isDepositSkiped(address,uint256)",
            "doPayment(uint256,address,ERC20,uint256)",
            "getBalance(ERC20,address)"
        ],
        "initial_state": {
            "Escapable(address,address)": {
                "argument": {},
                "contract": {
                    "deposits": "WithdrawContract.Deposit[]"
                }
            },
            "blacklistEscapeToken(address)": {
                "argument": {},
                "contract": {
                    "deposits": "WithdrawContract.Deposit[]"
                }
            },
            "isTokenEscapable(address)": {
                "argument": {},
                "contract": {
                    "deposits": "WithdrawContract.Deposit[]"
                }
            },
            "escapeHatch(address)": {
                "argument": {},
                "contract": {
                    "deposits": "WithdrawContract.Deposit[]"
                }
            },
            "changeHatchEscapeCaller(address)": {
                "argument": {},
                "contract": {
                    "deposits": "WithdrawContract.Deposit[]"
                }
            },
            "Owned()": {
                "argument": {},
                "contract": {
                    "deposits": "WithdrawContract.Deposit[]"
                }
            },
            "changeOwnership(address)": {
                "argument": {},
                "contract": {
                    "deposits": "WithdrawContract.Deposit[]"
                }
            },
            "proposeOwnership(address)": {
                "argument": {},
                "contract": {
                    "deposits": "WithdrawContract.Deposit[]"
                }
            },
            "acceptOwnership()": {
                "argument": {},
                "contract": {
                    "deposits": "WithdrawContract.Deposit[]"
                }
            },
            "removeOwnership(address)": {
                "argument": {},
                "contract": {
                    "deposits": "WithdrawContract.Deposit[]"
                }
            },
            "WithdrawContract(MiniMeToken,address,address)": {
                "argument": {},
                "contract": {
                    "deposits": "WithdrawContract.Deposit[]"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "deposits": "WithdrawContract.Deposit[]"
                }
            },
            "newEtherDeposit(uint256)": {
                "argument": {
                    "_block": "uint256"
                },
                "contract": {
                    "deposits": "WithdrawContract.Deposit[]"
                }
            },
            "newTokenDeposit(ERC20,uint256,uint256)": {
                "argument": {
                    "_amount": "uint256",
                    "_block": "uint256"
                },
                "contract": {
                    "deposits": "WithdrawContract.Deposit[]"
                }
            },
            "cancelPaymentGlobally(uint256)": {
                "argument": {
                    "_idDeposit": "uint256"
                },
                "contract": {
                    "deposits": "WithdrawContract.Deposit[]"
                }
            },
            "withdraw()": {
                "argument": {},
                "contract": {
                    "deposits": "WithdrawContract.Deposit[]"
                }
            },
            "skipPayment(uint256,bool)": {
                "argument": {
                    "_idDeposit": "uint256"
                },
                "contract": {
                    "deposits": "WithdrawContract.Deposit[]"
                }
            },
            "getPendingReward(ERC20,address)": {
                "argument": {},
                "contract": {
                    "deposits": "WithdrawContract.Deposit[]"
                }
            },
            "canWithdraw(address)": {
                "argument": {},
                "contract": {
                    "deposits": "WithdrawContract.Deposit[]"
                }
            },
            "nDeposits()": {
                "argument": {},
                "contract": {
                    "deposits": "WithdrawContract.Deposit[]"
                }
            },
            "isDepositSkiped(address,uint256)": {
                "argument": {
                    "_idDeposit": "uint256"
                },
                "contract": {
                    "deposits": "WithdrawContract.Deposit[]"
                }
            },
            "doPayment(uint256,address,ERC20,uint256)": {
                "argument": {
                    "_idDeposit": "uint256",
                    "_amount": "uint256"
                },
                "contract": {
                    "deposits": "WithdrawContract.Deposit[]"
                }
            },
            "getBalance(ERC20,address)": {
                "argument": {},
                "contract": {
                    "deposits": "WithdrawContract.Deposit[]"
                }
            }
        },
        "function_block_mapping": {
            "proposeOwnership(address)": [
                895,
                251
            ],
            "newEtherDeposit(uint256)": [
                1508,
                427
            ],
            "removeOwnership(address)": [
                828,
                229
            ],
            "changeHatchEscapeCaller(address)": [
                1647,
                471
            ],
            "canWithdraw(address)": [
                309,
                75
            ],
            "changeOwnership(address)": [
                487,
                119
            ],
            "withdraw()": [
                554,
                141
            ],
            "skipPayment(uint256,bool)": [
                577,
                163
            ],
            "isTokenEscapable(address)": [
                985,
                295
            ],
            "isDepositSkiped(address,uint256)": [
                1273,
                383
            ],
            "escapeHatch(address)": [
                1206,
                361
            ],
            "nDeposits()": [
                1163,
                339
            ],
            "cancelPaymentGlobally(uint256)": [
                1714,
                493
            ],
            "acceptOwnership()": [
                962,
                273
            ]
        },
        "block_CALL_mapping": {
            "block7145": [
                "escapeHatchDestination.transfer(balance)"
            ],
            "block2985": [
                "rewardToken.balanceOfAt(_holder, d.block)"
            ],
            "jump7803": [
                "token.transfer(escapeHatchDestination, balance)",
                "token.transfer(escapeHatchDestination, balance)"
            ],
            "block9546_0": [
                "_dest.send(_amount)"
            ],
            "jump2725": [
                "rewardToken.totalSupplyAt(d.block)",
                "rewardToken.totalSupplyAt(d.block)"
            ],
            "block9781_0": [
                "_token.transfer(_dest, _amount)"
            ],
            "jump9390": [
                "rewardToken.balanceOfAt(_holder, d.block)",
                "rewardToken.balanceOfAt(_holder, d.block)"
            ],
            "block9130": [
                "rewardToken.totalSupplyAt(d.block)"
            ],
            "jump9130": [
                "rewardToken.totalSupplyAt(d.block)",
                "rewardToken.totalSupplyAt(d.block)"
            ],
            "block9546": [
                "_dest.send(_amount)"
            ],
            "block4560": [
                "rewardToken.balanceOfAt(msg.sender, d.block)"
            ],
            "jump4560": [
                "rewardToken.balanceOfAt(msg.sender, d.block)",
                "rewardToken.balanceOfAt(msg.sender, d.block)"
            ],
            "jump9781_0": [
                "_token.transfer(_dest, _amount)",
                "_token.transfer(_dest, _amount)"
            ],
            "jump9546": [
                "_dest.send(_amount)",
                "_dest.send(_amount)"
            ],
            "jump4300": [
                "rewardToken.totalSupplyAt(d.block)",
                "rewardToken.totalSupplyAt(d.block)"
            ],
            "jump9546_0": [
                "_dest.send(_amount)",
                "_dest.send(_amount)"
            ],
            "jump2985": [
                "rewardToken.balanceOfAt(_holder, d.block)",
                "rewardToken.balanceOfAt(_holder, d.block)"
            ],
            "jump9781": [
                "_token.transfer(_dest, _amount)",
                "_token.transfer(_dest, _amount)"
            ],
            "block7803": [
                "token.transfer(escapeHatchDestination, balance)"
            ],
            "block9390": [
                "rewardToken.balanceOfAt(_holder, d.block)"
            ],
            "jump5352": [
                "_token.transferFrom(msg.sender, address(this), _amount)",
                "_token.transferFrom(msg.sender, address(this), _amount)"
            ],
            "block5352": [
                "_token.transferFrom(msg.sender, address(this), _amount)"
            ],
            "block2725": [
                "rewardToken.totalSupplyAt(d.block)"
            ],
            "jump7545": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "block9781": [
                "_token.transfer(_dest, _amount)"
            ],
            "jump7145": [
                "escapeHatchDestination.transfer(balance)",
                "escapeHatchDestination.transfer(balance)"
            ],
            "block4300": [
                "rewardToken.totalSupplyAt(d.block)"
            ],
            "block7545": [
                "token.balanceOf(this)"
            ]
        }
    }
}