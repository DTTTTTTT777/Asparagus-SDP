{
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20Basic": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "balanceOf(address)": [
                124,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                202,
                75
            ],
            "transfer(address,uint256)": [
                873,
                273
            ],
            "balanceOf(address)": [
                601,
                185
            ],
            "transferFrom(address,address,uint256)": [
                346,
                119
            ],
            "allowance(address,address)": [
                1061,
                317
            ]
        },
        "block_CALL_mapping": {}
    },
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "BasicToken": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transfer(address,uint256)": [
                222,
                119
            ],
            "balanceOf(address)": [
                135,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "StandardToken": {
        "function_list": [
            "transfer(address,uint256)",
            "balanceOf(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "GenesisToken": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "balanceOf(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "GenesisToken(address,uint256)",
            "giveTokens(address,uint256)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "version": "string"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "version": "string"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "version": "string"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "version": "string"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "version": "string"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "version": "string"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "version": "string"
                }
            },
            "GenesisToken(address,uint256)": {
                "argument": {
                    "initialBalance": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "version": "string"
                }
            },
            "giveTokens(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "version": "string"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "version": "string"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                346,
                97
            ],
            "giveTokens(address,uint256)": [
                810,
                207
            ],
            "allowance(address,address)": [
                1330,
                317
            ],
            "balanceOf(address)": [
                911,
                229
            ],
            "transferFrom(address,address,uint256)": [
                490,
                141
            ],
            "transferOwnership(address)": [
                1449,
                339
            ],
            "transfer(address,uint256)": [
                1229,
                295
            ]
        },
        "block_CALL_mapping": {}
    },
    "CrowdWallet": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "CrowdWallet(address,address,uint256)",
            "setMinimumWithdrawal(uint256)",
            "setBlocksPerPayPeriod(uint256)",
            "withdraw()",
            "isAddressLocked(address)",
            "isNewPayoutPeriod()",
            "startNewPayoutPeriod()",
            "calculatePayoutForAddress(address)",
            "ethBalance()",
            "deposit()",
            "fallback()",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {
                    "deposits": "mapping(address => CrowdWallet.Deposit[])",
                    "payouts": "mapping(address => CrowdWallet.Payout[])",
                    "lifetimeDeposits": "uint256",
                    "lifetimePayouts": "uint256",
                    "blocksPerPayPeriod": "uint256",
                    "previousPayoutBlock": "uint256",
                    "nextPayoutBlock": "uint256",
                    "payoutPool": "uint256",
                    "multiplier": "uint256",
                    "minWithdrawalThreshold": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "deposits": "mapping(address => CrowdWallet.Deposit[])",
                    "payouts": "mapping(address => CrowdWallet.Payout[])",
                    "lifetimeDeposits": "uint256",
                    "lifetimePayouts": "uint256",
                    "blocksPerPayPeriod": "uint256",
                    "previousPayoutBlock": "uint256",
                    "nextPayoutBlock": "uint256",
                    "payoutPool": "uint256",
                    "multiplier": "uint256",
                    "minWithdrawalThreshold": "uint256"
                }
            },
            "CrowdWallet(address,address,uint256)": {
                "argument": {
                    "_blocksPerPayPeriod": "uint256"
                },
                "contract": {
                    "deposits": "mapping(address => CrowdWallet.Deposit[])",
                    "payouts": "mapping(address => CrowdWallet.Payout[])",
                    "lifetimeDeposits": "uint256",
                    "lifetimePayouts": "uint256",
                    "blocksPerPayPeriod": "uint256",
                    "previousPayoutBlock": "uint256",
                    "nextPayoutBlock": "uint256",
                    "payoutPool": "uint256",
                    "multiplier": "uint256",
                    "minWithdrawalThreshold": "uint256"
                }
            },
            "setMinimumWithdrawal(uint256)": {
                "argument": {
                    "_weiAmount": "uint256"
                },
                "contract": {
                    "deposits": "mapping(address => CrowdWallet.Deposit[])",
                    "payouts": "mapping(address => CrowdWallet.Payout[])",
                    "lifetimeDeposits": "uint256",
                    "lifetimePayouts": "uint256",
                    "blocksPerPayPeriod": "uint256",
                    "previousPayoutBlock": "uint256",
                    "nextPayoutBlock": "uint256",
                    "payoutPool": "uint256",
                    "multiplier": "uint256",
                    "minWithdrawalThreshold": "uint256"
                }
            },
            "setBlocksPerPayPeriod(uint256)": {
                "argument": {
                    "_blocksPerPayPeriod": "uint256"
                },
                "contract": {
                    "deposits": "mapping(address => CrowdWallet.Deposit[])",
                    "payouts": "mapping(address => CrowdWallet.Payout[])",
                    "lifetimeDeposits": "uint256",
                    "lifetimePayouts": "uint256",
                    "blocksPerPayPeriod": "uint256",
                    "previousPayoutBlock": "uint256",
                    "nextPayoutBlock": "uint256",
                    "payoutPool": "uint256",
                    "multiplier": "uint256",
                    "minWithdrawalThreshold": "uint256"
                }
            },
            "withdraw()": {
                "argument": {},
                "contract": {
                    "deposits": "mapping(address => CrowdWallet.Deposit[])",
                    "payouts": "mapping(address => CrowdWallet.Payout[])",
                    "lifetimeDeposits": "uint256",
                    "lifetimePayouts": "uint256",
                    "blocksPerPayPeriod": "uint256",
                    "previousPayoutBlock": "uint256",
                    "nextPayoutBlock": "uint256",
                    "payoutPool": "uint256",
                    "multiplier": "uint256",
                    "minWithdrawalThreshold": "uint256"
                }
            },
            "isAddressLocked(address)": {
                "argument": {},
                "contract": {
                    "deposits": "mapping(address => CrowdWallet.Deposit[])",
                    "payouts": "mapping(address => CrowdWallet.Payout[])",
                    "lifetimeDeposits": "uint256",
                    "lifetimePayouts": "uint256",
                    "blocksPerPayPeriod": "uint256",
                    "previousPayoutBlock": "uint256",
                    "nextPayoutBlock": "uint256",
                    "payoutPool": "uint256",
                    "multiplier": "uint256",
                    "minWithdrawalThreshold": "uint256"
                }
            },
            "isNewPayoutPeriod()": {
                "argument": {},
                "contract": {
                    "deposits": "mapping(address => CrowdWallet.Deposit[])",
                    "payouts": "mapping(address => CrowdWallet.Payout[])",
                    "lifetimeDeposits": "uint256",
                    "lifetimePayouts": "uint256",
                    "blocksPerPayPeriod": "uint256",
                    "previousPayoutBlock": "uint256",
                    "nextPayoutBlock": "uint256",
                    "payoutPool": "uint256",
                    "multiplier": "uint256",
                    "minWithdrawalThreshold": "uint256"
                }
            },
            "startNewPayoutPeriod()": {
                "argument": {},
                "contract": {
                    "deposits": "mapping(address => CrowdWallet.Deposit[])",
                    "payouts": "mapping(address => CrowdWallet.Payout[])",
                    "lifetimeDeposits": "uint256",
                    "lifetimePayouts": "uint256",
                    "blocksPerPayPeriod": "uint256",
                    "previousPayoutBlock": "uint256",
                    "nextPayoutBlock": "uint256",
                    "payoutPool": "uint256",
                    "multiplier": "uint256",
                    "minWithdrawalThreshold": "uint256"
                }
            },
            "calculatePayoutForAddress(address)": {
                "argument": {},
                "contract": {
                    "deposits": "mapping(address => CrowdWallet.Deposit[])",
                    "payouts": "mapping(address => CrowdWallet.Payout[])",
                    "lifetimeDeposits": "uint256",
                    "lifetimePayouts": "uint256",
                    "blocksPerPayPeriod": "uint256",
                    "previousPayoutBlock": "uint256",
                    "nextPayoutBlock": "uint256",
                    "payoutPool": "uint256",
                    "multiplier": "uint256",
                    "minWithdrawalThreshold": "uint256"
                }
            },
            "ethBalance()": {
                "argument": {},
                "contract": {
                    "deposits": "mapping(address => CrowdWallet.Deposit[])",
                    "payouts": "mapping(address => CrowdWallet.Payout[])",
                    "lifetimeDeposits": "uint256",
                    "lifetimePayouts": "uint256",
                    "blocksPerPayPeriod": "uint256",
                    "previousPayoutBlock": "uint256",
                    "nextPayoutBlock": "uint256",
                    "payoutPool": "uint256",
                    "multiplier": "uint256",
                    "minWithdrawalThreshold": "uint256"
                }
            },
            "deposit()": {
                "argument": {},
                "contract": {
                    "deposits": "mapping(address => CrowdWallet.Deposit[])",
                    "payouts": "mapping(address => CrowdWallet.Payout[])",
                    "lifetimeDeposits": "uint256",
                    "lifetimePayouts": "uint256",
                    "blocksPerPayPeriod": "uint256",
                    "previousPayoutBlock": "uint256",
                    "nextPayoutBlock": "uint256",
                    "payoutPool": "uint256",
                    "multiplier": "uint256",
                    "minWithdrawalThreshold": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "deposits": "mapping(address => CrowdWallet.Deposit[])",
                    "payouts": "mapping(address => CrowdWallet.Payout[])",
                    "lifetimeDeposits": "uint256",
                    "lifetimePayouts": "uint256",
                    "blocksPerPayPeriod": "uint256",
                    "previousPayoutBlock": "uint256",
                    "nextPayoutBlock": "uint256",
                    "payoutPool": "uint256",
                    "multiplier": "uint256",
                    "minWithdrawalThreshold": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "isAddressLocked(address)": [
                1101,
                405
            ],
            "calculatePayoutForAddress(address)": [
                533,
                207
            ],
            "setMinimumWithdrawal(uint256)": [
                1414,
                515
            ],
            "setBlocksPerPayPeriod(uint256)": [
                1282,
                471
            ],
            "startNewPayoutPeriod()": [
                1192,
                427
            ],
            "withdraw()": [
                381,
                119
            ],
            "ethBalance()": [
                404,
                141
            ],
            "deposit()": [
                944,
                339
            ],
            "transferOwnership(address)": [
                1215,
                449
            ],
            "isNewPayoutPeriod()": [
                854,
                295
            ]
        },
        "block_CALL_mapping": {
            "block2379_0": [
                "token.balanceOf(payee)"
            ],
            "jump2574": [
                "token.totalSupply()",
                "token.totalSupply()"
            ],
            "block2574_0": [
                "token.totalSupply()"
            ],
            "jump2379": [
                "token.balanceOf(payee)",
                "token.balanceOf(payee)"
            ],
            "block1971": [
                "msg.sender.transfer(payoutAmount)"
            ],
            "jump2379_0": [
                "token.balanceOf(payee)",
                "token.balanceOf(payee)"
            ],
            "block2574": [
                "token.totalSupply()"
            ],
            "jump2574_0": [
                "token.totalSupply()",
                "token.totalSupply()"
            ],
            "block2379": [
                "token.balanceOf(payee)"
            ],
            "jump1971": [
                "msg.sender.transfer(payoutAmount)",
                "msg.sender.transfer(payoutAmount)"
            ]
        }
    }
}