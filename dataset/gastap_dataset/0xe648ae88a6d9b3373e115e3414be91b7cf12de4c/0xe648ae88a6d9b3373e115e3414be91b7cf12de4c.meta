{
    "usingOraclize": {
        "function_list": [
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            }
        },
        "function_block_mapping": {
            "__callback(bytes32,string,bytes)": [
                200,
                97
            ],
            "__callback(bytes32,string)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "mortal": {
        "function_list": [
            "mortal()",
            "kill()"
        ],
        "initial_state": {
            "mortal()": {
                "argument": {},
                "contract": {}
            },
            "kill()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "strings": {
        "function_list": [
            "memcpy(uint256,uint256,uint256)",
            "toSlice(string)",
            "len(bytes32)",
            "toSliceB32(bytes32)",
            "copy(strings.slice)",
            "toString(strings.slice)",
            "len(strings.slice)",
            "empty(strings.slice)",
            "compare(strings.slice,strings.slice)",
            "equals(strings.slice,strings.slice)",
            "nextRune(strings.slice,strings.slice)",
            "nextRune(strings.slice)",
            "ord(strings.slice)",
            "keccak(strings.slice)",
            "startsWith(strings.slice,strings.slice)",
            "beyond(strings.slice,strings.slice)",
            "endsWith(strings.slice,strings.slice)",
            "until(strings.slice,strings.slice)",
            "findPtr(uint256,uint256,uint256,uint256)",
            "rfindPtr(uint256,uint256,uint256,uint256)",
            "find(strings.slice,strings.slice)",
            "rfind(strings.slice,strings.slice)",
            "split(strings.slice,strings.slice,strings.slice)",
            "split(strings.slice,strings.slice)",
            "rsplit(strings.slice,strings.slice,strings.slice)",
            "rsplit(strings.slice,strings.slice)",
            "count(strings.slice,strings.slice)",
            "contains(strings.slice,strings.slice)",
            "concat(strings.slice,strings.slice)",
            "join(strings.slice,strings.slice[])"
        ],
        "initial_state": {
            "memcpy(uint256,uint256,uint256)": {
                "argument": {
                    "dest": "uint256",
                    "src": "uint256",
                    "len": "uint256"
                },
                "contract": {}
            },
            "toSlice(string)": {
                "argument": {
                    "self": "string"
                },
                "contract": {}
            },
            "len(bytes32)": {
                "argument": {
                    "self": "bytes32"
                },
                "contract": {}
            },
            "toSliceB32(bytes32)": {
                "argument": {
                    "self": "bytes32"
                },
                "contract": {}
            },
            "copy(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "toString(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "len(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "empty(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "compare(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "other": "strings.slice"
                },
                "contract": {}
            },
            "equals(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "other": "strings.slice"
                },
                "contract": {}
            },
            "nextRune(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "rune": "strings.slice"
                },
                "contract": {}
            },
            "nextRune(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "ord(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "keccak(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "startsWith(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "beyond(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "endsWith(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "until(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "findPtr(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "selflen": "uint256",
                    "selfptr": "uint256",
                    "needlelen": "uint256",
                    "needleptr": "uint256"
                },
                "contract": {}
            },
            "rfindPtr(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "selflen": "uint256",
                    "selfptr": "uint256",
                    "needlelen": "uint256",
                    "needleptr": "uint256"
                },
                "contract": {}
            },
            "find(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "rfind(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "split(strings.slice,strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice",
                    "token": "strings.slice"
                },
                "contract": {}
            },
            "split(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "rsplit(strings.slice,strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice",
                    "token": "strings.slice"
                },
                "contract": {}
            },
            "rsplit(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "count(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "contains(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "concat(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "other": "strings.slice"
                },
                "contract": {}
            },
            "join(strings.slice,strings.slice[])": {
                "argument": {
                    "self": "strings.slice",
                    "parts": "strings.slice[]"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "transferable": {
        "function_list": [
            "receive(address,uint8,uint32[])"
        ],
        "initial_state": {
            "receive(address,uint8,uint32[])": {
                "argument": {
                    "animalType": "uint8",
                    "animalIds": "uint32[]"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "receive(address,uint8,uint32[])": [
                68,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "Pray4Prey": {
        "function_list": [
            "receive(address,uint8,uint32[])",
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "mortal()",
            "kill()",
            "init()",
            "fallback()",
            "addAnimals(uint8)",
            "giveAnimals(uint8,address)",
            "addAnimal(uint8,address,uint32)",
            "exit()",
            "replaceAnimal(uint16)",
            "triggerAttackManually(uint32)",
            "triggerAttack(uint32,uint128)",
            "__callback(bytes32,string)",
            "timeTillNextAttack()",
            "killAnimal(uint16)",
            "findOldest()",
            "distribute(uint128)",
            "collectFees(uint128)",
            "stop()",
            "sellAnimal(uint32)",
            "getAnimal(uint32)",
            "get10Animals(uint16)",
            "getFees()",
            "setOraclizeGas(uint32)",
            "setMaxAnimals(uint16)",
            "mapToNewRange(uint256,uint256)",
            "getNumbersFromString(string,string,uint32)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "receive(address,uint8,uint32[])": {
                "argument": {
                    "animalType": "uint8",
                    "animalIds": "uint32[]"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "mortal()": {
                "argument": {},
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "kill()": {
                "argument": {},
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "init()": {
                "argument": {},
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "addAnimals(uint8)": {
                "argument": {
                    "animalType": "uint8"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "giveAnimals(uint8,address)": {
                "argument": {
                    "animalType": "uint8"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "addAnimal(uint8,address,uint32)": {
                "argument": {
                    "animalType": "uint8",
                    "nId": "uint32"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "exit()": {
                "argument": {},
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "replaceAnimal(uint16)": {
                "argument": {
                    "index": "uint16"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "triggerAttackManually(uint32)": {
                "argument": {
                    "inseconds": "uint32"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "triggerAttack(uint32,uint128)": {
                "argument": {
                    "inseconds": "uint32",
                    "gasAmount": "uint128"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "timeTillNextAttack()": {
                "argument": {},
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "killAnimal(uint16)": {
                "argument": {
                    "index": "uint16"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "findOldest()": {
                "argument": {},
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "distribute(uint128)": {
                "argument": {
                    "totalAmount": "uint128"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "collectFees(uint128)": {
                "argument": {
                    "amount": "uint128"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "stop()": {
                "argument": {},
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "sellAnimal(uint32)": {
                "argument": {
                    "animalId": "uint32"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "getAnimal(uint32)": {
                "argument": {
                    "animalId": "uint32"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "get10Animals(uint16)": {
                "argument": {
                    "startIndex": "uint16"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "getFees()": {
                "argument": {},
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "setOraclizeGas(uint32)": {
                "argument": {
                    "newGas": "uint32"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "setMaxAnimals(uint16)": {
                "argument": {
                    "number": "uint16"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "mapToNewRange(uint256,uint256)": {
                "argument": {
                    "number": "uint256",
                    "range": "uint256"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "getNumbersFromString(string,string,uint32)": {
                "argument": {
                    "s": "string",
                    "delimiter": "string",
                    "howmany": "uint32"
                },
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "ids": "uint32[]",
                    "nextId": "uint32",
                    "oldest": "uint32",
                    "costs": "uint128[]",
                    "values": "uint128[]",
                    "fee": "uint8",
                    "numAnimals": "uint32",
                    "maxAnimals": "uint16",
                    "randomQuery": "string",
                    "queryType": "string",
                    "nextAttackTimestamp": "uint256",
                    "oraclizeGas": "uint32",
                    "nextAttackId": "bytes32"
                }
            }
        },
        "function_block_mapping": {
            "exit()": [
                2258,
                484
            ],
            "setOraclizeGas(uint32)": [
                1974,
                352
            ],
            "giveAnimals(uint8,address)": [
                2125,
                418
            ],
            "triggerAttackManually(uint32)": [
                598,
                44
            ],
            "getFees()": [
                2192,
                440
            ],
            "init()": [
                2235,
                462
            ],
            "__callback(bytes32,string,bytes)": [
                1133,
                176
            ],
            "findOldest()": [
                2535,
                572
            ],
            "get10Animals(uint16)": [
                1568,
                286
            ],
            "setMaxAnimals(uint16)": [
                2025,
                374
            ],
            "getAnimal(uint32)": [
                962,
                154
            ],
            "__callback(bytes32,string)": [
                780,
                110
            ],
            "collectFees(uint128)": [
                899,
                132
            ],
            "receive(address,uint8,uint32[])": [
                2281,
                506
            ],
            "addAnimals(uint8)": [
                1432,
                242
            ],
            "stop()": [
                575,
                22
            ]
        },
        "block_CALL_mapping": {
            "jump4158_1": [
                "msg.sender.send(playerBalance)",
                "msg.sender.send(playerBalance)"
            ],
            "block15034": [
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)"
            ],
            "jump11404": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump14193": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump4158": [
                "msg.sender.send(playerBalance)",
                "msg.sender.send(playerBalance)"
            ],
            "block4158": [
                "msg.sender.send(playerBalance)"
            ],
            "block14570": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block14193_0": [
                "OAR.getAddress()"
            ],
            "block15034_0": [
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)"
            ],
            "block11404": [
                "OAR.getAddress()"
            ],
            "jump14193_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump14570": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump4158_0": [
                "msg.sender.send(playerBalance)",
                "msg.sender.send(playerBalance)"
            ],
            "block14193": [
                "OAR.getAddress()"
            ],
            "jump11661": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "jump5110": [
                "animals[ids[i]].owner.send(animals[ids[i]].value)",
                "animals[ids[i]].owner.send(animals[ids[i]].value)"
            ],
            "block4158_1": [
                "msg.sender.send(playerBalance)"
            ],
            "block4158_0": [
                "msg.sender.send(playerBalance)"
            ],
            "jump15034": [
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)",
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)"
            ],
            "block4572": [
                "msg.sender.send(val)"
            ],
            "jump4572": [
                "msg.sender.send(val)",
                "msg.sender.send(val)"
            ],
            "block5110": [
                "animals[ids[i]].owner.send(animals[ids[i]].value)"
            ],
            "block6484": [
                "owner.send(amount)"
            ],
            "jump6484": [
                "owner.send(amount)",
                "owner.send(amount)"
            ],
            "block11661": [
                "oraclize.cbAddress()"
            ],
            "jump15034_0": [
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)",
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)"
            ],
            "jump14570_0": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block14570_0": [
                "oraclize.getPrice(datasource, gaslimit)"
            ]
        }
    }
}