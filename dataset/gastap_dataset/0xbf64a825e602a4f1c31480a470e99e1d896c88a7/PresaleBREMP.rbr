block0(g(decimals), g(symbol), g(name), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	s(0) = 128
	nop(PUSH1)
	s(1) = 64
	nop(PUSH1)
	l(l0) = s(0)
	nop(MSTORE)
	s(0) = 4
	nop(PUSH1)
	s(1) = calldatasize
	nop(CALLDATASIZE)
	call(jump0(s(1),s(0),g(decimals), g(symbol), g(name), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))
	nop(LT)
	nop(PUSH2)
	nop(JUMPI)

jump0(s(1), s(0), g(decimals), g(symbol), g(name), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	lt(s(1), s(0))
	call(block395(g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump0(s(1), s(0), g(decimals), g(symbol), g(name), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	geq(s(1), s(0))
	call(block13(g(decimals), g(symbol), g(name), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))

jump13(s(2), s(1), s(0), g(decimals), g(symbol), g(name), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block2532(s(0),g(numberOfHolders), l(l3), l(l0), callvalue))

jump13(s(2), s(1), s(0), g(decimals), g(symbol), g(name), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block65(s(0),g(decimals), g(symbol), g(name), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))

block13(g(decimals), g(symbol), g(name), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	s(0) = 0
	nop(PUSH1)
	s(0) = calldataload
	nop(CALLDATALOAD)
	s(1) = 26959946667150639794667015087019630673637144422540572481103610249216
	nop(PUSH29)
	s(2) = s(0)
	s(0) = s(1)
	s(1) = s(2)
	nop(SWAP1)
	s(0) = s(1)/s(0)
	nop(DIV)
	s(1) = 4294967295
	nop(PUSH4)
	s(0) = and(s(1), s(0))
	nop(AND)
	s(1) = s(0)
	nop(DUP1)
	s(2) = 26855346
	nop(PUSH4)
	call(jump13(s(2),s(1),s(0),g(decimals), g(symbol), g(name), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump65(s(2), s(1), s(0), g(decimals), g(symbol), g(name), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block2575(s(0),g(name), l(l5), l(l3), l(l1), l(l0), callvalue))

jump65(s(2), s(1), s(0), g(decimals), g(symbol), g(name), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block76(s(0),g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))

block65(s(0), g(decimals), g(symbol), g(name), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 117300739
	nop(PUSH4)
	call(jump65(s(2),s(1),s(0),g(decimals), g(symbol), g(name), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block76(s(0), g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 157198259
	nop(PUSH4)
	call(jump76(s(2),s(1),s(0),g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump76(s(2), s(1), s(0), g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block2719(s(0),g(state), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, spender, value))

jump76(s(2), s(1), s(0), g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block87(s(0),g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))

block87(s(0), g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 157664434
	nop(PUSH4)
	call(jump87(s(2),s(1),s(0),g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump87(s(2), s(1), s(0), g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block2796(s(0),g(collectedNDAO), l(l3), l(l0), callvalue))

jump87(s(2), s(1), s(0), g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block98(s(0),g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))

block98(s(0), g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 404098525
	nop(PUSH4)
	call(jump98(s(2),s(1),s(0),g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump98(s(2), s(1), s(0), g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block2839(s(0),g(totalSupply), l(l3), l(l0), callvalue))

jump98(s(2), s(1), s(0), g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block109(s(0),g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))

block109(s(0), g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 413514716
	nop(PUSH4)
	call(jump109(s(2),s(1),s(0),g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump109(s(2), s(1), s(0), g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block2882(s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue))

jump109(s(2), s(1), s(0), g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block120(s(0),g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))

jump120(s(2), s(1), s(0), g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block2973(s(0),g(collectedUSD), l(l3), l(l0), callvalue))

jump120(s(2), s(1), s(0), g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block131(s(0),g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))

block120(s(0), g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 536265281
	nop(PUSH4)
	call(jump120(s(2),s(1),s(0),g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block131(s(0), g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 599290589
	nop(PUSH4)
	call(jump131(s(2),s(1),s(0),g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump131(s(2), s(1), s(0), g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block3016(s(0),g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, from, to, value))

jump131(s(2), s(1), s(0), g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, from, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block142(s(0),g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))

block142(s(0), g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 655915409
	nop(PUSH4)
	call(jump142(s(2),s(1),s(0),g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump142(s(2), s(1), s(0), g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block3125(s(0),g(presaleOwner), g(etherPrice), g(owner), calldatasize, caller, callvalue, etherPrice))

jump142(s(2), s(1), s(0), g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block153(s(0),g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))

jump153(s(2), s(1), s(0), g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block3170(s(0),g(decimals), l(l3), l(l0), callvalue))

jump153(s(2), s(1), s(0), g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block164(s(0),g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))

block153(s(0), g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 826074471
	nop(PUSH4)
	call(jump153(s(2),s(1),s(0),g(decimals), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump164(s(2), s(1), s(0), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block3219(s(0),g(presaleOwner), g(owner), l(l0), address, balance, caller, callvalue, returndatasize))

jump164(s(2), s(1), s(0), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block175(s(0),g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))

block164(s(0), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1020253707
	nop(PUSH4)
	call(jump164(s(2),s(1),s(0),g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block175(s(0), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1513848386
	nop(PUSH4)
	call(jump175(s(2),s(1),s(0),g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump175(s(2), s(1), s(0), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block3242(s(0),g(standard), l(l5), l(l3), l(l1), l(l0), callvalue))

jump175(s(2), s(1), s(0), g(symbol), g(standard), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block186(s(0),g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))

jump186(s(2), s(1), s(0), g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block3386(s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue))

jump186(s(2), s(1), s(0), g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block197(s(0),g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))

block186(s(0), g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1550156133
	nop(PUSH4)
	call(jump186(s(2),s(1),s(0),g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump197(s(2), s(1), s(0), g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block3505(s(0),g(state), g(owner), l(l3), l(l0), caller, callvalue))

jump197(s(2), s(1), s(0), g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block208(s(0),g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))

block197(s(0), g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1775409202
	nop(PUSH4)
	call(jump197(s(2),s(1),s(0),g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block208(s(0), g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1851865724
	nop(PUSH4)
	call(jump208(s(2),s(1),s(0),g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump208(s(2), s(1), s(0), g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block3528(s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue))

jump208(s(2), s(1), s(0), g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block219(s(0),g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))

block219(s(0), g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1889567281
	nop(PUSH4)
	call(jump219(s(2),s(1),s(0),g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump219(s(2), s(1), s(0), g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block3619(s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue))

jump219(s(2), s(1), s(0), g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block230(s(0),g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))

jump230(s(2), s(1), s(0), g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block3706(s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue))

jump230(s(2), s(1), s(0), g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block241(s(0),g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))

block230(s(0), g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2172211816
	nop(PUSH4)
	call(jump230(s(2),s(1),s(0),g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block241(s(0), g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2313023475
	nop(PUSH4)
	call(jump241(s(2),s(1),s(0),g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump241(s(2), s(1), s(0), g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block3815(s(0),g(neurodao), l(l3), l(l0), callvalue))

jump241(s(2), s(1), s(0), g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block252(s(0),g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))

block252(s(0), g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2376452955
	nop(PUSH4)
	call(jump252(s(2),s(1),s(0),g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump252(s(2), s(1), s(0), g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block3902(s(0),g(owner), l(l3), l(l0), callvalue))

jump252(s(2), s(1), s(0), g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block263(s(0),g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))

block263(s(0), g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2514000705
	nop(PUSH4)
	call(jump263(s(2),s(1),s(0),g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump263(s(2), s(1), s(0), g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block3989(s(0),g(symbol), l(l5), l(l3), l(l1), l(l0), callvalue))

jump263(s(2), s(1), s(0), g(symbol), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block274(s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))

jump274(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block4133(s(0),g(presaleOwner), l(l3), l(l0), callvalue))

jump274(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block285(s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))

block274(s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2626265354
	nop(PUSH4)
	call(jump274(s(2),s(1),s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block285(s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2653976917
	nop(PUSH4)
	call(jump285(s(2),s(1),s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump285(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block4220(s(0),g(etherPrice), l(l3), l(l0), callvalue))

jump285(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block296(s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))

jump296(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block4263(s(0),g(newOwner), g(owner), calldatasize, caller, callvalue, owner))

jump296(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block307(s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))

block296(s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2801392353
	nop(PUSH4)
	call(jump296(s(2),s(1),s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump307(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block4330(s(0),g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, to, value))

jump307(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block318(s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp))

block307(s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2835717307
	nop(PUSH4)
	call(jump307(s(2),s(1),s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump318(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp)=>
	eq(s(2), s(1))
	call(block4407(s(0),g(state), g(presaleOwner), g(owner), l(l3), l(l0), calldatasize, caller, callvalue, presaleOwner))

jump318(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp)=>
	neq(s(2), s(1))
	call(block329(s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp))

block318(s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2877209550
	nop(PUSH4)
	call(jump318(s(2),s(1),s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, spender, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block329(s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3053702528
	nop(PUSH4)
	call(jump329(s(2),s(1),s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump329(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp)=>
	eq(s(2), s(1))
	call(block4474(s(0),g(presaleOwner), g(owner), l(l0), address, balance, caller, callvalue, returndatasize))

jump329(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp)=>
	neq(s(2), s(1))
	call(block340(s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp))

jump340(s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp)=>
	eq(s(2), s(1))
	call(block4497(s(0),g(state), g(owner), l(l3), l(l0), caller, callvalue))

jump340(s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp)=>
	neq(s(2), s(1))
	call(block351(s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp))

block340(s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3087850742
	nop(PUSH4)
	call(jump340(s(2),s(1),s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump351(s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp)=>
	eq(s(2), s(1))
	call(block4520(s(0),g(newOwner), g(owner), caller, callvalue))

jump351(s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp)=>
	neq(s(2), s(1))
	call(block362(s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp))

block351(s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3181079942
	nop(PUSH4)
	call(jump351(s(2),s(1),s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump362(s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp)=>
	eq(s(2), s(1))
	call(block4543(s(0),g(state), l(l3), l(l0), callvalue))

jump362(s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp)=>
	neq(s(2), s(1))
	call(block373(s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp))

block362(s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3248329723
	nop(PUSH4)
	call(jump362(s(2),s(1),s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump373(s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp)=>
	eq(s(2), s(1))
	call(block4600(s(0),g(newOwner), l(l3), l(l0), callvalue))

jump373(s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp)=>
	neq(s(2), s(1))
	call(block384(s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp))

block373(s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3572374928
	nop(PUSH4)
	call(jump373(s(2),s(1),s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block384(s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3714247998
	nop(PUSH4)
	call(jump384(s(2),s(1),s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump384(s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp)=>
	eq(s(2), s(1))
	call(block4687(s(0),g(state), l(l3), l(l2), l(l1), l(l0), calldatasize, callvalue, owner, spender))

jump384(s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, returndatasize, spender, timestamp)=>
	neq(s(2), s(1))
	call(block395_0(s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

block395(g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(0) = 0
	nop(PUSH1)
	s(1) = s(0)
	nop(DUP1)
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(4)
	nop(DUP1)
	s(6) = 1
	nop(PUSH1)
	s(7) = 3
	nop(PUSH1)
	s(8) = s(6)
	nop(DUP2)
	call(jump395(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump395(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(8), s(7))
	call(block417(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump395(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(8), s(7))
	call(block416(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block416(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block417(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(7) = 13
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(8) = g(state)
	nop(SLOAD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = 255
	nop(PUSH1)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 3
	nop(PUSH1)
	s(9) = s(7)
	nop(DUP2)
	call(jump417(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump417(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(9), s(8))
	call(block444(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump417(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(9), s(8))
	call(block443(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block443(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump444(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	neq(s(7), s(6))
	call(block1094(s(5), s(4), s(3), s(2), s(1), s(0),g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))

jump444(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	eq(s(7), s(6))
	call(block451(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

block444(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	call(jump444(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(EQ)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block451(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	s(6) = 0
	nop(PUSH1)
	s(7) = 3
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = address
	nop(ADDRESS)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	gl = s(7)
	s(7) = fresh(0)
	nop(SLOAD)
	call(jump451(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump451(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(7), s(6))
	call(block528(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump451(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(7), s(6))
	call(block524(s(5), s(4), s(3), s(2), s(1), s(0)))

block524(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

block528(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(6) = 500000
	nop(PUSH3)
	s(7) = 9
	nop(PUSH1)
	s(7) = g(collectedUSD)
	nop(SLOAD)
	call(jump528(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump528(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	lt(s(7), s(6))
	call(block547(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump528(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	geq(s(7), s(6))
	call(block543(s(5), s(4), s(3), s(2), s(1), s(0)))

block543(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

jump547(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	neq(s(8), 0)
	call(block573(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump547(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	eq(s(8), 0)
	call(block572(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block547(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(6) = callvalue
	nop(CALLVALUE)
	s(7) = s(2)
	s(2) = s(6)
	s(6) = s(7)
	nop(SWAP4)
	nop(POP)
	s(6) = 1000000000000000000
	nop(PUSH8)
	s(7) = 5
	nop(PUSH1)
	s(7) = g(etherPrice)
	nop(SLOAD)
	s(8) = s(2)
	nop(DUP6)
	s(7) = s(8)*s(7)
	nop(MUL)
	s(8) = s(6)
	nop(DUP2)
	call(jump547(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block572(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump573(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(7), s(6))
	call(block704(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))

jump573(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(7), s(6))
	call(block592(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

block573(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(6) = s(7)/s(6)
	nop(DIV)
	s(7) = s(3)
	s(3) = s(6)
	s(6) = s(7)
	nop(SWAP3)
	nop(POP)
	s(6) = 500000
	nop(PUSH3)
	s(7) = s(3)
	nop(DUP4)
	s(8) = 9
	nop(PUSH1)
	s(8) = g(collectedUSD)
	nop(SLOAD)
	s(7) = s(8)+s(7)
	nop(ADD)
	call(jump573(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block592(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	s(6) = 9
	nop(PUSH1)
	s(6) = g(collectedUSD)
	nop(SLOAD)
	s(7) = 500000
	nop(PUSH3)
	s(6) = s(7)-s(6)
	nop(SUB)
	s(7) = s(3)
	s(3) = s(6)
	s(6) = s(7)
	nop(SWAP3)
	nop(POP)
	s(6) = 5
	nop(PUSH1)
	s(6) = g(etherPrice)
	nop(SLOAD)
	s(7) = 1000000000000000000
	nop(PUSH8)
	s(8) = s(3)
	nop(DUP5)
	s(7) = s(8)*s(7)
	nop(MUL)
	s(8) = s(6)
	nop(DUP2)
	call(jump592(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump592(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	neq(s(8), 0)
	call(block624(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump592(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	eq(s(8), 0)
	call(block623(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block623(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump624(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	neq(s(6), 0)
	call(block689(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))

jump624(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	eq(s(6), 0)
	call(block685(s(5), s(4), s(3), s(2), s(1), s(0)))

block624(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(6) = s(7)/s(6)
	nop(DIV)
	s(7) = s(2)
	s(2) = s(6)
	s(6) = s(7)
	nop(SWAP4)
	nop(POP)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = 3000000
	nop(PUSH3)
	s(8) = s(2)
	nop(DUP6)
	s(9) = callvalue
	nop(CALLVALUE)
	s(8) = s(9)-s(8)
	nop(SUB)
	s(9) = 64
	nop(PUSH1)
	s(9) = l(l0)
	nop(MLOAD)
	s(10) = 0
	nop(PUSH1)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(9)
	nop(DUP4)
	s(12) = s(13)-s(12)
	nop(SUB)
	s(13) = s(11)
	nop(DUP2)
	s(14) = s(8)
	nop(DUP6)
	s(15) = s(6)
	nop(DUP9)
	s(16) = s(7)
	nop(DUP9)
	s(10) = 1
	nop(CALL)
	s(11) = s(6)
	s(6) = s(10)
	s(10) = s(11)
	nop(SWAP4)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	call(jump624(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block685(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

block689(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(6) = 500000
	nop(PUSH3)
	s(7) = 9
	nop(PUSH1)
	s(8) = s(6)
	nop(DUP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	g(collectedUSD) = s(7)
	nop(SSTORE)
	nop(POP)
	s(6) = 721
	nop(PUSH2)
	call(block721(s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))
	nop(JUMP)

block704(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(6) = s(3)
	nop(DUP3)
	s(7) = 9
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(6)
	nop(DUP3)
	s(10) = s(7)
	nop(DUP3)
	s(10) = g(collectedUSD)
	nop(SLOAD)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(6)
	s(6) = s(9)
	s(9) = s(10)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(8) = s(6)
	nop(DUP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	g(collectedUSD) = s(7)
	nop(SSTORE)
	nop(POP)
	call(block721(s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))

block721(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(6) = 1506815999
	nop(PUSH4)
	s(7) = timestamp
	nop(TIMESTAMP)
	call(jump721(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump721(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(7), s(6))
	call(block743(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))

jump721(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(7), s(6))
	call(block735(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block735(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	s(6) = 50
	nop(PUSH1)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	nop(POP)
	s(6) = 794
	nop(PUSH2)
	call(block794(s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(JUMP)

block743(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(6) = 1507247999
	nop(PUSH4)
	s(7) = timestamp
	nop(TIMESTAMP)
	call(jump743(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump743(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(7), s(6))
	call(block765(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))

jump743(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(7), s(6))
	call(block757(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block757(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	s(6) = 50
	nop(PUSH1)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	nop(POP)
	s(6) = 793
	nop(PUSH2)
	call(block793(s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(JUMP)

jump765(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(7), s(6))
	call(block787(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

jump765(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(7), s(6))
	call(block779(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block765(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(6) = 1507766399
	nop(PUSH4)
	s(7) = timestamp
	nop(TIMESTAMP)
	call(jump765(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block779(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	s(6) = 65
	nop(PUSH1)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	nop(POP)
	s(6) = 792
	nop(PUSH2)
	call(block792_0(s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(JUMP)

block787(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(6) = 70
	nop(PUSH1)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	nop(POP)
	call(block792(s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block792(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	call(block793(s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block793(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	call(block794(s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

jump794(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	neq(s(8), 0)
	call(block808(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

jump794(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	eq(s(8), 0)
	call(block807(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block794(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(6) = s(4)
	nop(DUP2)
	s(7) = 100
	nop(PUSH1)
	s(8) = s(3)
	nop(DUP5)
	s(7) = s(8)*s(7)
	nop(MUL)
	s(8) = s(6)
	nop(DUP2)
	call(jump794(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block807(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block808(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(6) = s(7)/s(6)
	nop(DIV)
	s(7) = s(0)
	s(0) = s(6)
	s(6) = s(7)
	nop(SWAP6)
	nop(POP)
	s(6) = 1000
	nop(PUSH2)
	s(7) = 4
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(8) = g(neurodao)
	nop(SLOAD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1889567281
	nop(PUSH4)
	s(9) = caller
	nop(CALLER)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = s(8)
	nop(DUP3)
	s(12) = 4294967295
	nop(PUSH4)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 26959946667150639794667015087019630673637144422540572481103610249216
	nop(PUSH29)
	s(11) = s(12)*s(11)
	nop(MUL)
	s(12) = s(10)
	nop(DUP2)
	l(l3) = s(11)
	nop(MSTORE)
	s(11) = 4
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = s(11)
	nop(DUP2)
	l(l4) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(10) = 32
	nop(PUSH1)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(9)
	nop(DUP4)
	s(12) = s(13)-s(12)
	nop(SUB)
	s(13) = s(11)
	nop(DUP2)
	s(14) = 0
	nop(PUSH1)
	s(15) = s(7)
	nop(DUP8)
	s(16) = s(15)
	nop(DUP1)
	s(16) = extcodesize
	nop(EXTCODESIZE)
	s(16)= eq(s(16), 0)
	nop(ISZERO)
	s(17) = s(16)
	nop(DUP1)
	call(jump808(s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump808(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	eq(s(17), 0)
	call(block1003(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize))

jump808(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	neq(s(17), 0)
	call(block999(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block999(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(17) = 0
	nop(PUSH1)
	s(18) = s(17)
	nop(DUP1)
	nop(REVERT)

block1003(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(16) = gas
	nop(GAS)
	s(10) = 1
	nop(CALL)
	s(10)= eq(s(10), 0)
	nop(ISZERO)
	s(11) = s(10)
	nop(DUP1)
	call(jump1003(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1003(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize)=>
	eq(s(11), 0)
	call(block1023(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize))

jump1003(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize)=>
	neq(s(11), 0)
	call(block1014(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize))

block1014(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize)=>
	s(11) = returndatasize
	nop(RETURNDATASIZE)
	s(12) = 0
	nop(PUSH1)
	s(13) = s(12)
	nop(DUP1)
	nop(RETURNDATACOPY)
	s(12) = returndatasize
	nop(RETURNDATASIZE)
	s(13) = 0
	nop(PUSH1)
	nop(REVERT)

block1023(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(7) = 64
	nop(PUSH1)
	s(7) = l(l0)
	nop(MLOAD)
	s(8) = returndatasize
	nop(RETURNDATASIZE)
	s(9) = 32
	nop(PUSH1)
	s(10) = s(8)
	nop(DUP2)
	call(jump1023(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize))
	nop(LT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1023(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize)=>
	geq(s(10), s(9))
	call(block1045(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

jump1023(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize)=>
	lt(s(10), s(9))
	call(block1041(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1041(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(9) = 0
	nop(PUSH1)
	s(10) = s(9)
	nop(DUP1)
	nop(REVERT)

jump1045(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	lt(s(7), s(6))
	call(block1086(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

jump1045(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	geq(s(7), s(6))
	call(block1070(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

block1045(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	nop(JUMPDEST)
	s(9) = s(7)
	nop(DUP2)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(8)
	nop(DUP1)
	s(10) = s(9)
	nop(DUP1)
	s(10) = l(l3)
	nop(MLOAD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	call(jump1045(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1070(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	s(6) = s(0)
	nop(DUP6)
	s(7) = 11
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(6)
	nop(DUP3)
	s(10) = s(7)
	nop(DUP3)
	s(10) = g(collectedNDAO)
	nop(SLOAD)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(6)
	s(6) = s(9)
	s(9) = s(10)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(8) = s(6)
	nop(DUP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	g(collectedNDAO) = s(7)
	nop(SSTORE)
	nop(POP)
	call(block1086(s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

block1086(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	nop(JUMPDEST)
	s(6) = address
	nop(ADDRESS)
	s(7) = s(1)
	s(1) = s(6)
	s(6) = s(7)
	nop(SWAP5)
	nop(POP)
	s(6) = 1757
	nop(PUSH2)
	call(block1757(s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(JUMP)

jump1094(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	leq(s(8), s(7))
	call(block1107(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))

jump1094(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	gt(s(8), s(7))
	call(block1106(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1094(s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(6) = 2
	nop(PUSH1)
	s(7) = 3
	nop(PUSH1)
	s(8) = s(6)
	nop(DUP2)
	call(jump1094(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1106(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block1107(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(7) = 13
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(8) = g(state)
	nop(SLOAD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = 255
	nop(PUSH1)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 3
	nop(PUSH1)
	s(9) = s(7)
	nop(DUP2)
	call(jump1107(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1107(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	leq(s(9), s(8))
	call(block1134(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))

jump1107(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	gt(s(9), s(8))
	call(block1133(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1133(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump1134(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	neq(s(7), s(6))
	call(block1756(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1134(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	eq(s(7), s(6))
	call(block1141(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))

block1134(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	call(jump1134(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))
	nop(EQ)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1141(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	s(6) = 1
	nop(PUSH1)
	s(6)= eq(s(6), 0)
	nop(ISZERO)
	s(6)= eq(s(6), 0)
	nop(ISZERO)
	s(7) = 12
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = 255
	nop(PUSH1)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	call(jump1141(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1141(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	neq(s(7), s(6))
	call(block1236(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))

jump1141(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	eq(s(7), s(6))
	call(block1232(s(5), s(4), s(3), s(2), s(1), s(0)))

block1232(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

block1236(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(6) = 1
	nop(PUSH1)
	s(7) = 12
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	nop(DUP2)
	gl = s(9)
	s(9) = fresh(0)
	nop(SLOAD)
	s(10) = s(8)
	nop(DUP2)
	s(11) = 255
	nop(PUSH1)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(10) = not(s(10))
	nop(NOT)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(6)
	nop(DUP4)
	s(10)= eq(s(10), 0)
	nop(ISZERO)
	s(10)= eq(s(10), 0)
	nop(ISZERO)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(8) = or(s(9), s(8))
	nop(OR)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	s(6) = 4
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(7) = g(neurodao)
	nop(SLOAD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 256
	nop(PUSH2)
	s(7) = s(8)^s(7)
	nop(EXP)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(6) = s(7)/s(6)
	nop(DIV)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = 530965563
	nop(PUSH4)
	s(8) = caller
	nop(CALLER)
	s(9) = 64
	nop(PUSH1)
	s(9) = l(l0)
	nop(MLOAD)
	s(10) = s(7)
	nop(DUP3)
	s(11) = 4294967295
	nop(PUSH4)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 26959946667150639794667015087019630673637144422540572481103610249216
	nop(PUSH29)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(11) = s(9)
	nop(DUP2)
	l(l3) = s(10)
	nop(MSTORE)
	s(10) = 4
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(9)
	nop(DUP1)
	s(11) = s(8)
	nop(DUP3)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l4) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(9) = 32
	nop(PUSH1)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(8)
	nop(DUP4)
	s(11) = s(12)-s(11)
	nop(SUB)
	s(12) = s(10)
	nop(DUP2)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(6)
	nop(DUP8)
	s(15) = s(14)
	nop(DUP1)
	s(15) = extcodesize
	nop(EXTCODESIZE)
	s(15)= eq(s(15), 0)
	nop(ISZERO)
	s(16) = s(15)
	nop(DUP1)
	call(jump1236(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1236(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	eq(s(16), 0)
	call(block1513(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, gas, returndatasize))

jump1236(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	neq(s(16), 0)
	call(block1509(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1509(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(16) = 0
	nop(PUSH1)
	s(17) = s(16)
	nop(DUP1)
	nop(REVERT)

jump1513(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, gas, returndatasize)=>
	eq(s(10), 0)
	call(block1533(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))

jump1513(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, gas, returndatasize)=>
	neq(s(10), 0)
	call(block1524(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize))

block1513(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, gas, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(15) = gas
	nop(GAS)
	s(9) = 1
	nop(CALL)
	s(9)= eq(s(9), 0)
	nop(ISZERO)
	s(10) = s(9)
	nop(DUP1)
	call(jump1513(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, gas, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1524(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize)=>
	s(10) = returndatasize
	nop(RETURNDATASIZE)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(11)
	nop(DUP1)
	nop(RETURNDATACOPY)
	s(11) = returndatasize
	nop(RETURNDATASIZE)
	s(12) = 0
	nop(PUSH1)
	nop(REVERT)

block1533(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(6) = 64
	nop(PUSH1)
	s(6) = l(l0)
	nop(MLOAD)
	s(7) = returndatasize
	nop(RETURNDATASIZE)
	s(8) = 32
	nop(PUSH1)
	s(9) = s(7)
	nop(DUP2)
	call(jump1533(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(LT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1533(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	geq(s(9), s(8))
	call(block1555(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

jump1533(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	lt(s(9), s(8))
	call(block1551(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1551(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(8) = 0
	nop(PUSH1)
	s(9) = s(8)
	nop(DUP1)
	nop(REVERT)

block1555(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(8) = s(6)
	nop(DUP2)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(7)
	nop(DUP1)
	s(9) = s(8)
	nop(DUP1)
	s(9) = l(l3)
	nop(MLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(6)
	s(6) = s(9)
	s(9) = s(10)
	nop(SWAP3)
	s(10) = s(7)
	s(7) = s(9)
	s(9) = s(10)
	nop(SWAP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	nop(POP)
	s(6) = 1000
	nop(PUSH2)
	s(7) = s(5)
	nop(DUP2)
	call(jump1555(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1555(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	lt(s(7), s(6))
	call(block1719(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

jump1555(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	geq(s(7), s(6))
	call(block1586(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

block1586(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	s(6) = 11
	nop(PUSH1)
	s(6) = g(collectedNDAO)
	nop(SLOAD)
	s(7) = 3
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	gl = s(7)
	s(7) = fresh(0)
	nop(SLOAD)
	s(8) = 10
	nop(PUSH1)
	s(9) = 1250000
	nop(PUSH3)
	s(10) = 9
	nop(PUSH1)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(10) = s(8)
	nop(DUP2)
	call(jump1586(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1586(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(10), 0)
	call(block1670(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

jump1586(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(10), 0)
	call(block1669(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1669(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump1670(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(8), 0)
	call(block1681(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

jump1670(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(8), 0)
	call(block1680(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1670(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(7) = s(8)*s(7)
	nop(MUL)
	s(8) = s(6)
	nop(DUP2)
	call(jump1670(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1680(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block1681(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = s(7)/s(6)
	nop(DIV)
	s(7) = 21000000
	nop(PUSH4)
	s(8) = s(5)
	nop(DUP3)
	s(9) = 10
	nop(PUSH1)
	s(10) = 1250000
	nop(PUSH3)
	s(11) = s(9)
	nop(DUP2)
	call(jump1681(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1681(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(11), 0)
	call(block1703(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

jump1681(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(11), 0)
	call(block1702(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1702(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump1703(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(9), 0)
	call(block1714(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

jump1703(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(9), 0)
	call(block1713(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1703(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(9) = s(10)/s(9)
	nop(DIV)
	s(8) = s(9)*s(8)
	nop(MUL)
	s(9) = s(7)
	nop(DUP2)
	call(jump1703(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1713(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block1714(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(0)
	s(0) = s(6)
	s(6) = s(7)
	nop(SWAP6)
	nop(POP)
	call(block1719(s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

block1719(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(7) = g(owner)
	nop(SLOAD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 256
	nop(PUSH2)
	s(7) = s(8)^s(7)
	nop(EXP)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(6) = s(7)/s(6)
	nop(DIV)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(1)
	s(1) = s(6)
	s(6) = s(7)
	nop(SWAP5)
	nop(POP)
	call(block1756(s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

block1756(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	call(block1757(s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1757(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	gt(s(7), s(6))
	call(block1772(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1757(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	leq(s(7), s(6))
	call(block1768(s(5), s(4), s(3), s(2), s(1), s(0)))

block1757(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(0)
	nop(DUP7)
	call(jump1757(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1768(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

jump1772(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	gt(s(7), s(6))
	call(block1914(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1772(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	leq(s(7), s(6))
	call(block1910(s(5), s(4), s(3), s(2), s(1), s(0)))

block1772(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = 3
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = caller
	nop(CALLER)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	l(l1) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(6)
	nop(DUP2)
	l(l2) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	gl = s(6)
	s(6) = fresh(0)
	nop(SLOAD)
	s(7) = s(0)
	nop(DUP7)
	s(8) = 3
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	gl = s(8)
	s(8) = fresh(1)
	nop(SLOAD)
	s(7) = s(8)+s(7)
	nop(ADD)
	call(jump1772(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1910(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

jump1914(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	geq(s(7), s(6))
	call(block1992(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1914(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	lt(s(7), s(6))
	call(block1988(s(5), s(4), s(3), s(2), s(1), s(0)))

block1914(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = s(0)
	nop(DUP6)
	s(7) = 3
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(1)
	nop(DUP8)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	gl = s(7)
	s(7) = fresh(0)
	nop(SLOAD)
	call(jump1914(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1988(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

jump1992(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(7), s(6))
	call(block2269(s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller))

jump1992(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(7), s(6))
	call(block2083(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

block1992(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = 1
	nop(PUSH1)
	s(6)= eq(s(6), 0)
	nop(ISZERO)
	s(6)= eq(s(6), 0)
	nop(ISZERO)
	s(7) = 6
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = 255
	nop(PUSH1)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	call(jump1992(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block2083(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	s(6) = 1
	nop(PUSH1)
	s(7) = 6
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	nop(DUP2)
	gl = s(9)
	s(9) = fresh(0)
	nop(SLOAD)
	s(10) = s(8)
	nop(DUP2)
	s(11) = 255
	nop(PUSH1)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(10) = not(s(10))
	nop(NOT)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(6)
	nop(DUP4)
	s(10)= eq(s(10), 0)
	nop(ISZERO)
	s(10)= eq(s(10), 0)
	nop(ISZERO)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(8) = or(s(9), s(8))
	nop(OR)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	s(6) = caller
	nop(CALLER)
	s(7) = 7
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = 8
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(9)
	nop(DUP2)
	s(11) = g(numberOfHolders)
	nop(SLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(9)
	s(9) = s(12)
	s(12) = s(13)
	nop(SWAP3)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(13) = 1
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(POP)
	g(numberOfHolders) = s(10)
	nop(SSTORE)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	nop(DUP2)
	gl = s(9)
	s(9) = fresh(1)
	nop(SLOAD)
	s(10) = s(8)
	nop(DUP2)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(10) = not(s(10))
	nop(NOT)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(6)
	nop(DUP4)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(8) = or(s(9), s(8))
	nop(OR)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	call(block2269(s(5),s(4),s(3),s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0), caller))

block2269(s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = s(0)
	nop(DUP6)
	s(7) = 3
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(6)
	nop(DUP3)
	s(10) = s(7)
	nop(DUP3)
	gl = s(10)
	s(10) = fresh(0)
	nop(SLOAD)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(6)
	s(6) = s(9)
	s(9) = s(10)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(8) = s(6)
	nop(DUP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	s(6) = s(0)
	nop(DUP6)
	s(7) = 3
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(1)
	nop(DUP8)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(6)
	nop(DUP3)
	s(10) = s(7)
	nop(DUP3)
	gl = s(10)
	s(10) = fresh(1)
	nop(SLOAD)
	s(9) = s(10)-s(9)
	nop(SUB)
	s(10) = s(6)
	s(6) = s(9)
	s(9) = s(10)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(8) = s(6)
	nop(DUP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(1)
	nop(DUP6)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 100389287136786176327247604509743168900146139575972864366142685224231313322991
	nop(PUSH32)
	s(9) = s(0)
	nop(DUP9)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = s(11)
	nop(DUP2)
	l(l3) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(10) = s(11)-s(10)
	nop(SUB)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	nop(LOG3)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	skip
	nop(STOP)

block2532(s(0), g(numberOfHolders), l(l3), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2532(s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump2532(s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block2544(s(1), s(0),g(numberOfHolders), l(l3), l(l0)))

jump2532(s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block2540(s(1), s(0)))

block2540(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2544(s(1), s(0), g(numberOfHolders), l(l3), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2553
	nop(PUSH2)
	s(2) = 4806
	nop(PUSH2)
	call(block4806(s(1),s(0),g(numberOfHolders), l(l3), l(l0)))
	nop(JUMP)

block2553(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block2575(s(0), g(name), l(l5), l(l3), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2575(s(2),s(1),s(0),g(name), l(l5), l(l3), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump2575(s(2), s(1), s(0), g(name), l(l5), l(l3), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block2587(s(1), s(0),g(name), l(l5), l(l3), l(l1), l(l0)))

jump2575(s(2), s(1), s(0), g(name), l(l5), l(l3), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block2583(s(1), s(0)))

block2583(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2587(s(1), s(0), g(name), l(l5), l(l3), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2596
	nop(PUSH2)
	s(2) = 4812
	nop(PUSH2)
	call(block4812(s(1),s(0),g(name), l(l5), l(l3), l(l1), l(l0)))
	nop(JUMP)

block2596(s(2), s(1), s(0), l(l5), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(3)
	nop(DUP3)
	s(7) = s(5)
	nop(DUP2)
	s(6) = s(7)-s(6)
	nop(SUB)
	s(7) = s(4)
	nop(DUP3)
	ls(1) = s(6)
	ls(2) = s(7)
	nop(MSTORE)
	s(6) = s(2)
	nop(DUP4)
	s(7) = s(5)
	nop(DUP2)
	s(8) = s(6)
	nop(DUP2)
	s(8) = l(l3)
	nop(MLOAD)
	s(9) = s(7)
	nop(DUP2)
	ls(1) = s(8)
	ls(2) = s(9)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	nop(POP)
	s(7) = s(6)
	nop(DUP1)
	s(7) = l(l3)
	nop(MLOAD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(7)
	nop(DUP1)
	s(9) = s(5)
	nop(DUP4)
	s(10) = s(6)
	nop(DUP4)
	s(11) = 0
	nop(PUSH1)
	call(block2633(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l0)))

jump2633(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0))=>
	geq(s(13), s(12))
	call(block2660(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0)))

jump2633(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0))=>
	lt(s(13), s(12))
	call(block2642(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0)))

block2633(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0))=>
	nop(JUMPDEST)
	s(12) = s(8)
	nop(DUP4)
	s(13) = s(11)
	nop(DUP2)
	call(jump2633(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l0)))
	nop(LT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block2642(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0))=>
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	nop(DUP3)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(12) = l(l5)
	nop(MLOAD)
	s(13) = s(11)
	nop(DUP2)
	s(14) = s(9)
	nop(DUP5)
	s(13) = s(14)+s(13)
	nop(ADD)
	ls(1) = s(12)
	ls(2) = s(13)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(13) = s(11)
	nop(DUP2)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(POP)
	s(12) = 2633
	nop(PUSH2)
	call(block2633(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l0)))
	nop(JUMP)

block2660(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	nop(POP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 31
	nop(PUSH1)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(6)
	nop(DUP1)
	call(jump2660(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l0)))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump2660(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0))=>
	eq(s(7), 0)
	call(block2705(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0)))

jump2660(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0))=>
	neq(s(7), 0)
	call(block2680(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0)))

block2680(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0))=>
	s(7) = s(6)
	nop(DUP1)
	s(8) = s(5)
	nop(DUP3)
	s(7) = s(8)-s(7)
	nop(SUB)
	s(8) = s(7)
	nop(DUP1)
	ll = s(8)
	s(8) = fresh(0)
	nop(MLOAD)
	s(9) = 1
	nop(PUSH1)
	s(10) = s(6)
	nop(DUP4)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)-s(10)
	nop(SUB)
	s(11) = 256
	nop(PUSH2)
	s(10) = s(11)^s(10)
	nop(EXP)
	s(9) = s(10)-s(9)
	nop(SUB)
	s(9) = not(s(9))
	nop(NOT)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	ls(1) = s(8)
	ls(2) = s(9)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	nop(POP)
	call(block2705(s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l0)))

block2705(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block2719(s(0), g(state), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, spender, value)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2719(s(2),s(1),s(0),g(state), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, spender, value))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump2719(s(2), s(1), s(0), g(state), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, spender, value)=>
	eq(s(2), 0)
	call(block2731(s(1), s(0),g(state), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, spender, value))

jump2719(s(2), s(1), s(0), g(state), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, spender, value)=>
	neq(s(2), 0)
	call(block2727(s(1), s(0)))

block2727(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2731(s(1), s(0), g(state), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, spender, value)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2794
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = spender
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(5)
	nop(DUP1)
	s(6) = value
	nop(CALLDATALOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(3)
	s(3) = s(6)
	s(6) = s(7)
	nop(SWAP3)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(4) = 4970
	nop(PUSH2)
	call(block4970(s(3),s(2),s(1),s(0),g(state), l(l3), l(l2), l(l1), l(l0), caller))
	nop(JUMP)

block2794(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

block2796(s(0), g(collectedNDAO), l(l3), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2796(s(2),s(1),s(0),g(collectedNDAO), l(l3), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump2796(s(2), s(1), s(0), g(collectedNDAO), l(l3), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block2808(s(1), s(0),g(collectedNDAO), l(l3), l(l0)))

jump2796(s(2), s(1), s(0), g(collectedNDAO), l(l3), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block2804(s(1), s(0)))

block2804(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2808(s(1), s(0), g(collectedNDAO), l(l3), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2817
	nop(PUSH2)
	s(2) = 5255
	nop(PUSH2)
	call(block5255(s(1),s(0),g(collectedNDAO), l(l3), l(l0)))
	nop(JUMP)

block2817(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block2839(s(0), g(totalSupply), l(l3), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2839(s(2),s(1),s(0),g(totalSupply), l(l3), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump2839(s(2), s(1), s(0), g(totalSupply), l(l3), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block2851(s(1), s(0),g(totalSupply), l(l3), l(l0)))

jump2839(s(2), s(1), s(0), g(totalSupply), l(l3), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block2847(s(1), s(0)))

block2847(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2851(s(1), s(0), g(totalSupply), l(l3), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2860
	nop(PUSH2)
	s(2) = 5261
	nop(PUSH2)
	call(block5261(s(1),s(0),g(totalSupply), l(l3), l(l0)))
	nop(JUMP)

block2860(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block2882(s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2882(s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump2882(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	eq(s(2), 0)
	call(block2894(s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize))

jump2882(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	neq(s(2), 0)
	call(block2890(s(1), s(0)))

block2890(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2894(s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2947
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = calldataload
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 5267
	nop(PUSH2)
	call(block5267(s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0)))
	nop(JUMP)

block2947(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block2973(s(0), g(collectedUSD), l(l3), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2973(s(2),s(1),s(0),g(collectedUSD), l(l3), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump2973(s(2), s(1), s(0), g(collectedUSD), l(l3), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block2985(s(1), s(0),g(collectedUSD), l(l3), l(l0)))

jump2973(s(2), s(1), s(0), g(collectedUSD), l(l3), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block2981(s(1), s(0)))

block2981(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2985(s(1), s(0), g(collectedUSD), l(l3), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2994
	nop(PUSH2)
	s(2) = 5299
	nop(PUSH2)
	call(block5299(s(1),s(0),g(collectedUSD), l(l3), l(l0)))
	nop(JUMP)

block2994(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump3016(s(2), s(1), s(0), g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, from, to, value)=>
	eq(s(2), 0)
	call(block3028(s(1), s(0),g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, from, to, value))

jump3016(s(2), s(1), s(0), g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, from, to, value)=>
	neq(s(2), 0)
	call(block3024(s(1), s(0)))

block3016(s(0), g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, from, to, value)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3016(s(2),s(1),s(0),g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, from, to, value))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block3024(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3028(s(1), s(0), g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, from, to, value)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3123
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = from
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(5)
	nop(DUP1)
	s(6) = to
	nop(CALLDATALOAD)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(3)
	s(3) = s(6)
	s(6) = s(7)
	nop(SWAP3)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(6)
	nop(DUP1)
	s(7) = value
	nop(CALLDATALOAD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(4)
	s(4) = s(7)
	s(7) = s(8)
	nop(SWAP3)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(5) = 5305
	nop(PUSH2)
	call(block5305(s(4),s(3),s(2),s(1),s(0),g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller))
	nop(JUMP)

block3123(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

jump3125(s(2), s(1), s(0), g(presaleOwner), g(etherPrice), g(owner), calldatasize, caller, callvalue, etherPrice)=>
	eq(s(2), 0)
	call(block3137(s(1), s(0),g(presaleOwner), g(etherPrice), g(owner), calldatasize, caller, etherPrice))

jump3125(s(2), s(1), s(0), g(presaleOwner), g(etherPrice), g(owner), calldatasize, caller, callvalue, etherPrice)=>
	neq(s(2), 0)
	call(block3133(s(1), s(0)))

block3125(s(0), g(presaleOwner), g(etherPrice), g(owner), calldatasize, caller, callvalue, etherPrice)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3125(s(2),s(1),s(0),g(presaleOwner), g(etherPrice), g(owner), calldatasize, caller, callvalue, etherPrice))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block3133(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3137(s(1), s(0), g(presaleOwner), g(etherPrice), g(owner), calldatasize, caller, etherPrice)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3168
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = etherPrice
	nop(CALLDATALOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 6416
	nop(PUSH2)
	call(block6416(s(2),s(1),s(0),g(presaleOwner), g(etherPrice), g(owner), caller))
	nop(JUMP)

block3168(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

jump3170(s(2), s(1), s(0), g(decimals), l(l3), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block3182(s(1), s(0),g(decimals), l(l3), l(l0)))

jump3170(s(2), s(1), s(0), g(decimals), l(l3), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block3178(s(1), s(0)))

block3170(s(0), g(decimals), l(l3), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3170(s(2),s(1),s(0),g(decimals), l(l3), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block3178(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3182(s(1), s(0), g(decimals), l(l3), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3191
	nop(PUSH2)
	s(2) = 6605
	nop(PUSH2)
	call(block6605(s(1),s(0),g(decimals), l(l3), l(l0)))
	nop(JUMP)

block3191(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump3219(s(2), s(1), s(0), g(presaleOwner), g(owner), l(l0), address, balance, caller, callvalue, returndatasize)=>
	eq(s(2), 0)
	call(block3231(s(1), s(0),g(presaleOwner), g(owner), l(l0), address, balance, caller, returndatasize))

jump3219(s(2), s(1), s(0), g(presaleOwner), g(owner), l(l0), address, balance, caller, callvalue, returndatasize)=>
	neq(s(2), 0)
	call(block3227(s(1), s(0)))

block3219(s(0), g(presaleOwner), g(owner), l(l0), address, balance, caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3219(s(2),s(1),s(0),g(presaleOwner), g(owner), l(l0), address, balance, caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block3227(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3231(s(1), s(0), g(presaleOwner), g(owner), l(l0), address, balance, caller, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3240
	nop(PUSH2)
	s(2) = 6624
	nop(PUSH2)
	call(block6624(s(1),s(0),g(presaleOwner), g(owner), l(l0), address, balance, caller, returndatasize))
	nop(JUMP)

block3240(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

block3242(s(0), g(standard), l(l5), l(l3), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3242(s(2),s(1),s(0),g(standard), l(l5), l(l3), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3242(s(2), s(1), s(0), g(standard), l(l5), l(l3), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block3254(s(1), s(0),g(standard), l(l5), l(l3), l(l1), l(l0)))

jump3242(s(2), s(1), s(0), g(standard), l(l5), l(l3), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block3250(s(1), s(0)))

block3250(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3254(s(1), s(0), g(standard), l(l5), l(l3), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3263
	nop(PUSH2)
	s(2) = 6899
	nop(PUSH2)
	call(block6899(s(1),s(0),g(standard), l(l5), l(l3), l(l1), l(l0)))
	nop(JUMP)

block3263(s(2), s(1), s(0), l(l5), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(3)
	nop(DUP3)
	s(7) = s(5)
	nop(DUP2)
	s(6) = s(7)-s(6)
	nop(SUB)
	s(7) = s(4)
	nop(DUP3)
	ls(1) = s(6)
	ls(2) = s(7)
	nop(MSTORE)
	s(6) = s(2)
	nop(DUP4)
	s(7) = s(5)
	nop(DUP2)
	s(8) = s(6)
	nop(DUP2)
	s(8) = l(l3)
	nop(MLOAD)
	s(9) = s(7)
	nop(DUP2)
	ls(1) = s(8)
	ls(2) = s(9)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	nop(POP)
	s(7) = s(6)
	nop(DUP1)
	s(7) = l(l3)
	nop(MLOAD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(7)
	nop(DUP1)
	s(9) = s(5)
	nop(DUP4)
	s(10) = s(6)
	nop(DUP4)
	s(11) = 0
	nop(PUSH1)
	call(block3300(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l0)))

block3300(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0))=>
	nop(JUMPDEST)
	s(12) = s(8)
	nop(DUP4)
	s(13) = s(11)
	nop(DUP2)
	call(jump3300(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l0)))
	nop(LT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3300(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0))=>
	geq(s(13), s(12))
	call(block3327(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0)))

jump3300(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0))=>
	lt(s(13), s(12))
	call(block3309(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0)))

block3309(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0))=>
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	nop(DUP3)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(12) = l(l5)
	nop(MLOAD)
	s(13) = s(11)
	nop(DUP2)
	s(14) = s(9)
	nop(DUP5)
	s(13) = s(14)+s(13)
	nop(ADD)
	ls(1) = s(12)
	ls(2) = s(13)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(13) = s(11)
	nop(DUP2)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(POP)
	s(12) = 3300
	nop(PUSH2)
	call(block3300(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l0)))
	nop(JUMP)

jump3327(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0))=>
	eq(s(7), 0)
	call(block3372(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0)))

jump3327(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0))=>
	neq(s(7), 0)
	call(block3347(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0)))

block3327(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	nop(POP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 31
	nop(PUSH1)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(6)
	nop(DUP1)
	call(jump3327(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l0)))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block3347(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0))=>
	s(7) = s(6)
	nop(DUP1)
	s(8) = s(5)
	nop(DUP3)
	s(7) = s(8)-s(7)
	nop(SUB)
	s(8) = s(7)
	nop(DUP1)
	ll = s(8)
	s(8) = fresh(0)
	nop(MLOAD)
	s(9) = 1
	nop(PUSH1)
	s(10) = s(6)
	nop(DUP4)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)-s(10)
	nop(SUB)
	s(11) = 256
	nop(PUSH2)
	s(10) = s(11)^s(10)
	nop(EXP)
	s(9) = s(10)-s(9)
	nop(SUB)
	s(9) = not(s(9))
	nop(NOT)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	ls(1) = s(8)
	ls(2) = s(9)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	nop(POP)
	call(block3372(s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l0)))

block3372(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block3386(s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3386(s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3386(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	eq(s(2), 0)
	call(block3398(s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize))

jump3386(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	neq(s(2), 0)
	call(block3394(s(1), s(0)))

block3394(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3398(s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3483
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = calldataload
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(5)
	nop(DUP1)
	s(6) = calldataload
	nop(CALLDATALOAD)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(3)
	s(3) = s(6)
	s(6) = s(7)
	nop(SWAP3)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(4) = 7057
	nop(PUSH2)
	call(block7057(s(3),s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0)))
	nop(JUMP)

block3483(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump3505(s(2), s(1), s(0), g(state), g(owner), l(l3), l(l0), caller, callvalue)=>
	eq(s(2), 0)
	call(block3517(s(1), s(0),g(state), g(owner), l(l3), l(l0), caller))

jump3505(s(2), s(1), s(0), g(state), g(owner), l(l3), l(l0), caller, callvalue)=>
	neq(s(2), 0)
	call(block3513(s(1), s(0)))

block3505(s(0), g(state), g(owner), l(l3), l(l0), caller, callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3505(s(2),s(1),s(0),g(state), g(owner), l(l3), l(l0), caller, callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block3513(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3517(s(1), s(0), g(state), g(owner), l(l3), l(l0), caller)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3526
	nop(PUSH2)
	s(2) = 7094
	nop(PUSH2)
	call(block7094(s(1),s(0),g(state), g(owner), l(l3), l(l0), caller))
	nop(JUMP)

block3526(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

block3528(s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3528(s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3528(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	eq(s(2), 0)
	call(block3540(s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize))

jump3528(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	neq(s(2), 0)
	call(block3536(s(1), s(0)))

block3536(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3540(s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3593
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = calldataload
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 7359
	nop(PUSH2)
	call(block7359(s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0)))
	nop(JUMP)

block3593(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block3619(s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3619(s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3619(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	eq(s(2), 0)
	call(block3631(s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize))

jump3619(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	neq(s(2), 0)
	call(block3627(s(1), s(0)))

block3627(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3631(s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3684
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = calldataload
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 7391
	nop(PUSH2)
	call(block7391(s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0)))
	nop(JUMP)

block3684(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump3706(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	eq(s(2), 0)
	call(block3718(s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize))

jump3706(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	neq(s(2), 0)
	call(block3714(s(1), s(0)))

block3706(s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3706(s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block3714(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3718(s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3749
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = calldataload
	nop(CALLDATALOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 7415
	nop(PUSH2)
	call(block7415(s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0)))
	nop(JUMP)

block3749(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump3815(s(2), s(1), s(0), g(neurodao), l(l3), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block3827(s(1), s(0),g(neurodao), l(l3), l(l0)))

jump3815(s(2), s(1), s(0), g(neurodao), l(l3), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block3823(s(1), s(0)))

block3815(s(0), g(neurodao), l(l3), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3815(s(2),s(1),s(0),g(neurodao), l(l3), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block3823(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3827(s(1), s(0), g(neurodao), l(l3), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3836
	nop(PUSH2)
	s(2) = 7466
	nop(PUSH2)
	call(block7466(s(1),s(0),g(neurodao), l(l3), l(l0)))
	nop(JUMP)

block3836(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block3902(s(0), g(owner), l(l3), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3902(s(2),s(1),s(0),g(owner), l(l3), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3902(s(2), s(1), s(0), g(owner), l(l3), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block3914(s(1), s(0),g(owner), l(l3), l(l0)))

jump3902(s(2), s(1), s(0), g(owner), l(l3), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block3910(s(1), s(0)))

block3910(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3914(s(1), s(0), g(owner), l(l3), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3923
	nop(PUSH2)
	s(2) = 7504
	nop(PUSH2)
	call(block7504(s(1),s(0),g(owner), l(l3), l(l0)))
	nop(JUMP)

block3923(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump3989(s(2), s(1), s(0), g(symbol), l(l5), l(l3), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block4001(s(1), s(0),g(symbol), l(l5), l(l3), l(l1), l(l0)))

jump3989(s(2), s(1), s(0), g(symbol), l(l5), l(l3), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block3997(s(1), s(0)))

block3989(s(0), g(symbol), l(l5), l(l3), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3989(s(2),s(1),s(0),g(symbol), l(l5), l(l3), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block3997(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4001(s(1), s(0), g(symbol), l(l5), l(l3), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4010
	nop(PUSH2)
	s(2) = 7541
	nop(PUSH2)
	call(block7541(s(1),s(0),g(symbol), l(l5), l(l3), l(l1), l(l0)))
	nop(JUMP)

block4010(s(2), s(1), s(0), l(l5), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(3)
	nop(DUP3)
	s(7) = s(5)
	nop(DUP2)
	s(6) = s(7)-s(6)
	nop(SUB)
	s(7) = s(4)
	nop(DUP3)
	ls(1) = s(6)
	ls(2) = s(7)
	nop(MSTORE)
	s(6) = s(2)
	nop(DUP4)
	s(7) = s(5)
	nop(DUP2)
	s(8) = s(6)
	nop(DUP2)
	s(8) = l(l3)
	nop(MLOAD)
	s(9) = s(7)
	nop(DUP2)
	ls(1) = s(8)
	ls(2) = s(9)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	nop(POP)
	s(7) = s(6)
	nop(DUP1)
	s(7) = l(l3)
	nop(MLOAD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(7)
	nop(DUP1)
	s(9) = s(5)
	nop(DUP4)
	s(10) = s(6)
	nop(DUP4)
	s(11) = 0
	nop(PUSH1)
	call(block4047(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l0)))

jump4047(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0))=>
	geq(s(13), s(12))
	call(block4074(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0)))

jump4047(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0))=>
	lt(s(13), s(12))
	call(block4056(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0)))

block4047(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0))=>
	nop(JUMPDEST)
	s(12) = s(8)
	nop(DUP4)
	s(13) = s(11)
	nop(DUP2)
	call(jump4047(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l0)))
	nop(LT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4056(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0))=>
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	nop(DUP3)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(12) = l(l5)
	nop(MLOAD)
	s(13) = s(11)
	nop(DUP2)
	s(14) = s(9)
	nop(DUP5)
	s(13) = s(14)+s(13)
	nop(ADD)
	ls(1) = s(12)
	ls(2) = s(13)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(13) = s(11)
	nop(DUP2)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(POP)
	s(12) = 4047
	nop(PUSH2)
	call(block4047(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l0)))
	nop(JUMP)

jump4074(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0))=>
	eq(s(7), 0)
	call(block4119(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0)))

jump4074(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0))=>
	neq(s(7), 0)
	call(block4094(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0)))

block4074(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	nop(POP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 31
	nop(PUSH1)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(6)
	nop(DUP1)
	call(jump4074(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l0)))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4094(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0))=>
	s(7) = s(6)
	nop(DUP1)
	s(8) = s(5)
	nop(DUP3)
	s(7) = s(8)-s(7)
	nop(SUB)
	s(8) = s(7)
	nop(DUP1)
	ll = s(8)
	s(8) = fresh(0)
	nop(MLOAD)
	s(9) = 1
	nop(PUSH1)
	s(10) = s(6)
	nop(DUP4)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)-s(10)
	nop(SUB)
	s(11) = 256
	nop(PUSH2)
	s(10) = s(11)^s(10)
	nop(EXP)
	s(9) = s(10)-s(9)
	nop(SUB)
	s(9) = not(s(9))
	nop(NOT)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	ls(1) = s(8)
	ls(2) = s(9)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	nop(POP)
	call(block4119(s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l0)))

block4119(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump4133(s(2), s(1), s(0), g(presaleOwner), l(l3), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block4145(s(1), s(0),g(presaleOwner), l(l3), l(l0)))

jump4133(s(2), s(1), s(0), g(presaleOwner), l(l3), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block4141(s(1), s(0)))

block4133(s(0), g(presaleOwner), l(l3), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4133(s(2),s(1),s(0),g(presaleOwner), l(l3), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4141(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4145(s(1), s(0), g(presaleOwner), l(l3), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4154
	nop(PUSH2)
	s(2) = 7699
	nop(PUSH2)
	call(block7699(s(1),s(0),g(presaleOwner), l(l3), l(l0)))
	nop(JUMP)

block4154(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump4220(s(2), s(1), s(0), g(etherPrice), l(l3), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block4232(s(1), s(0),g(etherPrice), l(l3), l(l0)))

jump4220(s(2), s(1), s(0), g(etherPrice), l(l3), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block4228(s(1), s(0)))

block4220(s(0), g(etherPrice), l(l3), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4220(s(2),s(1),s(0),g(etherPrice), l(l3), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4228(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4232(s(1), s(0), g(etherPrice), l(l3), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4241
	nop(PUSH2)
	s(2) = 7737
	nop(PUSH2)
	call(block7737(s(1),s(0),g(etherPrice), l(l3), l(l0)))
	nop(JUMP)

block4241(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block4263(s(0), g(newOwner), g(owner), calldatasize, caller, callvalue, owner)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4263(s(2),s(1),s(0),g(newOwner), g(owner), calldatasize, caller, callvalue, owner))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump4263(s(2), s(1), s(0), g(newOwner), g(owner), calldatasize, caller, callvalue, owner)=>
	eq(s(2), 0)
	call(block4275(s(1), s(0),g(newOwner), g(owner), calldatasize, caller, owner))

jump4263(s(2), s(1), s(0), g(newOwner), g(owner), calldatasize, caller, callvalue, owner)=>
	neq(s(2), 0)
	call(block4271(s(1), s(0)))

block4271(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4275(s(1), s(0), g(newOwner), g(owner), calldatasize, caller, owner)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4328
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = owner
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 7743
	nop(PUSH2)
	call(block7743(s(2),s(1),s(0),g(newOwner), g(owner), caller))
	nop(JUMP)

block4328(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

block4330(s(0), g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, to, value)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4330(s(2),s(1),s(0),g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, to, value))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump4330(s(2), s(1), s(0), g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, to, value)=>
	eq(s(2), 0)
	call(block4342(s(1), s(0),g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, to, value))

jump4330(s(2), s(1), s(0), g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, to, value)=>
	neq(s(2), 0)
	call(block4338(s(1), s(0)))

block4338(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4342(s(1), s(0), g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, to, value)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4405
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = to
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(5)
	nop(DUP1)
	s(6) = value
	nop(CALLDATALOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(3)
	s(3) = s(6)
	s(6) = s(7)
	nop(SWAP3)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(4) = 7940
	nop(PUSH2)
	call(block7940(s(3),s(2),s(1),s(0),g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller))
	nop(JUMP)

block4405(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

jump4407(s(2), s(1), s(0), g(state), g(presaleOwner), g(owner), l(l3), l(l0), calldatasize, caller, callvalue, presaleOwner)=>
	eq(s(2), 0)
	call(block4419(s(1), s(0),g(state), g(presaleOwner), g(owner), l(l3), l(l0), calldatasize, caller, presaleOwner))

jump4407(s(2), s(1), s(0), g(state), g(presaleOwner), g(owner), l(l3), l(l0), calldatasize, caller, callvalue, presaleOwner)=>
	neq(s(2), 0)
	call(block4415(s(1), s(0)))

block4407(s(0), g(state), g(presaleOwner), g(owner), l(l3), l(l0), calldatasize, caller, callvalue, presaleOwner)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4407(s(2),s(1),s(0),g(state), g(presaleOwner), g(owner), l(l3), l(l0), calldatasize, caller, callvalue, presaleOwner))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4415(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4419(s(1), s(0), g(state), g(presaleOwner), g(owner), l(l3), l(l0), calldatasize, caller, presaleOwner)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4472
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = presaleOwner
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 8773
	nop(PUSH2)
	call(block8773(s(2),s(1),s(0),g(state), g(presaleOwner), g(owner), l(l3), l(l0), caller))
	nop(JUMP)

block4472(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

block4474(s(0), g(presaleOwner), g(owner), l(l0), address, balance, caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4474(s(2),s(1),s(0),g(presaleOwner), g(owner), l(l0), address, balance, caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump4474(s(2), s(1), s(0), g(presaleOwner), g(owner), l(l0), address, balance, caller, callvalue, returndatasize)=>
	eq(s(2), 0)
	call(block4486(s(1), s(0),g(presaleOwner), g(owner), l(l0), address, balance, caller, returndatasize))

jump4474(s(2), s(1), s(0), g(presaleOwner), g(owner), l(l0), address, balance, caller, callvalue, returndatasize)=>
	neq(s(2), 0)
	call(block4482(s(1), s(0)))

block4482(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4486(s(1), s(0), g(presaleOwner), g(owner), l(l0), address, balance, caller, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4495
	nop(PUSH2)
	s(2) = 9104
	nop(PUSH2)
	call(block9104(s(1),s(0),g(presaleOwner), g(owner), l(l0), address, balance, caller, returndatasize))
	nop(JUMP)

jump4497(s(2), s(1), s(0), g(state), g(owner), l(l3), l(l0), caller, callvalue)=>
	eq(s(2), 0)
	call(block4509(s(1), s(0),g(state), g(owner), l(l3), l(l0), caller))

jump4497(s(2), s(1), s(0), g(state), g(owner), l(l3), l(l0), caller, callvalue)=>
	neq(s(2), 0)
	call(block4505(s(1), s(0)))

block4497(s(0), g(state), g(owner), l(l3), l(l0), caller, callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4497(s(2),s(1),s(0),g(state), g(owner), l(l3), l(l0), caller, callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4505(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4509(s(1), s(0), g(state), g(owner), l(l3), l(l0), caller)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4518
	nop(PUSH2)
	s(2) = 9381
	nop(PUSH2)
	call(block9381(s(1),s(0),g(state), g(owner), l(l3), l(l0), caller))
	nop(JUMP)

block4518(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

jump4520(s(2), s(1), s(0), g(newOwner), g(owner), caller, callvalue)=>
	eq(s(2), 0)
	call(block4532(s(1), s(0),g(newOwner), g(owner), caller))

jump4520(s(2), s(1), s(0), g(newOwner), g(owner), caller, callvalue)=>
	neq(s(2), 0)
	call(block4528(s(1), s(0)))

block4520(s(0), g(newOwner), g(owner), caller, callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4520(s(2),s(1),s(0),g(newOwner), g(owner), caller, callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4528(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4532(s(1), s(0), g(newOwner), g(owner), caller)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4541
	nop(PUSH2)
	s(2) = 9646
	nop(PUSH2)
	call(block9646(s(1),s(0),g(newOwner), g(owner), caller))
	nop(JUMP)

block4541(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

block4543(s(0), g(state), l(l3), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4543(s(2),s(1),s(0),g(state), l(l3), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump4543(s(2), s(1), s(0), g(state), l(l3), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block4555(s(1), s(0),g(state), l(l3), l(l0)))

jump4543(s(2), s(1), s(0), g(state), l(l3), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block4551(s(1), s(0)))

block4551(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4555(s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4564
	nop(PUSH2)
	s(2) = 9875
	nop(PUSH2)
	call(block9875(s(1),s(0),g(state), l(l3), l(l0)))
	nop(JUMP)

jump4564(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l0))=>
	leq(s(7), s(6))
	call(block4580(s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l0)))

jump4564(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l0))=>
	gt(s(7), s(6))
	call(block4579(s(5), s(4), s(3), s(2), s(1), s(0)))

block4564(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 3
	nop(PUSH1)
	s(7) = s(5)
	nop(DUP2)
	call(jump4564(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4579(s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block4580(s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump4600(s(2), s(1), s(0), g(newOwner), l(l3), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block4612(s(1), s(0),g(newOwner), l(l3), l(l0)))

jump4600(s(2), s(1), s(0), g(newOwner), l(l3), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block4608(s(1), s(0)))

block4600(s(0), g(newOwner), l(l3), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4600(s(2),s(1),s(0),g(newOwner), l(l3), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4608(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4612(s(1), s(0), g(newOwner), l(l3), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4621
	nop(PUSH2)
	s(2) = 9894
	nop(PUSH2)
	call(block9894(s(1),s(0),g(newOwner), l(l3), l(l0)))
	nop(JUMP)

block4621(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump4687(s(2), s(1), s(0), g(state), l(l3), l(l2), l(l1), l(l0), calldatasize, callvalue, owner, spender)=>
	eq(s(2), 0)
	call(block4699(s(1), s(0),g(state), l(l3), l(l2), l(l1), l(l0), calldatasize, owner, spender))

jump4687(s(2), s(1), s(0), g(state), l(l3), l(l2), l(l1), l(l0), calldatasize, callvalue, owner, spender)=>
	neq(s(2), 0)
	call(block4695(s(1), s(0)))

block4687(s(0), g(state), l(l3), l(l2), l(l1), l(l0), calldatasize, callvalue, owner, spender)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4687(s(2),s(1),s(0),g(state), l(l3), l(l2), l(l1), l(l0), calldatasize, callvalue, owner, spender))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4695(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4699(s(1), s(0), g(state), l(l3), l(l2), l(l1), l(l0), calldatasize, owner, spender)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4784
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = owner
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(5)
	nop(DUP1)
	s(6) = spender
	nop(CALLDATALOAD)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(3)
	s(3) = s(6)
	s(6) = s(7)
	nop(SWAP3)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(4) = 9932
	nop(PUSH2)
	call(block9932(s(3),s(2),s(1),s(0),g(state), l(l3), l(l2), l(l1), l(l0)))
	nop(JUMP)

block4784(s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 64
	nop(PUSH1)
	s(2) = l(l0)
	nop(MLOAD)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(1)
	nop(DUP3)
	s(5) = s(3)
	nop(DUP2)
	l(l3) = s(4)
	nop(MSTORE)
	s(4) = 32
	nop(PUSH1)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(1)
	s(1) = s(3)
	s(3) = s(4)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(2) = 64
	nop(PUSH1)
	s(2) = l(l0)
	nop(MLOAD)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(1)
	s(1) = s(3)
	s(3) = s(4)
	nop(SWAP2)
	s(2) = s(3)-s(2)
	nop(SUB)
	s(3) = s(1)
	s(1) = s(2)
	s(2) = s(3)
	nop(SWAP1)
	nop(RETURN)

block4806(s(1), s(0), g(numberOfHolders), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 8
	nop(PUSH1)
	s(2) = g(numberOfHolders)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block2553(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

jump4812(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(name), l(l5), l(l3), l(l1), l(l0))=>
	eq(s(8), 0)
	call(block4962(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l0)))

jump4812(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(name), l(l5), l(l3), l(l1), l(l0))=>
	neq(s(8), 0)
	call(block4892(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(name), l(l5), l(l3), l(l1), l(l0)))

block4812(s(1), s(0), g(name), l(l5), l(l3), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 15
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(3) = g(name)
	nop(SLOAD)
	s(4) = 1
	nop(PUSH1)
	s(5) = s(3)
	nop(DUP2)
	s(6) = 1
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)*s(5)
	nop(MUL)
	s(4) = s(5)-s(4)
	nop(SUB)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 2
	nop(PUSH1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = s(3)
	nop(DUP1)
	s(5) = 31
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = 32
	nop(PUSH1)
	s(6) = s(5)
	nop(DUP1)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(4) = s(5)*s(4)
	nop(MUL)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = 64
	nop(PUSH1)
	s(5) = l(l0)
	nop(MLOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(4)
	nop(DUP2)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 64
	nop(PUSH1)
	l(l0) = s(5)
	nop(MSTORE)
	s(5) = s(4)
	nop(DUP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(4)
	nop(DUP2)
	s(7) = s(5)
	nop(DUP2)
	l(l3) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(3)
	nop(DUP3)
	s(7) = s(6)
	nop(DUP1)
	s(7) = g(name)
	nop(SLOAD)
	s(8) = 1
	nop(PUSH1)
	s(9) = s(7)
	nop(DUP2)
	s(10) = 1
	nop(PUSH1)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(9)= eq(s(9), 0)
	nop(ISZERO)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(8) = s(9)-s(8)
	nop(SUB)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 2
	nop(PUSH1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = s(7)
	nop(DUP1)
	l(l3) = g(name)
	s(7) = g(name)
	call(jump4812(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(name), l(l5), l(l3), l(l1), l(l0)))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4892(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(name), l(l5), l(l3), l(l1), l(l0))=>
	s(8) = s(7)
	nop(DUP1)
	s(9) = 31
	nop(PUSH1)
	call(jump4892(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(name), l(l5), l(l3), l(l1), l(l0)))
	nop(LT)
	nop(PUSH2)
	nop(JUMPI)

jump4892(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(name), l(l5), l(l3), l(l1), l(l0))=>
	lt(s(9), s(8))
	call(block4919(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l1), l(l0)))

jump4892(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(name), l(l5), l(l3), l(l1), l(l0))=>
	geq(s(9), s(8))
	call(block4900(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(name), l(l5), l(l3), l(l0)))

block4900(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(name), l(l5), l(l3), l(l0))=>
	s(8) = 256
	nop(PUSH2)
	s(9) = s(8)
	nop(DUP1)
	s(10) = s(6)
	nop(DUP4)
	s(10) = g(name)
	nop(SLOAD)
	s(9) = s(10)/s(9)
	nop(DIV)
	s(8) = s(9)*s(8)
	nop(MUL)
	s(9) = s(5)
	nop(DUP4)
	l(l5) = s(8)
	nop(MSTORE)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	s(8) = 4962
	nop(PUSH2)
	call(block4962(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l3), l(l0)))
	nop(JUMP)

block4919(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(8) = s(5)
	nop(DUP3)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 0
	nop(PUSH1)
	l(l1) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	call(block4933(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l3), l(l0)))

block4933(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(8) = s(6)
	nop(DUP2)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	s(9) = s(7)
	nop(DUP2)
	l(l5) = s(8)
	nop(MSTORE)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 1
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(7)
	nop(DUP1)
	s(9) = s(5)
	nop(DUP4)
	call(jump4933(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l3), l(l0)))
	nop(GT)
	nop(PUSH2)
	nop(JUMPI)

jump4933(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l0))=>
	gt(s(9), s(8))
	call(block4933(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l0)))

jump4933(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l0))=>
	leq(s(9), s(8))
	call(block4953(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l0)))

block4953(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l0))=>
	s(8) = s(5)
	nop(DUP3)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)-s(7)
	nop(SUB)
	s(8) = 31
	nop(PUSH1)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(5)
	nop(DUP3)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	call(block4962(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l3), l(l0)))

block4962(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = s(1)
	nop(DUP2)
	call(block2596(s(2),s(1),s(0), l(l5), l(l3), l(l0)))
	nop(JUMP)

block4970(s(3), s(2), s(1), s(0), g(state), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(4) = 3
	nop(PUSH1)
	s(5) = s(4)
	nop(DUP1)
	s(6) = s(4)
	nop(DUP2)
	call(jump4970(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), l(l3), l(l2), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump4970(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l2), l(l1), l(l0), caller)=>
	leq(s(6), s(5))
	call(block4982(s(4), s(3), s(2), s(1), s(0),g(state), l(l3), l(l2), l(l1), l(l0), caller))

jump4970(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l2), l(l1), l(l0), caller)=>
	gt(s(6), s(5))
	call(block4981(s(4), s(3), s(2), s(1), s(0)))

block4981(s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump4982(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l2), l(l1), l(l0), caller)=>
	leq(s(7), s(6))
	call(block5009(s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller))

jump4982(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l2), l(l1), l(l0), caller)=>
	gt(s(7), s(6))
	call(block5008(s(5), s(4), s(3), s(2), s(1), s(0)))

block4982(s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(5) = 13
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(6) = g(state)
	nop(SLOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 256
	nop(PUSH2)
	s(6) = s(7)^s(6)
	nop(EXP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 3
	nop(PUSH1)
	s(7) = s(5)
	nop(DUP2)
	call(jump4982(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), l(l3), l(l2), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block5008(s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump5009(s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(5), s(4))
	call(block5021(s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller))

jump5009(s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(5), s(4))
	call(block5017(s(3), s(2), s(1), s(0)))

block5009(s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	call(jump5009(s(5),s(4),s(3),s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block5017(s(3), s(2), s(1), s(0))=>
	s(4) = 0
	nop(PUSH1)
	s(5) = s(4)
	nop(DUP1)
	nop(REVERT)

block5021(s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(4) = s(3)
	nop(DUP1)
	s(5) = 18
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = caller
	nop(CALLER)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l1) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	l(l2) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(5) = sha3(s(6), s(5))
	nop(SHA3)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(2)
	nop(DUP5)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l1) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	l(l2) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(5) = sha3(s(6), s(5))
	nop(SHA3)
	s(6) = s(4)
	nop(DUP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	gs(1) = s(6)
	gs(2) = s(5)
	nop(SSTORE)
	nop(POP)
	s(4) = s(2)
	nop(DUP2)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(5) = caller
	nop(CALLER)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 63486140976153616755203102783360879283472101686154884697241723088393386309925
	nop(PUSH32)
	s(7) = s(3)
	nop(DUP4)
	s(8) = 64
	nop(PUSH1)
	s(8) = l(l0)
	nop(MLOAD)
	s(9) = s(8)
	nop(DUP1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(9)
	nop(DUP2)
	l(l3) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(7)
	s(7) = s(9)
	s(9) = s(10)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(8) = 64
	nop(PUSH1)
	s(8) = l(l0)
	nop(MLOAD)
	s(9) = s(8)
	nop(DUP1)
	s(10) = s(7)
	s(7) = s(9)
	s(9) = s(10)
	nop(SWAP2)
	s(8) = s(9)-s(8)
	nop(SUB)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	nop(LOG3)
	nop(POP)
	nop(POP)
	call(block2794(s(0)))
	nop(JUMP)

block5255(s(1), s(0), g(collectedNDAO), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 11
	nop(PUSH1)
	s(2) = g(collectedNDAO)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block2817(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block5261(s(1), s(0), g(totalSupply), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 2
	nop(PUSH1)
	s(2) = g(totalSupply)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block2860(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block5267(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 6
	nop(PUSH1)
	s(4) = 32
	nop(PUSH1)
	l(l2) = s(3)
	nop(MSTORE)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 0
	nop(PUSH1)
	l(l1) = s(3)
	nop(MSTORE)
	s(3) = 64
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(3) = sha3(s(4), s(3))
	nop(SHA3)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	gl = s(3)
	s(3) = fresh(0)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 255
	nop(PUSH1)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block2947(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block5299(s(1), s(0), g(collectedUSD), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 9
	nop(PUSH1)
	s(2) = g(collectedUSD)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block2994(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block5305(s(4), s(3), s(2), s(1), s(0), g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller)=>
	nop(JUMPDEST)
	s(5) = 3
	nop(PUSH1)
	s(6) = s(5)
	nop(DUP1)
	s(7) = s(5)
	nop(DUP2)
	call(jump5305(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump5305(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller)=>
	leq(s(7), s(6))
	call(block5317(s(5), s(4), s(3), s(2), s(1), s(0),g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller))

jump5305(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller)=>
	gt(s(7), s(6))
	call(block5316(s(5), s(4), s(3), s(2), s(1), s(0)))

block5316(s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump5317(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller)=>
	leq(s(8), s(7))
	call(block5344(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller))

jump5317(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller)=>
	gt(s(8), s(7))
	call(block5343(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block5317(s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller)=>
	nop(JUMPDEST)
	s(6) = 13
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(7) = g(state)
	nop(SLOAD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 256
	nop(PUSH2)
	s(7) = s(8)^s(7)
	nop(EXP)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(6) = s(7)/s(6)
	nop(DIV)
	s(7) = 255
	nop(PUSH1)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = 3
	nop(PUSH1)
	s(8) = s(6)
	nop(DUP2)
	call(jump5317(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block5343(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block5344(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller)=>
	nop(JUMPDEST)
	call(jump5344(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump5344(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller)=>
	eq(s(6), s(5))
	call(block5356(s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller))

jump5344(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller)=>
	neq(s(6), s(5))
	call(block5352(s(4), s(3), s(2), s(1), s(0)))

block5352(s(4), s(3), s(2), s(1), s(0))=>
	s(5) = 0
	nop(PUSH1)
	s(6) = s(5)
	nop(DUP1)
	nop(REVERT)

jump5356(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller)=>
	geq(s(7), s(6))
	call(block5380(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump5356(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller)=>
	lt(s(7), s(6))
	call(block5376(s(5), s(4), s(3), s(2), s(1), s(0)))

block5356(s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller)=>
	nop(JUMPDEST)
	s(5) = 96
	nop(PUSH1)
	s(6) = 4
	nop(PUSH1)
	s(7) = s(5)
	nop(DUP2)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = 0
	nop(PUSH1)
	s(8) = calldatasize
	nop(CALLDATASIZE)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	nop(POP)
	call(jump5356(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block5376(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

jump5380(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	geq(s(7), s(6))
	call(block5458(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump5380(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	lt(s(7), s(6))
	call(block5454(s(5), s(4), s(3), s(2), s(1), s(0)))

block5380(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = s(4)
	nop(DUP2)
	s(7) = 3
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(2)
	nop(DUP7)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	gl = s(7)
	s(7) = fresh(0)
	nop(SLOAD)
	call(jump5380(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block5454(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

jump5458(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	geq(s(7), s(6))
	call(block5601(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump5458(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	lt(s(7), s(6))
	call(block5597(s(5), s(4), s(3), s(2), s(1), s(0)))

block5458(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = 3
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(3)
	nop(DUP5)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	l(l1) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(6)
	nop(DUP2)
	l(l2) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	gl = s(6)
	s(6) = fresh(0)
	nop(SLOAD)
	s(7) = s(4)
	nop(DUP3)
	s(8) = 3
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(3)
	nop(DUP7)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	gl = s(8)
	s(8) = fresh(1)
	nop(SLOAD)
	s(7) = s(8)+s(7)
	nop(ADD)
	call(jump5458(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block5597(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

jump5601(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	geq(s(7), s(6))
	call(block5740(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump5601(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	lt(s(7), s(6))
	call(block5736(s(5), s(4), s(3), s(2), s(1), s(0)))

block5601(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = s(4)
	nop(DUP2)
	s(7) = 18
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(2)
	nop(DUP7)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	gl = s(7)
	s(7) = fresh(0)
	nop(SLOAD)
	call(jump5601(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block5736(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

block5740(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = 1
	nop(PUSH1)
	s(6)= eq(s(6), 0)
	nop(ISZERO)
	s(6)= eq(s(6), 0)
	nop(ISZERO)
	s(7) = 6
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(3)
	nop(DUP6)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = 255
	nop(PUSH1)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	call(jump5740(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump5740(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(7), s(6))
	call(block6017(s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller))

jump5740(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(7), s(6))
	call(block5831(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

block5831(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	s(6) = 1
	nop(PUSH1)
	s(7) = 6
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(3)
	nop(DUP6)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	nop(DUP2)
	gl = s(9)
	s(9) = fresh(0)
	nop(SLOAD)
	s(10) = s(8)
	nop(DUP2)
	s(11) = 255
	nop(PUSH1)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(10) = not(s(10))
	nop(NOT)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(6)
	nop(DUP4)
	s(10)= eq(s(10), 0)
	nop(ISZERO)
	s(10)= eq(s(10), 0)
	nop(ISZERO)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(8) = or(s(9), s(8))
	nop(OR)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	s(6) = s(3)
	nop(DUP3)
	s(7) = 7
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = 8
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(9)
	nop(DUP2)
	s(11) = g(numberOfHolders)
	nop(SLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(9)
	s(9) = s(12)
	s(12) = s(13)
	nop(SWAP3)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(13) = 1
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(POP)
	g(numberOfHolders) = s(10)
	nop(SSTORE)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	nop(DUP2)
	gl = s(9)
	s(9) = fresh(1)
	nop(SLOAD)
	s(10) = s(8)
	nop(DUP2)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(10) = not(s(10))
	nop(NOT)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(6)
	nop(DUP4)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(8) = or(s(9), s(8))
	nop(OR)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	call(block6017(s(5),s(4),s(3),s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0), caller))

block6017(s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = s(4)
	nop(DUP2)
	s(7) = 3
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(2)
	nop(DUP7)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(6)
	nop(DUP3)
	s(10) = s(7)
	nop(DUP3)
	gl = s(10)
	s(10) = fresh(0)
	nop(SLOAD)
	s(9) = s(10)-s(9)
	nop(SUB)
	s(10) = s(6)
	s(6) = s(9)
	s(9) = s(10)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(8) = s(6)
	nop(DUP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	s(6) = s(4)
	nop(DUP2)
	s(7) = 3
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(3)
	nop(DUP6)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(6)
	nop(DUP3)
	s(10) = s(7)
	nop(DUP3)
	gl = s(10)
	s(10) = fresh(1)
	nop(SLOAD)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(6)
	s(6) = s(9)
	s(9) = s(10)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(8) = s(6)
	nop(DUP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	s(6) = s(4)
	nop(DUP2)
	s(7) = 18
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(2)
	nop(DUP7)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(6)
	nop(DUP3)
	s(10) = s(7)
	nop(DUP3)
	gl = s(10)
	s(10) = fresh(2)
	nop(SLOAD)
	s(9) = s(10)-s(9)
	nop(SUB)
	s(10) = s(6)
	s(6) = s(9)
	s(9) = s(10)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(8) = s(6)
	nop(DUP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	s(6) = s(3)
	nop(DUP3)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(2)
	nop(DUP5)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 100389287136786176327247604509743168900146139575972864366142685224231313322991
	nop(PUSH32)
	s(9) = s(4)
	nop(DUP5)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = s(11)
	nop(DUP2)
	l(l3) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(10) = s(11)-s(10)
	nop(SUB)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	nop(LOG3)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	call(block3123(s(0)))
	nop(JUMP)

jump6416(s(5), s(4), s(3), s(2), s(1), s(0), g(presaleOwner), g(etherPrice), g(owner), caller)=>
	eq(s(4), 1 )
	call(block6584(s(3), s(2), s(1), s(0),g(etherPrice)))

jump6416(s(5), s(4), s(3), s(2), s(1), s(0), g(presaleOwner), g(etherPrice), g(owner), caller)=>
	neq(s(4), 1 )
	call(block6503(s(3), s(2), s(1), s(0),g(etherPrice), g(owner), caller))

block6416(s(2), s(1), s(0), g(presaleOwner), g(etherPrice), g(owner), caller)=>
	nop(JUMPDEST)
	s(3) = caller
	nop(CALLER)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 10
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(5) = g(presaleOwner)
	nop(SLOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(4) = s(5)/s(4)
	nop(DIV)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(3)= eq(s(4), s(3))
	nop(EQ)
	s(4) = s(3)
	nop(DUP1)
	s(5) = 6584
	nop(PUSH2)
	call(jump6416(s(5),s(4),s(3),s(2),s(1),s(0),g(presaleOwner), g(etherPrice), g(owner), caller))
	nop(JUMPI)

block6503(s(3), s(2), s(1), s(0), g(etherPrice), g(owner), caller)=>
	nop(POP)
	s(3) = caller
	nop(CALLER)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(4)
	nop(DUP1)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(5) = g(owner)
	nop(SLOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(4) = s(5)/s(4)
	nop(DIV)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(3)= eq(s(4), s(3))
	nop(EQ)
	call(block6584(s(3),s(2),s(1),s(0),g(etherPrice)))

block6584(s(3), s(2), s(1), s(0), g(etherPrice))=>
	nop(JUMPDEST)
	call(jump6584(s(3),s(2),s(1),s(0),g(etherPrice)))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump6584(s(3), s(2), s(1), s(0), g(etherPrice))=>
	neq(s(3), 0)
	call(block6595(s(2), s(1), s(0),g(etherPrice)))

jump6584(s(3), s(2), s(1), s(0), g(etherPrice))=>
	eq(s(3), 0)
	call(block6591(s(2), s(1), s(0)))

block6591(s(2), s(1), s(0))=>
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	nop(REVERT)

block6595(s(2), s(1), s(0), g(etherPrice))=>
	nop(JUMPDEST)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 5
	nop(PUSH1)
	s(5) = s(3)
	nop(DUP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	g(etherPrice) = s(4)
	nop(SSTORE)
	nop(POP)
	nop(POP)
	call(block3168(s(0)))
	nop(JUMP)

block6605(s(1), s(0), g(decimals), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 17
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(decimals)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 255
	nop(PUSH1)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block3191(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block6624(s(1), s(0), g(presaleOwner), g(owner), l(l0), address, balance, caller, returndatasize)=>
	nop(JUMPDEST)
	s(2) = caller
	nop(CALLER)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = 10
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(4) = g(presaleOwner)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(2)= eq(s(3), s(2))
	nop(EQ)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 6792
	nop(PUSH2)
	call(jump6624(s(4),s(3),s(2),s(1),s(0),g(presaleOwner), g(owner), l(l0), address, balance, caller, returndatasize))
	nop(JUMPI)

jump6624(s(4), s(3), s(2), s(1), s(0), g(presaleOwner), g(owner), l(l0), address, balance, caller, returndatasize)=>
	eq(s(3), 1 )
	call(block6792(s(2), s(1), s(0), l(l0), address, balance, caller, returndatasize))

jump6624(s(4), s(3), s(2), s(1), s(0), g(presaleOwner), g(owner), l(l0), address, balance, caller, returndatasize)=>
	neq(s(3), 1 )
	call(block6711(s(2), s(1), s(0),g(owner), l(l0), address, balance, caller, returndatasize))

block6711(s(2), s(1), s(0), g(owner), l(l0), address, balance, caller, returndatasize)=>
	nop(POP)
	s(2) = caller
	nop(CALLER)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(4) = g(owner)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(2)= eq(s(3), s(2))
	nop(EQ)
	call(block6792(s(2),s(1),s(0), l(l0), address, balance, caller, returndatasize))

jump6792(s(2), s(1), s(0), l(l0), address, balance, caller, returndatasize)=>
	neq(s(2), 0)
	call(block6803(s(1), s(0), l(l0), address, balance, caller, returndatasize))

jump6792(s(2), s(1), s(0), l(l0), address, balance, caller, returndatasize)=>
	eq(s(2), 0)
	call(block6799(s(1), s(0)))

block6792(s(2), s(1), s(0), l(l0), address, balance, caller, returndatasize)=>
	nop(JUMPDEST)
	call(jump6792(s(2),s(1),s(0), l(l0), address, balance, caller, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block6799(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block6803(s(1), s(0), l(l0), address, balance, caller, returndatasize)=>
	nop(JUMPDEST)
	s(2) = caller
	nop(CALLER)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = 2300
	nop(PUSH2)
	s(4) = address
	nop(ADDRESS)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(4) = balance
	nop(BALANCE)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = s(3)
	nop(DUP2)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(4) = s(5)*s(4)
	nop(MUL)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 64
	nop(PUSH1)
	s(5) = l(l0)
	nop(MLOAD)
	s(6) = 0
	nop(PUSH1)
	s(7) = 64
	nop(PUSH1)
	s(7) = l(l0)
	nop(MLOAD)
	s(8) = s(7)
	nop(DUP1)
	s(9) = s(5)
	nop(DUP4)
	s(8) = s(9)-s(8)
	nop(SUB)
	s(9) = s(7)
	nop(DUP2)
	s(10) = s(4)
	nop(DUP6)
	s(11) = s(2)
	nop(DUP9)
	s(12) = s(3)
	nop(DUP9)
	s(6) = 1
	nop(CALL)
	s(7) = s(2)
	s(2) = s(6)
	s(6) = s(7)
	nop(SWAP4)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(2)= eq(s(2), 0)
	nop(ISZERO)
	s(3) = s(2)
	nop(DUP1)
	call(jump6803(s(3),s(2),s(1),s(0), l(l0), address, balance, caller, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump6803(s(3), s(2), s(1), s(0), l(l0), address, balance, caller, returndatasize)=>
	eq(s(3), 0)
	call(block6896(s(2), s(1), s(0)))

jump6803(s(3), s(2), s(1), s(0), l(l0), address, balance, caller, returndatasize)=>
	neq(s(3), 0)
	call(block6887(s(2), s(1), s(0), returndatasize))

block6887(s(2), s(1), s(0), returndatasize)=>
	s(3) = returndatasize
	nop(RETURNDATASIZE)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(4)
	nop(DUP1)
	nop(RETURNDATACOPY)
	s(4) = returndatasize
	nop(RETURNDATASIZE)
	s(5) = 0
	nop(PUSH1)
	nop(REVERT)

block6896(s(2), s(1), s(0))=>
	nop(JUMPDEST)
	nop(POP)
	call(block3240(s(0)))
	nop(JUMP)

jump6899(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(standard), l(l5), l(l3), l(l1), l(l0))=>
	eq(s(8), 0)
	call(block7049(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l0)))

jump6899(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(standard), l(l5), l(l3), l(l1), l(l0))=>
	neq(s(8), 0)
	call(block6979(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(standard), l(l5), l(l3), l(l1), l(l0)))

block6899(s(1), s(0), g(standard), l(l5), l(l3), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 14
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(3) = g(standard)
	nop(SLOAD)
	s(4) = 1
	nop(PUSH1)
	s(5) = s(3)
	nop(DUP2)
	s(6) = 1
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)*s(5)
	nop(MUL)
	s(4) = s(5)-s(4)
	nop(SUB)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 2
	nop(PUSH1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = s(3)
	nop(DUP1)
	s(5) = 31
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = 32
	nop(PUSH1)
	s(6) = s(5)
	nop(DUP1)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(4) = s(5)*s(4)
	nop(MUL)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = 64
	nop(PUSH1)
	s(5) = l(l0)
	nop(MLOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(4)
	nop(DUP2)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 64
	nop(PUSH1)
	l(l0) = s(5)
	nop(MSTORE)
	s(5) = s(4)
	nop(DUP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(4)
	nop(DUP2)
	s(7) = s(5)
	nop(DUP2)
	l(l3) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(3)
	nop(DUP3)
	s(7) = s(6)
	nop(DUP1)
	s(7) = g(standard)
	nop(SLOAD)
	s(8) = 1
	nop(PUSH1)
	s(9) = s(7)
	nop(DUP2)
	s(10) = 1
	nop(PUSH1)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(9)= eq(s(9), 0)
	nop(ISZERO)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(8) = s(9)-s(8)
	nop(SUB)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 2
	nop(PUSH1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = s(7)
	nop(DUP1)
	l(l3) = g(standard)
	s(7) = g(standard)
	call(jump6899(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(standard), l(l5), l(l3), l(l1), l(l0)))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block6979(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(standard), l(l5), l(l3), l(l1), l(l0))=>
	s(8) = s(7)
	nop(DUP1)
	s(9) = 31
	nop(PUSH1)
	call(jump6979(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(standard), l(l5), l(l3), l(l1), l(l0)))
	nop(LT)
	nop(PUSH2)
	nop(JUMPI)

jump6979(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(standard), l(l5), l(l3), l(l1), l(l0))=>
	lt(s(9), s(8))
	call(block7006(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l1), l(l0)))

jump6979(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(standard), l(l5), l(l3), l(l1), l(l0))=>
	geq(s(9), s(8))
	call(block6987(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(standard), l(l5), l(l3), l(l0)))

block6987(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(standard), l(l5), l(l3), l(l0))=>
	s(8) = 256
	nop(PUSH2)
	s(9) = s(8)
	nop(DUP1)
	s(10) = s(6)
	nop(DUP4)
	s(10) = g(standard)
	nop(SLOAD)
	s(9) = s(10)/s(9)
	nop(DIV)
	s(8) = s(9)*s(8)
	nop(MUL)
	s(9) = s(5)
	nop(DUP4)
	l(l5) = s(8)
	nop(MSTORE)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	s(8) = 7049
	nop(PUSH2)
	call(block7049(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l3), l(l0)))
	nop(JUMP)

block7006(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(8) = s(5)
	nop(DUP3)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 0
	nop(PUSH1)
	l(l1) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	call(block7020(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l3), l(l0)))

jump7020(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l0))=>
	gt(s(9), s(8))
	call(block7020(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l0)))

jump7020(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l0))=>
	leq(s(9), s(8))
	call(block7040(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l0)))

block7020(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(8) = s(6)
	nop(DUP2)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	s(9) = s(7)
	nop(DUP2)
	l(l5) = s(8)
	nop(MSTORE)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 1
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(7)
	nop(DUP1)
	s(9) = s(5)
	nop(DUP4)
	call(jump7020(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l3), l(l0)))
	nop(GT)
	nop(PUSH2)
	nop(JUMPI)

block7040(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l0))=>
	s(8) = s(5)
	nop(DUP3)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)-s(7)
	nop(SUB)
	s(8) = 31
	nop(PUSH1)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(5)
	nop(DUP3)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	call(block7049(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l3), l(l0)))

block7049(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = s(1)
	nop(DUP2)
	call(block3263(s(2),s(1),s(0), l(l5), l(l3), l(l0)))
	nop(JUMP)

block7057(s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(4) = 18
	nop(PUSH1)
	s(5) = 32
	nop(PUSH1)
	l(l2) = s(4)
	nop(MSTORE)
	s(4) = s(2)
	nop(DUP2)
	s(5) = 0
	nop(PUSH1)
	l(l1) = s(4)
	nop(MSTORE)
	s(4) = 64
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(4) = sha3(s(5), s(4))
	nop(SHA3)
	s(5) = 32
	nop(PUSH1)
	l(l2) = s(4)
	nop(MSTORE)
	s(4) = s(3)
	nop(DUP1)
	s(5) = 0
	nop(PUSH1)
	l(l1) = s(4)
	nop(MSTORE)
	s(4) = 64
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(4) = sha3(s(5), s(4))
	nop(SHA3)
	s(5) = 0
	nop(PUSH1)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	nop(POP)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	gl = s(2)
	s(2) = fresh(0)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block3483(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block7094(s(1), s(0), g(state), g(owner), l(l3), l(l0), caller)=>
	nop(JUMPDEST)
	s(2) = caller
	nop(CALLER)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(4) = g(owner)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	call(jump7094(s(3),s(2),s(1),s(0),g(state), g(owner), l(l3), l(l0), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump7094(s(3), s(2), s(1), s(0), g(state), g(owner), l(l3), l(l0), caller)=>
	eq(s(3), s(2))
	call(block7185(s(1), s(0),g(state), l(l3), l(l0)))

jump7094(s(3), s(2), s(1), s(0), g(state), g(owner), l(l3), l(l0), caller)=>
	neq(s(3), s(2))
	call(block7181(s(1), s(0)))

block7181(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

jump7185(s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	leq(s(4), s(3))
	call(block7198(s(2), s(1), s(0),g(state), l(l3), l(l0)))

jump7185(s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	gt(s(4), s(3))
	call(block7197(s(2), s(1), s(0)))

block7185(s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 1
	nop(PUSH1)
	s(3) = 3
	nop(PUSH1)
	s(4) = s(2)
	nop(DUP2)
	call(jump7185(s(4),s(3),s(2),s(1),s(0),g(state), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block7197(s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block7198(s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 13
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(4) = g(state)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = 255
	nop(PUSH1)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 3
	nop(PUSH1)
	s(5) = s(3)
	nop(DUP2)
	call(jump7198(s(5),s(4),s(3),s(2),s(1),s(0),g(state), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump7198(s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	leq(s(5), s(4))
	call(block7225(s(3), s(2), s(1), s(0),g(state), l(l3), l(l0)))

jump7198(s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	gt(s(5), s(4))
	call(block7224(s(3), s(2), s(1), s(0)))

block7224(s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block7225(s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	call(jump7225(s(3),s(2),s(1),s(0),g(state), l(l3), l(l0)))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump7225(s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	eq(s(3), s(2))
	call(block7237(s(1), s(0),g(state), l(l3), l(l0)))

jump7225(s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	neq(s(3), s(2))
	call(block7233(s(1), s(0)))

block7233(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

jump7237(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	leq(s(8), s(7))
	call(block7268(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(state), l(l3), l(l0)))

jump7237(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	gt(s(8), s(7))
	call(block7267(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block7237(s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 2
	nop(PUSH1)
	s(3) = 13
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	nop(DUP2)
	s(5) = g(state)
	nop(SLOAD)
	s(6) = s(4)
	nop(DUP2)
	s(7) = 255
	nop(PUSH1)
	s(6) = s(7)*s(6)
	nop(MUL)
	s(6) = not(s(6))
	nop(NOT)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	nop(DUP4)
	s(7) = 3
	nop(PUSH1)
	s(8) = s(6)
	nop(DUP2)
	call(jump7237(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block7267(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump7268(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	leq(s(8), s(7))
	call(block7338(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l0)))

jump7268(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	gt(s(8), s(7))
	call(block7337(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block7268(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(5) = s(6)*s(5)
	nop(MUL)
	s(4) = or(s(5), s(4))
	nop(OR)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	g(state) = s(3)
	nop(SSTORE)
	nop(POP)
	s(2) = 91016009596232918414919019420680617742283986832421755804134802594728457319555
	nop(PUSH32)
	s(3) = 13
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(4) = g(state)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = 255
	nop(PUSH1)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 64
	nop(PUSH1)
	s(4) = l(l0)
	nop(MLOAD)
	s(5) = s(4)
	nop(DUP1)
	s(6) = s(3)
	nop(DUP3)
	s(7) = 3
	nop(PUSH1)
	s(8) = s(6)
	nop(DUP2)
	call(jump7268(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block7337(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block7338(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(7) = 255
	nop(PUSH1)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	nop(DUP2)
	l(l3) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(4) = 64
	nop(PUSH1)
	s(4) = l(l0)
	nop(MLOAD)
	s(5) = s(4)
	nop(DUP1)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(4) = s(5)-s(4)
	nop(SUB)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	nop(LOG1)
	call(block3526(s(0)))
	nop(JUMP)

block7359(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 12
	nop(PUSH1)
	s(4) = 32
	nop(PUSH1)
	l(l2) = s(3)
	nop(MSTORE)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 0
	nop(PUSH1)
	l(l1) = s(3)
	nop(MSTORE)
	s(3) = 64
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(3) = sha3(s(4), s(3))
	nop(SHA3)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	gl = s(3)
	s(3) = fresh(0)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 255
	nop(PUSH1)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block3593(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block7391(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 3
	nop(PUSH1)
	s(4) = 32
	nop(PUSH1)
	l(l2) = s(3)
	nop(MSTORE)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 0
	nop(PUSH1)
	l(l1) = s(3)
	nop(MSTORE)
	s(3) = 64
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(3) = sha3(s(4), s(3))
	nop(SHA3)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(POP)
	gl = s(2)
	s(2) = fresh(0)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block3684(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block7415(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 7
	nop(PUSH1)
	s(4) = 32
	nop(PUSH1)
	l(l2) = s(3)
	nop(MSTORE)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 0
	nop(PUSH1)
	l(l1) = s(3)
	nop(MSTORE)
	s(3) = 64
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(3) = sha3(s(4), s(3))
	nop(SHA3)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	gl = s(3)
	s(3) = fresh(0)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block3749(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block7466(s(1), s(0), g(neurodao), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 4
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(neurodao)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block3836(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block7504(s(1), s(0), g(owner), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(owner)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block3923(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block7541(s(1), s(0), g(symbol), l(l5), l(l3), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 16
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(3) = g(symbol)
	nop(SLOAD)
	s(4) = 1
	nop(PUSH1)
	s(5) = s(3)
	nop(DUP2)
	s(6) = 1
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)*s(5)
	nop(MUL)
	s(4) = s(5)-s(4)
	nop(SUB)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 2
	nop(PUSH1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = s(3)
	nop(DUP1)
	s(5) = 31
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = 32
	nop(PUSH1)
	s(6) = s(5)
	nop(DUP1)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(4) = s(5)*s(4)
	nop(MUL)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = 64
	nop(PUSH1)
	s(5) = l(l0)
	nop(MLOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(4)
	nop(DUP2)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 64
	nop(PUSH1)
	l(l0) = s(5)
	nop(MSTORE)
	s(5) = s(4)
	nop(DUP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(4)
	nop(DUP2)
	s(7) = s(5)
	nop(DUP2)
	l(l3) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(3)
	nop(DUP3)
	s(7) = s(6)
	nop(DUP1)
	s(7) = g(symbol)
	nop(SLOAD)
	s(8) = 1
	nop(PUSH1)
	s(9) = s(7)
	nop(DUP2)
	s(10) = 1
	nop(PUSH1)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(9)= eq(s(9), 0)
	nop(ISZERO)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(8) = s(9)-s(8)
	nop(SUB)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 2
	nop(PUSH1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = s(7)
	nop(DUP1)
	l(l3) = g(symbol)
	s(7) = g(symbol)
	call(jump7541(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(symbol), l(l5), l(l3), l(l1), l(l0)))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump7541(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(symbol), l(l5), l(l3), l(l1), l(l0))=>
	eq(s(8), 0)
	call(block7691(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l0)))

jump7541(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(symbol), l(l5), l(l3), l(l1), l(l0))=>
	neq(s(8), 0)
	call(block7621(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(symbol), l(l5), l(l3), l(l1), l(l0)))

block7621(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(symbol), l(l5), l(l3), l(l1), l(l0))=>
	s(8) = s(7)
	nop(DUP1)
	s(9) = 31
	nop(PUSH1)
	call(jump7621(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(symbol), l(l5), l(l3), l(l1), l(l0)))
	nop(LT)
	nop(PUSH2)
	nop(JUMPI)

jump7621(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(symbol), l(l5), l(l3), l(l1), l(l0))=>
	lt(s(9), s(8))
	call(block7648(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l1), l(l0)))

jump7621(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(symbol), l(l5), l(l3), l(l1), l(l0))=>
	geq(s(9), s(8))
	call(block7629(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(symbol), l(l5), l(l3), l(l0)))

block7629(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(symbol), l(l5), l(l3), l(l0))=>
	s(8) = 256
	nop(PUSH2)
	s(9) = s(8)
	nop(DUP1)
	s(10) = s(6)
	nop(DUP4)
	s(10) = g(symbol)
	nop(SLOAD)
	s(9) = s(10)/s(9)
	nop(DIV)
	s(8) = s(9)*s(8)
	nop(MUL)
	s(9) = s(5)
	nop(DUP4)
	l(l5) = s(8)
	nop(MSTORE)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	s(8) = 7691
	nop(PUSH2)
	call(block7691(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l3), l(l0)))
	nop(JUMP)

block7648(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(8) = s(5)
	nop(DUP3)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 0
	nop(PUSH1)
	l(l1) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	call(block7662(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l3), l(l0)))

block7662(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(8) = s(6)
	nop(DUP2)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	s(9) = s(7)
	nop(DUP2)
	l(l5) = s(8)
	nop(MSTORE)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 1
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(7)
	nop(DUP1)
	s(9) = s(5)
	nop(DUP4)
	call(jump7662(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l3), l(l0)))
	nop(GT)
	nop(PUSH2)
	nop(JUMPI)

jump7662(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l0))=>
	gt(s(9), s(8))
	call(block7662(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l0)))

jump7662(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l0))=>
	leq(s(9), s(8))
	call(block7682(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l0)))

block7682(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l0))=>
	s(8) = s(5)
	nop(DUP3)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)-s(7)
	nop(SUB)
	s(8) = 31
	nop(PUSH1)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(5)
	nop(DUP3)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	call(block7691(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l3), l(l0)))

block7691(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l3), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = s(1)
	nop(DUP2)
	call(block4010(s(2),s(1),s(0), l(l5), l(l3), l(l0)))
	nop(JUMP)

block7699(s(1), s(0), g(presaleOwner), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 10
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(presaleOwner)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block4154(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block7737(s(1), s(0), g(etherPrice), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 5
	nop(PUSH1)
	s(2) = g(etherPrice)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block4241(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block7743(s(2), s(1), s(0), g(newOwner), g(owner), caller)=>
	nop(JUMPDEST)
	s(3) = caller
	nop(CALLER)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(4)
	nop(DUP1)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(5) = g(owner)
	nop(SLOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(4) = s(5)/s(4)
	nop(DIV)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	call(jump7743(s(4),s(3),s(2),s(1),s(0),g(newOwner), g(owner), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump7743(s(4), s(3), s(2), s(1), s(0), g(newOwner), g(owner), caller)=>
	eq(s(4), s(3))
	call(block7834(s(2), s(1), s(0),g(newOwner)))

jump7743(s(4), s(3), s(2), s(1), s(0), g(newOwner), g(owner), caller)=>
	neq(s(4), s(3))
	call(block7830(s(2), s(1), s(0)))

block7830(s(2), s(1), s(0))=>
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	nop(REVERT)

jump7834(s(4), s(3), s(2), s(1), s(0), g(newOwner))=>
	neq(s(4), s(3))
	call(block7872(s(2), s(1), s(0),g(newOwner)))

jump7834(s(4), s(3), s(2), s(1), s(0), g(newOwner))=>
	eq(s(4), s(3))
	call(block7868(s(2), s(1), s(0)))

block7834(s(2), s(1), s(0), g(newOwner))=>
	nop(JUMPDEST)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	nop(DUP2)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	call(jump7834(s(4),s(3),s(2),s(1),s(0),g(newOwner)))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block7868(s(2), s(1), s(0))=>
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	nop(REVERT)

block7872(s(2), s(1), s(0), g(newOwner))=>
	nop(JUMPDEST)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 1
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	nop(DUP2)
	s(6) = g(newOwner)
	nop(SLOAD)
	s(7) = s(5)
	nop(DUP2)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = s(8)*s(7)
	nop(MUL)
	s(7) = not(s(7))
	nop(NOT)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(3)
	nop(DUP4)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(6) = s(7)*s(6)
	nop(MUL)
	s(5) = or(s(6), s(5))
	nop(OR)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	g(newOwner) = s(4)
	nop(SSTORE)
	nop(POP)
	nop(POP)
	call(block4328(s(0)))
	nop(JUMP)

jump7940(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller)=>
	leq(s(6), s(5))
	call(block7952(s(4), s(3), s(2), s(1), s(0),g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller))

jump7940(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller)=>
	gt(s(6), s(5))
	call(block7951(s(4), s(3), s(2), s(1), s(0)))

block7940(s(3), s(2), s(1), s(0), g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller)=>
	nop(JUMPDEST)
	s(4) = 3
	nop(PUSH1)
	s(5) = s(4)
	nop(DUP1)
	s(6) = s(4)
	nop(DUP2)
	call(jump7940(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block7951(s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump7952(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller)=>
	leq(s(7), s(6))
	call(block7979(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller))

jump7952(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller)=>
	gt(s(7), s(6))
	call(block7978(s(5), s(4), s(3), s(2), s(1), s(0)))

block7952(s(4), s(3), s(2), s(1), s(0), g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller)=>
	nop(JUMPDEST)
	s(5) = 13
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(6) = g(state)
	nop(SLOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 256
	nop(PUSH2)
	s(6) = s(7)^s(6)
	nop(EXP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 3
	nop(PUSH1)
	s(7) = s(5)
	nop(DUP2)
	call(jump7952(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block7978(s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump7979(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller)=>
	eq(s(5), s(4))
	call(block7991(s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller))

jump7979(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller)=>
	neq(s(5), s(4))
	call(block7987(s(3), s(2), s(1), s(0)))

block7979(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller)=>
	nop(JUMPDEST)
	call(jump7979(s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block7987(s(3), s(2), s(1), s(0))=>
	s(4) = 0
	nop(PUSH1)
	s(5) = s(4)
	nop(DUP1)
	nop(REVERT)

block7991(s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller)=>
	nop(JUMPDEST)
	s(4) = 64
	nop(PUSH1)
	s(5) = 4
	nop(PUSH1)
	s(6) = s(4)
	nop(DUP2)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(7) = calldatasize
	nop(CALLDATASIZE)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	nop(POP)
	call(jump7991(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump7991(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller)=>
	geq(s(6), s(5))
	call(block8015(s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump7991(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), calldatasize, caller)=>
	lt(s(6), s(5))
	call(block8011(s(4), s(3), s(2), s(1), s(0)))

block8011(s(4), s(3), s(2), s(1), s(0))=>
	s(5) = 0
	nop(PUSH1)
	s(6) = s(5)
	nop(DUP1)
	nop(REVERT)

jump8015(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	geq(s(6), s(5))
	call(block8093(s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump8015(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	lt(s(6), s(5))
	call(block8089(s(4), s(3), s(2), s(1), s(0)))

block8015(s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(5) = s(3)
	nop(DUP2)
	s(6) = 3
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = caller
	nop(CALLER)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	l(l1) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(6)
	nop(DUP2)
	l(l2) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	gl = s(6)
	s(6) = fresh(0)
	nop(SLOAD)
	call(jump8015(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block8089(s(4), s(3), s(2), s(1), s(0))=>
	s(5) = 0
	nop(PUSH1)
	s(6) = s(5)
	nop(DUP1)
	nop(REVERT)

block8093(s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(5) = 3
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(2)
	nop(DUP5)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l1) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	l(l2) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(5) = sha3(s(6), s(5))
	nop(SHA3)
	gl = s(5)
	s(5) = fresh(0)
	nop(SLOAD)
	s(6) = s(3)
	nop(DUP3)
	s(7) = 3
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(2)
	nop(DUP7)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	gl = s(7)
	s(7) = fresh(1)
	nop(SLOAD)
	s(6) = s(7)+s(6)
	nop(ADD)
	call(jump8093(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump8093(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	geq(s(6), s(5))
	call(block8236(s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump8093(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	lt(s(6), s(5))
	call(block8232(s(4), s(3), s(2), s(1), s(0)))

block8232(s(4), s(3), s(2), s(1), s(0))=>
	s(5) = 0
	nop(PUSH1)
	s(6) = s(5)
	nop(DUP1)
	nop(REVERT)

jump8236(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(6), s(5))
	call(block8513(s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller))

jump8236(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(6), s(5))
	call(block8327(s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

block8236(s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(5) = 1
	nop(PUSH1)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(6) = 6
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(2)
	nop(DUP6)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	l(l1) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(6)
	nop(DUP2)
	l(l2) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	gl = s(7)
	s(7) = fresh(0)
	nop(SLOAD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 256
	nop(PUSH2)
	s(7) = s(8)^s(7)
	nop(EXP)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(6) = s(7)/s(6)
	nop(DIV)
	s(7) = 255
	nop(PUSH1)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(6)= eq(s(6), 0)
	nop(ISZERO)
	s(6)= eq(s(6), 0)
	nop(ISZERO)
	call(jump8236(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block8327(s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	s(5) = 1
	nop(PUSH1)
	s(6) = 6
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(2)
	nop(DUP6)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	l(l1) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(6)
	nop(DUP2)
	l(l2) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	s(7) = 0
	nop(PUSH1)
	s(8) = 256
	nop(PUSH2)
	s(7) = s(8)^s(7)
	nop(EXP)
	s(8) = s(6)
	nop(DUP2)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	s(9) = s(7)
	nop(DUP2)
	s(10) = 255
	nop(PUSH1)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(9) = not(s(9))
	nop(NOT)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(5)
	nop(DUP4)
	s(9)= eq(s(9), 0)
	nop(ISZERO)
	s(9)= eq(s(9), 0)
	nop(ISZERO)
	s(8) = s(9)*s(8)
	nop(MUL)
	s(7) = or(s(8), s(7))
	nop(OR)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	gs(1) = s(7)
	gs(2) = s(6)
	nop(SSTORE)
	nop(POP)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 7
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = 8
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	nop(DUP2)
	s(10) = g(numberOfHolders)
	nop(SLOAD)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = 1
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	nop(POP)
	g(numberOfHolders) = s(9)
	nop(SSTORE)
	s(9) = s(7)
	nop(DUP2)
	l(l1) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(6)
	nop(DUP2)
	l(l2) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	s(7) = 0
	nop(PUSH1)
	s(8) = 256
	nop(PUSH2)
	s(7) = s(8)^s(7)
	nop(EXP)
	s(8) = s(6)
	nop(DUP2)
	gl = s(8)
	s(8) = fresh(1)
	nop(SLOAD)
	s(9) = s(7)
	nop(DUP2)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(9) = not(s(9))
	nop(NOT)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(5)
	nop(DUP4)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(8) = s(9)*s(8)
	nop(MUL)
	s(7) = or(s(8), s(7))
	nop(OR)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	gs(1) = s(7)
	gs(2) = s(6)
	nop(SSTORE)
	nop(POP)
	call(block8513(s(4),s(3),s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0), caller))

block8513(s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(5) = s(3)
	nop(DUP2)
	s(6) = 3
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = caller
	nop(CALLER)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	l(l1) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(6)
	nop(DUP2)
	l(l2) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(5)
	nop(DUP3)
	s(9) = s(6)
	nop(DUP3)
	gl = s(9)
	s(9) = fresh(0)
	nop(SLOAD)
	s(8) = s(9)-s(8)
	nop(SUB)
	s(9) = s(5)
	s(5) = s(8)
	s(8) = s(9)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(7) = s(5)
	nop(DUP2)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	gs(1) = s(7)
	gs(2) = s(6)
	nop(SSTORE)
	nop(POP)
	s(5) = s(3)
	nop(DUP2)
	s(6) = 3
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(2)
	nop(DUP6)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	l(l1) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(6)
	nop(DUP2)
	l(l2) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(5)
	nop(DUP3)
	s(9) = s(6)
	nop(DUP3)
	gl = s(9)
	s(9) = fresh(1)
	nop(SLOAD)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(5)
	s(5) = s(8)
	s(8) = s(9)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(7) = s(5)
	nop(DUP2)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	gs(1) = s(7)
	gs(2) = s(6)
	nop(SSTORE)
	nop(POP)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = 100389287136786176327247604509743168900146139575972864366142685224231313322991
	nop(PUSH32)
	s(8) = s(3)
	nop(DUP5)
	s(9) = 64
	nop(PUSH1)
	s(9) = l(l0)
	nop(MLOAD)
	s(10) = s(9)
	nop(DUP1)
	s(11) = s(8)
	nop(DUP3)
	s(12) = s(10)
	nop(DUP2)
	l(l3) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(9) = 64
	nop(PUSH1)
	s(9) = l(l0)
	nop(MLOAD)
	s(10) = s(9)
	nop(DUP1)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	s(9) = s(10)-s(9)
	nop(SUB)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	nop(LOG3)
	nop(POP)
	nop(POP)
	nop(POP)
	call(block4405(s(0)))
	nop(JUMP)

block8773(s(2), s(1), s(0), g(state), g(presaleOwner), g(owner), l(l3), l(l0), caller)=>
	nop(JUMPDEST)
	s(3) = caller
	nop(CALLER)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(4)
	nop(DUP1)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(5) = g(owner)
	nop(SLOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(4) = s(5)/s(4)
	nop(DIV)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	call(jump8773(s(4),s(3),s(2),s(1),s(0),g(state), g(presaleOwner), g(owner), l(l3), l(l0), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump8773(s(4), s(3), s(2), s(1), s(0), g(state), g(presaleOwner), g(owner), l(l3), l(l0), caller)=>
	eq(s(4), s(3))
	call(block8864(s(2), s(1), s(0),g(state), g(presaleOwner), l(l3), l(l0)))

jump8773(s(4), s(3), s(2), s(1), s(0), g(state), g(presaleOwner), g(owner), l(l3), l(l0), caller)=>
	neq(s(4), s(3))
	call(block8860(s(2), s(1), s(0)))

block8860(s(2), s(1), s(0))=>
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	nop(REVERT)

block8864(s(2), s(1), s(0), g(state), g(presaleOwner), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 0
	nop(PUSH1)
	s(4) = 3
	nop(PUSH1)
	s(5) = s(3)
	nop(DUP2)
	call(jump8864(s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(presaleOwner), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump8864(s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(presaleOwner), l(l3), l(l0))=>
	leq(s(5), s(4))
	call(block8877(s(3), s(2), s(1), s(0),g(state), g(presaleOwner), l(l3), l(l0)))

jump8864(s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(presaleOwner), l(l3), l(l0))=>
	gt(s(5), s(4))
	call(block8876(s(3), s(2), s(1), s(0)))

block8876(s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump8877(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(presaleOwner), l(l3), l(l0))=>
	leq(s(6), s(5))
	call(block8904(s(4), s(3), s(2), s(1), s(0),g(state), g(presaleOwner), l(l3), l(l0)))

jump8877(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(presaleOwner), l(l3), l(l0))=>
	gt(s(6), s(5))
	call(block8903(s(4), s(3), s(2), s(1), s(0)))

block8877(s(3), s(2), s(1), s(0), g(state), g(presaleOwner), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(4) = 13
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(5) = g(state)
	nop(SLOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(4) = s(5)/s(4)
	nop(DIV)
	s(5) = 255
	nop(PUSH1)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(5) = 3
	nop(PUSH1)
	s(6) = s(4)
	nop(DUP2)
	call(jump8877(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(presaleOwner), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block8903(s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump8904(s(4), s(3), s(2), s(1), s(0), g(state), g(presaleOwner), l(l3), l(l0))=>
	eq(s(4), s(3))
	call(block8916(s(2), s(1), s(0),g(state), g(presaleOwner), l(l3), l(l0)))

jump8904(s(4), s(3), s(2), s(1), s(0), g(state), g(presaleOwner), l(l3), l(l0))=>
	neq(s(4), s(3))
	call(block8912(s(2), s(1), s(0)))

block8904(s(4), s(3), s(2), s(1), s(0), g(state), g(presaleOwner), l(l3), l(l0))=>
	nop(JUMPDEST)
	call(jump8904(s(4),s(3),s(2),s(1),s(0),g(state), g(presaleOwner), l(l3), l(l0)))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block8912(s(2), s(1), s(0))=>
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	nop(REVERT)

block8916(s(2), s(1), s(0), g(state), g(presaleOwner), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 10
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	nop(DUP2)
	s(6) = g(presaleOwner)
	nop(SLOAD)
	s(7) = s(5)
	nop(DUP2)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = s(8)*s(7)
	nop(MUL)
	s(7) = not(s(7))
	nop(NOT)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(3)
	nop(DUP4)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(6) = s(7)*s(6)
	nop(MUL)
	s(5) = or(s(6), s(5))
	nop(OR)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	g(presaleOwner) = s(4)
	nop(SSTORE)
	nop(POP)
	s(3) = 1
	nop(PUSH1)
	s(4) = 13
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	nop(DUP2)
	s(6) = g(state)
	nop(SLOAD)
	s(7) = s(5)
	nop(DUP2)
	s(8) = 255
	nop(PUSH1)
	s(7) = s(8)*s(7)
	nop(MUL)
	s(7) = not(s(7))
	nop(NOT)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(3)
	nop(DUP4)
	s(8) = 3
	nop(PUSH1)
	s(9) = s(7)
	nop(DUP2)
	call(jump8916(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(presaleOwner), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump8916(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(presaleOwner), l(l3), l(l0))=>
	leq(s(9), s(8))
	call(block9012(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(state), l(l3), l(l0)))

jump8916(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(presaleOwner), l(l3), l(l0))=>
	gt(s(9), s(8))
	call(block9011(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block9011(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump9012(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	leq(s(9), s(8))
	call(block9082(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l0)))

jump9012(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	gt(s(9), s(8))
	call(block9081(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block9012(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(6) = s(7)*s(6)
	nop(MUL)
	s(5) = or(s(6), s(5))
	nop(OR)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	g(state) = s(4)
	nop(SSTORE)
	nop(POP)
	s(3) = 91016009596232918414919019420680617742283986832421755804134802594728457319555
	nop(PUSH32)
	s(4) = 13
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(5) = g(state)
	nop(SLOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(4) = s(5)/s(4)
	nop(DIV)
	s(5) = 255
	nop(PUSH1)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(5) = 64
	nop(PUSH1)
	s(5) = l(l0)
	nop(MLOAD)
	s(6) = s(5)
	nop(DUP1)
	s(7) = s(4)
	nop(DUP3)
	s(8) = 3
	nop(PUSH1)
	s(9) = s(7)
	nop(DUP2)
	call(jump9012(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block9081(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block9082(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(8) = 255
	nop(PUSH1)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l3) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(5) = 64
	nop(PUSH1)
	s(5) = l(l0)
	nop(MLOAD)
	s(6) = s(5)
	nop(DUP1)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	s(5) = s(6)-s(5)
	nop(SUB)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(LOG1)
	nop(POP)
	call(block4472(s(0)))
	nop(JUMP)

block9104(s(1), s(0), g(presaleOwner), g(owner), l(l0), address, balance, caller, returndatasize)=>
	nop(JUMPDEST)
	s(2) = caller
	nop(CALLER)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(4) = g(owner)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	call(jump9104(s(3),s(2),s(1),s(0),g(presaleOwner), g(owner), l(l0), address, balance, caller, returndatasize))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump9104(s(3), s(2), s(1), s(0), g(presaleOwner), g(owner), l(l0), address, balance, caller, returndatasize)=>
	eq(s(3), s(2))
	call(block9195(s(1), s(0),g(presaleOwner), g(owner), l(l0), address, balance, returndatasize))

jump9104(s(3), s(2), s(1), s(0), g(presaleOwner), g(owner), l(l0), address, balance, caller, returndatasize)=>
	neq(s(3), s(2))
	call(block9191(s(1), s(0)))

block9191(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block9195(s(1), s(0), g(presaleOwner), g(owner), l(l0), address, balance, returndatasize)=>
	nop(JUMPDEST)
	s(2) = 10
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(presaleOwner)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = 2300
	nop(PUSH2)
	s(4) = address
	nop(ADDRESS)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(4) = balance
	nop(BALANCE)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = s(3)
	nop(DUP2)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(4) = s(5)*s(4)
	nop(MUL)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 64
	nop(PUSH1)
	s(5) = l(l0)
	nop(MLOAD)
	s(6) = 0
	nop(PUSH1)
	s(7) = 64
	nop(PUSH1)
	s(7) = l(l0)
	nop(MLOAD)
	s(8) = s(7)
	nop(DUP1)
	s(9) = s(5)
	nop(DUP4)
	s(8) = s(9)-s(8)
	nop(SUB)
	s(9) = s(7)
	nop(DUP2)
	s(10) = s(4)
	nop(DUP6)
	s(11) = s(2)
	nop(DUP9)
	s(12) = s(3)
	nop(DUP9)
	s(6) = 1
	nop(CALL)
	s(7) = s(2)
	s(2) = s(6)
	s(6) = s(7)
	nop(SWAP4)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(2)= eq(s(2), 0)
	nop(ISZERO)
	s(3) = s(2)
	nop(DUP1)
	call(jump9195(s(3),s(2),s(1),s(0),g(presaleOwner), g(owner), l(l0), address, balance, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump9195(s(3), s(2), s(1), s(0), g(presaleOwner), g(owner), l(l0), address, balance, returndatasize)=>
	eq(s(3), 0)
	call(block9322(s(2), s(1), s(0),g(owner)))

jump9195(s(3), s(2), s(1), s(0), g(presaleOwner), g(owner), l(l0), address, balance, returndatasize)=>
	neq(s(3), 0)
	call(block9313(s(2), s(1), s(0), returndatasize))

block9313(s(2), s(1), s(0), returndatasize)=>
	s(3) = returndatasize
	nop(RETURNDATASIZE)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(4)
	nop(DUP1)
	nop(RETURNDATACOPY)
	s(4) = returndatasize
	nop(RETURNDATASIZE)
	s(5) = 0
	nop(PUSH1)
	nop(REVERT)

block9322(s(2), s(1), s(0), g(owner))=>
	nop(JUMPDEST)
	nop(POP)
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(owner)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	nop(SUICIDE)

block9381(s(1), s(0), g(state), g(owner), l(l3), l(l0), caller)=>
	nop(JUMPDEST)
	s(2) = caller
	nop(CALLER)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(4) = g(owner)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	call(jump9381(s(3),s(2),s(1),s(0),g(state), g(owner), l(l3), l(l0), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump9381(s(3), s(2), s(1), s(0), g(state), g(owner), l(l3), l(l0), caller)=>
	eq(s(3), s(2))
	call(block9472(s(1), s(0),g(state), l(l3), l(l0)))

jump9381(s(3), s(2), s(1), s(0), g(state), g(owner), l(l3), l(l0), caller)=>
	neq(s(3), s(2))
	call(block9468(s(1), s(0)))

block9468(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

jump9472(s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	leq(s(4), s(3))
	call(block9485(s(2), s(1), s(0),g(state), l(l3), l(l0)))

jump9472(s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	gt(s(4), s(3))
	call(block9484(s(2), s(1), s(0)))

block9472(s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 2
	nop(PUSH1)
	s(3) = 3
	nop(PUSH1)
	s(4) = s(2)
	nop(DUP2)
	call(jump9472(s(4),s(3),s(2),s(1),s(0),g(state), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block9484(s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump9485(s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	leq(s(5), s(4))
	call(block9512(s(3), s(2), s(1), s(0),g(state), l(l3), l(l0)))

jump9485(s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	gt(s(5), s(4))
	call(block9511(s(3), s(2), s(1), s(0)))

block9485(s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 13
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(4) = g(state)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = 255
	nop(PUSH1)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 3
	nop(PUSH1)
	s(5) = s(3)
	nop(DUP2)
	call(jump9485(s(5),s(4),s(3),s(2),s(1),s(0),g(state), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block9511(s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block9512(s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	call(jump9512(s(3),s(2),s(1),s(0),g(state), l(l3), l(l0)))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump9512(s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	eq(s(3), s(2))
	call(block9524(s(1), s(0),g(state), l(l3), l(l0)))

jump9512(s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	neq(s(3), s(2))
	call(block9520(s(1), s(0)))

block9520(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block9524(s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 3
	nop(PUSH1)
	s(3) = 13
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	nop(DUP2)
	s(5) = g(state)
	nop(SLOAD)
	s(6) = s(4)
	nop(DUP2)
	s(7) = 255
	nop(PUSH1)
	s(6) = s(7)*s(6)
	nop(MUL)
	s(6) = not(s(6))
	nop(NOT)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	nop(DUP4)
	s(7) = 3
	nop(PUSH1)
	s(8) = s(6)
	nop(DUP2)
	call(jump9524(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump9524(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	leq(s(8), s(7))
	call(block9555(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(state), l(l3), l(l0)))

jump9524(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	gt(s(8), s(7))
	call(block9554(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block9554(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump9555(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	leq(s(8), s(7))
	call(block9625(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l0)))

jump9555(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	gt(s(8), s(7))
	call(block9624(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block9555(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(5) = s(6)*s(5)
	nop(MUL)
	s(4) = or(s(5), s(4))
	nop(OR)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	g(state) = s(3)
	nop(SSTORE)
	nop(POP)
	s(2) = 91016009596232918414919019420680617742283986832421755804134802594728457319555
	nop(PUSH32)
	s(3) = 13
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(4) = g(state)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = 255
	nop(PUSH1)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 64
	nop(PUSH1)
	s(4) = l(l0)
	nop(MLOAD)
	s(5) = s(4)
	nop(DUP1)
	s(6) = s(3)
	nop(DUP3)
	s(7) = 3
	nop(PUSH1)
	s(8) = s(6)
	nop(DUP2)
	call(jump9555(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block9624(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block9625(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(7) = 255
	nop(PUSH1)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	nop(DUP2)
	l(l3) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(4) = 64
	nop(PUSH1)
	s(4) = l(l0)
	nop(MLOAD)
	s(5) = s(4)
	nop(DUP1)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(4) = s(5)-s(4)
	nop(SUB)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	nop(LOG1)
	call(block4518(s(0)))
	nop(JUMP)

jump9646(s(3), s(2), s(1), s(0), g(newOwner), g(owner), caller)=>
	eq(s(3), s(2))
	call(block9738(s(1), s(0),g(newOwner), g(owner)))

jump9646(s(3), s(2), s(1), s(0), g(newOwner), g(owner), caller)=>
	neq(s(3), s(2))
	call(block9734(s(1), s(0)))

block9646(s(1), s(0), g(newOwner), g(owner), caller)=>
	nop(JUMPDEST)
	s(2) = caller
	nop(CALLER)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = 1
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(4) = g(newOwner)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	call(jump9646(s(3),s(2),s(1),s(0),g(newOwner), g(owner), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block9734(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block9738(s(1), s(0), g(newOwner), g(owner))=>
	nop(JUMPDEST)
	s(2) = 1
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(newOwner)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	nop(DUP2)
	s(5) = g(owner)
	nop(SLOAD)
	s(6) = s(4)
	nop(DUP2)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = s(7)*s(6)
	nop(MUL)
	s(6) = not(s(6))
	nop(NOT)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	nop(DUP4)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(5) = s(6)*s(5)
	nop(MUL)
	s(4) = or(s(5), s(4))
	nop(OR)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	g(owner) = s(3)
	nop(SSTORE)
	nop(POP)
	s(2) = 1
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	nop(DUP2)
	s(4) = g(newOwner)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = s(5)*s(4)
	nop(MUL)
	s(4) = not(s(4))
	nop(NOT)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	g(newOwner) = s(2)
	nop(SSTORE)
	call(block4541(s(0)))
	nop(JUMP)

block9875(s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 13
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(state)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 255
	nop(PUSH1)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block4564(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block9894(s(1), s(0), g(newOwner), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 1
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(newOwner)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block4621(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

jump9932(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l2), l(l1), l(l0))=>
	leq(s(7), s(6))
	call(block9946(s(5), s(4), s(3), s(2), s(1), s(0),g(state), l(l3), l(l2), l(l1), l(l0)))

jump9932(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l2), l(l1), l(l0))=>
	gt(s(7), s(6))
	call(block9945(s(5), s(4), s(3), s(2), s(1), s(0)))

block9932(s(3), s(2), s(1), s(0), g(state), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(4) = 0
	nop(PUSH1)
	s(5) = 3
	nop(PUSH1)
	s(6) = s(5)
	nop(DUP1)
	s(7) = s(5)
	nop(DUP2)
	call(jump9932(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), l(l3), l(l2), l(l1), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block9945(s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump9946(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l2), l(l1), l(l0))=>
	leq(s(8), s(7))
	call(block9973(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0)))

jump9946(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l2), l(l1), l(l0))=>
	gt(s(8), s(7))
	call(block9972(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block9946(s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(6) = 13
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(7) = g(state)
	nop(SLOAD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 256
	nop(PUSH2)
	s(7) = s(8)^s(7)
	nop(EXP)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(6) = s(7)/s(6)
	nop(DIV)
	s(7) = 255
	nop(PUSH1)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = 3
	nop(PUSH1)
	s(8) = s(6)
	nop(DUP2)
	call(jump9946(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), l(l3), l(l2), l(l1), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block9972(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump9973(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0))=>
	eq(s(6), s(5))
	call(block9985(s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0)))

jump9973(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0))=>
	neq(s(6), s(5))
	call(block9981(s(4), s(3), s(2), s(1), s(0)))

block9973(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	call(jump9973(s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0)))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block9981(s(4), s(3), s(2), s(1), s(0))=>
	s(5) = 0
	nop(PUSH1)
	s(6) = s(5)
	nop(DUP1)
	nop(REVERT)

block9985(s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(5) = 18
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(2)
	nop(DUP5)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l1) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	l(l2) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(5) = sha3(s(6), s(5))
	nop(SHA3)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(3)
	nop(DUP4)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l1) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	l(l2) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(5) = sha3(s(6), s(5))
	nop(SHA3)
	gl = s(5)
	s(5) = fresh(0)
	nop(SLOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	s(5) = s(1)
	s(1) = s(4)
	s(4) = s(5)
	nop(SWAP3)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block4784(s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

jump1003_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize)=>
	eq(s(11), 0)
	call(block1023_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize))

jump1003_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize)=>
	neq(s(11), 0)
	call(block1014_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize))

block1003_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(16) = gas
	nop(GAS)
	s(10) = 1
	nop(CALL)
	s(10)= eq(s(10), 0)
	nop(ISZERO)
	s(11) = s(10)
	nop(DUP1)
	call(jump1003_0(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1003_1(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize)=>
	eq(s(12), 0)
	call(block1023_1(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize))

jump1003_1(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize)=>
	neq(s(12), 0)
	call(block1014_1(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize))

block1003_1(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(17) = gas
	nop(GAS)
	s(11) = 1
	nop(CALL)
	s(11)= eq(s(11), 0)
	nop(ISZERO)
	s(12) = s(11)
	nop(DUP1)
	call(jump1003_1(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1003_2(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize)=>
	eq(s(12), 0)
	call(block1023_2(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize))

jump1003_2(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize)=>
	neq(s(12), 0)
	call(block1014_2(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize))

block1003_2(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(17) = gas
	nop(GAS)
	s(11) = 1
	nop(CALL)
	s(11)= eq(s(11), 0)
	nop(ISZERO)
	s(12) = s(11)
	nop(DUP1)
	call(jump1003_2(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1014_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize)=>
	s(11) = returndatasize
	nop(RETURNDATASIZE)
	s(12) = 0
	nop(PUSH1)
	s(13) = s(12)
	nop(DUP1)
	nop(RETURNDATACOPY)
	s(12) = returndatasize
	nop(RETURNDATASIZE)
	s(13) = 0
	nop(PUSH1)
	nop(REVERT)

block1014_1(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize)=>
	s(12) = returndatasize
	nop(RETURNDATASIZE)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(13)
	nop(DUP1)
	nop(RETURNDATACOPY)
	s(13) = returndatasize
	nop(RETURNDATASIZE)
	s(14) = 0
	nop(PUSH1)
	nop(REVERT)

block1014_2(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize)=>
	s(12) = returndatasize
	nop(RETURNDATASIZE)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(13)
	nop(DUP1)
	nop(RETURNDATACOPY)
	s(13) = returndatasize
	nop(RETURNDATASIZE)
	s(14) = 0
	nop(PUSH1)
	nop(REVERT)

jump1023_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize)=>
	geq(s(10), s(9))
	call(block1045_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

jump1023_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize)=>
	lt(s(10), s(9))
	call(block1041_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1023_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(7) = 64
	nop(PUSH1)
	s(7) = l(l0)
	nop(MLOAD)
	s(8) = returndatasize
	nop(RETURNDATASIZE)
	s(9) = 32
	nop(PUSH1)
	s(10) = s(8)
	nop(DUP2)
	call(jump1023_0(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize))
	nop(LT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1023_1(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(8) = 64
	nop(PUSH1)
	s(8) = l(l0)
	nop(MLOAD)
	s(9) = returndatasize
	nop(RETURNDATASIZE)
	s(10) = 32
	nop(PUSH1)
	s(11) = s(9)
	nop(DUP2)
	call(jump1023_1(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize))
	nop(LT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1023_1(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize)=>
	geq(s(11), s(10))
	call(block1045_1(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

jump1023_1(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize)=>
	lt(s(11), s(10))
	call(block1041_1(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

jump1023_2(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize)=>
	geq(s(11), s(10))
	call(block1045_2(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

jump1023_2(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize)=>
	lt(s(11), s(10))
	call(block1041_2(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1023_2(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(8) = 64
	nop(PUSH1)
	s(8) = l(l0)
	nop(MLOAD)
	s(9) = returndatasize
	nop(RETURNDATASIZE)
	s(10) = 32
	nop(PUSH1)
	s(11) = s(9)
	nop(DUP2)
	call(jump1023_2(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize))
	nop(LT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1041_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(9) = 0
	nop(PUSH1)
	s(10) = s(9)
	nop(DUP1)
	nop(REVERT)

block1041_1(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(10) = 0
	nop(PUSH1)
	s(11) = s(10)
	nop(DUP1)
	nop(REVERT)

block1041_2(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(10) = 0
	nop(PUSH1)
	s(11) = s(10)
	nop(DUP1)
	nop(REVERT)

block1045_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	nop(JUMPDEST)
	s(9) = s(7)
	nop(DUP2)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(8)
	nop(DUP1)
	s(10) = s(9)
	nop(DUP1)
	s(10) = l(l3)
	nop(MLOAD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	call(jump1045_0(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1045_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	lt(s(7), s(6))
	call(block1086_0(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

jump1045_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	geq(s(7), s(6))
	call(block1070_0(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

jump1045_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	lt(s(8), s(7))
	call(block1086_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

jump1045_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	geq(s(8), s(7))
	call(block1070_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

block1045_1(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	nop(JUMPDEST)
	s(10) = s(8)
	nop(DUP2)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(9)
	nop(DUP1)
	s(11) = s(10)
	nop(DUP1)
	s(11) = l(l3)
	nop(MLOAD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	call(jump1045_1(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1045_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	lt(s(8), s(7))
	call(block1086_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

jump1045_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	geq(s(8), s(7))
	call(block1070_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

block1045_2(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	nop(JUMPDEST)
	s(10) = s(8)
	nop(DUP2)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(9)
	nop(DUP1)
	s(11) = s(10)
	nop(DUP1)
	s(11) = l(l3)
	nop(MLOAD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	call(jump1045_2(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1070_0(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	s(6) = s(0)
	nop(DUP6)
	s(7) = 11
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(6)
	nop(DUP3)
	s(10) = s(7)
	nop(DUP3)
	s(10) = g(collectedNDAO)
	nop(SLOAD)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(6)
	s(6) = s(9)
	s(9) = s(10)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(8) = s(6)
	nop(DUP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	g(collectedNDAO) = s(7)
	nop(SSTORE)
	nop(POP)
	call(block1086_0(s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

block1070_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	s(7) = s(1)
	nop(DUP6)
	s(8) = 11
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(8)
	nop(DUP3)
	s(11) = g(collectedNDAO)
	nop(SLOAD)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(9) = s(7)
	nop(DUP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	g(collectedNDAO) = s(8)
	nop(SSTORE)
	nop(POP)
	call(block1086_1(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

block1070_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	s(7) = s(1)
	nop(DUP6)
	s(8) = 11
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(8)
	nop(DUP3)
	s(11) = g(collectedNDAO)
	nop(SLOAD)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(9) = s(7)
	nop(DUP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	g(collectedNDAO) = s(8)
	nop(SSTORE)
	nop(POP)
	call(block1086_2(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

block1086_0(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	nop(JUMPDEST)
	s(6) = address
	nop(ADDRESS)
	s(7) = s(1)
	s(1) = s(6)
	s(6) = s(7)
	nop(SWAP5)
	nop(POP)
	s(6) = 1757
	nop(PUSH2)
	call(block1757_0(s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(JUMP)

block1086_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	nop(JUMPDEST)
	s(7) = address
	nop(ADDRESS)
	s(8) = s(2)
	s(2) = s(7)
	s(7) = s(8)
	nop(SWAP5)
	nop(POP)
	s(7) = 1757
	nop(PUSH2)
	call(block1757_1(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(JUMP)

block1086_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	nop(JUMPDEST)
	s(7) = address
	nop(ADDRESS)
	s(8) = s(2)
	s(2) = s(7)
	s(7) = s(8)
	nop(SWAP5)
	nop(POP)
	s(7) = 1757
	nop(PUSH2)
	call(block1757_2(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(JUMP)

jump1094_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	leq(s(9), s(8))
	call(block1107_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))

jump1094_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	gt(s(9), s(8))
	call(block1106_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1094_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(7) = 2
	nop(PUSH1)
	s(8) = 3
	nop(PUSH1)
	s(9) = s(7)
	nop(DUP2)
	call(jump1094_0(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1106_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block1107_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(8) = 13
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(9) = g(state)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 255
	nop(PUSH1)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 3
	nop(PUSH1)
	s(10) = s(8)
	nop(DUP2)
	call(jump1107_0(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1107_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	leq(s(10), s(9))
	call(block1134_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))

jump1107_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	gt(s(10), s(9))
	call(block1133_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1133_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block1134_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	call(jump1134_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))
	nop(EQ)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1134_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	neq(s(8), s(7))
	call(block1756_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1134_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	eq(s(8), s(7))
	call(block1141_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))

jump1141_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	neq(s(8), s(7))
	call(block1236_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))

jump1141_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	eq(s(8), s(7))
	call(block1232_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1141_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	s(7) = 1
	nop(PUSH1)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	s(8) = 12
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gl = s(9)
	s(9) = fresh(0)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 255
	nop(PUSH1)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(8)= eq(s(8), 0)
	nop(ISZERO)
	s(8)= eq(s(8), 0)
	nop(ISZERO)
	call(jump1141_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1232_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(7) = 0
	nop(PUSH1)
	s(8) = s(7)
	nop(DUP1)
	nop(REVERT)

block1236_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(7) = 1
	nop(PUSH1)
	s(8) = 12
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	nop(DUP2)
	gl = s(10)
	s(10) = fresh(0)
	nop(SLOAD)
	s(11) = s(9)
	nop(DUP2)
	s(12) = 255
	nop(PUSH1)
	s(11) = s(12)*s(11)
	nop(MUL)
	s(11) = not(s(11))
	nop(NOT)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(7)
	nop(DUP4)
	s(11)= eq(s(11), 0)
	nop(ISZERO)
	s(11)= eq(s(11), 0)
	nop(ISZERO)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(9) = or(s(10), s(9))
	nop(OR)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gs(1) = s(9)
	gs(2) = s(8)
	nop(SSTORE)
	nop(POP)
	s(7) = 4
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(8) = g(neurodao)
	nop(SLOAD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 530965563
	nop(PUSH4)
	s(9) = caller
	nop(CALLER)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = s(8)
	nop(DUP3)
	s(12) = 4294967295
	nop(PUSH4)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 26959946667150639794667015087019630673637144422540572481103610249216
	nop(PUSH29)
	s(11) = s(12)*s(11)
	nop(MUL)
	s(12) = s(10)
	nop(DUP2)
	l(l3) = s(11)
	nop(MSTORE)
	s(11) = 4
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = s(11)
	nop(DUP2)
	l(l4) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(10) = 32
	nop(PUSH1)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(9)
	nop(DUP4)
	s(12) = s(13)-s(12)
	nop(SUB)
	s(13) = s(11)
	nop(DUP2)
	s(14) = 0
	nop(PUSH1)
	s(15) = s(7)
	nop(DUP8)
	s(16) = s(15)
	nop(DUP1)
	s(16) = extcodesize
	nop(EXTCODESIZE)
	s(16)= eq(s(16), 0)
	nop(ISZERO)
	s(17) = s(16)
	nop(DUP1)
	call(jump1236_0(s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1236_0(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	eq(s(17), 0)
	call(block1513_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, gas, returndatasize))

jump1236_0(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	neq(s(17), 0)
	call(block1509_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1509_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(17) = 0
	nop(PUSH1)
	s(18) = s(17)
	nop(DUP1)
	nop(REVERT)

jump1513_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, gas, returndatasize)=>
	eq(s(11), 0)
	call(block1533_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))

jump1513_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, gas, returndatasize)=>
	neq(s(11), 0)
	call(block1524_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize))

block1513_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, gas, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(16) = gas
	nop(GAS)
	s(10) = 1
	nop(CALL)
	s(10)= eq(s(10), 0)
	nop(ISZERO)
	s(11) = s(10)
	nop(DUP1)
	call(jump1513_0(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, gas, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1524_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize)=>
	s(11) = returndatasize
	nop(RETURNDATASIZE)
	s(12) = 0
	nop(PUSH1)
	s(13) = s(12)
	nop(DUP1)
	nop(RETURNDATACOPY)
	s(12) = returndatasize
	nop(RETURNDATASIZE)
	s(13) = 0
	nop(PUSH1)
	nop(REVERT)

jump1533_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	geq(s(10), s(9))
	call(block1555_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

jump1533_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	lt(s(10), s(9))
	call(block1551_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1533_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(7) = 64
	nop(PUSH1)
	s(7) = l(l0)
	nop(MLOAD)
	s(8) = returndatasize
	nop(RETURNDATASIZE)
	s(9) = 32
	nop(PUSH1)
	s(10) = s(8)
	nop(DUP2)
	call(jump1533_0(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(LT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1551_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(9) = 0
	nop(PUSH1)
	s(10) = s(9)
	nop(DUP1)
	nop(REVERT)

block1555_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(9) = s(7)
	nop(DUP2)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(8)
	nop(DUP1)
	s(10) = s(9)
	nop(DUP1)
	s(10) = l(l3)
	nop(MLOAD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	nop(POP)
	s(7) = 1000
	nop(PUSH2)
	s(8) = s(6)
	nop(DUP2)
	call(jump1555_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1555_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	lt(s(8), s(7))
	call(block1719_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

jump1555_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	geq(s(8), s(7))
	call(block1586_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

block1586_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	s(7) = 11
	nop(PUSH1)
	s(7) = g(collectedNDAO)
	nop(SLOAD)
	s(8) = 3
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	s(9) = 10
	nop(PUSH1)
	s(10) = 1250000
	nop(PUSH3)
	s(11) = 9
	nop(PUSH1)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(11) = s(9)
	nop(DUP2)
	call(jump1586_0(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1586_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(11), 0)
	call(block1670_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

jump1586_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(11), 0)
	call(block1669_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1669_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block1670_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(9) = s(10)/s(9)
	nop(DIV)
	s(8) = s(9)*s(8)
	nop(MUL)
	s(9) = s(7)
	nop(DUP2)
	call(jump1670_0(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1670_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(9), 0)
	call(block1681_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

jump1670_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(9), 0)
	call(block1680_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1680_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump1681_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(12), 0)
	call(block1703_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

jump1681_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(12), 0)
	call(block1702_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1681_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = 21000000
	nop(PUSH4)
	s(9) = s(6)
	nop(DUP3)
	s(10) = 10
	nop(PUSH1)
	s(11) = 1250000
	nop(PUSH3)
	s(12) = s(10)
	nop(DUP2)
	call(jump1681_0(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1702_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump1703_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(10), 0)
	call(block1714_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

jump1703_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(10), 0)
	call(block1713_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1703_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(10) = s(11)/s(10)
	nop(DIV)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(10) = s(8)
	nop(DUP2)
	call(jump1703_0(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1713_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block1714_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(1)
	s(1) = s(7)
	s(7) = s(8)
	nop(SWAP6)
	nop(POP)
	call(block1719_0(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

block1719_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(7)
	nop(DUP1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(8) = g(owner)
	nop(SLOAD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(2)
	s(2) = s(7)
	s(7) = s(8)
	nop(SWAP5)
	nop(POP)
	call(block1756_0(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

block1756_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	call(block1757_1(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

block1757_0(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(0)
	nop(DUP7)
	call(jump1757_0(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1757_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	gt(s(7), s(6))
	call(block1772_0(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1757_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	leq(s(7), s(6))
	call(block1768_0(s(5), s(4), s(3), s(2), s(1), s(0)))

block1757_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(1)
	nop(DUP7)
	call(jump1757_1(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1757_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	gt(s(8), s(7))
	call(block1772_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1757_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	leq(s(8), s(7))
	call(block1768_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1757_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(1)
	nop(DUP7)
	call(jump1757_2(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1757_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	gt(s(8), s(7))
	call(block1772_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1757_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	leq(s(8), s(7))
	call(block1768_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1768_0(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

block1768_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(7) = 0
	nop(PUSH1)
	s(8) = s(7)
	nop(DUP1)
	nop(REVERT)

block1768_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(7) = 0
	nop(PUSH1)
	s(8) = s(7)
	nop(DUP1)
	nop(REVERT)

block1772_0(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = 3
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = caller
	nop(CALLER)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	l(l1) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(6)
	nop(DUP2)
	l(l2) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	gl = s(6)
	s(6) = fresh(0)
	nop(SLOAD)
	s(7) = s(0)
	nop(DUP7)
	s(8) = 3
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	gl = s(8)
	s(8) = fresh(1)
	nop(SLOAD)
	s(7) = s(8)+s(7)
	nop(ADD)
	call(jump1772_0(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1772_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	gt(s(7), s(6))
	call(block1914_0(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1772_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	leq(s(7), s(6))
	call(block1910_0(s(5), s(4), s(3), s(2), s(1), s(0)))

block1772_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = 3
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	gl = s(7)
	s(7) = fresh(0)
	nop(SLOAD)
	s(8) = s(1)
	nop(DUP7)
	s(9) = 3
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = caller
	nop(CALLER)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l1) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	l(l2) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	gl = s(9)
	s(9) = fresh(1)
	nop(SLOAD)
	s(8) = s(9)+s(8)
	nop(ADD)
	call(jump1772_1(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1772_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	gt(s(8), s(7))
	call(block1914_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1772_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	leq(s(8), s(7))
	call(block1910_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1772_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = 3
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	gl = s(7)
	s(7) = fresh(0)
	nop(SLOAD)
	s(8) = s(1)
	nop(DUP7)
	s(9) = 3
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = caller
	nop(CALLER)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l1) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	l(l2) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	gl = s(9)
	s(9) = fresh(1)
	nop(SLOAD)
	s(8) = s(9)+s(8)
	nop(ADD)
	call(jump1772_2(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1772_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	gt(s(8), s(7))
	call(block1914_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1772_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	leq(s(8), s(7))
	call(block1910_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1910_0(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

block1910_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(7) = 0
	nop(PUSH1)
	s(8) = s(7)
	nop(DUP1)
	nop(REVERT)

block1910_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(7) = 0
	nop(PUSH1)
	s(8) = s(7)
	nop(DUP1)
	nop(REVERT)

block1914_0(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = s(0)
	nop(DUP6)
	s(7) = 3
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(1)
	nop(DUP8)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	gl = s(7)
	s(7) = fresh(0)
	nop(SLOAD)
	call(jump1914_0(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1914_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	geq(s(7), s(6))
	call(block1992_0(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1914_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	lt(s(7), s(6))
	call(block1988_0(s(5), s(4), s(3), s(2), s(1), s(0)))

block1914_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = s(1)
	nop(DUP6)
	s(8) = 3
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(2)
	nop(DUP8)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	call(jump1914_1(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1914_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	geq(s(8), s(7))
	call(block1992_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1914_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	lt(s(8), s(7))
	call(block1988_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1914_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = s(1)
	nop(DUP6)
	s(8) = 3
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(2)
	nop(DUP8)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	call(jump1914_2(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1914_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	geq(s(8), s(7))
	call(block1992_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1914_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	lt(s(8), s(7))
	call(block1988_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1988_0(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

block1988_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(7) = 0
	nop(PUSH1)
	s(8) = s(7)
	nop(DUP1)
	nop(REVERT)

block1988_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(7) = 0
	nop(PUSH1)
	s(8) = s(7)
	nop(DUP1)
	nop(REVERT)

jump1992_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(7), s(6))
	call(block2269_0(s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller))

jump1992_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(7), s(6))
	call(block2083_0(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

block1992_0(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = 1
	nop(PUSH1)
	s(6)= eq(s(6), 0)
	nop(ISZERO)
	s(6)= eq(s(6), 0)
	nop(ISZERO)
	s(7) = 6
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = 255
	nop(PUSH1)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	call(jump1992_0(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1992_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(8), s(7))
	call(block2269_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller))

jump1992_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(8), s(7))
	call(block2083_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

block1992_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = 1
	nop(PUSH1)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	s(8) = 6
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gl = s(9)
	s(9) = fresh(0)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 255
	nop(PUSH1)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(8)= eq(s(8), 0)
	nop(ISZERO)
	s(8)= eq(s(8), 0)
	nop(ISZERO)
	call(jump1992_1(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1992_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(8), s(7))
	call(block2269_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller))

jump1992_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(8), s(7))
	call(block2083_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

block1992_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = 1
	nop(PUSH1)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	s(8) = 6
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gl = s(9)
	s(9) = fresh(0)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 255
	nop(PUSH1)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(8)= eq(s(8), 0)
	nop(ISZERO)
	s(8)= eq(s(8), 0)
	nop(ISZERO)
	call(jump1992_2(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block2083_0(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	s(6) = 1
	nop(PUSH1)
	s(7) = 6
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	nop(DUP2)
	gl = s(9)
	s(9) = fresh(0)
	nop(SLOAD)
	s(10) = s(8)
	nop(DUP2)
	s(11) = 255
	nop(PUSH1)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(10) = not(s(10))
	nop(NOT)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(6)
	nop(DUP4)
	s(10)= eq(s(10), 0)
	nop(ISZERO)
	s(10)= eq(s(10), 0)
	nop(ISZERO)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(8) = or(s(9), s(8))
	nop(OR)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	s(6) = caller
	nop(CALLER)
	s(7) = 7
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = 8
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(9)
	nop(DUP2)
	s(11) = g(numberOfHolders)
	nop(SLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(9)
	s(9) = s(12)
	s(12) = s(13)
	nop(SWAP3)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(13) = 1
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(POP)
	g(numberOfHolders) = s(10)
	nop(SSTORE)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	nop(DUP2)
	gl = s(9)
	s(9) = fresh(1)
	nop(SLOAD)
	s(10) = s(8)
	nop(DUP2)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(10) = not(s(10))
	nop(NOT)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(6)
	nop(DUP4)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(8) = or(s(9), s(8))
	nop(OR)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	call(block2269_0(s(5),s(4),s(3),s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0), caller))

block2083_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	s(7) = 1
	nop(PUSH1)
	s(8) = 6
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	nop(DUP2)
	gl = s(10)
	s(10) = fresh(0)
	nop(SLOAD)
	s(11) = s(9)
	nop(DUP2)
	s(12) = 255
	nop(PUSH1)
	s(11) = s(12)*s(11)
	nop(MUL)
	s(11) = not(s(11))
	nop(NOT)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(7)
	nop(DUP4)
	s(11)= eq(s(11), 0)
	nop(ISZERO)
	s(11)= eq(s(11), 0)
	nop(ISZERO)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(9) = or(s(10), s(9))
	nop(OR)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gs(1) = s(9)
	gs(2) = s(8)
	nop(SSTORE)
	nop(POP)
	s(7) = caller
	nop(CALLER)
	s(8) = 7
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = 8
	nop(PUSH1)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(10)
	nop(DUP2)
	s(12) = g(numberOfHolders)
	nop(SLOAD)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(10)
	s(10) = s(13)
	s(13) = s(14)
	nop(SWAP3)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = 1
	nop(PUSH1)
	s(13) = s(14)+s(13)
	nop(ADD)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	nop(POP)
	g(numberOfHolders) = s(11)
	nop(SSTORE)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	nop(DUP2)
	gl = s(10)
	s(10) = fresh(1)
	nop(SLOAD)
	s(11) = s(9)
	nop(DUP2)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = s(12)*s(11)
	nop(MUL)
	s(11) = not(s(11))
	nop(NOT)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(7)
	nop(DUP4)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(9) = or(s(10), s(9))
	nop(OR)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gs(1) = s(9)
	gs(2) = s(8)
	nop(SSTORE)
	nop(POP)
	call(block2269_1(s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0), caller))

block2083_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	s(7) = 1
	nop(PUSH1)
	s(8) = 6
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	nop(DUP2)
	gl = s(10)
	s(10) = fresh(0)
	nop(SLOAD)
	s(11) = s(9)
	nop(DUP2)
	s(12) = 255
	nop(PUSH1)
	s(11) = s(12)*s(11)
	nop(MUL)
	s(11) = not(s(11))
	nop(NOT)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(7)
	nop(DUP4)
	s(11)= eq(s(11), 0)
	nop(ISZERO)
	s(11)= eq(s(11), 0)
	nop(ISZERO)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(9) = or(s(10), s(9))
	nop(OR)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gs(1) = s(9)
	gs(2) = s(8)
	nop(SSTORE)
	nop(POP)
	s(7) = caller
	nop(CALLER)
	s(8) = 7
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = 8
	nop(PUSH1)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(10)
	nop(DUP2)
	s(12) = g(numberOfHolders)
	nop(SLOAD)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(10)
	s(10) = s(13)
	s(13) = s(14)
	nop(SWAP3)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = 1
	nop(PUSH1)
	s(13) = s(14)+s(13)
	nop(ADD)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	nop(POP)
	g(numberOfHolders) = s(11)
	nop(SSTORE)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	nop(DUP2)
	gl = s(10)
	s(10) = fresh(1)
	nop(SLOAD)
	s(11) = s(9)
	nop(DUP2)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = s(12)*s(11)
	nop(MUL)
	s(11) = not(s(11))
	nop(NOT)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(7)
	nop(DUP4)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(9) = or(s(10), s(9))
	nop(OR)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gs(1) = s(9)
	gs(2) = s(8)
	nop(SSTORE)
	nop(POP)
	call(block2269_2(s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0), caller))

block2269_0(s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = s(0)
	nop(DUP6)
	s(7) = 3
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(6)
	nop(DUP3)
	s(10) = s(7)
	nop(DUP3)
	gl = s(10)
	s(10) = fresh(0)
	nop(SLOAD)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(6)
	s(6) = s(9)
	s(9) = s(10)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(8) = s(6)
	nop(DUP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	s(6) = s(0)
	nop(DUP6)
	s(7) = 3
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(1)
	nop(DUP8)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(6)
	nop(DUP3)
	s(10) = s(7)
	nop(DUP3)
	gl = s(10)
	s(10) = fresh(1)
	nop(SLOAD)
	s(9) = s(10)-s(9)
	nop(SUB)
	s(10) = s(6)
	s(6) = s(9)
	s(9) = s(10)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(8) = s(6)
	nop(DUP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(1)
	nop(DUP6)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 100389287136786176327247604509743168900146139575972864366142685224231313322991
	nop(PUSH32)
	s(9) = s(0)
	nop(DUP9)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = s(11)
	nop(DUP2)
	l(l3) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(10) = s(11)-s(10)
	nop(SUB)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	nop(LOG3)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	skip
	nop(STOP)

block2269_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = s(1)
	nop(DUP6)
	s(8) = 3
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(8)
	nop(DUP3)
	gl = s(11)
	s(11) = fresh(0)
	nop(SLOAD)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(9) = s(7)
	nop(DUP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gs(1) = s(9)
	gs(2) = s(8)
	nop(SSTORE)
	nop(POP)
	s(7) = s(1)
	nop(DUP6)
	s(8) = 3
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(2)
	nop(DUP8)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(8)
	nop(DUP3)
	gl = s(11)
	s(11) = fresh(1)
	nop(SLOAD)
	s(10) = s(11)-s(10)
	nop(SUB)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(9) = s(7)
	nop(DUP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gs(1) = s(9)
	gs(2) = s(8)
	nop(SSTORE)
	nop(POP)
	s(7) = caller
	nop(CALLER)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(2)
	nop(DUP6)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 100389287136786176327247604509743168900146139575972864366142685224231313322991
	nop(PUSH32)
	s(10) = s(1)
	nop(DUP9)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	nop(DUP3)
	s(14) = s(12)
	nop(DUP2)
	l(l3) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	s(11) = s(12)-s(11)
	nop(SUB)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	nop(LOG3)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	skip
	nop(STOP)

block2269_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = s(1)
	nop(DUP6)
	s(8) = 3
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(8)
	nop(DUP3)
	gl = s(11)
	s(11) = fresh(0)
	nop(SLOAD)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(9) = s(7)
	nop(DUP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gs(1) = s(9)
	gs(2) = s(8)
	nop(SSTORE)
	nop(POP)
	s(7) = s(1)
	nop(DUP6)
	s(8) = 3
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(2)
	nop(DUP8)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(8)
	nop(DUP3)
	gl = s(11)
	s(11) = fresh(1)
	nop(SLOAD)
	s(10) = s(11)-s(10)
	nop(SUB)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(9) = s(7)
	nop(DUP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gs(1) = s(9)
	gs(2) = s(8)
	nop(SSTORE)
	nop(POP)
	s(7) = caller
	nop(CALLER)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(2)
	nop(DUP6)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 100389287136786176327247604509743168900146139575972864366142685224231313322991
	nop(PUSH32)
	s(10) = s(1)
	nop(DUP9)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	nop(DUP3)
	s(14) = s(12)
	nop(DUP2)
	l(l3) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	s(11) = s(12)-s(11)
	nop(SUB)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	nop(LOG3)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	skip
	nop(STOP)

block395_0(s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(1) = 0
	nop(PUSH1)
	s(2) = s(1)
	nop(DUP1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = 0
	nop(PUSH1)
	s(6) = s(5)
	nop(DUP1)
	s(7) = 1
	nop(PUSH1)
	s(8) = 3
	nop(PUSH1)
	s(9) = s(7)
	nop(DUP2)
	call(jump395_0(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump395_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(9), s(8))
	call(block417_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump395_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(9), s(8))
	call(block416_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block416_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump417_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(10), s(9))
	call(block444_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump417_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(10), s(9))
	call(block443_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block417_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(8) = 13
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(9) = g(state)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 255
	nop(PUSH1)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 3
	nop(PUSH1)
	s(10) = s(8)
	nop(DUP2)
	call(jump417_0(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block443_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump444_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	neq(s(8), s(7))
	call(block1094_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))

jump444_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	eq(s(8), s(7))
	call(block451_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

block444_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	call(jump444_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(EQ)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block451_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	s(7) = 0
	nop(PUSH1)
	s(8) = 3
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = address
	nop(ADDRESS)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	call(jump451_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump451_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(8), s(7))
	call(block528_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump451_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(8), s(7))
	call(block524_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block524_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(7) = 0
	nop(PUSH1)
	s(8) = s(7)
	nop(DUP1)
	nop(REVERT)

jump528_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	lt(s(8), s(7))
	call(block547_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump528_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	geq(s(8), s(7))
	call(block543_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block528_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(7) = 500000
	nop(PUSH3)
	s(8) = 9
	nop(PUSH1)
	s(8) = g(collectedUSD)
	nop(SLOAD)
	call(jump528_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block543_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(7) = 0
	nop(PUSH1)
	s(8) = s(7)
	nop(DUP1)
	nop(REVERT)

jump547_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	neq(s(9), 0)
	call(block573_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump547_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	eq(s(9), 0)
	call(block572_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block547_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(7) = callvalue
	nop(CALLVALUE)
	s(8) = s(3)
	s(3) = s(7)
	s(7) = s(8)
	nop(SWAP4)
	nop(POP)
	s(7) = 1000000000000000000
	nop(PUSH8)
	s(8) = 5
	nop(PUSH1)
	s(8) = g(etherPrice)
	nop(SLOAD)
	s(9) = s(3)
	nop(DUP6)
	s(8) = s(9)*s(8)
	nop(MUL)
	s(9) = s(7)
	nop(DUP2)
	call(jump547_0(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block572_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block573_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = s(4)
	s(4) = s(7)
	s(7) = s(8)
	nop(SWAP3)
	nop(POP)
	s(7) = 500000
	nop(PUSH3)
	s(8) = s(4)
	nop(DUP4)
	s(9) = 9
	nop(PUSH1)
	s(9) = g(collectedUSD)
	nop(SLOAD)
	s(8) = s(9)+s(8)
	nop(ADD)
	call(jump573_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump573_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(8), s(7))
	call(block704_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))

jump573_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(8), s(7))
	call(block592_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

block592_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	s(7) = 9
	nop(PUSH1)
	s(7) = g(collectedUSD)
	nop(SLOAD)
	s(8) = 500000
	nop(PUSH3)
	s(7) = s(8)-s(7)
	nop(SUB)
	s(8) = s(4)
	s(4) = s(7)
	s(7) = s(8)
	nop(SWAP3)
	nop(POP)
	s(7) = 5
	nop(PUSH1)
	s(7) = g(etherPrice)
	nop(SLOAD)
	s(8) = 1000000000000000000
	nop(PUSH8)
	s(9) = s(4)
	nop(DUP5)
	s(8) = s(9)*s(8)
	nop(MUL)
	s(9) = s(7)
	nop(DUP2)
	call(jump592_0(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump592_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	neq(s(9), 0)
	call(block624_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump592_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	eq(s(9), 0)
	call(block623_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block623_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block624_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = s(3)
	s(3) = s(7)
	s(7) = s(8)
	nop(SWAP4)
	nop(POP)
	s(7) = caller
	nop(CALLER)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 3000000
	nop(PUSH3)
	s(9) = s(3)
	nop(DUP6)
	s(10) = callvalue
	nop(CALLVALUE)
	s(9) = s(10)-s(9)
	nop(SUB)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = 0
	nop(PUSH1)
	s(12) = 64
	nop(PUSH1)
	s(12) = l(l0)
	nop(MLOAD)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(10)
	nop(DUP4)
	s(13) = s(14)-s(13)
	nop(SUB)
	s(14) = s(12)
	nop(DUP2)
	s(15) = s(9)
	nop(DUP6)
	s(16) = s(7)
	nop(DUP9)
	s(17) = s(8)
	nop(DUP9)
	s(11) = 1
	nop(CALL)
	s(12) = s(7)
	s(7) = s(11)
	s(11) = s(12)
	nop(SWAP4)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	call(jump624_0(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump624_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	neq(s(7), 0)
	call(block689_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))

jump624_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	eq(s(7), 0)
	call(block685_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block685_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(7) = 0
	nop(PUSH1)
	s(8) = s(7)
	nop(DUP1)
	nop(REVERT)

block689_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(7) = 500000
	nop(PUSH3)
	s(8) = 9
	nop(PUSH1)
	s(9) = s(7)
	nop(DUP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	g(collectedUSD) = s(8)
	nop(SSTORE)
	nop(POP)
	s(7) = 721
	nop(PUSH2)
	call(block721_0(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))
	nop(JUMP)

block704_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(7) = s(4)
	nop(DUP3)
	s(8) = 9
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(8)
	nop(DUP3)
	s(11) = g(collectedUSD)
	nop(SLOAD)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(9) = s(7)
	nop(DUP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	g(collectedUSD) = s(8)
	nop(SSTORE)
	nop(POP)
	call(block721_0(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))

jump721_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(8), s(7))
	call(block743_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))

jump721_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(8), s(7))
	call(block735_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block721_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(7) = 1506815999
	nop(PUSH4)
	s(8) = timestamp
	nop(TIMESTAMP)
	call(jump721_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block735_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	s(7) = 50
	nop(PUSH1)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	nop(POP)
	s(7) = 794
	nop(PUSH2)
	call(block794_1(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(JUMP)

jump743_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(8), s(7))
	call(block765_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))

jump743_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(8), s(7))
	call(block757_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block743_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(7) = 1507247999
	nop(PUSH4)
	s(8) = timestamp
	nop(TIMESTAMP)
	call(jump743_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block757_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	s(7) = 50
	nop(PUSH1)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	nop(POP)
	s(7) = 793
	nop(PUSH2)
	call(block793_1(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(JUMP)

jump765_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(8), s(7))
	call(block787_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

jump765_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(8), s(7))
	call(block779_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block765_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(7) = 1507766399
	nop(PUSH4)
	s(8) = timestamp
	nop(TIMESTAMP)
	call(jump765_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block779_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	s(7) = 65
	nop(PUSH1)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	nop(POP)
	s(7) = 792
	nop(PUSH2)
	call(block792_2(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(JUMP)

block787_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(7) = 70
	nop(PUSH1)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	nop(POP)
	call(block792_1(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block792_0(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	call(block793_0(s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block792_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	call(block793_1(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block792_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	call(block793_2(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block793_0(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	call(block794_0(s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block793_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	call(block794_1(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block793_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	call(block794_2(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block794_0(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(6) = s(4)
	nop(DUP2)
	s(7) = 100
	nop(PUSH1)
	s(8) = s(3)
	nop(DUP5)
	s(7) = s(8)*s(7)
	nop(MUL)
	s(8) = s(6)
	nop(DUP2)
	call(jump794_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump794_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	neq(s(8), 0)
	call(block808_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

jump794_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	eq(s(8), 0)
	call(block807_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block794_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(7) = s(5)
	nop(DUP2)
	s(8) = 100
	nop(PUSH1)
	s(9) = s(4)
	nop(DUP5)
	s(8) = s(9)*s(8)
	nop(MUL)
	s(9) = s(7)
	nop(DUP2)
	call(jump794_1(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump794_1(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	neq(s(9), 0)
	call(block808_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

jump794_1(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	eq(s(9), 0)
	call(block807_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

jump794_2(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	neq(s(9), 0)
	call(block808_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

jump794_2(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	eq(s(9), 0)
	call(block807_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block794_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(7) = s(5)
	nop(DUP2)
	s(8) = 100
	nop(PUSH1)
	s(9) = s(4)
	nop(DUP5)
	s(8) = s(9)*s(8)
	nop(MUL)
	s(9) = s(7)
	nop(DUP2)
	call(jump794_2(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block807_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block807_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block807_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump808_0(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	eq(s(17), 0)
	call(block1003_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize))

jump808_0(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	neq(s(17), 0)
	call(block999_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block808_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(6) = s(7)/s(6)
	nop(DIV)
	s(7) = s(0)
	s(0) = s(6)
	s(6) = s(7)
	nop(SWAP6)
	nop(POP)
	s(6) = 1000
	nop(PUSH2)
	s(7) = 4
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(8) = g(neurodao)
	nop(SLOAD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1889567281
	nop(PUSH4)
	s(9) = caller
	nop(CALLER)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = s(8)
	nop(DUP3)
	s(12) = 4294967295
	nop(PUSH4)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 26959946667150639794667015087019630673637144422540572481103610249216
	nop(PUSH29)
	s(11) = s(12)*s(11)
	nop(MUL)
	s(12) = s(10)
	nop(DUP2)
	l(l3) = s(11)
	nop(MSTORE)
	s(11) = 4
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = s(11)
	nop(DUP2)
	l(l4) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(10) = 32
	nop(PUSH1)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(9)
	nop(DUP4)
	s(12) = s(13)-s(12)
	nop(SUB)
	s(13) = s(11)
	nop(DUP2)
	s(14) = 0
	nop(PUSH1)
	s(15) = s(7)
	nop(DUP8)
	s(16) = s(15)
	nop(DUP1)
	s(16) = extcodesize
	nop(EXTCODESIZE)
	s(16)= eq(s(16), 0)
	nop(ISZERO)
	s(17) = s(16)
	nop(DUP1)
	call(jump808_0(s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump808_1(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	eq(s(18), 0)
	call(block1003_1(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize))

jump808_1(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	neq(s(18), 0)
	call(block999_1(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block808_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = s(1)
	s(1) = s(7)
	s(7) = s(8)
	nop(SWAP6)
	nop(POP)
	s(7) = 1000
	nop(PUSH2)
	s(8) = 4
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(9) = g(neurodao)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1889567281
	nop(PUSH4)
	s(10) = caller
	nop(CALLER)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(9)
	nop(DUP3)
	s(13) = 4294967295
	nop(PUSH4)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 26959946667150639794667015087019630673637144422540572481103610249216
	nop(PUSH29)
	s(12) = s(13)*s(12)
	nop(MUL)
	s(13) = s(11)
	nop(DUP2)
	l(l3) = s(12)
	nop(MSTORE)
	s(12) = 4
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	nop(DUP3)
	s(14) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(13) = and(s(14), s(13))
	nop(AND)
	s(14) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(13) = and(s(14), s(13))
	nop(AND)
	s(14) = s(12)
	nop(DUP2)
	l(l4) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(11) = 32
	nop(PUSH1)
	s(12) = 64
	nop(PUSH1)
	s(12) = l(l0)
	nop(MLOAD)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(10)
	nop(DUP4)
	s(13) = s(14)-s(13)
	nop(SUB)
	s(14) = s(12)
	nop(DUP2)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(8)
	nop(DUP8)
	s(17) = s(16)
	nop(DUP1)
	s(17) = extcodesize
	nop(EXTCODESIZE)
	s(17)= eq(s(17), 0)
	nop(ISZERO)
	s(18) = s(17)
	nop(DUP1)
	call(jump808_1(s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump808_2(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	eq(s(18), 0)
	call(block1003_2(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize))

jump808_2(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	neq(s(18), 0)
	call(block999_2(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block808_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = s(1)
	s(1) = s(7)
	s(7) = s(8)
	nop(SWAP6)
	nop(POP)
	s(7) = 1000
	nop(PUSH2)
	s(8) = 4
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(9) = g(neurodao)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1889567281
	nop(PUSH4)
	s(10) = caller
	nop(CALLER)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(9)
	nop(DUP3)
	s(13) = 4294967295
	nop(PUSH4)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 26959946667150639794667015087019630673637144422540572481103610249216
	nop(PUSH29)
	s(12) = s(13)*s(12)
	nop(MUL)
	s(13) = s(11)
	nop(DUP2)
	l(l3) = s(12)
	nop(MSTORE)
	s(12) = 4
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	nop(DUP3)
	s(14) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(13) = and(s(14), s(13))
	nop(AND)
	s(14) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(13) = and(s(14), s(13))
	nop(AND)
	s(14) = s(12)
	nop(DUP2)
	l(l4) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(11) = 32
	nop(PUSH1)
	s(12) = 64
	nop(PUSH1)
	s(12) = l(l0)
	nop(MLOAD)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(10)
	nop(DUP4)
	s(13) = s(14)-s(13)
	nop(SUB)
	s(14) = s(12)
	nop(DUP2)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(8)
	nop(DUP8)
	s(17) = s(16)
	nop(DUP1)
	s(17) = extcodesize
	nop(EXTCODESIZE)
	s(17)= eq(s(17), 0)
	nop(ISZERO)
	s(18) = s(17)
	nop(DUP1)
	call(jump808_2(s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block999_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(17) = 0
	nop(PUSH1)
	s(18) = s(17)
	nop(DUP1)
	nop(REVERT)

block999_1(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(18) = 0
	nop(PUSH1)
	s(19) = s(18)
	nop(DUP1)
	nop(REVERT)

block999_2(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(18) = 0
	nop(PUSH1)
	s(19) = s(18)
	nop(DUP1)
	nop(REVERT)

