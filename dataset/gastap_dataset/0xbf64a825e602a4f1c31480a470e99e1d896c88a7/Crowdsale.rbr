block0(g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	s(0) = 128
	nop(PUSH1)
	s(1) = 64
	nop(PUSH1)
	l(l0) = s(0)
	nop(MSTORE)
	s(0) = 4
	nop(PUSH1)
	s(1) = calldatasize
	nop(CALLDATASIZE)
	call(jump0(s(1),s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))
	nop(LT)
	nop(PUSH2)
	nop(JUMPI)

jump0(s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	lt(s(1), s(0))
	call(block274(g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump0(s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	geq(s(1), s(0))
	call(block13(g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))

jump13(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block2411(s(0),g(numberOfHolders), l(l3), l(l0), callvalue))

jump13(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block65(s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))

block13(g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	s(0) = 0
	nop(PUSH1)
	s(0) = calldataload
	nop(CALLDATALOAD)
	s(1) = 26959946667150639794667015087019630673637144422540572481103610249216
	nop(PUSH29)
	s(2) = s(0)
	s(0) = s(1)
	s(1) = s(2)
	nop(SWAP1)
	s(0) = s(1)/s(0)
	nop(DIV)
	s(1) = 4294967295
	nop(PUSH4)
	s(0) = and(s(1), s(0))
	nop(AND)
	s(1) = s(0)
	nop(DUP1)
	s(2) = 26855346
	nop(PUSH4)
	call(jump13(s(2),s(1),s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump65(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block2454(s(0),g(collectedNDAO), l(l3), l(l0), callvalue))

jump65(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block76(s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))

block65(s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 157664434
	nop(PUSH4)
	call(jump65(s(2),s(1),s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block76(s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 404098525
	nop(PUSH4)
	call(jump76(s(2),s(1),s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump76(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block2497(s(0),g(totalSupply), l(l3), l(l0), callvalue))

jump76(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(totalSupply), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block87(s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))

block87(s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 413514716
	nop(PUSH4)
	call(jump87(s(2),s(1),s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump87(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block2540(s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue))

jump87(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block98(s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))

block98(s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 536265281
	nop(PUSH4)
	call(jump98(s(2),s(1),s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump98(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block2631(s(0),g(collectedUSD), l(l3), l(l0), callvalue))

jump98(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block109(s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))

block109(s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 655915409
	nop(PUSH4)
	call(jump109(s(2),s(1),s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump109(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block2674(s(0),g(presaleOwner), g(etherPrice), g(owner), calldatasize, caller, callvalue, etherPrice))

jump109(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, etherPrice, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block120(s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))

jump120(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block2719(s(0),g(state), g(owner), l(l3), l(l0), caller, callvalue))

jump120(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block131(s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))

block120(s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1775409202
	nop(PUSH4)
	call(jump120(s(2),s(1),s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block131(s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1851865724
	nop(PUSH4)
	call(jump131(s(2),s(1),s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump131(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block2742(s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue))

jump131(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block142(s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))

block142(s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1889567281
	nop(PUSH4)
	call(jump142(s(2),s(1),s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump142(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block2833(s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue))

jump142(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block153(s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))

jump153(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block2920(s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue))

jump153(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block164(s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))

block153(s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2172211816
	nop(PUSH4)
	call(jump153(s(2),s(1),s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldataload, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump164(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block3029(s(0),g(neurodao), l(l3), l(l0), callvalue))

jump164(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block175(s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))

block164(s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2313023475
	nop(PUSH4)
	call(jump164(s(2),s(1),s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block175(s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2376452955
	nop(PUSH4)
	call(jump175(s(2),s(1),s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump175(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block3116(s(0),g(owner), l(l3), l(l0), callvalue))

jump175(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block186(s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))

jump186(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block3203(s(0),g(presaleOwner), l(l3), l(l0), callvalue))

jump186(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block197(s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))

block186(s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2626265354
	nop(PUSH4)
	call(jump186(s(2),s(1),s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump197(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block3290(s(0),g(etherPrice), l(l3), l(l0), callvalue))

jump197(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block208(s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))

block197(s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2653976917
	nop(PUSH4)
	call(jump197(s(2),s(1),s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block208(s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2801392353
	nop(PUSH4)
	call(jump208(s(2),s(1),s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump208(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block3333(s(0),g(newOwner), g(owner), calldatasize, caller, callvalue, owner))

jump208(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, owner, presaleOwner, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block219(s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, presaleOwner, returndatasize, timestamp))

block219(s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, presaleOwner, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2877209550
	nop(PUSH4)
	call(jump219(s(2),s(1),s(0),g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, presaleOwner, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump219(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, presaleOwner, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block3400(s(0),g(state), g(presaleOwner), g(owner), l(l3), l(l0), calldatasize, caller, callvalue, presaleOwner))

jump219(s(2), s(1), s(0), g(state), g(collectedNDAO), g(presaleOwner), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, calldatasize, caller, callvalue, extcodesize, gas, presaleOwner, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block230(s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump230(s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block3467(s(0),g(state), g(owner), l(l3), l(l0), caller, callvalue))

jump230(s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block241(s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

block230(s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3087850742
	nop(PUSH4)
	call(jump230(s(2),s(1),s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump241(s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block3490(s(0),g(newOwner), g(owner), caller, callvalue))

jump241(s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block252(s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

block241(s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3181079942
	nop(PUSH4)
	call(jump241(s(2),s(1),s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block252(s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3248329723
	nop(PUSH4)
	call(jump252(s(2),s(1),s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump252(s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block3513(s(0),g(state), l(l3), l(l0), callvalue))

jump252(s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block263(s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

block263(s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3572374928
	nop(PUSH4)
	call(jump263(s(2),s(1),s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump263(s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block3570(s(0),g(newOwner), l(l3), l(l0), callvalue))

jump263(s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(newOwner), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block274_0(s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump274(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(8), s(7))
	call(block296(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump274(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(8), s(7))
	call(block295(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block274(g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(0) = 0
	nop(PUSH1)
	s(1) = s(0)
	nop(DUP1)
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(4)
	nop(DUP1)
	s(6) = 1
	nop(PUSH1)
	s(7) = 3
	nop(PUSH1)
	s(8) = s(6)
	nop(DUP2)
	call(jump274(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block295(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump296(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(9), s(8))
	call(block323(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump296(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(9), s(8))
	call(block322(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block296(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(7) = 13
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(8) = g(state)
	nop(SLOAD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = 255
	nop(PUSH1)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 3
	nop(PUSH1)
	s(9) = s(7)
	nop(DUP2)
	call(jump296(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block322(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block323(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	call(jump323(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(EQ)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump323(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	neq(s(7), s(6))
	call(block973(s(5), s(4), s(3), s(2), s(1), s(0),g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))

jump323(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	eq(s(7), s(6))
	call(block330(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

block330(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	s(6) = 0
	nop(PUSH1)
	s(7) = 3
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = address
	nop(ADDRESS)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	gl = s(7)
	s(7) = fresh(0)
	nop(SLOAD)
	call(jump330(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump330(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(7), s(6))
	call(block407(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump330(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(7), s(6))
	call(block403(s(5), s(4), s(3), s(2), s(1), s(0)))

block403(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

jump407(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	lt(s(7), s(6))
	call(block426(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump407(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	geq(s(7), s(6))
	call(block422(s(5), s(4), s(3), s(2), s(1), s(0)))

block407(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(6) = 500000
	nop(PUSH3)
	s(7) = 9
	nop(PUSH1)
	s(7) = g(collectedUSD)
	nop(SLOAD)
	call(jump407(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block422(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

block426(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(6) = callvalue
	nop(CALLVALUE)
	s(7) = s(2)
	s(2) = s(6)
	s(6) = s(7)
	nop(SWAP4)
	nop(POP)
	s(6) = 1000000000000000000
	nop(PUSH8)
	s(7) = 5
	nop(PUSH1)
	s(7) = g(etherPrice)
	nop(SLOAD)
	s(8) = s(2)
	nop(DUP6)
	s(7) = s(8)*s(7)
	nop(MUL)
	s(8) = s(6)
	nop(DUP2)
	call(jump426(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump426(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	neq(s(8), 0)
	call(block452(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump426(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	eq(s(8), 0)
	call(block451(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block451(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block452(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(6) = s(7)/s(6)
	nop(DIV)
	s(7) = s(3)
	s(3) = s(6)
	s(6) = s(7)
	nop(SWAP3)
	nop(POP)
	s(6) = 500000
	nop(PUSH3)
	s(7) = s(3)
	nop(DUP4)
	s(8) = 9
	nop(PUSH1)
	s(8) = g(collectedUSD)
	nop(SLOAD)
	s(7) = s(8)+s(7)
	nop(ADD)
	call(jump452(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump452(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(7), s(6))
	call(block583(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))

jump452(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(7), s(6))
	call(block471(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump471(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	neq(s(8), 0)
	call(block503(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump471(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	eq(s(8), 0)
	call(block502(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block471(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	s(6) = 9
	nop(PUSH1)
	s(6) = g(collectedUSD)
	nop(SLOAD)
	s(7) = 500000
	nop(PUSH3)
	s(6) = s(7)-s(6)
	nop(SUB)
	s(7) = s(3)
	s(3) = s(6)
	s(6) = s(7)
	nop(SWAP3)
	nop(POP)
	s(6) = 5
	nop(PUSH1)
	s(6) = g(etherPrice)
	nop(SLOAD)
	s(7) = 1000000000000000000
	nop(PUSH8)
	s(8) = s(3)
	nop(DUP5)
	s(7) = s(8)*s(7)
	nop(MUL)
	s(8) = s(6)
	nop(DUP2)
	call(jump471(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block502(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block503(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(6) = s(7)/s(6)
	nop(DIV)
	s(7) = s(2)
	s(2) = s(6)
	s(6) = s(7)
	nop(SWAP4)
	nop(POP)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = 3000000
	nop(PUSH3)
	s(8) = s(2)
	nop(DUP6)
	s(9) = callvalue
	nop(CALLVALUE)
	s(8) = s(9)-s(8)
	nop(SUB)
	s(9) = 64
	nop(PUSH1)
	s(9) = l(l0)
	nop(MLOAD)
	s(10) = 0
	nop(PUSH1)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(9)
	nop(DUP4)
	s(12) = s(13)-s(12)
	nop(SUB)
	s(13) = s(11)
	nop(DUP2)
	s(14) = s(8)
	nop(DUP6)
	s(15) = s(6)
	nop(DUP9)
	s(16) = s(7)
	nop(DUP9)
	s(10) = 1
	nop(CALL)
	s(11) = s(6)
	s(6) = s(10)
	s(10) = s(11)
	nop(SWAP4)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	call(jump503(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump503(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	neq(s(6), 0)
	call(block568(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))

jump503(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	eq(s(6), 0)
	call(block564(s(5), s(4), s(3), s(2), s(1), s(0)))

block564(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

block568(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(6) = 500000
	nop(PUSH3)
	s(7) = 9
	nop(PUSH1)
	s(8) = s(6)
	nop(DUP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	g(collectedUSD) = s(7)
	nop(SSTORE)
	nop(POP)
	s(6) = 600
	nop(PUSH2)
	call(block600(s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))
	nop(JUMP)

block583(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(6) = s(3)
	nop(DUP3)
	s(7) = 9
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(6)
	nop(DUP3)
	s(10) = s(7)
	nop(DUP3)
	s(10) = g(collectedUSD)
	nop(SLOAD)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(6)
	s(6) = s(9)
	s(9) = s(10)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(8) = s(6)
	nop(DUP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	g(collectedUSD) = s(7)
	nop(SSTORE)
	nop(POP)
	call(block600(s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))

block600(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(6) = 1506815999
	nop(PUSH4)
	s(7) = timestamp
	nop(TIMESTAMP)
	call(jump600(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump600(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(7), s(6))
	call(block622(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))

jump600(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(7), s(6))
	call(block614(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block614(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	s(6) = 50
	nop(PUSH1)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	nop(POP)
	s(6) = 673
	nop(PUSH2)
	call(block673(s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(JUMP)

jump622(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(7), s(6))
	call(block644(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))

jump622(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(7), s(6))
	call(block636(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block622(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(6) = 1507247999
	nop(PUSH4)
	s(7) = timestamp
	nop(TIMESTAMP)
	call(jump622(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block636(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	s(6) = 50
	nop(PUSH1)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	nop(POP)
	s(6) = 672
	nop(PUSH2)
	call(block672(s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(JUMP)

jump644(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(7), s(6))
	call(block666(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

jump644(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(7), s(6))
	call(block658(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block644(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(6) = 1507766399
	nop(PUSH4)
	s(7) = timestamp
	nop(TIMESTAMP)
	call(jump644(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block658(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	s(6) = 65
	nop(PUSH1)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	nop(POP)
	s(6) = 671
	nop(PUSH2)
	call(block671_0(s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(JUMP)

block666(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(6) = 70
	nop(PUSH1)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	nop(POP)
	call(block671(s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block671(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	call(block672(s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block672(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	call(block673(s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block673(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(6) = s(4)
	nop(DUP2)
	s(7) = 100
	nop(PUSH1)
	s(8) = s(3)
	nop(DUP5)
	s(7) = s(8)*s(7)
	nop(MUL)
	s(8) = s(6)
	nop(DUP2)
	call(jump673(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump673(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	neq(s(8), 0)
	call(block687(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

jump673(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	eq(s(8), 0)
	call(block686(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block686(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block687(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(6) = s(7)/s(6)
	nop(DIV)
	s(7) = s(0)
	s(0) = s(6)
	s(6) = s(7)
	nop(SWAP6)
	nop(POP)
	s(6) = 1000
	nop(PUSH2)
	s(7) = 4
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(8) = g(neurodao)
	nop(SLOAD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1889567281
	nop(PUSH4)
	s(9) = caller
	nop(CALLER)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = s(8)
	nop(DUP3)
	s(12) = 4294967295
	nop(PUSH4)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 26959946667150639794667015087019630673637144422540572481103610249216
	nop(PUSH29)
	s(11) = s(12)*s(11)
	nop(MUL)
	s(12) = s(10)
	nop(DUP2)
	l(l3) = s(11)
	nop(MSTORE)
	s(11) = 4
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = s(11)
	nop(DUP2)
	l(l4) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(10) = 32
	nop(PUSH1)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(9)
	nop(DUP4)
	s(12) = s(13)-s(12)
	nop(SUB)
	s(13) = s(11)
	nop(DUP2)
	s(14) = 0
	nop(PUSH1)
	s(15) = s(7)
	nop(DUP8)
	s(16) = s(15)
	nop(DUP1)
	s(16) = extcodesize
	nop(EXTCODESIZE)
	s(16)= eq(s(16), 0)
	nop(ISZERO)
	s(17) = s(16)
	nop(DUP1)
	call(jump687(s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump687(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	eq(s(17), 0)
	call(block882(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize))

jump687(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	neq(s(17), 0)
	call(block878(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block878(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(17) = 0
	nop(PUSH1)
	s(18) = s(17)
	nop(DUP1)
	nop(REVERT)

block882(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(16) = gas
	nop(GAS)
	s(10) = 1
	nop(CALL)
	s(10)= eq(s(10), 0)
	nop(ISZERO)
	s(11) = s(10)
	nop(DUP1)
	call(jump882(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump882(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize)=>
	eq(s(11), 0)
	call(block902(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize))

jump882(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize)=>
	neq(s(11), 0)
	call(block893(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize))

block893(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize)=>
	s(11) = returndatasize
	nop(RETURNDATASIZE)
	s(12) = 0
	nop(PUSH1)
	s(13) = s(12)
	nop(DUP1)
	nop(RETURNDATACOPY)
	s(12) = returndatasize
	nop(RETURNDATASIZE)
	s(13) = 0
	nop(PUSH1)
	nop(REVERT)

jump902(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize)=>
	geq(s(10), s(9))
	call(block924(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

jump902(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize)=>
	lt(s(10), s(9))
	call(block920(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block902(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(7) = 64
	nop(PUSH1)
	s(7) = l(l0)
	nop(MLOAD)
	s(8) = returndatasize
	nop(RETURNDATASIZE)
	s(9) = 32
	nop(PUSH1)
	s(10) = s(8)
	nop(DUP2)
	call(jump902(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize))
	nop(LT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block920(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(9) = 0
	nop(PUSH1)
	s(10) = s(9)
	nop(DUP1)
	nop(REVERT)

block924(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	nop(JUMPDEST)
	s(9) = s(7)
	nop(DUP2)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(8)
	nop(DUP1)
	s(10) = s(9)
	nop(DUP1)
	s(10) = l(l3)
	nop(MLOAD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	call(jump924(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump924(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	lt(s(7), s(6))
	call(block965(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

jump924(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	geq(s(7), s(6))
	call(block949(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

block949(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	s(6) = s(0)
	nop(DUP6)
	s(7) = 11
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(6)
	nop(DUP3)
	s(10) = s(7)
	nop(DUP3)
	s(10) = g(collectedNDAO)
	nop(SLOAD)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(6)
	s(6) = s(9)
	s(9) = s(10)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(8) = s(6)
	nop(DUP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	g(collectedNDAO) = s(7)
	nop(SSTORE)
	nop(POP)
	call(block965(s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

block965(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	nop(JUMPDEST)
	s(6) = address
	nop(ADDRESS)
	s(7) = s(1)
	s(1) = s(6)
	s(6) = s(7)
	nop(SWAP5)
	nop(POP)
	s(6) = 1636
	nop(PUSH2)
	call(block1636(s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(JUMP)

jump973(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	leq(s(8), s(7))
	call(block986(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))

jump973(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	gt(s(8), s(7))
	call(block985(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block973(s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(6) = 2
	nop(PUSH1)
	s(7) = 3
	nop(PUSH1)
	s(8) = s(6)
	nop(DUP2)
	call(jump973(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block985(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump986(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	leq(s(9), s(8))
	call(block1013(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))

jump986(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	gt(s(9), s(8))
	call(block1012(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block986(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(7) = 13
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(8) = g(state)
	nop(SLOAD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = 255
	nop(PUSH1)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 3
	nop(PUSH1)
	s(9) = s(7)
	nop(DUP2)
	call(jump986(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1012(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump1013(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	neq(s(7), s(6))
	call(block1635(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1013(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	eq(s(7), s(6))
	call(block1020(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))

block1013(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	call(jump1013(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))
	nop(EQ)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1020(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	s(6) = 1
	nop(PUSH1)
	s(6)= eq(s(6), 0)
	nop(ISZERO)
	s(6)= eq(s(6), 0)
	nop(ISZERO)
	s(7) = 12
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = 255
	nop(PUSH1)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	call(jump1020(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1020(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	neq(s(7), s(6))
	call(block1115(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))

jump1020(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	eq(s(7), s(6))
	call(block1111(s(5), s(4), s(3), s(2), s(1), s(0)))

block1111(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

block1115(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(6) = 1
	nop(PUSH1)
	s(7) = 12
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	nop(DUP2)
	gl = s(9)
	s(9) = fresh(0)
	nop(SLOAD)
	s(10) = s(8)
	nop(DUP2)
	s(11) = 255
	nop(PUSH1)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(10) = not(s(10))
	nop(NOT)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(6)
	nop(DUP4)
	s(10)= eq(s(10), 0)
	nop(ISZERO)
	s(10)= eq(s(10), 0)
	nop(ISZERO)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(8) = or(s(9), s(8))
	nop(OR)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	s(6) = 4
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(7) = g(neurodao)
	nop(SLOAD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 256
	nop(PUSH2)
	s(7) = s(8)^s(7)
	nop(EXP)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(6) = s(7)/s(6)
	nop(DIV)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = 530965563
	nop(PUSH4)
	s(8) = caller
	nop(CALLER)
	s(9) = 64
	nop(PUSH1)
	s(9) = l(l0)
	nop(MLOAD)
	s(10) = s(7)
	nop(DUP3)
	s(11) = 4294967295
	nop(PUSH4)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 26959946667150639794667015087019630673637144422540572481103610249216
	nop(PUSH29)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(11) = s(9)
	nop(DUP2)
	l(l3) = s(10)
	nop(MSTORE)
	s(10) = 4
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(9)
	nop(DUP1)
	s(11) = s(8)
	nop(DUP3)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l4) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(9) = 32
	nop(PUSH1)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(8)
	nop(DUP4)
	s(11) = s(12)-s(11)
	nop(SUB)
	s(12) = s(10)
	nop(DUP2)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(6)
	nop(DUP8)
	s(15) = s(14)
	nop(DUP1)
	s(15) = extcodesize
	nop(EXTCODESIZE)
	s(15)= eq(s(15), 0)
	nop(ISZERO)
	s(16) = s(15)
	nop(DUP1)
	call(jump1115(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1115(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	eq(s(16), 0)
	call(block1392(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, gas, returndatasize))

jump1115(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	neq(s(16), 0)
	call(block1388(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1388(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(16) = 0
	nop(PUSH1)
	s(17) = s(16)
	nop(DUP1)
	nop(REVERT)

jump1392(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, gas, returndatasize)=>
	eq(s(10), 0)
	call(block1412(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))

jump1392(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, gas, returndatasize)=>
	neq(s(10), 0)
	call(block1403(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize))

block1392(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, gas, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(15) = gas
	nop(GAS)
	s(9) = 1
	nop(CALL)
	s(9)= eq(s(9), 0)
	nop(ISZERO)
	s(10) = s(9)
	nop(DUP1)
	call(jump1392(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, gas, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1403(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize)=>
	s(10) = returndatasize
	nop(RETURNDATASIZE)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(11)
	nop(DUP1)
	nop(RETURNDATACOPY)
	s(11) = returndatasize
	nop(RETURNDATASIZE)
	s(12) = 0
	nop(PUSH1)
	nop(REVERT)

jump1412(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	geq(s(9), s(8))
	call(block1434(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

jump1412(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	lt(s(9), s(8))
	call(block1430(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1412(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(6) = 64
	nop(PUSH1)
	s(6) = l(l0)
	nop(MLOAD)
	s(7) = returndatasize
	nop(RETURNDATASIZE)
	s(8) = 32
	nop(PUSH1)
	s(9) = s(7)
	nop(DUP2)
	call(jump1412(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(LT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1430(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(8) = 0
	nop(PUSH1)
	s(9) = s(8)
	nop(DUP1)
	nop(REVERT)

block1434(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(8) = s(6)
	nop(DUP2)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(7)
	nop(DUP1)
	s(9) = s(8)
	nop(DUP1)
	s(9) = l(l3)
	nop(MLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(6)
	s(6) = s(9)
	s(9) = s(10)
	nop(SWAP3)
	s(10) = s(7)
	s(7) = s(9)
	s(9) = s(10)
	nop(SWAP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	nop(POP)
	s(6) = 1000
	nop(PUSH2)
	s(7) = s(5)
	nop(DUP2)
	call(jump1434(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1434(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	lt(s(7), s(6))
	call(block1598(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

jump1434(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	geq(s(7), s(6))
	call(block1465(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

jump1465(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(10), 0)
	call(block1549(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

jump1465(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(10), 0)
	call(block1548(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1465(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	s(6) = 11
	nop(PUSH1)
	s(6) = g(collectedNDAO)
	nop(SLOAD)
	s(7) = 3
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	gl = s(7)
	s(7) = fresh(0)
	nop(SLOAD)
	s(8) = 10
	nop(PUSH1)
	s(9) = 1250000
	nop(PUSH3)
	s(10) = 9
	nop(PUSH1)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(10) = s(8)
	nop(DUP2)
	call(jump1465(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1548(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block1549(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(7) = s(8)*s(7)
	nop(MUL)
	s(8) = s(6)
	nop(DUP2)
	call(jump1549(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1549(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(8), 0)
	call(block1560(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

jump1549(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(8), 0)
	call(block1559(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1559(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump1560(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(11), 0)
	call(block1582(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

jump1560(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(11), 0)
	call(block1581(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1560(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = s(7)/s(6)
	nop(DIV)
	s(7) = 21000000
	nop(PUSH4)
	s(8) = s(5)
	nop(DUP3)
	s(9) = 10
	nop(PUSH1)
	s(10) = 1250000
	nop(PUSH3)
	s(11) = s(9)
	nop(DUP2)
	call(jump1560(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1581(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block1582(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(9) = s(10)/s(9)
	nop(DIV)
	s(8) = s(9)*s(8)
	nop(MUL)
	s(9) = s(7)
	nop(DUP2)
	call(jump1582(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1582(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(9), 0)
	call(block1593(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

jump1582(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(9), 0)
	call(block1592(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1592(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block1593(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(0)
	s(0) = s(6)
	s(6) = s(7)
	nop(SWAP6)
	nop(POP)
	call(block1598(s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

block1598(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(7) = g(owner)
	nop(SLOAD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 256
	nop(PUSH2)
	s(7) = s(8)^s(7)
	nop(EXP)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(6) = s(7)/s(6)
	nop(DIV)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(1)
	s(1) = s(6)
	s(6) = s(7)
	nop(SWAP5)
	nop(POP)
	call(block1635(s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

block1635(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	call(block1636(s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1636(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	gt(s(7), s(6))
	call(block1651(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1636(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	leq(s(7), s(6))
	call(block1647(s(5), s(4), s(3), s(2), s(1), s(0)))

block1636(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(0)
	nop(DUP7)
	call(jump1636(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1647(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

block1651(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = 3
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = caller
	nop(CALLER)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	l(l1) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(6)
	nop(DUP2)
	l(l2) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	gl = s(6)
	s(6) = fresh(0)
	nop(SLOAD)
	s(7) = s(0)
	nop(DUP7)
	s(8) = 3
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	gl = s(8)
	s(8) = fresh(1)
	nop(SLOAD)
	s(7) = s(8)+s(7)
	nop(ADD)
	call(jump1651(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1651(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	gt(s(7), s(6))
	call(block1793(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1651(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	leq(s(7), s(6))
	call(block1789(s(5), s(4), s(3), s(2), s(1), s(0)))

block1789(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

block1793(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = s(0)
	nop(DUP6)
	s(7) = 3
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(1)
	nop(DUP8)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	gl = s(7)
	s(7) = fresh(0)
	nop(SLOAD)
	call(jump1793(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1793(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	geq(s(7), s(6))
	call(block1871(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1793(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	lt(s(7), s(6))
	call(block1867(s(5), s(4), s(3), s(2), s(1), s(0)))

block1867(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

block1871(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = 1
	nop(PUSH1)
	s(6)= eq(s(6), 0)
	nop(ISZERO)
	s(6)= eq(s(6), 0)
	nop(ISZERO)
	s(7) = 6
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = 255
	nop(PUSH1)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	call(jump1871(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1871(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(7), s(6))
	call(block2148(s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller))

jump1871(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(7), s(6))
	call(block1962(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

block1962(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	s(6) = 1
	nop(PUSH1)
	s(7) = 6
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	nop(DUP2)
	gl = s(9)
	s(9) = fresh(0)
	nop(SLOAD)
	s(10) = s(8)
	nop(DUP2)
	s(11) = 255
	nop(PUSH1)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(10) = not(s(10))
	nop(NOT)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(6)
	nop(DUP4)
	s(10)= eq(s(10), 0)
	nop(ISZERO)
	s(10)= eq(s(10), 0)
	nop(ISZERO)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(8) = or(s(9), s(8))
	nop(OR)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	s(6) = caller
	nop(CALLER)
	s(7) = 7
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = 8
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(9)
	nop(DUP2)
	s(11) = g(numberOfHolders)
	nop(SLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(9)
	s(9) = s(12)
	s(12) = s(13)
	nop(SWAP3)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(13) = 1
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(POP)
	g(numberOfHolders) = s(10)
	nop(SSTORE)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	nop(DUP2)
	gl = s(9)
	s(9) = fresh(1)
	nop(SLOAD)
	s(10) = s(8)
	nop(DUP2)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(10) = not(s(10))
	nop(NOT)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(6)
	nop(DUP4)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(8) = or(s(9), s(8))
	nop(OR)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	call(block2148(s(5),s(4),s(3),s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0), caller))

block2148(s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = s(0)
	nop(DUP6)
	s(7) = 3
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(6)
	nop(DUP3)
	s(10) = s(7)
	nop(DUP3)
	gl = s(10)
	s(10) = fresh(0)
	nop(SLOAD)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(6)
	s(6) = s(9)
	s(9) = s(10)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(8) = s(6)
	nop(DUP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	s(6) = s(0)
	nop(DUP6)
	s(7) = 3
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(1)
	nop(DUP8)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(6)
	nop(DUP3)
	s(10) = s(7)
	nop(DUP3)
	gl = s(10)
	s(10) = fresh(1)
	nop(SLOAD)
	s(9) = s(10)-s(9)
	nop(SUB)
	s(10) = s(6)
	s(6) = s(9)
	s(9) = s(10)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(8) = s(6)
	nop(DUP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(1)
	nop(DUP6)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 100389287136786176327247604509743168900146139575972864366142685224231313322991
	nop(PUSH32)
	s(9) = s(0)
	nop(DUP9)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = s(11)
	nop(DUP2)
	l(l3) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(10) = s(11)-s(10)
	nop(SUB)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	nop(LOG3)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	skip
	nop(STOP)

block2411(s(0), g(numberOfHolders), l(l3), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2411(s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump2411(s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block2423(s(1), s(0),g(numberOfHolders), l(l3), l(l0)))

jump2411(s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block2419(s(1), s(0)))

block2419(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2423(s(1), s(0), g(numberOfHolders), l(l3), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2432
	nop(PUSH2)
	s(2) = 3657
	nop(PUSH2)
	call(block3657(s(1),s(0),g(numberOfHolders), l(l3), l(l0)))
	nop(JUMP)

block2432(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump2454(s(2), s(1), s(0), g(collectedNDAO), l(l3), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block2466(s(1), s(0),g(collectedNDAO), l(l3), l(l0)))

jump2454(s(2), s(1), s(0), g(collectedNDAO), l(l3), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block2462(s(1), s(0)))

block2454(s(0), g(collectedNDAO), l(l3), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2454(s(2),s(1),s(0),g(collectedNDAO), l(l3), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block2462(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2466(s(1), s(0), g(collectedNDAO), l(l3), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2475
	nop(PUSH2)
	s(2) = 3663
	nop(PUSH2)
	call(block3663(s(1),s(0),g(collectedNDAO), l(l3), l(l0)))
	nop(JUMP)

block2475(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block2497(s(0), g(totalSupply), l(l3), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2497(s(2),s(1),s(0),g(totalSupply), l(l3), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump2497(s(2), s(1), s(0), g(totalSupply), l(l3), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block2509(s(1), s(0),g(totalSupply), l(l3), l(l0)))

jump2497(s(2), s(1), s(0), g(totalSupply), l(l3), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block2505(s(1), s(0)))

block2505(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2509(s(1), s(0), g(totalSupply), l(l3), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2518
	nop(PUSH2)
	s(2) = 3669
	nop(PUSH2)
	call(block3669(s(1),s(0),g(totalSupply), l(l3), l(l0)))
	nop(JUMP)

block2518(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump2540(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	eq(s(2), 0)
	call(block2552(s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize))

jump2540(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	neq(s(2), 0)
	call(block2548(s(1), s(0)))

block2540(s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2540(s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block2548(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2552(s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2605
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = calldataload
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 3675
	nop(PUSH2)
	call(block3675(s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0)))
	nop(JUMP)

block2605(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump2631(s(2), s(1), s(0), g(collectedUSD), l(l3), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block2643(s(1), s(0),g(collectedUSD), l(l3), l(l0)))

jump2631(s(2), s(1), s(0), g(collectedUSD), l(l3), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block2639(s(1), s(0)))

block2631(s(0), g(collectedUSD), l(l3), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2631(s(2),s(1),s(0),g(collectedUSD), l(l3), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block2639(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2643(s(1), s(0), g(collectedUSD), l(l3), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2652
	nop(PUSH2)
	s(2) = 3707
	nop(PUSH2)
	call(block3707(s(1),s(0),g(collectedUSD), l(l3), l(l0)))
	nop(JUMP)

block2652(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block2674(s(0), g(presaleOwner), g(etherPrice), g(owner), calldatasize, caller, callvalue, etherPrice)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2674(s(2),s(1),s(0),g(presaleOwner), g(etherPrice), g(owner), calldatasize, caller, callvalue, etherPrice))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump2674(s(2), s(1), s(0), g(presaleOwner), g(etherPrice), g(owner), calldatasize, caller, callvalue, etherPrice)=>
	eq(s(2), 0)
	call(block2686(s(1), s(0),g(presaleOwner), g(etherPrice), g(owner), calldatasize, caller, etherPrice))

jump2674(s(2), s(1), s(0), g(presaleOwner), g(etherPrice), g(owner), calldatasize, caller, callvalue, etherPrice)=>
	neq(s(2), 0)
	call(block2682(s(1), s(0)))

block2682(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2686(s(1), s(0), g(presaleOwner), g(etherPrice), g(owner), calldatasize, caller, etherPrice)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2717
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = etherPrice
	nop(CALLDATALOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 3713
	nop(PUSH2)
	call(block3713(s(2),s(1),s(0),g(presaleOwner), g(etherPrice), g(owner), caller))
	nop(JUMP)

block2717(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

block2719(s(0), g(state), g(owner), l(l3), l(l0), caller, callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2719(s(2),s(1),s(0),g(state), g(owner), l(l3), l(l0), caller, callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump2719(s(2), s(1), s(0), g(state), g(owner), l(l3), l(l0), caller, callvalue)=>
	eq(s(2), 0)
	call(block2731(s(1), s(0),g(state), g(owner), l(l3), l(l0), caller))

jump2719(s(2), s(1), s(0), g(state), g(owner), l(l3), l(l0), caller, callvalue)=>
	neq(s(2), 0)
	call(block2727(s(1), s(0)))

block2727(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2731(s(1), s(0), g(state), g(owner), l(l3), l(l0), caller)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2740
	nop(PUSH2)
	s(2) = 3902
	nop(PUSH2)
	call(block3902(s(1),s(0),g(state), g(owner), l(l3), l(l0), caller))
	nop(JUMP)

block2740(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

block2742(s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2742(s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump2742(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	eq(s(2), 0)
	call(block2754(s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize))

jump2742(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	neq(s(2), 0)
	call(block2750(s(1), s(0)))

block2750(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2754(s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2807
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = calldataload
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 4167
	nop(PUSH2)
	call(block4167(s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0)))
	nop(JUMP)

block2807(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block2833(s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2833(s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump2833(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	eq(s(2), 0)
	call(block2845(s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize))

jump2833(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	neq(s(2), 0)
	call(block2841(s(1), s(0)))

block2841(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2845(s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2898
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = calldataload
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 4199
	nop(PUSH2)
	call(block4199(s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0)))
	nop(JUMP)

block2898(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump2920(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	eq(s(2), 0)
	call(block2932(s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize))

jump2920(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	neq(s(2), 0)
	call(block2928(s(1), s(0)))

block2920(s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2920(s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block2928(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2932(s(1), s(0), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2963
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = calldataload
	nop(CALLDATALOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 4223
	nop(PUSH2)
	call(block4223(s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0)))
	nop(JUMP)

block2963(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block3029(s(0), g(neurodao), l(l3), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3029(s(2),s(1),s(0),g(neurodao), l(l3), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3029(s(2), s(1), s(0), g(neurodao), l(l3), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block3041(s(1), s(0),g(neurodao), l(l3), l(l0)))

jump3029(s(2), s(1), s(0), g(neurodao), l(l3), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block3037(s(1), s(0)))

block3037(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3041(s(1), s(0), g(neurodao), l(l3), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3050
	nop(PUSH2)
	s(2) = 4274
	nop(PUSH2)
	call(block4274(s(1),s(0),g(neurodao), l(l3), l(l0)))
	nop(JUMP)

block3050(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump3116(s(2), s(1), s(0), g(owner), l(l3), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block3128(s(1), s(0),g(owner), l(l3), l(l0)))

jump3116(s(2), s(1), s(0), g(owner), l(l3), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block3124(s(1), s(0)))

block3116(s(0), g(owner), l(l3), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3116(s(2),s(1),s(0),g(owner), l(l3), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block3124(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3128(s(1), s(0), g(owner), l(l3), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3137
	nop(PUSH2)
	s(2) = 4312
	nop(PUSH2)
	call(block4312(s(1),s(0),g(owner), l(l3), l(l0)))
	nop(JUMP)

block3137(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block3203(s(0), g(presaleOwner), l(l3), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3203(s(2),s(1),s(0),g(presaleOwner), l(l3), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3203(s(2), s(1), s(0), g(presaleOwner), l(l3), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block3215(s(1), s(0),g(presaleOwner), l(l3), l(l0)))

jump3203(s(2), s(1), s(0), g(presaleOwner), l(l3), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block3211(s(1), s(0)))

block3211(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3215(s(1), s(0), g(presaleOwner), l(l3), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3224
	nop(PUSH2)
	s(2) = 4349
	nop(PUSH2)
	call(block4349(s(1),s(0),g(presaleOwner), l(l3), l(l0)))
	nop(JUMP)

block3224(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump3290(s(2), s(1), s(0), g(etherPrice), l(l3), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block3302(s(1), s(0),g(etherPrice), l(l3), l(l0)))

jump3290(s(2), s(1), s(0), g(etherPrice), l(l3), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block3298(s(1), s(0)))

block3290(s(0), g(etherPrice), l(l3), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3290(s(2),s(1),s(0),g(etherPrice), l(l3), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block3298(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3302(s(1), s(0), g(etherPrice), l(l3), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3311
	nop(PUSH2)
	s(2) = 4387
	nop(PUSH2)
	call(block4387(s(1),s(0),g(etherPrice), l(l3), l(l0)))
	nop(JUMP)

block3311(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block3333(s(0), g(newOwner), g(owner), calldatasize, caller, callvalue, owner)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3333(s(2),s(1),s(0),g(newOwner), g(owner), calldatasize, caller, callvalue, owner))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3333(s(2), s(1), s(0), g(newOwner), g(owner), calldatasize, caller, callvalue, owner)=>
	eq(s(2), 0)
	call(block3345(s(1), s(0),g(newOwner), g(owner), calldatasize, caller, owner))

jump3333(s(2), s(1), s(0), g(newOwner), g(owner), calldatasize, caller, callvalue, owner)=>
	neq(s(2), 0)
	call(block3341(s(1), s(0)))

block3341(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3345(s(1), s(0), g(newOwner), g(owner), calldatasize, caller, owner)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3398
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = owner
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 4393
	nop(PUSH2)
	call(block4393(s(2),s(1),s(0),g(newOwner), g(owner), caller))
	nop(JUMP)

block3398(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

block3400(s(0), g(state), g(presaleOwner), g(owner), l(l3), l(l0), calldatasize, caller, callvalue, presaleOwner)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3400(s(2),s(1),s(0),g(state), g(presaleOwner), g(owner), l(l3), l(l0), calldatasize, caller, callvalue, presaleOwner))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3400(s(2), s(1), s(0), g(state), g(presaleOwner), g(owner), l(l3), l(l0), calldatasize, caller, callvalue, presaleOwner)=>
	eq(s(2), 0)
	call(block3412(s(1), s(0),g(state), g(presaleOwner), g(owner), l(l3), l(l0), calldatasize, caller, presaleOwner))

jump3400(s(2), s(1), s(0), g(state), g(presaleOwner), g(owner), l(l3), l(l0), calldatasize, caller, callvalue, presaleOwner)=>
	neq(s(2), 0)
	call(block3408(s(1), s(0)))

block3408(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3412(s(1), s(0), g(state), g(presaleOwner), g(owner), l(l3), l(l0), calldatasize, caller, presaleOwner)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3465
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = presaleOwner
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 4590
	nop(PUSH2)
	call(block4590(s(2),s(1),s(0),g(state), g(presaleOwner), g(owner), l(l3), l(l0), caller))
	nop(JUMP)

block3465(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

block3467(s(0), g(state), g(owner), l(l3), l(l0), caller, callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3467(s(2),s(1),s(0),g(state), g(owner), l(l3), l(l0), caller, callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3467(s(2), s(1), s(0), g(state), g(owner), l(l3), l(l0), caller, callvalue)=>
	eq(s(2), 0)
	call(block3479(s(1), s(0),g(state), g(owner), l(l3), l(l0), caller))

jump3467(s(2), s(1), s(0), g(state), g(owner), l(l3), l(l0), caller, callvalue)=>
	neq(s(2), 0)
	call(block3475(s(1), s(0)))

block3475(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3479(s(1), s(0), g(state), g(owner), l(l3), l(l0), caller)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3488
	nop(PUSH2)
	s(2) = 4921
	nop(PUSH2)
	call(block4921(s(1),s(0),g(state), g(owner), l(l3), l(l0), caller))
	nop(JUMP)

block3488(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

jump3490(s(2), s(1), s(0), g(newOwner), g(owner), caller, callvalue)=>
	eq(s(2), 0)
	call(block3502(s(1), s(0),g(newOwner), g(owner), caller))

jump3490(s(2), s(1), s(0), g(newOwner), g(owner), caller, callvalue)=>
	neq(s(2), 0)
	call(block3498(s(1), s(0)))

block3490(s(0), g(newOwner), g(owner), caller, callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3490(s(2),s(1),s(0),g(newOwner), g(owner), caller, callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block3498(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3502(s(1), s(0), g(newOwner), g(owner), caller)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3511
	nop(PUSH2)
	s(2) = 5186
	nop(PUSH2)
	call(block5186(s(1),s(0),g(newOwner), g(owner), caller))
	nop(JUMP)

block3511(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

jump3513(s(2), s(1), s(0), g(state), l(l3), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block3525(s(1), s(0),g(state), l(l3), l(l0)))

jump3513(s(2), s(1), s(0), g(state), l(l3), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block3521(s(1), s(0)))

block3513(s(0), g(state), l(l3), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3513(s(2),s(1),s(0),g(state), l(l3), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block3521(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3525(s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3534
	nop(PUSH2)
	s(2) = 5415
	nop(PUSH2)
	call(block5415(s(1),s(0),g(state), l(l3), l(l0)))
	nop(JUMP)

block3534(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 3
	nop(PUSH1)
	s(7) = s(5)
	nop(DUP2)
	call(jump3534(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3534(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l0))=>
	leq(s(7), s(6))
	call(block3550(s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l0)))

jump3534(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l0))=>
	gt(s(7), s(6))
	call(block3549(s(5), s(4), s(3), s(2), s(1), s(0)))

block3549(s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block3550(s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump3570(s(2), s(1), s(0), g(newOwner), l(l3), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block3582(s(1), s(0),g(newOwner), l(l3), l(l0)))

jump3570(s(2), s(1), s(0), g(newOwner), l(l3), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block3578(s(1), s(0)))

block3570(s(0), g(newOwner), l(l3), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3570(s(2),s(1),s(0),g(newOwner), l(l3), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block3578(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3582(s(1), s(0), g(newOwner), l(l3), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3591
	nop(PUSH2)
	s(2) = 5434
	nop(PUSH2)
	call(block5434(s(1),s(0),g(newOwner), l(l3), l(l0)))
	nop(JUMP)

block3591(s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	l(l3) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block3657(s(1), s(0), g(numberOfHolders), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 8
	nop(PUSH1)
	s(2) = g(numberOfHolders)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block2432(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block3663(s(1), s(0), g(collectedNDAO), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 11
	nop(PUSH1)
	s(2) = g(collectedNDAO)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block2475(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block3669(s(1), s(0), g(totalSupply), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 2
	nop(PUSH1)
	s(2) = g(totalSupply)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block2518(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block3675(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 6
	nop(PUSH1)
	s(4) = 32
	nop(PUSH1)
	l(l2) = s(3)
	nop(MSTORE)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 0
	nop(PUSH1)
	l(l1) = s(3)
	nop(MSTORE)
	s(3) = 64
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(3) = sha3(s(4), s(3))
	nop(SHA3)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	gl = s(3)
	s(3) = fresh(0)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 255
	nop(PUSH1)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block2605(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block3707(s(1), s(0), g(collectedUSD), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 9
	nop(PUSH1)
	s(2) = g(collectedUSD)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block2652(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block3713(s(2), s(1), s(0), g(presaleOwner), g(etherPrice), g(owner), caller)=>
	nop(JUMPDEST)
	s(3) = caller
	nop(CALLER)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 10
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(5) = g(presaleOwner)
	nop(SLOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(4) = s(5)/s(4)
	nop(DIV)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(3)= eq(s(4), s(3))
	nop(EQ)
	s(4) = s(3)
	nop(DUP1)
	s(5) = 3881
	nop(PUSH2)
	call(jump3713(s(5),s(4),s(3),s(2),s(1),s(0),g(presaleOwner), g(etherPrice), g(owner), caller))
	nop(JUMPI)

jump3713(s(5), s(4), s(3), s(2), s(1), s(0), g(presaleOwner), g(etherPrice), g(owner), caller)=>
	eq(s(4), 1 )
	call(block3881(s(3), s(2), s(1), s(0),g(etherPrice)))

jump3713(s(5), s(4), s(3), s(2), s(1), s(0), g(presaleOwner), g(etherPrice), g(owner), caller)=>
	neq(s(4), 1 )
	call(block3800(s(3), s(2), s(1), s(0),g(etherPrice), g(owner), caller))

block3800(s(3), s(2), s(1), s(0), g(etherPrice), g(owner), caller)=>
	nop(POP)
	s(3) = caller
	nop(CALLER)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(4)
	nop(DUP1)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(5) = g(owner)
	nop(SLOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(4) = s(5)/s(4)
	nop(DIV)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(3)= eq(s(4), s(3))
	nop(EQ)
	call(block3881(s(3),s(2),s(1),s(0),g(etherPrice)))

block3881(s(3), s(2), s(1), s(0), g(etherPrice))=>
	nop(JUMPDEST)
	call(jump3881(s(3),s(2),s(1),s(0),g(etherPrice)))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3881(s(3), s(2), s(1), s(0), g(etherPrice))=>
	neq(s(3), 0)
	call(block3892(s(2), s(1), s(0),g(etherPrice)))

jump3881(s(3), s(2), s(1), s(0), g(etherPrice))=>
	eq(s(3), 0)
	call(block3888(s(2), s(1), s(0)))

block3888(s(2), s(1), s(0))=>
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	nop(REVERT)

block3892(s(2), s(1), s(0), g(etherPrice))=>
	nop(JUMPDEST)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 5
	nop(PUSH1)
	s(5) = s(3)
	nop(DUP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	g(etherPrice) = s(4)
	nop(SSTORE)
	nop(POP)
	nop(POP)
	call(block2717(s(0)))
	nop(JUMP)

block3902(s(1), s(0), g(state), g(owner), l(l3), l(l0), caller)=>
	nop(JUMPDEST)
	s(2) = caller
	nop(CALLER)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(4) = g(owner)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	call(jump3902(s(3),s(2),s(1),s(0),g(state), g(owner), l(l3), l(l0), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3902(s(3), s(2), s(1), s(0), g(state), g(owner), l(l3), l(l0), caller)=>
	eq(s(3), s(2))
	call(block3993(s(1), s(0),g(state), l(l3), l(l0)))

jump3902(s(3), s(2), s(1), s(0), g(state), g(owner), l(l3), l(l0), caller)=>
	neq(s(3), s(2))
	call(block3989(s(1), s(0)))

block3989(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

jump3993(s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	leq(s(4), s(3))
	call(block4006(s(2), s(1), s(0),g(state), l(l3), l(l0)))

jump3993(s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	gt(s(4), s(3))
	call(block4005(s(2), s(1), s(0)))

block3993(s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 1
	nop(PUSH1)
	s(3) = 3
	nop(PUSH1)
	s(4) = s(2)
	nop(DUP2)
	call(jump3993(s(4),s(3),s(2),s(1),s(0),g(state), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4005(s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump4006(s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	leq(s(5), s(4))
	call(block4033(s(3), s(2), s(1), s(0),g(state), l(l3), l(l0)))

jump4006(s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	gt(s(5), s(4))
	call(block4032(s(3), s(2), s(1), s(0)))

block4006(s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 13
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(4) = g(state)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = 255
	nop(PUSH1)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 3
	nop(PUSH1)
	s(5) = s(3)
	nop(DUP2)
	call(jump4006(s(5),s(4),s(3),s(2),s(1),s(0),g(state), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4032(s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block4033(s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	call(jump4033(s(3),s(2),s(1),s(0),g(state), l(l3), l(l0)))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump4033(s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	eq(s(3), s(2))
	call(block4045(s(1), s(0),g(state), l(l3), l(l0)))

jump4033(s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	neq(s(3), s(2))
	call(block4041(s(1), s(0)))

block4041(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

jump4045(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	leq(s(8), s(7))
	call(block4076(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(state), l(l3), l(l0)))

jump4045(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	gt(s(8), s(7))
	call(block4075(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block4045(s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 2
	nop(PUSH1)
	s(3) = 13
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	nop(DUP2)
	s(5) = g(state)
	nop(SLOAD)
	s(6) = s(4)
	nop(DUP2)
	s(7) = 255
	nop(PUSH1)
	s(6) = s(7)*s(6)
	nop(MUL)
	s(6) = not(s(6))
	nop(NOT)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	nop(DUP4)
	s(7) = 3
	nop(PUSH1)
	s(8) = s(6)
	nop(DUP2)
	call(jump4045(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4075(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump4076(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	leq(s(8), s(7))
	call(block4146(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l0)))

jump4076(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	gt(s(8), s(7))
	call(block4145(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block4076(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(5) = s(6)*s(5)
	nop(MUL)
	s(4) = or(s(5), s(4))
	nop(OR)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	g(state) = s(3)
	nop(SSTORE)
	nop(POP)
	s(2) = 91016009596232918414919019420680617742283986832421755804134802594728457319555
	nop(PUSH32)
	s(3) = 13
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(4) = g(state)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = 255
	nop(PUSH1)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 64
	nop(PUSH1)
	s(4) = l(l0)
	nop(MLOAD)
	s(5) = s(4)
	nop(DUP1)
	s(6) = s(3)
	nop(DUP3)
	s(7) = 3
	nop(PUSH1)
	s(8) = s(6)
	nop(DUP2)
	call(jump4076(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4145(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block4146(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(7) = 255
	nop(PUSH1)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	nop(DUP2)
	l(l3) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(4) = 64
	nop(PUSH1)
	s(4) = l(l0)
	nop(MLOAD)
	s(5) = s(4)
	nop(DUP1)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(4) = s(5)-s(4)
	nop(SUB)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	nop(LOG1)
	call(block2740(s(0)))
	nop(JUMP)

block4167(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 12
	nop(PUSH1)
	s(4) = 32
	nop(PUSH1)
	l(l2) = s(3)
	nop(MSTORE)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 0
	nop(PUSH1)
	l(l1) = s(3)
	nop(MSTORE)
	s(3) = 64
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(3) = sha3(s(4), s(3))
	nop(SHA3)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	gl = s(3)
	s(3) = fresh(0)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 255
	nop(PUSH1)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block2807(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block4199(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 3
	nop(PUSH1)
	s(4) = 32
	nop(PUSH1)
	l(l2) = s(3)
	nop(MSTORE)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 0
	nop(PUSH1)
	l(l1) = s(3)
	nop(MSTORE)
	s(3) = 64
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(3) = sha3(s(4), s(3))
	nop(SHA3)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(POP)
	gl = s(2)
	s(2) = fresh(0)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block2898(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block4223(s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 7
	nop(PUSH1)
	s(4) = 32
	nop(PUSH1)
	l(l2) = s(3)
	nop(MSTORE)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 0
	nop(PUSH1)
	l(l1) = s(3)
	nop(MSTORE)
	s(3) = 64
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(3) = sha3(s(4), s(3))
	nop(SHA3)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	gl = s(3)
	s(3) = fresh(0)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block2963(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block4274(s(1), s(0), g(neurodao), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 4
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(neurodao)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block3050(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block4312(s(1), s(0), g(owner), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(owner)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block3137(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block4349(s(1), s(0), g(presaleOwner), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 10
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(presaleOwner)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block3224(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block4387(s(1), s(0), g(etherPrice), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 5
	nop(PUSH1)
	s(2) = g(etherPrice)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block3311(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block4393(s(2), s(1), s(0), g(newOwner), g(owner), caller)=>
	nop(JUMPDEST)
	s(3) = caller
	nop(CALLER)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(4)
	nop(DUP1)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(5) = g(owner)
	nop(SLOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(4) = s(5)/s(4)
	nop(DIV)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	call(jump4393(s(4),s(3),s(2),s(1),s(0),g(newOwner), g(owner), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump4393(s(4), s(3), s(2), s(1), s(0), g(newOwner), g(owner), caller)=>
	eq(s(4), s(3))
	call(block4484(s(2), s(1), s(0),g(newOwner)))

jump4393(s(4), s(3), s(2), s(1), s(0), g(newOwner), g(owner), caller)=>
	neq(s(4), s(3))
	call(block4480(s(2), s(1), s(0)))

block4480(s(2), s(1), s(0))=>
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	nop(REVERT)

block4484(s(2), s(1), s(0), g(newOwner))=>
	nop(JUMPDEST)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	nop(DUP2)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	call(jump4484(s(4),s(3),s(2),s(1),s(0),g(newOwner)))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump4484(s(4), s(3), s(2), s(1), s(0), g(newOwner))=>
	neq(s(4), s(3))
	call(block4522(s(2), s(1), s(0),g(newOwner)))

jump4484(s(4), s(3), s(2), s(1), s(0), g(newOwner))=>
	eq(s(4), s(3))
	call(block4518(s(2), s(1), s(0)))

block4518(s(2), s(1), s(0))=>
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	nop(REVERT)

block4522(s(2), s(1), s(0), g(newOwner))=>
	nop(JUMPDEST)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 1
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	nop(DUP2)
	s(6) = g(newOwner)
	nop(SLOAD)
	s(7) = s(5)
	nop(DUP2)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = s(8)*s(7)
	nop(MUL)
	s(7) = not(s(7))
	nop(NOT)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(3)
	nop(DUP4)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(6) = s(7)*s(6)
	nop(MUL)
	s(5) = or(s(6), s(5))
	nop(OR)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	g(newOwner) = s(4)
	nop(SSTORE)
	nop(POP)
	nop(POP)
	call(block3398(s(0)))
	nop(JUMP)

block4590(s(2), s(1), s(0), g(state), g(presaleOwner), g(owner), l(l3), l(l0), caller)=>
	nop(JUMPDEST)
	s(3) = caller
	nop(CALLER)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(4)
	nop(DUP1)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(5) = g(owner)
	nop(SLOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(4) = s(5)/s(4)
	nop(DIV)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	call(jump4590(s(4),s(3),s(2),s(1),s(0),g(state), g(presaleOwner), g(owner), l(l3), l(l0), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump4590(s(4), s(3), s(2), s(1), s(0), g(state), g(presaleOwner), g(owner), l(l3), l(l0), caller)=>
	eq(s(4), s(3))
	call(block4681(s(2), s(1), s(0),g(state), g(presaleOwner), l(l3), l(l0)))

jump4590(s(4), s(3), s(2), s(1), s(0), g(state), g(presaleOwner), g(owner), l(l3), l(l0), caller)=>
	neq(s(4), s(3))
	call(block4677(s(2), s(1), s(0)))

block4677(s(2), s(1), s(0))=>
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	nop(REVERT)

jump4681(s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(presaleOwner), l(l3), l(l0))=>
	leq(s(5), s(4))
	call(block4694(s(3), s(2), s(1), s(0),g(state), g(presaleOwner), l(l3), l(l0)))

jump4681(s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(presaleOwner), l(l3), l(l0))=>
	gt(s(5), s(4))
	call(block4693(s(3), s(2), s(1), s(0)))

block4681(s(2), s(1), s(0), g(state), g(presaleOwner), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 0
	nop(PUSH1)
	s(4) = 3
	nop(PUSH1)
	s(5) = s(3)
	nop(DUP2)
	call(jump4681(s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(presaleOwner), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4693(s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block4694(s(3), s(2), s(1), s(0), g(state), g(presaleOwner), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(4) = 13
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(5) = g(state)
	nop(SLOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(4) = s(5)/s(4)
	nop(DIV)
	s(5) = 255
	nop(PUSH1)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(5) = 3
	nop(PUSH1)
	s(6) = s(4)
	nop(DUP2)
	call(jump4694(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(presaleOwner), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump4694(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(presaleOwner), l(l3), l(l0))=>
	leq(s(6), s(5))
	call(block4721(s(4), s(3), s(2), s(1), s(0),g(state), g(presaleOwner), l(l3), l(l0)))

jump4694(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(presaleOwner), l(l3), l(l0))=>
	gt(s(6), s(5))
	call(block4720(s(4), s(3), s(2), s(1), s(0)))

block4720(s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block4721(s(4), s(3), s(2), s(1), s(0), g(state), g(presaleOwner), l(l3), l(l0))=>
	nop(JUMPDEST)
	call(jump4721(s(4),s(3),s(2),s(1),s(0),g(state), g(presaleOwner), l(l3), l(l0)))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump4721(s(4), s(3), s(2), s(1), s(0), g(state), g(presaleOwner), l(l3), l(l0))=>
	eq(s(4), s(3))
	call(block4733(s(2), s(1), s(0),g(state), g(presaleOwner), l(l3), l(l0)))

jump4721(s(4), s(3), s(2), s(1), s(0), g(state), g(presaleOwner), l(l3), l(l0))=>
	neq(s(4), s(3))
	call(block4729(s(2), s(1), s(0)))

block4729(s(2), s(1), s(0))=>
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	nop(REVERT)

jump4733(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(presaleOwner), l(l3), l(l0))=>
	leq(s(9), s(8))
	call(block4829(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(state), l(l3), l(l0)))

jump4733(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(presaleOwner), l(l3), l(l0))=>
	gt(s(9), s(8))
	call(block4828(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block4733(s(2), s(1), s(0), g(state), g(presaleOwner), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 10
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	nop(DUP2)
	s(6) = g(presaleOwner)
	nop(SLOAD)
	s(7) = s(5)
	nop(DUP2)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = s(8)*s(7)
	nop(MUL)
	s(7) = not(s(7))
	nop(NOT)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(3)
	nop(DUP4)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(6) = s(7)*s(6)
	nop(MUL)
	s(5) = or(s(6), s(5))
	nop(OR)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	g(presaleOwner) = s(4)
	nop(SSTORE)
	nop(POP)
	s(3) = 1
	nop(PUSH1)
	s(4) = 13
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	nop(DUP2)
	s(6) = g(state)
	nop(SLOAD)
	s(7) = s(5)
	nop(DUP2)
	s(8) = 255
	nop(PUSH1)
	s(7) = s(8)*s(7)
	nop(MUL)
	s(7) = not(s(7))
	nop(NOT)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(3)
	nop(DUP4)
	s(8) = 3
	nop(PUSH1)
	s(9) = s(7)
	nop(DUP2)
	call(jump4733(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(presaleOwner), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4828(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump4829(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	leq(s(9), s(8))
	call(block4899(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l0)))

jump4829(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	gt(s(9), s(8))
	call(block4898(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block4829(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(6) = s(7)*s(6)
	nop(MUL)
	s(5) = or(s(6), s(5))
	nop(OR)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	g(state) = s(4)
	nop(SSTORE)
	nop(POP)
	s(3) = 91016009596232918414919019420680617742283986832421755804134802594728457319555
	nop(PUSH32)
	s(4) = 13
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(5) = g(state)
	nop(SLOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(4) = s(5)/s(4)
	nop(DIV)
	s(5) = 255
	nop(PUSH1)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(5) = 64
	nop(PUSH1)
	s(5) = l(l0)
	nop(MLOAD)
	s(6) = s(5)
	nop(DUP1)
	s(7) = s(4)
	nop(DUP3)
	s(8) = 3
	nop(PUSH1)
	s(9) = s(7)
	nop(DUP2)
	call(jump4829(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4898(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block4899(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(8) = 255
	nop(PUSH1)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l3) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(5) = 64
	nop(PUSH1)
	s(5) = l(l0)
	nop(MLOAD)
	s(6) = s(5)
	nop(DUP1)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	s(5) = s(6)-s(5)
	nop(SUB)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(LOG1)
	nop(POP)
	call(block3465(s(0)))
	nop(JUMP)

jump4921(s(3), s(2), s(1), s(0), g(state), g(owner), l(l3), l(l0), caller)=>
	eq(s(3), s(2))
	call(block5012(s(1), s(0),g(state), l(l3), l(l0)))

jump4921(s(3), s(2), s(1), s(0), g(state), g(owner), l(l3), l(l0), caller)=>
	neq(s(3), s(2))
	call(block5008(s(1), s(0)))

block4921(s(1), s(0), g(state), g(owner), l(l3), l(l0), caller)=>
	nop(JUMPDEST)
	s(2) = caller
	nop(CALLER)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(4) = g(owner)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	call(jump4921(s(3),s(2),s(1),s(0),g(state), g(owner), l(l3), l(l0), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block5008(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

jump5012(s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	leq(s(4), s(3))
	call(block5025(s(2), s(1), s(0),g(state), l(l3), l(l0)))

jump5012(s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	gt(s(4), s(3))
	call(block5024(s(2), s(1), s(0)))

block5012(s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 2
	nop(PUSH1)
	s(3) = 3
	nop(PUSH1)
	s(4) = s(2)
	nop(DUP2)
	call(jump5012(s(4),s(3),s(2),s(1),s(0),g(state), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block5024(s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump5025(s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	leq(s(5), s(4))
	call(block5052(s(3), s(2), s(1), s(0),g(state), l(l3), l(l0)))

jump5025(s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	gt(s(5), s(4))
	call(block5051(s(3), s(2), s(1), s(0)))

block5025(s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(3) = 13
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(4) = g(state)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = 255
	nop(PUSH1)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 3
	nop(PUSH1)
	s(5) = s(3)
	nop(DUP2)
	call(jump5025(s(5),s(4),s(3),s(2),s(1),s(0),g(state), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block5051(s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block5052(s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	call(jump5052(s(3),s(2),s(1),s(0),g(state), l(l3), l(l0)))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump5052(s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	eq(s(3), s(2))
	call(block5064(s(1), s(0),g(state), l(l3), l(l0)))

jump5052(s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	neq(s(3), s(2))
	call(block5060(s(1), s(0)))

block5060(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block5064(s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 3
	nop(PUSH1)
	s(3) = 13
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	nop(DUP2)
	s(5) = g(state)
	nop(SLOAD)
	s(6) = s(4)
	nop(DUP2)
	s(7) = 255
	nop(PUSH1)
	s(6) = s(7)*s(6)
	nop(MUL)
	s(6) = not(s(6))
	nop(NOT)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	nop(DUP4)
	s(7) = 3
	nop(PUSH1)
	s(8) = s(6)
	nop(DUP2)
	call(jump5064(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump5064(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	leq(s(8), s(7))
	call(block5095(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(state), l(l3), l(l0)))

jump5064(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	gt(s(8), s(7))
	call(block5094(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block5094(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump5095(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	leq(s(8), s(7))
	call(block5165(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l0)))

jump5095(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	gt(s(8), s(7))
	call(block5164(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block5095(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(5) = s(6)*s(5)
	nop(MUL)
	s(4) = or(s(5), s(4))
	nop(OR)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	g(state) = s(3)
	nop(SSTORE)
	nop(POP)
	s(2) = 91016009596232918414919019420680617742283986832421755804134802594728457319555
	nop(PUSH32)
	s(3) = 13
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(4) = g(state)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = 255
	nop(PUSH1)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 64
	nop(PUSH1)
	s(4) = l(l0)
	nop(MLOAD)
	s(5) = s(4)
	nop(DUP1)
	s(6) = s(3)
	nop(DUP3)
	s(7) = 3
	nop(PUSH1)
	s(8) = s(6)
	nop(DUP2)
	call(jump5095(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), l(l3), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block5164(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block5165(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(7) = 255
	nop(PUSH1)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	nop(DUP2)
	l(l3) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(4) = 64
	nop(PUSH1)
	s(4) = l(l0)
	nop(MLOAD)
	s(5) = s(4)
	nop(DUP1)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(4) = s(5)-s(4)
	nop(SUB)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	nop(LOG1)
	call(block3488(s(0)))
	nop(JUMP)

block5186(s(1), s(0), g(newOwner), g(owner), caller)=>
	nop(JUMPDEST)
	s(2) = caller
	nop(CALLER)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = 1
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(4) = g(newOwner)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	call(jump5186(s(3),s(2),s(1),s(0),g(newOwner), g(owner), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump5186(s(3), s(2), s(1), s(0), g(newOwner), g(owner), caller)=>
	eq(s(3), s(2))
	call(block5278(s(1), s(0),g(newOwner), g(owner)))

jump5186(s(3), s(2), s(1), s(0), g(newOwner), g(owner), caller)=>
	neq(s(3), s(2))
	call(block5274(s(1), s(0)))

block5274(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block5278(s(1), s(0), g(newOwner), g(owner))=>
	nop(JUMPDEST)
	s(2) = 1
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(newOwner)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	nop(DUP2)
	s(5) = g(owner)
	nop(SLOAD)
	s(6) = s(4)
	nop(DUP2)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = s(7)*s(6)
	nop(MUL)
	s(6) = not(s(6))
	nop(NOT)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	nop(DUP4)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(5) = s(6)*s(5)
	nop(MUL)
	s(4) = or(s(5), s(4))
	nop(OR)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	g(owner) = s(3)
	nop(SSTORE)
	nop(POP)
	s(2) = 1
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	nop(DUP2)
	s(4) = g(newOwner)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = s(5)*s(4)
	nop(MUL)
	s(4) = not(s(4))
	nop(NOT)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	g(newOwner) = s(2)
	nop(SSTORE)
	call(block3511(s(0)))
	nop(JUMP)

block5415(s(1), s(0), g(state), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 13
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(state)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 255
	nop(PUSH1)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block3534(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block5434(s(1), s(0), g(newOwner), l(l3), l(l0))=>
	nop(JUMPDEST)
	s(2) = 1
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(newOwner)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block3591(s(2),s(1),s(0), l(l3), l(l0)))
	nop(JUMP)

block1012_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump1013_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	neq(s(8), s(7))
	call(block1635_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1013_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	eq(s(8), s(7))
	call(block1020_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))

block1013_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	call(jump1013_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))
	nop(EQ)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1020_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	s(7) = 1
	nop(PUSH1)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	s(8) = 12
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gl = s(9)
	s(9) = fresh(0)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 255
	nop(PUSH1)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(8)= eq(s(8), 0)
	nop(ISZERO)
	s(8)= eq(s(8), 0)
	nop(ISZERO)
	call(jump1020_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1020_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	neq(s(8), s(7))
	call(block1115_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))

jump1020_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	eq(s(8), s(7))
	call(block1111_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1111_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(7) = 0
	nop(PUSH1)
	s(8) = s(7)
	nop(DUP1)
	nop(REVERT)

jump1115_0(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	eq(s(17), 0)
	call(block1392_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, gas, returndatasize))

jump1115_0(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	neq(s(17), 0)
	call(block1388_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1115_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(7) = 1
	nop(PUSH1)
	s(8) = 12
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	nop(DUP2)
	gl = s(10)
	s(10) = fresh(0)
	nop(SLOAD)
	s(11) = s(9)
	nop(DUP2)
	s(12) = 255
	nop(PUSH1)
	s(11) = s(12)*s(11)
	nop(MUL)
	s(11) = not(s(11))
	nop(NOT)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(7)
	nop(DUP4)
	s(11)= eq(s(11), 0)
	nop(ISZERO)
	s(11)= eq(s(11), 0)
	nop(ISZERO)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(9) = or(s(10), s(9))
	nop(OR)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gs(1) = s(9)
	gs(2) = s(8)
	nop(SSTORE)
	nop(POP)
	s(7) = 4
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(8) = g(neurodao)
	nop(SLOAD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 530965563
	nop(PUSH4)
	s(9) = caller
	nop(CALLER)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = s(8)
	nop(DUP3)
	s(12) = 4294967295
	nop(PUSH4)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 26959946667150639794667015087019630673637144422540572481103610249216
	nop(PUSH29)
	s(11) = s(12)*s(11)
	nop(MUL)
	s(12) = s(10)
	nop(DUP2)
	l(l3) = s(11)
	nop(MSTORE)
	s(11) = 4
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = s(11)
	nop(DUP2)
	l(l4) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(10) = 32
	nop(PUSH1)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(9)
	nop(DUP4)
	s(12) = s(13)-s(12)
	nop(SUB)
	s(13) = s(11)
	nop(DUP2)
	s(14) = 0
	nop(PUSH1)
	s(15) = s(7)
	nop(DUP8)
	s(16) = s(15)
	nop(DUP1)
	s(16) = extcodesize
	nop(EXTCODESIZE)
	s(16)= eq(s(16), 0)
	nop(ISZERO)
	s(17) = s(16)
	nop(DUP1)
	call(jump1115_0(s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1388_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(17) = 0
	nop(PUSH1)
	s(18) = s(17)
	nop(DUP1)
	nop(REVERT)

block1392_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, gas, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(16) = gas
	nop(GAS)
	s(10) = 1
	nop(CALL)
	s(10)= eq(s(10), 0)
	nop(ISZERO)
	s(11) = s(10)
	nop(DUP1)
	call(jump1392_0(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, gas, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1392_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, gas, returndatasize)=>
	eq(s(11), 0)
	call(block1412_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))

jump1392_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, gas, returndatasize)=>
	neq(s(11), 0)
	call(block1403_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize))

block1403_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize)=>
	s(11) = returndatasize
	nop(RETURNDATASIZE)
	s(12) = 0
	nop(PUSH1)
	s(13) = s(12)
	nop(DUP1)
	nop(RETURNDATACOPY)
	s(12) = returndatasize
	nop(RETURNDATASIZE)
	s(13) = 0
	nop(PUSH1)
	nop(REVERT)

block1412_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(7) = 64
	nop(PUSH1)
	s(7) = l(l0)
	nop(MLOAD)
	s(8) = returndatasize
	nop(RETURNDATASIZE)
	s(9) = 32
	nop(PUSH1)
	s(10) = s(8)
	nop(DUP2)
	call(jump1412_0(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(LT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1412_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	geq(s(10), s(9))
	call(block1434_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

jump1412_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	lt(s(10), s(9))
	call(block1430_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1430_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(9) = 0
	nop(PUSH1)
	s(10) = s(9)
	nop(DUP1)
	nop(REVERT)

block1434_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(9) = s(7)
	nop(DUP2)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(8)
	nop(DUP1)
	s(10) = s(9)
	nop(DUP1)
	s(10) = l(l3)
	nop(MLOAD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	nop(POP)
	s(7) = 1000
	nop(PUSH2)
	s(8) = s(6)
	nop(DUP2)
	call(jump1434_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1434_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	lt(s(8), s(7))
	call(block1598_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

jump1434_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	geq(s(8), s(7))
	call(block1465_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

block1465_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	s(7) = 11
	nop(PUSH1)
	s(7) = g(collectedNDAO)
	nop(SLOAD)
	s(8) = 3
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	s(9) = 10
	nop(PUSH1)
	s(10) = 1250000
	nop(PUSH3)
	s(11) = 9
	nop(PUSH1)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(11) = s(9)
	nop(DUP2)
	call(jump1465_0(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1465_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(11), 0)
	call(block1549_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

jump1465_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(11), 0)
	call(block1548_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1548_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block1549_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(9) = s(10)/s(9)
	nop(DIV)
	s(8) = s(9)*s(8)
	nop(MUL)
	s(9) = s(7)
	nop(DUP2)
	call(jump1549_0(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1549_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(9), 0)
	call(block1560_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

jump1549_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(9), 0)
	call(block1559_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1559_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump1560_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(12), 0)
	call(block1582_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

jump1560_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(12), 0)
	call(block1581_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1560_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = 21000000
	nop(PUSH4)
	s(9) = s(6)
	nop(DUP3)
	s(10) = 10
	nop(PUSH1)
	s(11) = 1250000
	nop(PUSH3)
	s(12) = s(10)
	nop(DUP2)
	call(jump1560_0(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1581_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block1582_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(10) = s(11)/s(10)
	nop(DIV)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(10) = s(8)
	nop(DUP2)
	call(jump1582_0(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1582_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(10), 0)
	call(block1593_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

jump1582_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(10), 0)
	call(block1592_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1592_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block1593_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(1)
	s(1) = s(7)
	s(7) = s(8)
	nop(SWAP6)
	nop(POP)
	call(block1598_0(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller))

block1598_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), g(owner), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(7)
	nop(DUP1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(8) = g(owner)
	nop(SLOAD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(2)
	s(2) = s(7)
	s(7) = s(8)
	nop(SWAP5)
	nop(POP)
	call(block1635_0(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

block1635_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	call(block1636_1(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

block1636_0(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(0)
	nop(DUP7)
	call(jump1636_0(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1636_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	gt(s(7), s(6))
	call(block1651_0(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1636_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	leq(s(7), s(6))
	call(block1647_0(s(5), s(4), s(3), s(2), s(1), s(0)))

block1636_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(1)
	nop(DUP7)
	call(jump1636_1(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1636_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	gt(s(8), s(7))
	call(block1651_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1636_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	leq(s(8), s(7))
	call(block1647_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1636_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(1)
	nop(DUP7)
	call(jump1636_2(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1636_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	gt(s(8), s(7))
	call(block1651_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1636_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	leq(s(8), s(7))
	call(block1647_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1647_0(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

block1647_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(7) = 0
	nop(PUSH1)
	s(8) = s(7)
	nop(DUP1)
	nop(REVERT)

block1647_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(7) = 0
	nop(PUSH1)
	s(8) = s(7)
	nop(DUP1)
	nop(REVERT)

block1651_0(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = 3
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = caller
	nop(CALLER)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	l(l1) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(6)
	nop(DUP2)
	l(l2) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	gl = s(6)
	s(6) = fresh(0)
	nop(SLOAD)
	s(7) = s(0)
	nop(DUP7)
	s(8) = 3
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	gl = s(8)
	s(8) = fresh(1)
	nop(SLOAD)
	s(7) = s(8)+s(7)
	nop(ADD)
	call(jump1651_0(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1651_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	gt(s(7), s(6))
	call(block1793_0(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1651_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	leq(s(7), s(6))
	call(block1789_0(s(5), s(4), s(3), s(2), s(1), s(0)))

block1651_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = 3
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	gl = s(7)
	s(7) = fresh(0)
	nop(SLOAD)
	s(8) = s(1)
	nop(DUP7)
	s(9) = 3
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = caller
	nop(CALLER)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l1) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	l(l2) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	gl = s(9)
	s(9) = fresh(1)
	nop(SLOAD)
	s(8) = s(9)+s(8)
	nop(ADD)
	call(jump1651_1(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1651_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	gt(s(8), s(7))
	call(block1793_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1651_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	leq(s(8), s(7))
	call(block1789_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1651_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = 3
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	gl = s(7)
	s(7) = fresh(0)
	nop(SLOAD)
	s(8) = s(1)
	nop(DUP7)
	s(9) = 3
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = caller
	nop(CALLER)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l1) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	l(l2) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	gl = s(9)
	s(9) = fresh(1)
	nop(SLOAD)
	s(8) = s(9)+s(8)
	nop(ADD)
	call(jump1651_2(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1651_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	gt(s(8), s(7))
	call(block1793_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1651_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	leq(s(8), s(7))
	call(block1789_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1789_0(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

block1789_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(7) = 0
	nop(PUSH1)
	s(8) = s(7)
	nop(DUP1)
	nop(REVERT)

block1789_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(7) = 0
	nop(PUSH1)
	s(8) = s(7)
	nop(DUP1)
	nop(REVERT)

block1793_0(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = s(0)
	nop(DUP6)
	s(7) = 3
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(1)
	nop(DUP8)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	gl = s(7)
	s(7) = fresh(0)
	nop(SLOAD)
	call(jump1793_0(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1793_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	geq(s(7), s(6))
	call(block1871_0(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1793_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	lt(s(7), s(6))
	call(block1867_0(s(5), s(4), s(3), s(2), s(1), s(0)))

block1793_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = s(1)
	nop(DUP6)
	s(8) = 3
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(2)
	nop(DUP8)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	call(jump1793_1(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1793_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	geq(s(8), s(7))
	call(block1871_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1793_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	lt(s(8), s(7))
	call(block1867_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1793_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = s(1)
	nop(DUP6)
	s(8) = 3
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(2)
	nop(DUP8)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	call(jump1793_2(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1793_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	geq(s(8), s(7))
	call(block1871_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

jump1793_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	lt(s(8), s(7))
	call(block1867_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block1867_0(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

block1867_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(7) = 0
	nop(PUSH1)
	s(8) = s(7)
	nop(DUP1)
	nop(REVERT)

block1867_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(7) = 0
	nop(PUSH1)
	s(8) = s(7)
	nop(DUP1)
	nop(REVERT)

jump1871_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(7), s(6))
	call(block2148_0(s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller))

jump1871_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(7), s(6))
	call(block1962_0(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

block1871_0(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = 1
	nop(PUSH1)
	s(6)= eq(s(6), 0)
	nop(ISZERO)
	s(6)= eq(s(6), 0)
	nop(ISZERO)
	s(7) = 6
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = 255
	nop(PUSH1)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	call(jump1871_0(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1871_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(8), s(7))
	call(block2148_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller))

jump1871_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(8), s(7))
	call(block1962_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

block1871_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = 1
	nop(PUSH1)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	s(8) = 6
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gl = s(9)
	s(9) = fresh(0)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 255
	nop(PUSH1)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(8)= eq(s(8), 0)
	nop(ISZERO)
	s(8)= eq(s(8), 0)
	nop(ISZERO)
	call(jump1871_1(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1871_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(8), s(7))
	call(block2148_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller))

jump1871_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(8), s(7))
	call(block1962_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))

block1871_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = 1
	nop(PUSH1)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	s(8) = 6
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gl = s(9)
	s(9) = fresh(0)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 255
	nop(PUSH1)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(8)= eq(s(8), 0)
	nop(ISZERO)
	s(8)= eq(s(8), 0)
	nop(ISZERO)
	call(jump1871_2(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1962_0(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	s(6) = 1
	nop(PUSH1)
	s(7) = 6
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	nop(DUP2)
	gl = s(9)
	s(9) = fresh(0)
	nop(SLOAD)
	s(10) = s(8)
	nop(DUP2)
	s(11) = 255
	nop(PUSH1)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(10) = not(s(10))
	nop(NOT)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(6)
	nop(DUP4)
	s(10)= eq(s(10), 0)
	nop(ISZERO)
	s(10)= eq(s(10), 0)
	nop(ISZERO)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(8) = or(s(9), s(8))
	nop(OR)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	s(6) = caller
	nop(CALLER)
	s(7) = 7
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = 8
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(9)
	nop(DUP2)
	s(11) = g(numberOfHolders)
	nop(SLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(9)
	s(9) = s(12)
	s(12) = s(13)
	nop(SWAP3)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(13) = 1
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(POP)
	g(numberOfHolders) = s(10)
	nop(SSTORE)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	nop(DUP2)
	gl = s(9)
	s(9) = fresh(1)
	nop(SLOAD)
	s(10) = s(8)
	nop(DUP2)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(10) = not(s(10))
	nop(NOT)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(6)
	nop(DUP4)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(8) = or(s(9), s(8))
	nop(OR)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	call(block2148_0(s(5),s(4),s(3),s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0), caller))

block1962_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	s(7) = 1
	nop(PUSH1)
	s(8) = 6
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	nop(DUP2)
	gl = s(10)
	s(10) = fresh(0)
	nop(SLOAD)
	s(11) = s(9)
	nop(DUP2)
	s(12) = 255
	nop(PUSH1)
	s(11) = s(12)*s(11)
	nop(MUL)
	s(11) = not(s(11))
	nop(NOT)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(7)
	nop(DUP4)
	s(11)= eq(s(11), 0)
	nop(ISZERO)
	s(11)= eq(s(11), 0)
	nop(ISZERO)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(9) = or(s(10), s(9))
	nop(OR)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gs(1) = s(9)
	gs(2) = s(8)
	nop(SSTORE)
	nop(POP)
	s(7) = caller
	nop(CALLER)
	s(8) = 7
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = 8
	nop(PUSH1)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(10)
	nop(DUP2)
	s(12) = g(numberOfHolders)
	nop(SLOAD)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(10)
	s(10) = s(13)
	s(13) = s(14)
	nop(SWAP3)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = 1
	nop(PUSH1)
	s(13) = s(14)+s(13)
	nop(ADD)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	nop(POP)
	g(numberOfHolders) = s(11)
	nop(SSTORE)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	nop(DUP2)
	gl = s(10)
	s(10) = fresh(1)
	nop(SLOAD)
	s(11) = s(9)
	nop(DUP2)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = s(12)*s(11)
	nop(MUL)
	s(11) = not(s(11))
	nop(NOT)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(7)
	nop(DUP4)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(9) = or(s(10), s(9))
	nop(OR)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gs(1) = s(9)
	gs(2) = s(8)
	nop(SSTORE)
	nop(POP)
	call(block2148_1(s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0), caller))

block1962_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller)=>
	s(7) = 1
	nop(PUSH1)
	s(8) = 6
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	nop(DUP2)
	gl = s(10)
	s(10) = fresh(0)
	nop(SLOAD)
	s(11) = s(9)
	nop(DUP2)
	s(12) = 255
	nop(PUSH1)
	s(11) = s(12)*s(11)
	nop(MUL)
	s(11) = not(s(11))
	nop(NOT)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(7)
	nop(DUP4)
	s(11)= eq(s(11), 0)
	nop(ISZERO)
	s(11)= eq(s(11), 0)
	nop(ISZERO)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(9) = or(s(10), s(9))
	nop(OR)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gs(1) = s(9)
	gs(2) = s(8)
	nop(SSTORE)
	nop(POP)
	s(7) = caller
	nop(CALLER)
	s(8) = 7
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = 8
	nop(PUSH1)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(10)
	nop(DUP2)
	s(12) = g(numberOfHolders)
	nop(SLOAD)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(10)
	s(10) = s(13)
	s(13) = s(14)
	nop(SWAP3)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = 1
	nop(PUSH1)
	s(13) = s(14)+s(13)
	nop(ADD)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	nop(POP)
	g(numberOfHolders) = s(11)
	nop(SSTORE)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	nop(DUP2)
	gl = s(10)
	s(10) = fresh(1)
	nop(SLOAD)
	s(11) = s(9)
	nop(DUP2)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = s(12)*s(11)
	nop(MUL)
	s(11) = not(s(11))
	nop(NOT)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(7)
	nop(DUP4)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(9) = or(s(10), s(9))
	nop(OR)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gs(1) = s(9)
	gs(2) = s(8)
	nop(SSTORE)
	nop(POP)
	call(block2148_2(s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l3), l(l2), l(l1), l(l0), caller))

block2148_0(s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = s(0)
	nop(DUP6)
	s(7) = 3
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(6)
	nop(DUP3)
	s(10) = s(7)
	nop(DUP3)
	gl = s(10)
	s(10) = fresh(0)
	nop(SLOAD)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(6)
	s(6) = s(9)
	s(9) = s(10)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(8) = s(6)
	nop(DUP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	s(6) = s(0)
	nop(DUP6)
	s(7) = 3
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(1)
	nop(DUP8)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(6)
	nop(DUP3)
	s(10) = s(7)
	nop(DUP3)
	gl = s(10)
	s(10) = fresh(1)
	nop(SLOAD)
	s(9) = s(10)-s(9)
	nop(SUB)
	s(10) = s(6)
	s(6) = s(9)
	s(9) = s(10)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(8) = s(6)
	nop(DUP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(1)
	nop(DUP6)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 100389287136786176327247604509743168900146139575972864366142685224231313322991
	nop(PUSH32)
	s(9) = s(0)
	nop(DUP9)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = s(11)
	nop(DUP2)
	l(l3) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(10) = s(11)-s(10)
	nop(SUB)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	nop(LOG3)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	skip
	nop(STOP)

block2148_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = s(1)
	nop(DUP6)
	s(8) = 3
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(8)
	nop(DUP3)
	gl = s(11)
	s(11) = fresh(0)
	nop(SLOAD)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(9) = s(7)
	nop(DUP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gs(1) = s(9)
	gs(2) = s(8)
	nop(SSTORE)
	nop(POP)
	s(7) = s(1)
	nop(DUP6)
	s(8) = 3
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(2)
	nop(DUP8)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(8)
	nop(DUP3)
	gl = s(11)
	s(11) = fresh(1)
	nop(SLOAD)
	s(10) = s(11)-s(10)
	nop(SUB)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(9) = s(7)
	nop(DUP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gs(1) = s(9)
	gs(2) = s(8)
	nop(SSTORE)
	nop(POP)
	s(7) = caller
	nop(CALLER)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(2)
	nop(DUP6)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 100389287136786176327247604509743168900146139575972864366142685224231313322991
	nop(PUSH32)
	s(10) = s(1)
	nop(DUP9)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	nop(DUP3)
	s(14) = s(12)
	nop(DUP2)
	l(l3) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	s(11) = s(12)-s(11)
	nop(SUB)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	nop(LOG3)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	skip
	nop(STOP)

block2148_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = s(1)
	nop(DUP6)
	s(8) = 3
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(8)
	nop(DUP3)
	gl = s(11)
	s(11) = fresh(0)
	nop(SLOAD)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(9) = s(7)
	nop(DUP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gs(1) = s(9)
	gs(2) = s(8)
	nop(SSTORE)
	nop(POP)
	s(7) = s(1)
	nop(DUP6)
	s(8) = 3
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(2)
	nop(DUP8)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(8)
	nop(DUP3)
	gl = s(11)
	s(11) = fresh(1)
	nop(SLOAD)
	s(10) = s(11)-s(10)
	nop(SUB)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(9) = s(7)
	nop(DUP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gs(1) = s(9)
	gs(2) = s(8)
	nop(SSTORE)
	nop(POP)
	s(7) = caller
	nop(CALLER)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(2)
	nop(DUP6)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 100389287136786176327247604509743168900146139575972864366142685224231313322991
	nop(PUSH32)
	s(10) = s(1)
	nop(DUP9)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	nop(DUP3)
	s(14) = s(12)
	nop(DUP2)
	l(l3) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	s(11) = s(12)-s(11)
	nop(SUB)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	nop(LOG3)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	skip
	nop(STOP)

block274_0(s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(1) = 0
	nop(PUSH1)
	s(2) = s(1)
	nop(DUP1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = 0
	nop(PUSH1)
	s(6) = s(5)
	nop(DUP1)
	s(7) = 1
	nop(PUSH1)
	s(8) = 3
	nop(PUSH1)
	s(9) = s(7)
	nop(DUP2)
	call(jump274_0(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump274_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(9), s(8))
	call(block296_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump274_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(9), s(8))
	call(block295_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block295_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block296_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(8) = 13
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(9) = g(state)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 255
	nop(PUSH1)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 3
	nop(PUSH1)
	s(10) = s(8)
	nop(DUP2)
	call(jump296_0(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump296_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(10), s(9))
	call(block323_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump296_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(10), s(9))
	call(block322_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block322_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block323_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	call(jump323_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(EQ)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump323_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	neq(s(8), s(7))
	call(block973_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))

jump323_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	eq(s(8), s(7))
	call(block330_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

block330_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	s(7) = 0
	nop(PUSH1)
	s(8) = 3
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = address
	nop(ADDRESS)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	call(jump330_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump330_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(8), s(7))
	call(block407_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump330_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(8), s(7))
	call(block403_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block403_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(7) = 0
	nop(PUSH1)
	s(8) = s(7)
	nop(DUP1)
	nop(REVERT)

block407_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(7) = 500000
	nop(PUSH3)
	s(8) = 9
	nop(PUSH1)
	s(8) = g(collectedUSD)
	nop(SLOAD)
	call(jump407_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump407_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	lt(s(8), s(7))
	call(block426_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump407_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	geq(s(8), s(7))
	call(block422_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block422_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(7) = 0
	nop(PUSH1)
	s(8) = s(7)
	nop(DUP1)
	nop(REVERT)

jump426_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	neq(s(9), 0)
	call(block452_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump426_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	eq(s(9), 0)
	call(block451_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block426_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(7) = callvalue
	nop(CALLVALUE)
	s(8) = s(3)
	s(3) = s(7)
	s(7) = s(8)
	nop(SWAP4)
	nop(POP)
	s(7) = 1000000000000000000
	nop(PUSH8)
	s(8) = 5
	nop(PUSH1)
	s(8) = g(etherPrice)
	nop(SLOAD)
	s(9) = s(3)
	nop(DUP6)
	s(8) = s(9)*s(8)
	nop(MUL)
	s(9) = s(7)
	nop(DUP2)
	call(jump426_0(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block451_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump452_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(8), s(7))
	call(block583_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))

jump452_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(8), s(7))
	call(block471_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

block452_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = s(4)
	s(4) = s(7)
	s(7) = s(8)
	nop(SWAP3)
	nop(POP)
	s(7) = 500000
	nop(PUSH3)
	s(8) = s(4)
	nop(DUP4)
	s(9) = 9
	nop(PUSH1)
	s(9) = g(collectedUSD)
	nop(SLOAD)
	s(8) = s(9)+s(8)
	nop(ADD)
	call(jump452_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block471_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	s(7) = 9
	nop(PUSH1)
	s(7) = g(collectedUSD)
	nop(SLOAD)
	s(8) = 500000
	nop(PUSH3)
	s(7) = s(8)-s(7)
	nop(SUB)
	s(8) = s(4)
	s(4) = s(7)
	s(7) = s(8)
	nop(SWAP3)
	nop(POP)
	s(7) = 5
	nop(PUSH1)
	s(7) = g(etherPrice)
	nop(SLOAD)
	s(8) = 1000000000000000000
	nop(PUSH8)
	s(9) = s(4)
	nop(DUP5)
	s(8) = s(9)*s(8)
	nop(MUL)
	s(9) = s(7)
	nop(DUP2)
	call(jump471_0(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump471_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	neq(s(9), 0)
	call(block503_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))

jump471_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(etherPrice), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	eq(s(9), 0)
	call(block502_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block502_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump503_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	neq(s(7), 0)
	call(block568_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))

jump503_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	eq(s(7), 0)
	call(block564_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block503_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = s(3)
	s(3) = s(7)
	s(7) = s(8)
	nop(SWAP4)
	nop(POP)
	s(7) = caller
	nop(CALLER)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 3000000
	nop(PUSH3)
	s(9) = s(3)
	nop(DUP6)
	s(10) = callvalue
	nop(CALLVALUE)
	s(9) = s(10)-s(9)
	nop(SUB)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = 0
	nop(PUSH1)
	s(12) = 64
	nop(PUSH1)
	s(12) = l(l0)
	nop(MLOAD)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(10)
	nop(DUP4)
	s(13) = s(14)-s(13)
	nop(SUB)
	s(14) = s(12)
	nop(DUP2)
	s(15) = s(9)
	nop(DUP6)
	s(16) = s(7)
	nop(DUP9)
	s(17) = s(8)
	nop(DUP9)
	s(11) = 1
	nop(CALL)
	s(12) = s(7)
	s(7) = s(11)
	s(11) = s(12)
	nop(SWAP4)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	call(jump503_0(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, callvalue, extcodesize, gas, returndatasize, timestamp))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block564_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(7) = 0
	nop(PUSH1)
	s(8) = s(7)
	nop(DUP1)
	nop(REVERT)

block568_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(7) = 500000
	nop(PUSH3)
	s(8) = 9
	nop(PUSH1)
	s(9) = s(7)
	nop(DUP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	g(collectedUSD) = s(8)
	nop(SSTORE)
	nop(POP)
	s(7) = 600
	nop(PUSH2)
	call(block600_0(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))
	nop(JUMP)

block583_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(collectedUSD), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(7) = s(4)
	nop(DUP3)
	s(8) = 9
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(8)
	nop(DUP3)
	s(11) = g(collectedUSD)
	nop(SLOAD)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(9) = s(7)
	nop(DUP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	g(collectedUSD) = s(8)
	nop(SSTORE)
	nop(POP)
	call(block600_0(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))

block600_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(7) = 1506815999
	nop(PUSH4)
	s(8) = timestamp
	nop(TIMESTAMP)
	call(jump600_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump600_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(8), s(7))
	call(block622_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))

jump600_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(8), s(7))
	call(block614_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block614_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	s(7) = 50
	nop(PUSH1)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	nop(POP)
	s(7) = 673
	nop(PUSH2)
	call(block673_1(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(JUMP)

block622_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(7) = 1507247999
	nop(PUSH4)
	s(8) = timestamp
	nop(TIMESTAMP)
	call(jump622_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump622_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(8), s(7))
	call(block644_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))

jump622_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(8), s(7))
	call(block636_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block636_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	s(7) = 50
	nop(PUSH1)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	nop(POP)
	s(7) = 672
	nop(PUSH2)
	call(block672_1(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(JUMP)

block644_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(7) = 1507766399
	nop(PUSH4)
	s(8) = timestamp
	nop(TIMESTAMP)
	call(jump644_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump644_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	gt(s(8), s(7))
	call(block666_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

jump644_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize, timestamp)=>
	leq(s(8), s(7))
	call(block658_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block658_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	s(7) = 65
	nop(PUSH1)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	nop(POP)
	s(7) = 671
	nop(PUSH2)
	call(block671_2(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(JUMP)

block666_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(7) = 70
	nop(PUSH1)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	nop(POP)
	call(block671_1(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block671_0(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	call(block672_0(s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block671_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	call(block672_1(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block671_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	call(block672_2(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block672_0(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	call(block673_0(s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block672_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	call(block673_1(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block672_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	call(block673_2(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

block673_0(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(6) = s(4)
	nop(DUP2)
	s(7) = 100
	nop(PUSH1)
	s(8) = s(3)
	nop(DUP5)
	s(7) = s(8)*s(7)
	nop(MUL)
	s(8) = s(6)
	nop(DUP2)
	call(jump673_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump673_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	neq(s(8), 0)
	call(block687_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

jump673_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	eq(s(8), 0)
	call(block686_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block673_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(7) = s(5)
	nop(DUP2)
	s(8) = 100
	nop(PUSH1)
	s(9) = s(4)
	nop(DUP5)
	s(8) = s(9)*s(8)
	nop(MUL)
	s(9) = s(7)
	nop(DUP2)
	call(jump673_1(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump673_1(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	neq(s(9), 0)
	call(block687_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

jump673_1(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	eq(s(9), 0)
	call(block686_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block673_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(7) = s(5)
	nop(DUP2)
	s(8) = 100
	nop(PUSH1)
	s(9) = s(4)
	nop(DUP5)
	s(8) = s(9)*s(8)
	nop(MUL)
	s(9) = s(7)
	nop(DUP2)
	call(jump673_2(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump673_2(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	neq(s(9), 0)
	call(block687_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))

jump673_2(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	eq(s(9), 0)
	call(block686_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block686_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block686_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block686_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump687_0(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	eq(s(17), 0)
	call(block882_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize))

jump687_0(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	neq(s(17), 0)
	call(block878_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block687_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(6) = s(7)/s(6)
	nop(DIV)
	s(7) = s(0)
	s(0) = s(6)
	s(6) = s(7)
	nop(SWAP6)
	nop(POP)
	s(6) = 1000
	nop(PUSH2)
	s(7) = 4
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(8) = g(neurodao)
	nop(SLOAD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1889567281
	nop(PUSH4)
	s(9) = caller
	nop(CALLER)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = s(8)
	nop(DUP3)
	s(12) = 4294967295
	nop(PUSH4)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 26959946667150639794667015087019630673637144422540572481103610249216
	nop(PUSH29)
	s(11) = s(12)*s(11)
	nop(MUL)
	s(12) = s(10)
	nop(DUP2)
	l(l3) = s(11)
	nop(MSTORE)
	s(11) = 4
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = s(11)
	nop(DUP2)
	l(l4) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(10) = 32
	nop(PUSH1)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(9)
	nop(DUP4)
	s(12) = s(13)-s(12)
	nop(SUB)
	s(13) = s(11)
	nop(DUP2)
	s(14) = 0
	nop(PUSH1)
	s(15) = s(7)
	nop(DUP8)
	s(16) = s(15)
	nop(DUP1)
	s(16) = extcodesize
	nop(EXTCODESIZE)
	s(16)= eq(s(16), 0)
	nop(ISZERO)
	s(17) = s(16)
	nop(DUP1)
	call(jump687_0(s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump687_1(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	eq(s(18), 0)
	call(block882_1(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize))

jump687_1(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	neq(s(18), 0)
	call(block878_1(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block687_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = s(1)
	s(1) = s(7)
	s(7) = s(8)
	nop(SWAP6)
	nop(POP)
	s(7) = 1000
	nop(PUSH2)
	s(8) = 4
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(9) = g(neurodao)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1889567281
	nop(PUSH4)
	s(10) = caller
	nop(CALLER)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(9)
	nop(DUP3)
	s(13) = 4294967295
	nop(PUSH4)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 26959946667150639794667015087019630673637144422540572481103610249216
	nop(PUSH29)
	s(12) = s(13)*s(12)
	nop(MUL)
	s(13) = s(11)
	nop(DUP2)
	l(l3) = s(12)
	nop(MSTORE)
	s(12) = 4
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	nop(DUP3)
	s(14) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(13) = and(s(14), s(13))
	nop(AND)
	s(14) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(13) = and(s(14), s(13))
	nop(AND)
	s(14) = s(12)
	nop(DUP2)
	l(l4) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(11) = 32
	nop(PUSH1)
	s(12) = 64
	nop(PUSH1)
	s(12) = l(l0)
	nop(MLOAD)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(10)
	nop(DUP4)
	s(13) = s(14)-s(13)
	nop(SUB)
	s(14) = s(12)
	nop(DUP2)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(8)
	nop(DUP8)
	s(17) = s(16)
	nop(DUP1)
	s(17) = extcodesize
	nop(EXTCODESIZE)
	s(17)= eq(s(17), 0)
	nop(ISZERO)
	s(18) = s(17)
	nop(DUP1)
	call(jump687_1(s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump687_2(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	eq(s(18), 0)
	call(block882_2(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize))

jump687_2(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	neq(s(18), 0)
	call(block878_2(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block687_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = s(1)
	s(1) = s(7)
	s(7) = s(8)
	nop(SWAP6)
	nop(POP)
	s(7) = 1000
	nop(PUSH2)
	s(8) = 4
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(9) = g(neurodao)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1889567281
	nop(PUSH4)
	s(10) = caller
	nop(CALLER)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(9)
	nop(DUP3)
	s(13) = 4294967295
	nop(PUSH4)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 26959946667150639794667015087019630673637144422540572481103610249216
	nop(PUSH29)
	s(12) = s(13)*s(12)
	nop(MUL)
	s(13) = s(11)
	nop(DUP2)
	l(l3) = s(12)
	nop(MSTORE)
	s(12) = 4
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	nop(DUP3)
	s(14) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(13) = and(s(14), s(13))
	nop(AND)
	s(14) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(13) = and(s(14), s(13))
	nop(AND)
	s(14) = s(12)
	nop(DUP2)
	l(l4) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(11) = 32
	nop(PUSH1)
	s(12) = 64
	nop(PUSH1)
	s(12) = l(l0)
	nop(MLOAD)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(10)
	nop(DUP4)
	s(13) = s(14)-s(13)
	nop(SUB)
	s(14) = s(12)
	nop(DUP2)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(8)
	nop(DUP8)
	s(17) = s(16)
	nop(DUP1)
	s(17) = extcodesize
	nop(EXTCODESIZE)
	s(17)= eq(s(17), 0)
	nop(ISZERO)
	s(18) = s(17)
	nop(DUP1)
	call(jump687_2(s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), l(l4), l(l3), l(l2), l(l1), l(l0), address, caller, extcodesize, gas, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block878_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(17) = 0
	nop(PUSH1)
	s(18) = s(17)
	nop(DUP1)
	nop(REVERT)

block878_1(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(18) = 0
	nop(PUSH1)
	s(19) = s(18)
	nop(DUP1)
	nop(REVERT)

block878_2(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(18) = 0
	nop(PUSH1)
	s(19) = s(18)
	nop(DUP1)
	nop(REVERT)

block882_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(16) = gas
	nop(GAS)
	s(10) = 1
	nop(CALL)
	s(10)= eq(s(10), 0)
	nop(ISZERO)
	s(11) = s(10)
	nop(DUP1)
	call(jump882_0(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump882_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize)=>
	eq(s(11), 0)
	call(block902_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize))

jump882_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize)=>
	neq(s(11), 0)
	call(block893_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize))

block882_1(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(17) = gas
	nop(GAS)
	s(11) = 1
	nop(CALL)
	s(11)= eq(s(11), 0)
	nop(ISZERO)
	s(12) = s(11)
	nop(DUP1)
	call(jump882_1(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump882_1(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize)=>
	eq(s(12), 0)
	call(block902_1(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize))

jump882_1(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize)=>
	neq(s(12), 0)
	call(block893_1(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize))

block882_2(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(17) = gas
	nop(GAS)
	s(11) = 1
	nop(CALL)
	s(11)= eq(s(11), 0)
	nop(ISZERO)
	s(12) = s(11)
	nop(DUP1)
	call(jump882_2(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump882_2(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize)=>
	eq(s(12), 0)
	call(block902_2(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize))

jump882_2(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, gas, returndatasize)=>
	neq(s(12), 0)
	call(block893_2(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize))

block893_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize)=>
	s(11) = returndatasize
	nop(RETURNDATASIZE)
	s(12) = 0
	nop(PUSH1)
	s(13) = s(12)
	nop(DUP1)
	nop(RETURNDATACOPY)
	s(12) = returndatasize
	nop(RETURNDATASIZE)
	s(13) = 0
	nop(PUSH1)
	nop(REVERT)

block893_1(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize)=>
	s(12) = returndatasize
	nop(RETURNDATASIZE)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(13)
	nop(DUP1)
	nop(RETURNDATACOPY)
	s(13) = returndatasize
	nop(RETURNDATASIZE)
	s(14) = 0
	nop(PUSH1)
	nop(REVERT)

block893_2(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize)=>
	s(12) = returndatasize
	nop(RETURNDATASIZE)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(13)
	nop(DUP1)
	nop(RETURNDATACOPY)
	s(13) = returndatasize
	nop(RETURNDATASIZE)
	s(14) = 0
	nop(PUSH1)
	nop(REVERT)

block902_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(7) = 64
	nop(PUSH1)
	s(7) = l(l0)
	nop(MLOAD)
	s(8) = returndatasize
	nop(RETURNDATASIZE)
	s(9) = 32
	nop(PUSH1)
	s(10) = s(8)
	nop(DUP2)
	call(jump902_0(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize))
	nop(LT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump902_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize)=>
	geq(s(10), s(9))
	call(block924_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

jump902_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize)=>
	lt(s(10), s(9))
	call(block920_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block902_1(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(8) = 64
	nop(PUSH1)
	s(8) = l(l0)
	nop(MLOAD)
	s(9) = returndatasize
	nop(RETURNDATASIZE)
	s(10) = 32
	nop(PUSH1)
	s(11) = s(9)
	nop(DUP2)
	call(jump902_1(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize))
	nop(LT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump902_1(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize)=>
	geq(s(11), s(10))
	call(block924_1(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

jump902_1(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize)=>
	lt(s(11), s(10))
	call(block920_1(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block902_2(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize)=>
	nop(JUMPDEST)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(8) = 64
	nop(PUSH1)
	s(8) = l(l0)
	nop(MLOAD)
	s(9) = returndatasize
	nop(RETURNDATASIZE)
	s(10) = 32
	nop(PUSH1)
	s(11) = s(9)
	nop(DUP2)
	call(jump902_2(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize))
	nop(LT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump902_2(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize)=>
	geq(s(11), s(10))
	call(block924_2(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

jump902_2(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller, returndatasize)=>
	lt(s(11), s(10))
	call(block920_2(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block920_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(9) = 0
	nop(PUSH1)
	s(10) = s(9)
	nop(DUP1)
	nop(REVERT)

block920_1(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(10) = 0
	nop(PUSH1)
	s(11) = s(10)
	nop(DUP1)
	nop(REVERT)

block920_2(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(10) = 0
	nop(PUSH1)
	s(11) = s(10)
	nop(DUP1)
	nop(REVERT)

block924_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	nop(JUMPDEST)
	s(9) = s(7)
	nop(DUP2)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(8)
	nop(DUP1)
	s(10) = s(9)
	nop(DUP1)
	s(10) = l(l3)
	nop(MLOAD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	call(jump924_0(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump924_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	lt(s(7), s(6))
	call(block965_0(s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

jump924_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	geq(s(7), s(6))
	call(block949_0(s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

block924_1(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	nop(JUMPDEST)
	s(10) = s(8)
	nop(DUP2)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(9)
	nop(DUP1)
	s(11) = s(10)
	nop(DUP1)
	s(11) = l(l3)
	nop(MLOAD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	call(jump924_1(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump924_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	lt(s(8), s(7))
	call(block965_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

jump924_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	geq(s(8), s(7))
	call(block949_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

block924_2(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	nop(JUMPDEST)
	s(10) = s(8)
	nop(DUP2)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(9)
	nop(DUP1)
	s(11) = s(10)
	nop(DUP1)
	s(11) = l(l3)
	nop(MLOAD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	call(jump924_2(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump924_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	lt(s(8), s(7))
	call(block965_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

jump924_2(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	geq(s(8), s(7))
	call(block949_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

block949_0(s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	s(6) = s(0)
	nop(DUP6)
	s(7) = 11
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(6)
	nop(DUP3)
	s(10) = s(7)
	nop(DUP3)
	s(10) = g(collectedNDAO)
	nop(SLOAD)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(6)
	s(6) = s(9)
	s(9) = s(10)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(8) = s(6)
	nop(DUP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	g(collectedNDAO) = s(7)
	nop(SSTORE)
	nop(POP)
	call(block965_0(s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

block949_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	s(7) = s(1)
	nop(DUP6)
	s(8) = 11
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(8)
	nop(DUP3)
	s(11) = g(collectedNDAO)
	nop(SLOAD)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(9) = s(7)
	nop(DUP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	g(collectedNDAO) = s(8)
	nop(SSTORE)
	nop(POP)
	call(block965_1(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

block949_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(collectedNDAO), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	s(7) = s(1)
	nop(DUP6)
	s(8) = 11
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(8)
	nop(DUP3)
	s(11) = g(collectedNDAO)
	nop(SLOAD)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(9) = s(7)
	nop(DUP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	g(collectedNDAO) = s(8)
	nop(SSTORE)
	nop(POP)
	call(block965_2(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller))

block965_0(s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	nop(JUMPDEST)
	s(6) = address
	nop(ADDRESS)
	s(7) = s(1)
	s(1) = s(6)
	s(6) = s(7)
	nop(SWAP5)
	nop(POP)
	s(6) = 1636
	nop(PUSH2)
	call(block1636_0(s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(JUMP)

block965_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	nop(JUMPDEST)
	s(7) = address
	nop(ADDRESS)
	s(8) = s(2)
	s(2) = s(7)
	s(7) = s(8)
	nop(SWAP5)
	nop(POP)
	s(7) = 1636
	nop(PUSH2)
	call(block1636_1(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(JUMP)

block965_2(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), address, caller)=>
	nop(JUMPDEST)
	s(7) = address
	nop(ADDRESS)
	s(8) = s(2)
	s(2) = s(7)
	s(7) = s(8)
	nop(SWAP5)
	nop(POP)
	s(7) = 1636
	nop(PUSH2)
	call(block1636_2(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(numberOfHolders), l(l3), l(l2), l(l1), l(l0), caller))
	nop(JUMP)

jump973_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	leq(s(9), s(8))
	call(block986_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))

jump973_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	gt(s(9), s(8))
	call(block985_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block973_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(7) = 2
	nop(PUSH1)
	s(8) = 3
	nop(PUSH1)
	s(9) = s(7)
	nop(DUP2)
	call(jump973_0(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block985_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block986_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	nop(JUMPDEST)
	s(8) = 13
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(9) = g(state)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 255
	nop(PUSH1)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 3
	nop(PUSH1)
	s(10) = s(8)
	nop(DUP2)
	call(jump986_0(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump986_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	leq(s(10), s(9))
	call(block1013_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize))

jump986_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(state), g(collectedNDAO), g(numberOfHolders), g(neurodao), g(owner), l(l4), l(l3), l(l2), l(l1), l(l0), caller, extcodesize, gas, returndatasize)=>
	gt(s(10), s(9))
	call(block1012_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

