{
    "ERC20Basic": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "balanceOf(address)": [
                124,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                180,
                75
            ],
            "balanceOf(address)": [
                615,
                185
            ],
            "transferFrom(address,address,uint256)": [
                324,
                119
            ],
            "allowance(address,address)": [
                913,
                273
            ],
            "transfer(address,uint256)": [
                812,
                251
            ]
        },
        "block_CALL_mapping": {}
    },
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "SafeERC20": {
        "function_list": [
            "safeTransfer(ERC20Basic,address,uint256)",
            "safeTransferFrom(ERC20,address,address,uint256)",
            "safeApprove(ERC20,address,uint256)"
        ],
        "initial_state": {
            "safeTransfer(ERC20Basic,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "safeTransferFrom(ERC20,address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "safeApprove(ERC20,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "HasNoEther": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "HasNoEther()",
            "fallback()",
            "reclaimEther()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "HasNoEther()": {
                "argument": {},
                "contract": {}
            },
            "fallback()": {
                "argument": {},
                "contract": {}
            },
            "reclaimEther()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "reclaimEther()": [
                189,
                97
            ],
            "transferOwnership(address)": [
                212,
                119
            ]
        },
        "block_CALL_mapping": {
            "jump407": [
                "owner.send(this.balance)",
                "owner.send(this.balance)"
            ],
            "block407": [
                "owner.send(this.balance)"
            ]
        }
    },
    "HasNoContracts": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "reclaimContract(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "reclaimContract(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "reclaimContract(address)": [
                92,
                75
            ],
            "transferOwnership(address)": [
                246,
                119
            ]
        },
        "block_CALL_mapping": {
            "block597": [
                "contractInst.transferOwnership(owner)"
            ],
            "jump597": [
                "contractInst.transferOwnership(owner)",
                "contractInst.transferOwnership(owner)"
            ]
        }
    },
    "CanReclaimToken": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "reclaimToken(ERC20Basic)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "reclaimToken(ERC20Basic)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                246,
                119
            ]
        },
        "block_CALL_mapping": {
            "jump561": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "jump1243": [
                "token.transfer(to, value)",
                "token.transfer(to, value)"
            ],
            "block1243": [
                "token.transfer(to, value)"
            ],
            "block561": [
                "token.balanceOf(this)"
            ]
        }
    },
    "HasNoTokens": {
        "function_list": [
            "reclaimToken(ERC20Basic)",
            "Ownable()",
            "transferOwnership(address)",
            "tokenFallback(address,uint256,bytes)"
        ],
        "initial_state": {
            "reclaimToken(ERC20Basic)": {
                "argument": {},
                "contract": {}
            },
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "tokenFallback(address,uint256,bytes)": {
                "argument": {
                    "value_": "uint256",
                    "data_": "bytes"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "tokenFallback(address,uint256,bytes)": [
                257,
                119
            ],
            "transferOwnership(address)": [
                358,
                141
            ]
        },
        "block_CALL_mapping": {
            "block1360": [
                "token.transfer(to, value)"
            ],
            "block673": [
                "token.balanceOf(this)"
            ],
            "jump1360": [
                "token.transfer(to, value)",
                "token.transfer(to, value)"
            ],
            "jump673": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ]
        }
    },
    "NoOwner": {
        "function_list": [
            "reclaimContract(address)",
            "Ownable()",
            "transferOwnership(address)",
            "tokenFallback(address,uint256,bytes)",
            "reclaimToken(ERC20Basic)",
            "HasNoEther()",
            "fallback()",
            "reclaimEther()"
        ],
        "initial_state": {
            "reclaimContract(address)": {
                "argument": {},
                "contract": {}
            },
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "tokenFallback(address,uint256,bytes)": {
                "argument": {
                    "value_": "uint256",
                    "data_": "bytes"
                },
                "contract": {}
            },
            "reclaimToken(ERC20Basic)": {
                "argument": {},
                "contract": {}
            },
            "HasNoEther()": {
                "argument": {},
                "contract": {}
            },
            "fallback()": {
                "argument": {},
                "contract": {}
            },
            "reclaimEther()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "tokenFallback(address,uint256,bytes)": [
                379,
                163
            ],
            "reclaimContract(address)": [
                202,
                97
            ],
            "reclaimEther()": [
                356,
                141
            ],
            "transferOwnership(address)": [
                480,
                185
            ]
        },
        "block_CALL_mapping": {
            "jump2004": [
                "token.transfer(to, value)",
                "token.transfer(to, value)"
            ],
            "block2004": [
                "token.transfer(to, value)"
            ],
            "block1376": [
                "owner.send(this.balance)"
            ],
            "jump1220": [
                "contractInst.transferOwnership(owner)",
                "contractInst.transferOwnership(owner)"
            ],
            "jump795": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "jump1376": [
                "owner.send(this.balance)",
                "owner.send(this.balance)"
            ],
            "block795": [
                "token.balanceOf(this)"
            ],
            "block1220": [
                "contractInst.transferOwnership(owner)"
            ]
        }
    },
    "Destructible": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "Destructible()",
            "destroy()",
            "destroyAndSend(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "Destructible()": {
                "argument": {},
                "contract": {}
            },
            "destroy()": {
                "argument": {},
                "contract": {}
            },
            "destroyAndSend(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "destroyAndSend(address)": [
                280,
                141
            ],
            "destroy()": [
                103,
                75
            ],
            "transferOwnership(address)": [
                213,
                119
            ]
        },
        "block_CALL_mapping": {}
    },
    "BasicToken": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transfer(address,uint256)": [
                222,
                119
            ],
            "balanceOf(address)": [
                135,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "StandardToken": {
        "function_list": [
            "transfer(address,uint256)",
            "balanceOf(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "increaseApproval(address,uint256)",
            "decreaseApproval(address,uint256)"
        ],
        "initial_state": {
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "increaseApproval(address,uint256)": {
                "argument": {
                    "_addedValue": "uint256"
                },
                "contract": {}
            },
            "decreaseApproval(address,uint256)": {
                "argument": {
                    "_subtractedValue": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                147,
                75
            ],
            "increaseApproval(address,uint256)": [
                713,
                207
            ],
            "balanceOf(address)": [
                525,
                163
            ],
            "allowance(address,address)": [
                814,
                229
            ],
            "decreaseApproval(address,uint256)": [
                424,
                141
            ],
            "transferFrom(address,address,uint256)": [
                291,
                119
            ],
            "transfer(address,uint256)": [
                612,
                185
            ]
        },
        "block_CALL_mapping": {}
    },
    "MintableToken": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "increaseApproval(address,uint256)",
            "decreaseApproval(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "mint(address,uint256)",
            "finishMinting()",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "increaseApproval(address,uint256)": {
                "argument": {
                    "_addedValue": "uint256"
                },
                "contract": {}
            },
            "decreaseApproval(address,uint256)": {
                "argument": {
                    "_subtractedValue": "uint256"
                },
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "mint(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "finishMinting()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                249,
                97
            ],
            "increaseApproval(address,uint256)": [
                1050,
                295
            ],
            "mint(address,uint256)": [
                526,
                163
            ],
            "balanceOf(address)": [
                728,
                207
            ],
            "finishMinting()": [
                815,
                229
            ],
            "allowance(address,address)": [
                1151,
                317
            ],
            "decreaseApproval(address,uint256)": [
                627,
                185
            ],
            "transferFrom(address,address,uint256)": [
                393,
                141
            ],
            "transfer(address,uint256)": [
                949,
                273
            ],
            "transferOwnership(address)": [
                1270,
                339
            ]
        },
        "block_CALL_mapping": {}
    },
    "TokenVesting": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "TokenVesting(address,uint256,uint256,uint256,bool)",
            "release(ERC20Basic)",
            "revoke(ERC20Basic)",
            "releasableAmount(ERC20Basic)",
            "vestedAmount(ERC20Basic)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {
                    "cliff": "uint256",
                    "start": "uint256",
                    "duration": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "cliff": "uint256",
                    "start": "uint256",
                    "duration": "uint256"
                }
            },
            "TokenVesting(address,uint256,uint256,uint256,bool)": {
                "argument": {
                    "_start": "uint256",
                    "_cliff": "uint256",
                    "_duration": "uint256"
                },
                "contract": {
                    "cliff": "uint256",
                    "start": "uint256",
                    "duration": "uint256"
                }
            },
            "release(ERC20Basic)": {
                "argument": {},
                "contract": {
                    "cliff": "uint256",
                    "start": "uint256",
                    "duration": "uint256"
                }
            },
            "revoke(ERC20Basic)": {
                "argument": {},
                "contract": {
                    "cliff": "uint256",
                    "start": "uint256",
                    "duration": "uint256"
                }
            },
            "releasableAmount(ERC20Basic)": {
                "argument": {},
                "contract": {
                    "cliff": "uint256",
                    "start": "uint256",
                    "duration": "uint256"
                }
            },
            "vestedAmount(ERC20Basic)": {
                "argument": {},
                "contract": {
                    "cliff": "uint256",
                    "start": "uint256",
                    "duration": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                947,
                317
            ]
        },
        "block_CALL_mapping": {
            "jump3434_0": [
                "token.transfer(to, value)",
                "token.transfer(to, value)"
            ],
            "jump1689_1": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "jump1689": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "block3434_0": [
                "token.transfer(to, value)"
            ],
            "block3434": [
                "token.transfer(to, value)"
            ],
            "jump3434": [
                "token.transfer(to, value)",
                "token.transfer(to, value)"
            ],
            "jump2450": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "block1689_2": [
                "token.balanceOf(this)"
            ],
            "block1689_1": [
                "token.balanceOf(this)"
            ],
            "block1689_0": [
                "token.balanceOf(this)"
            ],
            "jump1689_0": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "jump1689_2": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "block1689": [
                "token.balanceOf(this)"
            ],
            "block2450": [
                "token.balanceOf(this)"
            ]
        }
    },
    "AALMToken": {
        "function_list": [
            "reclaimContract(address)",
            "Ownable()",
            "transferOwnership(address)",
            "tokenFallback(address,uint256,bytes)",
            "reclaimToken(ERC20Basic)",
            "HasNoEther()",
            "fallback()",
            "reclaimEther()",
            "mint(address,uint256)",
            "finishMinting()",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "increaseApproval(address,uint256)",
            "decreaseApproval(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "init(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "reclaimContract(address)": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8"
                }
            },
            "Ownable()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8"
                }
            },
            "tokenFallback(address,uint256,bytes)": {
                "argument": {
                    "value_": "uint256",
                    "data_": "bytes"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8"
                }
            },
            "reclaimToken(ERC20Basic)": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8"
                }
            },
            "HasNoEther()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8"
                }
            },
            "reclaimEther()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8"
                }
            },
            "mint(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8"
                }
            },
            "finishMinting()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8"
                }
            },
            "increaseApproval(address,uint256)": {
                "argument": {
                    "_addedValue": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8"
                }
            },
            "decreaseApproval(address,uint256)": {
                "argument": {
                    "_subtractedValue": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8"
                }
            },
            "init(address)": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                491,
                119
            ],
            "init(address)": [
                702,
                185
            ],
            "tokenFallback(address,uint256,bytes)": [
                1709,
                449
            ],
            "increaseApproval(address,uint256)": [
                1810,
                471
            ],
            "mint(address,uint256)": [
                1018,
                273
            ],
            "balanceOf(address)": [
                1220,
                317
            ],
            "finishMinting()": [
                1307,
                339
            ],
            "allowance(address,address)": [
                1911,
                493
            ],
            "reclaimContract(address)": [
                902,
                229
            ],
            "decreaseApproval(address,uint256)": [
                1119,
                295
            ],
            "transfer(address,uint256)": [
                1608,
                427
            ],
            "reclaimEther()": [
                1585,
                405
            ],
            "transferFrom(address,address,uint256)": [
                769,
                207
            ],
            "transferOwnership(address)": [
                2030,
                515
            ]
        },
        "block_CALL_mapping": {
            "jump5235": [
                "owner.send(this.balance)",
                "owner.send(this.balance)"
            ],
            "block5235": [
                "owner.send(this.balance)"
            ],
            "jump3496": [
                "contractInst.transferOwnership(owner)",
                "contractInst.transferOwnership(owner)"
            ],
            "block6645": [
                "token.transfer(to, value)"
            ],
            "block3496": [
                "contractInst.transferOwnership(owner)"
            ],
            "block2765": [
                "token.balanceOf(this)"
            ],
            "jump6645": [
                "token.transfer(to, value)",
                "token.transfer(to, value)"
            ],
            "jump2765": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ]
        }
    },
    "AALMCrowdsale": {
        "function_list": [
            "Destructible()",
            "destroy()",
            "destroyAndSend(address)",
            "Ownable()",
            "transferOwnership(address)",
            "reclaimToken(ERC20Basic)",
            "AALMCrowdsale(uint64,uint64,uint256,uint256,uint256,uint256,uint256,uint256,uint32,uint32,uint32,uint256[],uint32[])",
            "initRatesAndBonuses(uint256,uint32,uint32,uint32,uint256[],uint32[])",
            "distributePreICOTokens(address[],uint256[])",
            "fallback()",
            "referralSale(address,address)",
            "sale(address,uint256,address)",
            "saleNonEther(address,uint256,string)",
            "crowdsaleOpen()",
            "getTokensLeft()",
            "getTokensWithBonuses(uint256,bool)",
            "getTimeBonus(uint256)",
            "getBulkBonus(uint256)",
            "getReferrerBonus(uint256)",
            "getReferralBonus(uint256)",
            "mintTokens(address,uint256)",
            "refund()",
            "refundTo(address)",
            "finalizeCrowdsale()",
            "claimEther()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Destructible()": {
                "argument": {},
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            },
            "destroy()": {
                "argument": {},
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            },
            "destroyAndSend(address)": {
                "argument": {},
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            },
            "Ownable()": {
                "argument": {},
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            },
            "reclaimToken(ERC20Basic)": {
                "argument": {},
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            },
            "AALMCrowdsale(uint64,uint64,uint256,uint256,uint256,uint256,uint256,uint256,uint32,uint32,uint32,uint256[],uint32[])": {
                "argument": {
                    "_startTimestamp": "uint64",
                    "_endTimestamp": "uint64",
                    "_hardCap": "uint256",
                    "_minCap": "uint256",
                    "_founderTokensImmediate": "uint256",
                    "_founderTokensVested": "uint256",
                    "_vestingDuration": "uint256",
                    "_baseRate": "uint256",
                    "_maxTimeBonusPercent": "uint32",
                    "_referrerBonusPercent": "uint32",
                    "_referralBonusPercent": "uint32",
                    "bulkBonusMinAmounts": "uint256[]",
                    "bulkBonusPercents": "uint32[]"
                },
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            },
            "initRatesAndBonuses(uint256,uint32,uint32,uint32,uint256[],uint32[])": {
                "argument": {
                    "_baseRate": "uint256",
                    "_maxTimeBonusPercent": "uint32",
                    "_referrerBonusPercent": "uint32",
                    "_referralBonusPercent": "uint32",
                    "bulkBonusMinAmounts": "uint256[]",
                    "bulkBonusPercents": "uint32[]"
                },
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            },
            "distributePreICOTokens(address[],uint256[])": {
                "argument": {
                    "beneficiaries": "address[]",
                    "amounts": "uint256[]"
                },
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            },
            "referralSale(address,address)": {
                "argument": {},
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            },
            "sale(address,uint256,address)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            },
            "saleNonEther(address,uint256,string)": {
                "argument": {
                    "amount": "uint256",
                    "": "string"
                },
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            },
            "crowdsaleOpen()": {
                "argument": {},
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            },
            "getTokensLeft()": {
                "argument": {},
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            },
            "getTokensWithBonuses(uint256,bool)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            },
            "getTimeBonus(uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            },
            "getBulkBonus(uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            },
            "getReferrerBonus(uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            },
            "getReferralBonus(uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            },
            "mintTokens(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            },
            "refund()": {
                "argument": {},
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            },
            "refundTo(address)": {
                "argument": {},
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            },
            "finalizeCrowdsale()": {
                "argument": {},
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            },
            "claimEther()": {
                "argument": {},
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "PERCENT_DIVIDER": "uint32",
                    "startTimestamp": "uint64",
                    "endTimestamp": "uint64",
                    "minCap": "uint256",
                    "hardCap": "uint256",
                    "baseRate": "uint256",
                    "maxTimeBonusPercent": "uint32",
                    "referrerBonusPercent": "uint32",
                    "referralBonusPercent": "uint32",
                    "bulkBonuses": "AALMCrowdsale.BulkBonus[]",
                    "tokensMinted": "uint256",
                    "tokensSold": "uint256",
                    "collectedEther": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "refundTo(address)": [
                1033,
                339
            ],
            "destroy()": [
                1271,
                383
            ],
            "refund()": [
                943,
                295
            ],
            "crowdsaleOpen()": [
                1765,
                515
            ],
            "destroyAndSend(address)": [
                2447,
                757
            ],
            "getReferrerBonus(uint256)": [
                1859,
                559
            ],
            "finalizeCrowdsale()": [
                442,
                75
            ],
            "referralSale(address,address)": [
                1989,
                603
            ],
            "getTokensLeft()": [
                2219,
                669
            ],
            "getTimeBonus(uint256)": [
                1924,
                581
            ],
            "getTokensWithBonuses(uint256,bool)": [
                673,
                185
            ],
            "transferOwnership(address)": [
                2380,
                735
            ],
            "claimEther()": [
                920,
                273
            ],
            "distributePreICOTokens(address[],uint256[])": [
                1531,
                471
            ],
            "getReferralBonus(uint256)": [
                1700,
                493
            ],
            "saleNonEther(address,uint256,string)": [
                1124,
                361
            ],
            "getBulkBonus(uint256)": [
                2154,
                647
            ]
        },
        "block_CALL_mapping": {
            "jump3568": [
                "token.transferOwnership(owner)",
                "token.transferOwnership(owner)"
            ],
            "jump4509": [
                "owner.transfer(this.balance)",
                "owner.transfer(this.balance)"
            ],
            "block4018": [
                "token.balanceOf(this)"
            ],
            "jump7292_1": [
                "token.mint(beneficiary, amount)",
                "token.mint(beneficiary, amount)"
            ],
            "jump7292_0": [
                "token.mint(beneficiary, amount)",
                "token.mint(beneficiary, amount)"
            ],
            "jump7292_3": [
                "token.mint(beneficiary, amount)",
                "token.mint(beneficiary, amount)"
            ],
            "jump7292_2": [
                "token.mint(beneficiary, amount)",
                "token.mint(beneficiary, amount)"
            ],
            "jump7292_5": [
                "token.mint(beneficiary, amount)",
                "token.mint(beneficiary, amount)"
            ],
            "jump7292_4": [
                "token.mint(beneficiary, amount)",
                "token.mint(beneficiary, amount)"
            ],
            "jump7292_6": [
                "token.mint(beneficiary, amount)",
                "token.mint(beneficiary, amount)"
            ],
            "block4509": [
                "owner.transfer(this.balance)"
            ],
            "jump4018": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "block4828": [
                "beneficiary.transfer(_refund)"
            ],
            "jump7292": [
                "token.mint(beneficiary, amount)",
                "token.mint(beneficiary, amount)"
            ],
            "block3568": [
                "token.transferOwnership(owner)"
            ],
            "block4828_0": [
                "beneficiary.transfer(_refund)"
            ],
            "jump4828": [
                "beneficiary.transfer(_refund)",
                "beneficiary.transfer(_refund)"
            ],
            "jump3286": [
                "token.finishMinting()",
                "token.finishMinting()"
            ],
            "block3286": [
                "token.finishMinting()"
            ],
            "jump7526": [
                "token.transfer(to, value)",
                "token.transfer(to, value)"
            ],
            "jump3641": [
                "owner.transfer(this.balance)",
                "owner.transfer(this.balance)"
            ],
            "block7292_2": [
                "token.mint(beneficiary, amount)"
            ],
            "block7292_6": [
                "token.mint(beneficiary, amount)"
            ],
            "block7292_5": [
                "token.mint(beneficiary, amount)"
            ],
            "block7292_4": [
                "token.mint(beneficiary, amount)"
            ],
            "block7292_3": [
                "token.mint(beneficiary, amount)"
            ],
            "jump4828_0": [
                "beneficiary.transfer(_refund)",
                "beneficiary.transfer(_refund)"
            ],
            "block7292_1": [
                "token.mint(beneficiary, amount)"
            ],
            "block7292_0": [
                "token.mint(beneficiary, amount)"
            ],
            "block7526": [
                "token.transfer(to, value)"
            ],
            "block7292": [
                "token.mint(beneficiary, amount)"
            ],
            "block3641": [
                "owner.transfer(this.balance)"
            ]
        }
    }
}