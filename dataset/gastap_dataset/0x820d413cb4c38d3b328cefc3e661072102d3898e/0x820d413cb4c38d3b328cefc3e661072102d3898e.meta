{
    "token": {
        "function_list": [
            "transfer(address,uint256)"
        ],
        "initial_state": {
            "transfer(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transfer(address,uint256)": [
                1038,
                251
            ]
        },
        "block_CALL_mapping": {
            "jump3650": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "block3650": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "KALIFORCOINICO": {
        "function_list": [
            "MiCarsICO()",
            "div(uint256,uint256)",
            "mul(uint256,uint256)",
            "kill()",
            "EmergencyPause()",
            "EmergencyUnPause()",
            "safeWithdrawal(uint256)",
            "UpdatePrice(uint256)",
            "fallback()",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "MiCarsICO()": {
                "argument": {},
                "contract": {
                    "decimals": "uint128",
                    "startdate": "uint256",
                    "deadlinePreIcoOne": "uint256",
                    "deadlinePreIcoTwo": "uint256",
                    "deadline": "uint256",
                    "vminEtherPerPurchase": "uint256",
                    "vmaxEtherPerPurchase": "uint256",
                    "price": "uint256",
                    "updatedPrice": "uint256",
                    "amountRaised": "uint256",
                    "sentToken": "uint256"
                }
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "decimals": "uint128",
                    "startdate": "uint256",
                    "deadlinePreIcoOne": "uint256",
                    "deadlinePreIcoTwo": "uint256",
                    "deadline": "uint256",
                    "vminEtherPerPurchase": "uint256",
                    "vmaxEtherPerPurchase": "uint256",
                    "price": "uint256",
                    "updatedPrice": "uint256",
                    "amountRaised": "uint256",
                    "sentToken": "uint256"
                }
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "decimals": "uint128",
                    "startdate": "uint256",
                    "deadlinePreIcoOne": "uint256",
                    "deadlinePreIcoTwo": "uint256",
                    "deadline": "uint256",
                    "vminEtherPerPurchase": "uint256",
                    "vmaxEtherPerPurchase": "uint256",
                    "price": "uint256",
                    "updatedPrice": "uint256",
                    "amountRaised": "uint256",
                    "sentToken": "uint256"
                }
            },
            "kill()": {
                "argument": {},
                "contract": {
                    "decimals": "uint128",
                    "startdate": "uint256",
                    "deadlinePreIcoOne": "uint256",
                    "deadlinePreIcoTwo": "uint256",
                    "deadline": "uint256",
                    "vminEtherPerPurchase": "uint256",
                    "vmaxEtherPerPurchase": "uint256",
                    "price": "uint256",
                    "updatedPrice": "uint256",
                    "amountRaised": "uint256",
                    "sentToken": "uint256"
                }
            },
            "EmergencyPause()": {
                "argument": {},
                "contract": {
                    "decimals": "uint128",
                    "startdate": "uint256",
                    "deadlinePreIcoOne": "uint256",
                    "deadlinePreIcoTwo": "uint256",
                    "deadline": "uint256",
                    "vminEtherPerPurchase": "uint256",
                    "vmaxEtherPerPurchase": "uint256",
                    "price": "uint256",
                    "updatedPrice": "uint256",
                    "amountRaised": "uint256",
                    "sentToken": "uint256"
                }
            },
            "EmergencyUnPause()": {
                "argument": {},
                "contract": {
                    "decimals": "uint128",
                    "startdate": "uint256",
                    "deadlinePreIcoOne": "uint256",
                    "deadlinePreIcoTwo": "uint256",
                    "deadline": "uint256",
                    "vminEtherPerPurchase": "uint256",
                    "vmaxEtherPerPurchase": "uint256",
                    "price": "uint256",
                    "updatedPrice": "uint256",
                    "amountRaised": "uint256",
                    "sentToken": "uint256"
                }
            },
            "safeWithdrawal(uint256)": {
                "argument": {
                    "_amounty": "uint256"
                },
                "contract": {
                    "decimals": "uint128",
                    "startdate": "uint256",
                    "deadlinePreIcoOne": "uint256",
                    "deadlinePreIcoTwo": "uint256",
                    "deadline": "uint256",
                    "vminEtherPerPurchase": "uint256",
                    "vmaxEtherPerPurchase": "uint256",
                    "price": "uint256",
                    "updatedPrice": "uint256",
                    "amountRaised": "uint256",
                    "sentToken": "uint256"
                }
            },
            "UpdatePrice(uint256)": {
                "argument": {
                    "_new_price": "uint256"
                },
                "contract": {
                    "decimals": "uint128",
                    "startdate": "uint256",
                    "deadlinePreIcoOne": "uint256",
                    "deadlinePreIcoTwo": "uint256",
                    "deadline": "uint256",
                    "vminEtherPerPurchase": "uint256",
                    "vmaxEtherPerPurchase": "uint256",
                    "price": "uint256",
                    "updatedPrice": "uint256",
                    "amountRaised": "uint256",
                    "sentToken": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "decimals": "uint128",
                    "startdate": "uint256",
                    "deadlinePreIcoOne": "uint256",
                    "deadlinePreIcoTwo": "uint256",
                    "deadline": "uint256",
                    "vminEtherPerPurchase": "uint256",
                    "vmaxEtherPerPurchase": "uint256",
                    "price": "uint256",
                    "updatedPrice": "uint256",
                    "amountRaised": "uint256",
                    "sentToken": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "kill()": [
                1396,
                207
            ],
            "UpdatePrice(uint256)": [
                1155,
                97
            ],
            "EmergencyPause()": [
                1373,
                185
            ],
            "EmergencyUnPause()": [
                1940,
                427
            ],
            "MiCarsICO()": [
                2049,
                493
            ],
            "safeWithdrawal(uint256)": [
                1462,
                251
            ]
        },
        "block_CALL_mapping": {
            "block1041_0": [
                "tokenReward.transfer(msg.sender, tokentosend)"
            ],
            "jump1041": [
                "tokenReward.transfer(msg.sender, tokentosend)",
                "tokenReward.transfer(msg.sender, tokentosend)"
            ],
            "jump2715": [
                "beneficiary.send(amounted)",
                "beneficiary.send(amounted)"
            ],
            "jump1041_0": [
                "tokenReward.transfer(msg.sender, tokentosend)",
                "tokenReward.transfer(msg.sender, tokentosend)"
            ],
            "block1041": [
                "tokenReward.transfer(msg.sender, tokentosend)"
            ],
            "block2715": [
                "beneficiary.send(amounted)"
            ]
        }
    }
}