{
    "owned": {
        "function_list": [
            "owned()",
            "changeOwner(address)"
        ],
        "initial_state": {
            "owned()": {
                "argument": {},
                "contract": {}
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "changeOwner(address)": [
                70,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "mortal": {
        "function_list": [
            "owned()",
            "changeOwner(address)",
            "kill()"
        ],
        "initial_state": {
            "owned()": {
                "argument": {},
                "contract": {}
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "kill()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "changeOwner(address)": [
                104,
                97
            ],
            "kill()": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "usingOraclize": {
        "function_list": [
            "oraclize_setNetwork()",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "getCodeSize(address)",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "DSParser": {
        "function_list": [
            "parseInt128(string)",
            "cast(uint256)",
            "parseInt(string,uint256)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "parseInt128(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "WAD_Dec": "uint8",
                    "WAD": "uint128"
                }
            },
            "cast(uint256)": {
                "argument": {
                    "x": "uint256"
                },
                "contract": {
                    "WAD_Dec": "uint8",
                    "WAD": "uint128"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "WAD_Dec": "uint8",
                    "WAD": "uint128"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "WAD_Dec": "uint8",
                    "WAD": "uint128"
                }
            }
        },
        "function_block_mapping": {
            "parseInt(string,uint256)": [
                81,
                75
            ],
            "parseInt128(string)": [
                216,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "I_minter": {
        "function_list": [
            "Leverage()",
            "RiskPrice(uint128,uint128,uint128,uint128)",
            "RiskPrice(uint128)",
            "PriceReturn(uint256,uint128)",
            "NewStatic()",
            "NewStaticAdr(address)",
            "NewRisk()",
            "NewRiskAdr(address)",
            "RetRisk(uint128)",
            "RetStatic(uint128)",
            "Strike()"
        ],
        "initial_state": {
            "Leverage()": {
                "argument": {},
                "contract": {}
            },
            "RiskPrice(uint128,uint128,uint128,uint128)": {
                "argument": {
                    "_currentPrice": "uint128",
                    "_StaticTotal": "uint128",
                    "_RiskTotal": "uint128",
                    "_ETHTotal": "uint128"
                },
                "contract": {}
            },
            "RiskPrice(uint128)": {
                "argument": {
                    "_currentPrice": "uint128"
                },
                "contract": {}
            },
            "PriceReturn(uint256,uint128)": {
                "argument": {
                    "_TransID": "uint256",
                    "_Price": "uint128"
                },
                "contract": {}
            },
            "NewStatic()": {
                "argument": {},
                "contract": {}
            },
            "NewStaticAdr(address)": {
                "argument": {},
                "contract": {}
            },
            "NewRisk()": {
                "argument": {},
                "contract": {}
            },
            "NewRiskAdr(address)": {
                "argument": {},
                "contract": {}
            },
            "RetRisk(uint128)": {
                "argument": {
                    "_Quantity": "uint128"
                },
                "contract": {}
            },
            "RetStatic(uint128)": {
                "argument": {
                    "_Quantity": "uint128"
                },
                "contract": {}
            },
            "Strike()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "PriceReturn(uint256,uint128)": [
                1007,
                220
            ],
            "RetStatic(uint128)": [
                412,
                44
            ],
            "NewStatic()": [
                750,
                132
            ],
            "NewRiskAdr(address)": [
                780,
                154
            ],
            "Leverage()": [
                482,
                66
            ],
            "RiskPrice(uint128)": [
                631,
                110
            ],
            "NewRisk()": [
                382,
                22
            ],
            "RetRisk(uint128)": [
                561,
                88
            ],
            "Strike()": [
                854,
                176
            ],
            "NewStaticAdr(address)": [
                933,
                198
            ]
        },
        "block_CALL_mapping": {}
    },
    "I_Pricer": {
        "function_list": [
            "setMinter(address)",
            "__callback(bytes32,string)",
            "queryCost()",
            "QuickPrice()",
            "requestPrice(uint256)",
            "collectFee()",
            "fallback()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "setMinter(address)": {
                "argument": {},
                "contract": {
                    "lastPrice": "uint128",
                    "DELAY": "uint256",
                    "sURL": "string"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "lastPrice": "uint128",
                    "DELAY": "uint256",
                    "sURL": "string"
                }
            },
            "queryCost()": {
                "argument": {},
                "contract": {
                    "lastPrice": "uint128",
                    "DELAY": "uint256",
                    "sURL": "string"
                }
            },
            "QuickPrice()": {
                "argument": {},
                "contract": {
                    "lastPrice": "uint128",
                    "DELAY": "uint256",
                    "sURL": "string"
                }
            },
            "requestPrice(uint256)": {
                "argument": {
                    "_actionID": "uint256"
                },
                "contract": {
                    "lastPrice": "uint128",
                    "DELAY": "uint256",
                    "sURL": "string"
                }
            },
            "collectFee()": {
                "argument": {},
                "contract": {
                    "lastPrice": "uint128",
                    "DELAY": "uint256",
                    "sURL": "string"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "lastPrice": "uint128",
                    "DELAY": "uint256",
                    "sURL": "string"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "lastPrice": "uint128",
                    "DELAY": "uint256",
                    "sURL": "string"
                }
            }
        },
        "function_block_mapping": {
            "requestPrice(uint256)": [
                654,
                185
            ],
            "setMinter(address)": [
                763,
                251
            ],
            "queryCost()": [
                830,
                273
            ],
            "collectFee()": [
                706,
                207
            ],
            "QuickPrice()": [
                753,
                229
            ],
            "__callback(bytes32,string)": [
                348,
                119
            ]
        },
        "block_CALL_mapping": {}
    },
    "Pricer": {
        "function_list": [
            "parseInt128(string)",
            "cast(uint256)",
            "parseInt(string,uint256)",
            "oraclize_setNetwork()",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "getCodeSize(address)",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "kill()",
            "owned()",
            "changeOwner(address)",
            "setMinter(address)",
            "__callback(bytes32,string)",
            "queryCost()",
            "QuickPrice()",
            "requestPrice(uint256)",
            "collectFee()",
            "fallback()",
            "Pricer(string)",
            "fallback()",
            "setMinter(address)",
            "queryCost()",
            "QuickPrice()",
            "__callback(bytes32,string)",
            "setGas(uint256)",
            "collectFee()",
            "requestPrice(uint256)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "parseInt128(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {}
            },
            "cast(uint256)": {
                "argument": {
                    "x": "uint256"
                },
                "contract": {}
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {}
            },
            "oraclize_setNetwork()": {
                "argument": {},
                "contract": {}
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {}
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {}
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {}
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {}
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {}
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {}
            },
            "kill()": {
                "argument": {},
                "contract": {}
            },
            "owned()": {
                "argument": {},
                "contract": {}
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "setMinter(address)": {
                "argument": {},
                "contract": {}
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {}
            },
            "queryCost()": {
                "argument": {},
                "contract": {}
            },
            "QuickPrice()": {
                "argument": {},
                "contract": {}
            },
            "requestPrice(uint256)": {
                "argument": {
                    "_actionID": "uint256"
                },
                "contract": {}
            },
            "collectFee()": {
                "argument": {},
                "contract": {}
            },
            "fallback()": {
                "argument": {},
                "contract": {}
            },
            "Pricer(string)": {
                "argument": {
                    "_URL": "string"
                },
                "contract": {}
            },
            "setGas(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {}
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "requestPrice(uint256)": [
                934,
                251
            ],
            "parseInt128(string)": [
                1112,
                339
            ],
            "kill()": [
                522,
                141
            ],
            "setMinter(address)": [
                1273,
                361
            ],
            "queryCost()": [
                1340,
                383
            ],
            "collectFee()": [
                986,
                273
            ],
            "setGas(uint256)": [
                1043,
                317
            ],
            "parseInt(string,uint256)": [
                799,
                229
            ],
            "QuickPrice()": [
                1033,
                295
            ],
            "changeOwner(address)": [
                732,
                207
            ],
            "__callback(bytes32,string)": [
                403,
                119
            ]
        },
        "block_CALL_mapping": {
            "block6526": [
                "oraclize.query.value(price)(timestamp, datasource, arg)"
            ],
            "jump5698": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump6067": [
                "oraclize.getPrice(datasource)",
                "oraclize.getPrice(datasource)"
            ],
            "jump6526_0": [
                "oraclize.query.value(price)(timestamp, datasource, arg)",
                "oraclize.query.value(price)(timestamp, datasource, arg)"
            ],
            "block5369": [
                "oraclize.cbAddress()"
            ],
            "jump7825": [
                "oraclize.getPrice(datasource)",
                "oraclize.getPrice(datasource)"
            ],
            "jump5369": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "jump7456": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump6859": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block1978": [
                "mint.PriceReturn(RevTransaction[myid],lastPrice)"
            ],
            "block6859": [
                "OAR.getAddress()"
            ],
            "jump6526": [
                "oraclize.query.value(price)(timestamp, datasource, arg)",
                "oraclize.query.value(price)(timestamp, datasource, arg)"
            ],
            "block7456": [
                "OAR.getAddress()"
            ],
            "block7127": [
                "oraclize.setCustomGasPrice(gasPrice)"
            ],
            "block5698": [
                "OAR.getAddress()"
            ],
            "block5698_0": [
                "OAR.getAddress()"
            ],
            "jump5112": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block7825": [
                "oraclize.getPrice(datasource)"
            ],
            "block4105": [
                "owner.send(this.balance)"
            ],
            "block6526_0": [
                "oraclize.query.value(price)(timestamp, datasource, arg)"
            ],
            "block5112": [
                "OAR.getAddress()"
            ],
            "jump5698_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block6067": [
                "oraclize.getPrice(datasource)"
            ],
            "jump1978": [
                "mint.PriceReturn(RevTransaction[myid],lastPrice)",
                "mint.PriceReturn(RevTransaction[myid],lastPrice)"
            ],
            "jump6067_0": [
                "oraclize.getPrice(datasource)",
                "oraclize.getPrice(datasource)"
            ],
            "jump7127": [
                "oraclize.setCustomGasPrice(gasPrice)",
                "oraclize.setCustomGasPrice(gasPrice)"
            ],
            "block6067_0": [
                "oraclize.getPrice(datasource)"
            ]
        }
    }
}