{
    "ERC20": {
        "function_list": [
            "transfer(address,uint256)",
            "balanceOf(address)"
        ],
        "initial_state": {
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transfer(address,uint256)": [
                717,
                207
            ],
            "balanceOf(address)": [
                630,
                185
            ]
        },
        "block_CALL_mapping": {}
    },
    "RipioFUND": {
        "function_list": [
            "perform_withdraw(address)",
            "refund_me()",
            "buy_the_tokens(string)",
            "change_sale_address(address)",
            "vote_proposed_address(string)",
            "default_helper()",
            "fallback()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "perform_withdraw(address)": {
                "argument": {},
                "contract": {
                    "for_votes": "uint256",
                    "agaisnt_votes": "uint256",
                    "hash_pwd": "bytes32",
                    "contract_eth_value": "uint256",
                    "min_required_amount": "uint256",
                    "max_amount": "uint256"
                }
            },
            "refund_me()": {
                "argument": {},
                "contract": {
                    "for_votes": "uint256",
                    "agaisnt_votes": "uint256",
                    "hash_pwd": "bytes32",
                    "contract_eth_value": "uint256",
                    "min_required_amount": "uint256",
                    "max_amount": "uint256"
                }
            },
            "buy_the_tokens(string)": {
                "argument": {
                    "password": "string"
                },
                "contract": {
                    "for_votes": "uint256",
                    "agaisnt_votes": "uint256",
                    "hash_pwd": "bytes32",
                    "contract_eth_value": "uint256",
                    "min_required_amount": "uint256",
                    "max_amount": "uint256"
                }
            },
            "change_sale_address(address)": {
                "argument": {},
                "contract": {
                    "for_votes": "uint256",
                    "agaisnt_votes": "uint256",
                    "hash_pwd": "bytes32",
                    "contract_eth_value": "uint256",
                    "min_required_amount": "uint256",
                    "max_amount": "uint256"
                }
            },
            "vote_proposed_address(string)": {
                "argument": {
                    "string_vote": "string"
                },
                "contract": {
                    "for_votes": "uint256",
                    "agaisnt_votes": "uint256",
                    "hash_pwd": "bytes32",
                    "contract_eth_value": "uint256",
                    "min_required_amount": "uint256",
                    "max_amount": "uint256"
                }
            },
            "default_helper()": {
                "argument": {},
                "contract": {
                    "for_votes": "uint256",
                    "agaisnt_votes": "uint256",
                    "hash_pwd": "bytes32",
                    "contract_eth_value": "uint256",
                    "min_required_amount": "uint256",
                    "max_amount": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "for_votes": "uint256",
                    "agaisnt_votes": "uint256",
                    "hash_pwd": "bytes32",
                    "contract_eth_value": "uint256",
                    "min_required_amount": "uint256",
                    "max_amount": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "for_votes": "uint256",
                    "agaisnt_votes": "uint256",
                    "hash_pwd": "bytes32",
                    "contract_eth_value": "uint256",
                    "min_required_amount": "uint256",
                    "max_amount": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "default_helper()": [
                671,
                132
            ],
            "refund_me()": [
                815,
                198
            ],
            "perform_withdraw(address)": [
                1163,
                330
            ],
            "change_sale_address(address)": [
                604,
                110
            ],
            "vote_proposed_address(string)": [
                1015,
                286
            ]
        },
        "block_CALL_mapping": {
            "block2189": [
                "msg.sender.transfer(eth_to_withdraw)"
            ],
            "jump3751": [
                "token.transfer(msg.sender, tokens_to_withdraw)",
                "token.transfer(msg.sender, tokens_to_withdraw)"
            ],
            "jump2189": [
                "msg.sender.transfer(eth_to_withdraw)",
                "msg.sender.transfer(eth_to_withdraw)"
            ],
            "block1669": [
                "sale.transfer(contract_eth_value)"
            ],
            "block3285": [
                "token.balanceOf(address(this))"
            ],
            "jump3285": [
                "token.balanceOf(address(this))",
                "token.balanceOf(address(this))"
            ],
            "block3751": [
                "token.transfer(msg.sender, tokens_to_withdraw)"
            ],
            "jump1669": [
                "sale.transfer(contract_eth_value)",
                "sale.transfer(contract_eth_value)"
            ]
        }
    }
}