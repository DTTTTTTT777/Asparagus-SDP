{
    "ERC20": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                337,
                97
            ],
            "totalSupply()": [
                438,
                119
            ],
            "allowance(address,address)": [
                1286,
                295
            ],
            "balanceOf(address)": [
                807,
                207
            ],
            "transferFrom(address,address,uint256)": [
                481,
                141
            ],
            "transfer(address,uint256)": [
                1038,
                251
            ]
        },
        "block_CALL_mapping": {
            "jump3655": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "block3655": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "Owned": {
        "function_list": [
            "Owned()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "Tokenz": {
        "function_list": [
            "Owned()",
            "transferOwnership(address)",
            "Tokenz(address,uint256,uint256,uint256,uint256,uint256)",
            "WithdrawToken(address,uint256)",
            "WithdrawEther(uint256)",
            "SetInRate(uint256)",
            "SetOutRate(uint256)",
            "ChangeToken(address)",
            "SetLot(uint256)",
            "TokensIn(uint256)",
            "TokensOut()",
            "fallback()"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {
                    "inRate": "uint256",
                    "outRate": "uint256",
                    "minRate": "uint256",
                    "minLot": "uint256",
                    "leveRage": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "inRate": "uint256",
                    "outRate": "uint256",
                    "minRate": "uint256",
                    "minLot": "uint256",
                    "leveRage": "uint256"
                }
            },
            "Tokenz(address,uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_inRate": "uint256",
                    "_outRate": "uint256",
                    "_minRate": "uint256",
                    "_minLot": "uint256",
                    "_leveRage": "uint256"
                },
                "contract": {
                    "inRate": "uint256",
                    "outRate": "uint256",
                    "minRate": "uint256",
                    "minLot": "uint256",
                    "leveRage": "uint256"
                }
            },
            "WithdrawToken(address,uint256)": {
                "argument": {
                    "tokens": "uint256"
                },
                "contract": {
                    "inRate": "uint256",
                    "outRate": "uint256",
                    "minRate": "uint256",
                    "minLot": "uint256",
                    "leveRage": "uint256"
                }
            },
            "WithdrawEther(uint256)": {
                "argument": {
                    "ethers": "uint256"
                },
                "contract": {
                    "inRate": "uint256",
                    "outRate": "uint256",
                    "minRate": "uint256",
                    "minLot": "uint256",
                    "leveRage": "uint256"
                }
            },
            "SetInRate(uint256)": {
                "argument": {
                    "newrate": "uint256"
                },
                "contract": {
                    "inRate": "uint256",
                    "outRate": "uint256",
                    "minRate": "uint256",
                    "minLot": "uint256",
                    "leveRage": "uint256"
                }
            },
            "SetOutRate(uint256)": {
                "argument": {
                    "newrate": "uint256"
                },
                "contract": {
                    "inRate": "uint256",
                    "outRate": "uint256",
                    "minRate": "uint256",
                    "minLot": "uint256",
                    "leveRage": "uint256"
                }
            },
            "ChangeToken(address)": {
                "argument": {},
                "contract": {
                    "inRate": "uint256",
                    "outRate": "uint256",
                    "minRate": "uint256",
                    "minLot": "uint256",
                    "leveRage": "uint256"
                }
            },
            "SetLot(uint256)": {
                "argument": {
                    "newlot": "uint256"
                },
                "contract": {
                    "inRate": "uint256",
                    "outRate": "uint256",
                    "minRate": "uint256",
                    "minLot": "uint256",
                    "leveRage": "uint256"
                }
            },
            "TokensIn(uint256)": {
                "argument": {
                    "tokens": "uint256"
                },
                "contract": {
                    "inRate": "uint256",
                    "outRate": "uint256",
                    "minRate": "uint256",
                    "minLot": "uint256",
                    "leveRage": "uint256"
                }
            },
            "TokensOut()": {
                "argument": {},
                "contract": {
                    "inRate": "uint256",
                    "outRate": "uint256",
                    "minRate": "uint256",
                    "minLot": "uint256",
                    "leveRage": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "inRate": "uint256",
                    "outRate": "uint256",
                    "minRate": "uint256",
                    "minLot": "uint256",
                    "leveRage": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "SetLot(uint256)": [
                471,
                207
            ],
            "SetInRate(uint256)": [
                426,
                185
            ],
            "WithdrawEther(uint256)": [
                381,
                163
            ],
            "TokensOut()": [
                240,
                75
            ],
            "ChangeToken(address)": [
                723,
                295
            ],
            "TokensIn(uint256)": [
                336,
                141
            ],
            "WithdrawToken(address,uint256)": [
                646,
                273
            ],
            "SetOutRate(uint256)": [
                876,
                361
            ],
            "transferOwnership(address)": [
                921,
                383
            ]
        },
        "block_CALL_mapping": {
            "block1696_1": [
                "ERC20(token).transfer(msg.sender, tokens)"
            ],
            "block1696_0": [
                "ERC20(token).transfer(msg.sender, tokens)"
            ],
            "block1317": [
                "ERC20(token).balanceOf(address(this))"
            ],
            "jump1428_1": [
                "msg.sender.transfer(change)",
                "msg.sender.transfer(change)"
            ],
            "jump1696_1": [
                "ERC20(token).transfer(msg.sender, tokens)",
                "ERC20(token).transfer(msg.sender, tokens)"
            ],
            "jump1696_0": [
                "ERC20(token).transfer(msg.sender, tokens)",
                "ERC20(token).transfer(msg.sender, tokens)"
            ],
            "jump1317": [
                "ERC20(token).balanceOf(address(this))",
                "ERC20(token).balanceOf(address(this))"
            ],
            "jump3834": [
                "ERC20(tokenAddress).transfer(owner, tokens)",
                "ERC20(tokenAddress).transfer(owner, tokens)"
            ],
            "jump2767": [
                "ERC20(token).transferFrom(msg.sender, address(this), tokens)",
                "ERC20(token).transferFrom(msg.sender, address(this), tokens)"
            ],
            "jump1696": [
                "ERC20(token).transfer(msg.sender, tokens)",
                "ERC20(token).transfer(msg.sender, tokens)"
            ],
            "block1428_1": [
                "msg.sender.transfer(change)"
            ],
            "jump1428_0": [
                "msg.sender.transfer(change)",
                "msg.sender.transfer(change)"
            ],
            "block1317_1": [
                "ERC20(token).balanceOf(address(this))"
            ],
            "block1317_0": [
                "ERC20(token).balanceOf(address(this))"
            ],
            "block1696": [
                "ERC20(token).transfer(msg.sender, tokens)"
            ],
            "jump1317_1": [
                "ERC20(token).balanceOf(address(this))",
                "ERC20(token).balanceOf(address(this))"
            ],
            "jump1317_0": [
                "ERC20(token).balanceOf(address(this))",
                "ERC20(token).balanceOf(address(this))"
            ],
            "block1428": [
                "msg.sender.transfer(change)"
            ],
            "jump3180": [
                "owner.transfer(ethers)",
                "owner.transfer(ethers)"
            ],
            "block1428_0": [
                "msg.sender.transfer(change)"
            ],
            "jump2177": [
                "ERC20(token).balanceOf(msg.sender)",
                "ERC20(token).balanceOf(msg.sender)"
            ],
            "jump1428": [
                "msg.sender.transfer(change)",
                "msg.sender.transfer(change)"
            ],
            "block2767": [
                "ERC20(token).transferFrom(msg.sender, address(this), tokens)"
            ],
            "block2837": [
                "msg.sender.transfer(sum)"
            ],
            "block2177": [
                "ERC20(token).balanceOf(msg.sender)"
            ],
            "block3834": [
                "ERC20(tokenAddress).transfer(owner, tokens)"
            ],
            "block3180": [
                "owner.transfer(ethers)"
            ],
            "jump2837": [
                "msg.sender.transfer(sum)",
                "msg.sender.transfer(sum)"
            ],
            "block2448": [
                "ERC20(token).approve(address(this),tokens)"
            ],
            "jump2448": [
                "ERC20(token).approve(address(this),tokens)",
                "ERC20(token).approve(address(this),tokens)"
            ]
        }
    }
}