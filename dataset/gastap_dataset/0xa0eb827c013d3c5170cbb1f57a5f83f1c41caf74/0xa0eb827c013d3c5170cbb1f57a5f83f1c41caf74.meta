{
    "FlightDelayDatabaseModel": {
        "function_list": [],
        "initial_state": {},
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "FlightDelayControlledContract": {
        "function_list": [
            "setController(address)",
            "destruct()",
            "setContracts()",
            "getContract(bytes32)"
        ],
        "initial_state": {
            "setController(address)": {
                "argument": {},
                "contract": {}
            },
            "destruct()": {
                "argument": {},
                "contract": {}
            },
            "setContracts()": {
                "argument": {},
                "contract": {}
            },
            "getContract(bytes32)": {
                "argument": {
                    "_id": "bytes32"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "destruct()": [
                92,
                75
            ],
            "setContracts()": [
                115,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "FlightDelayConstants": {
        "function_list": [
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "MIN_OBSERVATIONS": "uint256",
                    "MIN_PREMIUM": "uint256",
                    "MAX_PREMIUM": "uint256",
                    "MAX_PAYOUT": "uint256",
                    "MIN_PREMIUM_EUR": "uint256",
                    "MAX_PREMIUM_EUR": "uint256",
                    "MAX_PAYOUT_EUR": "uint256",
                    "MIN_PREMIUM_USD": "uint256",
                    "MAX_PREMIUM_USD": "uint256",
                    "MAX_PAYOUT_USD": "uint256",
                    "MIN_PREMIUM_GBP": "uint256",
                    "MAX_PREMIUM_GBP": "uint256",
                    "MAX_PAYOUT_GBP": "uint256",
                    "MAX_CUMULATED_WEIGHTED_PREMIUM": "uint256",
                    "REWARD_PERCENT": "uint8",
                    "RESERVE_PERCENT": "uint8",
                    "WEIGHT_PATTERN": "uint8[6]",
                    "MIN_TIME_BEFORE_DEPARTURE": "uint256",
                    "CHECK_PAYOUT_OFFSET": "uint256",
                    "MAX_FLIGHT_DURATION": "uint256",
                    "CONTRACT_DEAD_LINE": "uint256",
                    "MIN_DEPARTURE_LIM": "uint256",
                    "MAX_DEPARTURE_LIM": "uint256",
                    "ORACLIZE_GAS": "uint256",
                    "ORACLIZE_RATINGS_BASE_URL": "string",
                    "ORACLIZE_RATINGS_QUERY": "string",
                    "ORACLIZE_STATUS_BASE_URL": "string",
                    "ORACLIZE_STATUS_QUERY": "string"
                }
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "usingOraclize": {
        "function_list": [
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)",
            "matchBytes32Prefix(bytes32,bytes)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "matchBytes32Prefix(bytes32,bytes)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            }
        },
        "function_block_mapping": {
            "__callback(bytes32,string,bytes)": [
                200,
                97
            ],
            "__callback(bytes32,string)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "FlightDelayOraclizeInterface": {
        "function_list": [
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)",
            "matchBytes32Prefix(bytes32,bytes)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {}
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {}
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {}
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {}
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {}
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {}
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {}
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {}
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {}
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {}
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {}
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {}
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {}
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {}
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {}
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {}
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {}
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {}
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {}
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {}
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {}
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {}
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {}
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {}
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {}
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {}
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {}
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {}
            },
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {}
            },
            "matchBytes32Prefix(bytes32,bytes)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes"
                },
                "contract": {}
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {}
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {}
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {}
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {}
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "__callback(bytes32,string,bytes)": [
                200,
                97
            ],
            "__callback(bytes32,string)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "ConvertLib": {
        "function_list": [
            "b32toString(bytes32)",
            "b32toHexString(bytes32)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "toUnixtime(bytes32)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "b32toString(bytes32)": {
                "argument": {
                    "x": "bytes32"
                },
                "contract": {
                    "days_since": "uint16[12]"
                }
            },
            "b32toHexString(bytes32)": {
                "argument": {
                    "x": "bytes32"
                },
                "contract": {
                    "days_since": "uint16[12]"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "days_since": "uint16[12]"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "days_since": "uint16[12]"
                }
            },
            "toUnixtime(bytes32)": {
                "argument": {
                    "_dayMonthYear": "bytes32"
                },
                "contract": {
                    "days_since": "uint16[12]"
                }
            }
        },
        "function_block_mapping": {
            "b32toHexString(bytes32)": [
                81,
                75
            ],
            "toUnixtime(bytes32)": [
                251,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "strings": {
        "function_list": [
            "memcpy(uint256,uint256,uint256)",
            "toSlice(string)",
            "len(bytes32)",
            "toSliceB32(bytes32)",
            "copy(strings.slice)",
            "toString(strings.slice)",
            "len(strings.slice)",
            "empty(strings.slice)",
            "compare(strings.slice,strings.slice)",
            "equals(strings.slice,strings.slice)",
            "nextRune(strings.slice,strings.slice)",
            "nextRune(strings.slice)",
            "ord(strings.slice)",
            "keccak(strings.slice)",
            "startsWith(strings.slice,strings.slice)",
            "beyond(strings.slice,strings.slice)",
            "endsWith(strings.slice,strings.slice)",
            "until(strings.slice,strings.slice)",
            "findPtr(uint256,uint256,uint256,uint256)",
            "rfindPtr(uint256,uint256,uint256,uint256)",
            "find(strings.slice,strings.slice)",
            "rfind(strings.slice,strings.slice)",
            "split(strings.slice,strings.slice,strings.slice)",
            "split(strings.slice,strings.slice)",
            "rsplit(strings.slice,strings.slice,strings.slice)",
            "rsplit(strings.slice,strings.slice)",
            "count(strings.slice,strings.slice)",
            "contains(strings.slice,strings.slice)",
            "concat(strings.slice,strings.slice)",
            "join(strings.slice,strings.slice[])"
        ],
        "initial_state": {
            "memcpy(uint256,uint256,uint256)": {
                "argument": {
                    "dest": "uint256",
                    "src": "uint256",
                    "len": "uint256"
                },
                "contract": {}
            },
            "toSlice(string)": {
                "argument": {
                    "self": "string"
                },
                "contract": {}
            },
            "len(bytes32)": {
                "argument": {
                    "self": "bytes32"
                },
                "contract": {}
            },
            "toSliceB32(bytes32)": {
                "argument": {
                    "self": "bytes32"
                },
                "contract": {}
            },
            "copy(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "toString(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "len(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "empty(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "compare(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "other": "strings.slice"
                },
                "contract": {}
            },
            "equals(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "other": "strings.slice"
                },
                "contract": {}
            },
            "nextRune(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "rune": "strings.slice"
                },
                "contract": {}
            },
            "nextRune(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "ord(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "keccak(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "startsWith(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "beyond(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "endsWith(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "until(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "findPtr(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "selflen": "uint256",
                    "selfptr": "uint256",
                    "needlelen": "uint256",
                    "needleptr": "uint256"
                },
                "contract": {}
            },
            "rfindPtr(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "selflen": "uint256",
                    "selfptr": "uint256",
                    "needlelen": "uint256",
                    "needleptr": "uint256"
                },
                "contract": {}
            },
            "find(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "rfind(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "split(strings.slice,strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice",
                    "token": "strings.slice"
                },
                "contract": {}
            },
            "split(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "rsplit(strings.slice,strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice",
                    "token": "strings.slice"
                },
                "contract": {}
            },
            "rsplit(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "count(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "contains(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "concat(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "other": "strings.slice"
                },
                "contract": {}
            },
            "join(strings.slice,strings.slice[])": {
                "argument": {
                    "self": "strings.slice",
                    "parts": "strings.slice[]"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "FlightDelayPayout": {
        "function_list": [
            "b32toString(bytes32)",
            "b32toHexString(bytes32)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "toUnixtime(bytes32)",
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)",
            "matchBytes32Prefix(bytes32,bytes)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "setController(address)",
            "destruct()",
            "setContracts()",
            "getContract(bytes32)",
            "FlightDelayPayout(address)",
            "setContracts()",
            "fund()",
            "schedulePayoutOraclizeCall(uint256,bytes32,uint256)",
            "__callback(bytes32,string,bytes)",
            "payOut(uint256,uint8,uint256)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "b32toString(bytes32)": {
                "argument": {
                    "x": "bytes32"
                },
                "contract": {}
            },
            "b32toHexString(bytes32)": {
                "argument": {
                    "x": "bytes32"
                },
                "contract": {}
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {}
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {}
            },
            "toUnixtime(bytes32)": {
                "argument": {
                    "_dayMonthYear": "bytes32"
                },
                "contract": {}
            },
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {}
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {}
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {}
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {}
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {}
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {}
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {}
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {}
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {}
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {}
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {}
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {}
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {}
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {}
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {}
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {}
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {}
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {}
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {}
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {}
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {}
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {}
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {}
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {}
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {}
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {}
            },
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {}
            },
            "matchBytes32Prefix(bytes32,bytes)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes"
                },
                "contract": {}
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {}
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {}
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {}
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {}
            },
            "setController(address)": {
                "argument": {},
                "contract": {}
            },
            "destruct()": {
                "argument": {},
                "contract": {}
            },
            "setContracts()": {
                "argument": {},
                "contract": {}
            },
            "getContract(bytes32)": {
                "argument": {
                    "_id": "bytes32"
                },
                "contract": {}
            },
            "FlightDelayPayout(address)": {
                "argument": {},
                "contract": {}
            },
            "fund()": {
                "argument": {},
                "contract": {}
            },
            "schedulePayoutOraclizeCall(uint256,bytes32,uint256)": {
                "argument": {
                    "_policyId": "uint256",
                    "_riskId": "bytes32",
                    "_oraclizeTime": "uint256"
                },
                "contract": {}
            },
            "payOut(uint256,uint8,uint256)": {
                "argument": {
                    "_policyId": "uint256",
                    "_delay": "uint8",
                    "_delayInMinutes": "uint256"
                },
                "contract": {}
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "b32toHexString(bytes32)": [
                558,
                163
            ],
            "setContracts()": [
                807,
                229
            ],
            "schedulePayoutOraclizeCall(uint256,bytes32,uint256)": [
                489,
                141
            ],
            "fund()": [
                728,
                185
            ],
            "destruct()": [
                277,
                97
            ],
            "__callback(bytes32,string,bytes)": [
                300,
                119
            ],
            "toUnixtime(bytes32)": [
                738,
                207
            ],
            "__callback(bytes32,string)": [
                158,
                75
            ]
        },
        "block_CALL_mapping": {
            "block10724_8": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "jump5969": [
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )",
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )"
            ],
            "jump11504": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump5212_0": [
                "FD_AC.checkPermission(101, msg.sender)",
                "FD_AC.checkPermission(101, msg.sender)"
            ],
            "block5435_0": [
                "FD_DB.getRiskParameters(_riskId)"
            ],
            "block10724_9": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block10724_0": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block10724_1": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block10724_2": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block10724_3": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block8929": [
                "FD_AC.setPermissionById(101, \"FD.Underwrite\")"
            ],
            "block10724_5": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block10724_6": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block10724_7": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "jump12215_5": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump12215_4": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump12215_7": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump12215_6": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump12215_1": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump12215_0": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump12215_3": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump12215_2": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block5212_1": [
                "FD_AC.checkPermission(101, msg.sender)"
            ],
            "jump12215_9": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump10976_7": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block11504_7": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block11504_6": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block11504_5": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block11504_4": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block1979": [
                "FD_DB.getPolicyState(policyId)"
            ],
            "block11504_2": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block11504_1": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block11504_0": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block12460_9": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block12460_8": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block13377_1": [
                "OAR.getAddress()"
            ],
            "block5435": [
                "FD_DB.getRiskParameters(_riskId)"
            ],
            "block11504_9": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block11504_8": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block13754_0": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block13754_1": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block13754_2": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block13754_3": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block9948": [
                "oraclize.cbAddress()"
            ],
            "block12029_10": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block11504": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump2476": [
                "FD_DB.checkTime(_queryId, riskId, 180 minutes)",
                "FD_DB.checkTime(_queryId, riskId, 180 minutes)"
            ],
            "jump6794": [
                "FD_AC.checkPermission(102, msg.sender)",
                "FD_AC.checkPermission(102, msg.sender)"
            ],
            "block5212_3": [
                "FD_AC.checkPermission(101, msg.sender)"
            ],
            "jump11748_0": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block5435_2": [
                "FD_DB.getRiskParameters(_riskId)"
            ],
            "block14218": [
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)"
            ],
            "jump10976": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block12029_1": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block10724_4": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block5969_0": [
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )"
            ],
            "block12029_11": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump9142": [
                "FD_AC.setPermissionById(102, \"FD.Funder\")",
                "FD_AC.setPermissionById(102, \"FD.Funder\")"
            ],
            "block12029_12": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block12029_3": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump10976_9": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "jump10976_8": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block12460_10": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump10976_5": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "jump10976_4": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block5212": [
                "FD_AC.checkPermission(101, msg.sender)"
            ],
            "jump10976_6": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "jump10976_1": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "jump10976_0": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "jump10976_3": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "jump10976_2": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block12029_0": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block10976_12": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block10976_11": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block10976_10": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block12029_4": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block12029_5": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block12029_6": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block12029_7": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block12029_8": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block12029_9": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump14218_2": [
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)",
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)"
            ],
            "jump14218_3": [
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)",
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)"
            ],
            "jump14218_0": [
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)",
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)"
            ],
            "jump14218_1": [
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)",
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)"
            ],
            "jump2215_0": [
                "FD_DB.getRiskId(policyId)",
                "FD_DB.getRiskId(policyId)"
            ],
            "block13377_0": [
                "OAR.getAddress()"
            ],
            "block1472_0": [
                "FD_DB.getOraclizeCallback(_queryId)"
            ],
            "jump11748_12": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block11748": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "jump10724_1": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block12460_5": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump13754": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump5435": [
                "FD_DB.getRiskParameters(_riskId)",
                "FD_DB.getRiskParameters(_riskId)"
            ],
            "jump1472": [
                "FD_DB.getOraclizeCallback(_queryId)",
                "FD_DB.getOraclizeCallback(_queryId)"
            ],
            "jump10724": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block9948_0": [
                "oraclize.cbAddress()"
            ],
            "jump1979_0": [
                "FD_DB.getPolicyState(policyId)",
                "FD_DB.getPolicyState(policyId)"
            ],
            "jump2215": [
                "FD_DB.getRiskId(policyId)",
                "FD_DB.getRiskId(policyId)"
            ],
            "jump5435_1": [
                "FD_DB.getRiskParameters(_riskId)",
                "FD_DB.getRiskParameters(_riskId)"
            ],
            "block10976": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block9360": [
                "FD_CI.getContract(_id)"
            ],
            "jump2476_0": [
                "FD_DB.checkTime(_queryId, riskId, 180 minutes)",
                "FD_DB.checkTime(_queryId, riskId, 180 minutes)"
            ],
            "jump12029_11": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block6794": [
                "FD_AC.checkPermission(102, msg.sender)"
            ],
            "jump13377": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump12029_0": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block4052": [
                "FD_DB.checkTime(_queryId, riskId, 180 minutes)"
            ],
            "jump12029_6": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump12029_7": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump12029_4": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump12029_5": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump5212_3": [
                "FD_AC.checkPermission(101, msg.sender)",
                "FD_AC.checkPermission(101, msg.sender)"
            ],
            "jump5212_2": [
                "FD_AC.checkPermission(101, msg.sender)",
                "FD_AC.checkPermission(101, msg.sender)"
            ],
            "jump12029_8": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump12029_9": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block12215_11": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump12215_8": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump11748": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block5969_1": [
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )"
            ],
            "jump9948": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "block12215_10": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump11748_11": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "jump10724_8": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "jump10724_9": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "jump10724_6": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "jump10724_7": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "jump10724_4": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "jump10724_5": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "jump10724_2": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "jump10724_3": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "jump10724_0": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block2476": [
                "FD_DB.checkTime(_queryId, riskId, 180 minutes)"
            ],
            "block11504_12": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block11504_11": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block11504_10": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block9691_0": [
                "OAR.getAddress()"
            ],
            "jump9691_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump12215_10": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block12460": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump9360_1": [
                "FD_CI.getContract(_id)",
                "FD_CI.getContract(_id)"
            ],
            "block12460_3": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump9360_3": [
                "FD_CI.getContract(_id)",
                "FD_CI.getContract(_id)"
            ],
            "jump9360_0": [
                "FD_CI.getContract(_id)",
                "FD_CI.getContract(_id)"
            ],
            "block11748_1": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block11748_0": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block11748_3": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block11748_2": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block11748_5": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block11748_4": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block11748_7": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block11748_6": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block11748_9": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block11504_3": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump4052_0": [
                "FD_DB.checkTime(_queryId, riskId, 180 minutes)",
                "FD_DB.checkTime(_queryId, riskId, 180 minutes)"
            ],
            "jump9360_2": [
                "FD_CI.getContract(_id)",
                "FD_CI.getContract(_id)"
            ],
            "block1472": [
                "FD_DB.getOraclizeCallback(_queryId)"
            ],
            "jump12460_8": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block12460_4": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump11748_10": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block12460_7": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block5435_3": [
                "FD_DB.getRiskParameters(_riskId)"
            ],
            "jump5435_2": [
                "FD_DB.getRiskParameters(_riskId)",
                "FD_DB.getRiskParameters(_riskId)"
            ],
            "block12460_6": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump12029": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump12460_9": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block14218_0": [
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)"
            ],
            "jump12029_3": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block14218_2": [
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)"
            ],
            "block14218_3": [
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)"
            ],
            "jump10976_11": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "jump10976_10": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "jump10976_12": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block5969_2": [
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )"
            ],
            "block13754": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump11150_12": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block11150_12": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block13377_2": [
                "OAR.getAddress()"
            ],
            "block11150_10": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block11150_11": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block2476_0": [
                "FD_DB.checkTime(_queryId, riskId, 180 minutes)"
            ],
            "jump12460_12": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block12029_2": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block11748_8": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "jump12215_12": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump12460_10": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block9360_1": [
                "FD_CI.getContract(_id)"
            ],
            "jump10724_10": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "jump10724_11": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "jump10724_12": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block5435_1": [
                "FD_DB.getRiskParameters(_riskId)"
            ],
            "jump5212_1": [
                "FD_AC.checkPermission(101, msg.sender)",
                "FD_AC.checkPermission(101, msg.sender)"
            ],
            "jump9948_0": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "jump11504_6": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump13754_2": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump13754_3": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump13754_0": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump13754_1": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block5969_3": [
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )"
            ],
            "jump5969_2": [
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )",
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )"
            ],
            "jump5969_3": [
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )",
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )"
            ],
            "jump5969_0": [
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )",
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )"
            ],
            "jump5969_1": [
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )",
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )"
            ],
            "jump13377_2": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block2215": [
                "FD_DB.getRiskId(policyId)"
            ],
            "jump12215": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block11150_3": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block10976_7": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "jump14218": [
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)",
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)"
            ],
            "block10976_5": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block11150": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block10976_3": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block10976_2": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block10976_1": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block10976_0": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block5969": [
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )"
            ],
            "block5212_0": [
                "FD_AC.checkPermission(101, msg.sender)"
            ],
            "block10976_9": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block10976_8": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "jump12215_11": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump13377_3": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump11504_11": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump11504_10": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump11504_12": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump13377_1": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block13377": [
                "OAR.getAddress()"
            ],
            "jump1472_0": [
                "FD_DB.getOraclizeCallback(_queryId)",
                "FD_DB.getOraclizeCallback(_queryId)"
            ],
            "block12460_1": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block10724_12": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block12215_12": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block10724_10": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block10724_11": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block14218_1": [
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)"
            ],
            "jump11150": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "jump5435_0": [
                "FD_DB.getRiskParameters(_riskId)",
                "FD_DB.getRiskParameters(_riskId)"
            ],
            "jump11504_1": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump11504_0": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump11504_3": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump11504_2": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump11504_5": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump11504_4": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump11504_7": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block10976_6": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "jump11504_9": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump11504_8": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump12460_11": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump9691": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block12215_7": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block12215_6": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block12215_5": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block10976_4": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block12215_3": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block12215_2": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block12215_1": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block12215_0": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block11150_6": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "jump12460_5": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump4052": [
                "FD_DB.checkTime(_queryId, riskId, 180 minutes)",
                "FD_DB.checkTime(_queryId, riskId, 180 minutes)"
            ],
            "block12215_9": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block12215_8": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump11748_7": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "jump11150_2": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "jump11748_5": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "jump11748_4": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "jump11748_3": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "jump11748_2": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "jump11748_1": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "jump11150_3": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block11748_11": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block11748_10": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block1979_0": [
                "FD_DB.getPolicyState(policyId)"
            ],
            "block11748_12": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block11150_2": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "jump11748_9": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "jump11748_8": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "jump11150_1": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block13377_3": [
                "OAR.getAddress()"
            ],
            "jump8929": [
                "FD_AC.setPermissionById(101, \"FD.Underwrite\")",
                "FD_AC.setPermissionById(101, \"FD.Underwrite\")"
            ],
            "block12460_11": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump11150_6": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block4052_0": [
                "FD_DB.checkTime(_queryId, riskId, 180 minutes)"
            ],
            "block12460_12": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump11150_7": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "jump12029_2": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump12029_10": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump11150_4": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "jump12029_12": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump11748_6": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block11150_7": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block2215_0": [
                "FD_DB.getRiskId(policyId)"
            ],
            "jump12460_3": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block9360_2": [
                "FD_CI.getContract(_id)"
            ],
            "jump12029_1": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump11150_10": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "jump11150_11": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block9142": [
                "FD_AC.setPermissionById(102, \"FD.Funder\")"
            ],
            "jump12460_2": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block9360_3": [
                "FD_CI.getContract(_id)"
            ],
            "jump5435_3": [
                "FD_DB.getRiskParameters(_riskId)",
                "FD_DB.getRiskParameters(_riskId)"
            ],
            "block5212_2": [
                "FD_AC.checkPermission(101, msg.sender)"
            ],
            "block9360_0": [
                "FD_CI.getContract(_id)"
            ],
            "jump12460_1": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block9691": [
                "OAR.getAddress()"
            ],
            "jump12460_0": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump5212": [
                "FD_AC.checkPermission(101, msg.sender)",
                "FD_AC.checkPermission(101, msg.sender)"
            ],
            "block12460_0": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block12460_2": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump13377_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block12215": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump12460_7": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block10724": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block12215_4": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block11150_0": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block11150_1": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "jump11150_0": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block12029": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block11150_4": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block11150_5": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "jump1979": [
                "FD_DB.getPolicyState(policyId)",
                "FD_DB.getPolicyState(policyId)"
            ],
            "jump11150_5": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block11150_8": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block11150_9": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "jump11150_8": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "jump11150_9": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "jump12460": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump12460_6": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump9360": [
                "FD_CI.getContract(_id)",
                "FD_CI.getContract(_id)"
            ],
            "jump12460_4": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ]
        }
    }
}