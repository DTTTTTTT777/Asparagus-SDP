{
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "ERC20Basic": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "balanceOf(address)": [
                124,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                313,
                97
            ],
            "balanceOf(address)": [
                828,
                207
            ],
            "transferFrom(address,address,uint256)": [
                457,
                141
            ],
            "allowance(address,address)": [
                1160,
                273
            ],
            "transfer(address,uint256)": [
                1059,
                251
            ]
        },
        "block_CALL_mapping": {}
    },
    "FornicoinPresale": {
        "function_list": [
            "FornicoinPresale(address,uint256,address)",
            "setHaltSale(bool)",
            "fallback()",
            "buyTokens()",
            "forwardFunds()",
            "validPurchase()",
            "emergencyDrain(ERC20)",
            "hasEnded()",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "FornicoinPresale(address,uint256,address)": {
                "argument": {
                    "_startTime": "uint256"
                },
                "contract": {
                    "startPresale": "uint256",
                    "endPresale": "uint256",
                    "weiRaised": "uint256",
                    "presaleRate": "uint256"
                }
            },
            "setHaltSale(bool)": {
                "argument": {},
                "contract": {
                    "startPresale": "uint256",
                    "endPresale": "uint256",
                    "weiRaised": "uint256",
                    "presaleRate": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "startPresale": "uint256",
                    "endPresale": "uint256",
                    "weiRaised": "uint256",
                    "presaleRate": "uint256"
                }
            },
            "buyTokens()": {
                "argument": {},
                "contract": {
                    "startPresale": "uint256",
                    "endPresale": "uint256",
                    "weiRaised": "uint256",
                    "presaleRate": "uint256"
                }
            },
            "forwardFunds()": {
                "argument": {},
                "contract": {
                    "startPresale": "uint256",
                    "endPresale": "uint256",
                    "weiRaised": "uint256",
                    "presaleRate": "uint256"
                }
            },
            "validPurchase()": {
                "argument": {},
                "contract": {
                    "startPresale": "uint256",
                    "endPresale": "uint256",
                    "weiRaised": "uint256",
                    "presaleRate": "uint256"
                }
            },
            "emergencyDrain(ERC20)": {
                "argument": {},
                "contract": {
                    "startPresale": "uint256",
                    "endPresale": "uint256",
                    "weiRaised": "uint256",
                    "presaleRate": "uint256"
                }
            },
            "hasEnded()": {
                "argument": {},
                "contract": {
                    "startPresale": "uint256",
                    "endPresale": "uint256",
                    "weiRaised": "uint256",
                    "presaleRate": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "hasEnded()": [
                639,
                273
            ],
            "setHaltSale(bool)": [
                448,
                185
            ],
            "buyTokens()": [
                629,
                251
            ]
        },
        "block_CALL_mapping": {
            "jump2368_1": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ],
            "jump1905": [
                "anyToken.balanceOf(this)",
                "anyToken.balanceOf(this)"
            ],
            "jump2368": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ],
            "block2097": [
                "anyToken.transfer(wallet, anyToken.balanceOf(this))"
            ],
            "jump2368_0": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ],
            "block1905": [
                "anyToken.balanceOf(this)"
            ],
            "jump1505": [
                "wallet.transfer(this.balance)",
                "wallet.transfer(this.balance)"
            ],
            "block1505": [
                "wallet.transfer(this.balance)"
            ],
            "block2368_0": [
                "wallet.transfer(msg.value)"
            ],
            "block2368_1": [
                "wallet.transfer(msg.value)"
            ],
            "block2368": [
                "wallet.transfer(msg.value)"
            ],
            "jump2097": [
                "anyToken.transfer(wallet, anyToken.balanceOf(this))",
                "anyToken.transfer(wallet, anyToken.balanceOf(this))"
            ]
        }
    }
}