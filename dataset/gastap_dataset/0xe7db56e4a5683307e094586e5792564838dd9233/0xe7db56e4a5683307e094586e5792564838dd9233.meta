{
    "ERC20": {
        "function_list": [
            "balanceOf(address)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "SafeMath": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeDiv(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)",
            "assert(bool)"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeDiv(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "assert(bool)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "StandardToken": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeDiv(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)",
            "assert(bool)",
            "balanceOf(address)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "isToken()",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeDiv(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "assert(bool)": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "isToken()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "TokenVault": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "TokenVault(address,uint256,StandardToken,uint256)",
            "setInvestor(address,uint256)",
            "lock()",
            "recoverFailedLock()",
            "getBalance()",
            "claim()",
            "getState()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {
                    "investorCount": "uint256",
                    "tokensToBeAllocated": "uint256",
                    "totalClaimed": "uint256",
                    "tokensAllocatedTotal": "uint256",
                    "freezeEndsAt": "uint256",
                    "lockedAt": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "investorCount": "uint256",
                    "tokensToBeAllocated": "uint256",
                    "totalClaimed": "uint256",
                    "tokensAllocatedTotal": "uint256",
                    "freezeEndsAt": "uint256",
                    "lockedAt": "uint256"
                }
            },
            "TokenVault(address,uint256,StandardToken,uint256)": {
                "argument": {
                    "_freezeEndsAt": "uint256",
                    "_tokensToBeAllocated": "uint256"
                },
                "contract": {
                    "investorCount": "uint256",
                    "tokensToBeAllocated": "uint256",
                    "totalClaimed": "uint256",
                    "tokensAllocatedTotal": "uint256",
                    "freezeEndsAt": "uint256",
                    "lockedAt": "uint256"
                }
            },
            "setInvestor(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "investorCount": "uint256",
                    "tokensToBeAllocated": "uint256",
                    "totalClaimed": "uint256",
                    "tokensAllocatedTotal": "uint256",
                    "freezeEndsAt": "uint256",
                    "lockedAt": "uint256"
                }
            },
            "lock()": {
                "argument": {},
                "contract": {
                    "investorCount": "uint256",
                    "tokensToBeAllocated": "uint256",
                    "totalClaimed": "uint256",
                    "tokensAllocatedTotal": "uint256",
                    "freezeEndsAt": "uint256",
                    "lockedAt": "uint256"
                }
            },
            "recoverFailedLock()": {
                "argument": {},
                "contract": {
                    "investorCount": "uint256",
                    "tokensToBeAllocated": "uint256",
                    "totalClaimed": "uint256",
                    "tokensAllocatedTotal": "uint256",
                    "freezeEndsAt": "uint256",
                    "lockedAt": "uint256"
                }
            },
            "getBalance()": {
                "argument": {},
                "contract": {
                    "investorCount": "uint256",
                    "tokensToBeAllocated": "uint256",
                    "totalClaimed": "uint256",
                    "tokensAllocatedTotal": "uint256",
                    "freezeEndsAt": "uint256",
                    "lockedAt": "uint256"
                }
            },
            "claim()": {
                "argument": {},
                "contract": {
                    "investorCount": "uint256",
                    "tokensToBeAllocated": "uint256",
                    "totalClaimed": "uint256",
                    "tokensAllocatedTotal": "uint256",
                    "freezeEndsAt": "uint256",
                    "lockedAt": "uint256"
                }
            },
            "getState()": {
                "argument": {},
                "contract": {
                    "investorCount": "uint256",
                    "tokensToBeAllocated": "uint256",
                    "totalClaimed": "uint256",
                    "tokensAllocatedTotal": "uint256",
                    "freezeEndsAt": "uint256",
                    "lockedAt": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                819,
                339
            ]
        },
        "block_CALL_mapping": {
            "block1009_1": [
                "msg.sender.send(change)"
            ],
            "block1009_0": [
                "msg.sender.send(change)"
            ],
            "jump1879": [
                "owner.transfer(this.balance)",
                "owner.transfer(this.balance)"
            ],
            "block2820": [
                "ERC20(asset).transfer(owner, tokens)"
            ],
            "block1283_1": [
                "ERC20(asset).transfer(msg.sender, order * units)"
            ],
            "block1283_0": [
                "ERC20(asset).transfer(msg.sender, order * units)"
            ],
            "block1879": [
                "owner.transfer(this.balance)"
            ],
            "jump1009": [
                "msg.sender.send(change)",
                "msg.sender.send(change)"
            ],
            "block1283": [
                "ERC20(asset).transfer(msg.sender, order * units)"
            ],
            "jump2820": [
                "ERC20(asset).transfer(owner, tokens)",
                "ERC20(asset).transfer(owner, tokens)"
            ],
            "jump1283_1": [
                "ERC20(asset).transfer(msg.sender, order * units)",
                "ERC20(asset).transfer(msg.sender, order * units)"
            ],
            "jump1283_0": [
                "ERC20(asset).transfer(msg.sender, order * units)",
                "ERC20(asset).transfer(msg.sender, order * units)"
            ],
            "block1009": [
                "msg.sender.send(change)"
            ],
            "block1724_2": [
                "ERC20(asset).balanceOf(address(this))"
            ],
            "block1724_1": [
                "ERC20(asset).balanceOf(address(this))"
            ],
            "block1724_0": [
                "ERC20(asset).balanceOf(address(this))"
            ],
            "jump1724_1": [
                "ERC20(asset).balanceOf(address(this))",
                "ERC20(asset).balanceOf(address(this))"
            ],
            "jump1724_0": [
                "ERC20(asset).balanceOf(address(this))",
                "ERC20(asset).balanceOf(address(this))"
            ],
            "jump1724_2": [
                "ERC20(asset).balanceOf(address(this))",
                "ERC20(asset).balanceOf(address(this))"
            ],
            "jump1283": [
                "ERC20(asset).transfer(msg.sender, order * units)",
                "ERC20(asset).transfer(msg.sender, order * units)"
            ],
            "block1724": [
                "ERC20(asset).balanceOf(address(this))"
            ],
            "jump1724": [
                "ERC20(asset).balanceOf(address(this))",
                "ERC20(asset).balanceOf(address(this))"
            ],
            "jump1009_1": [
                "msg.sender.send(change)",
                "msg.sender.send(change)"
            ],
            "jump1009_0": [
                "msg.sender.send(change)",
                "msg.sender.send(change)"
            ]
        }
    }
}