{
    "owned": {
        "function_list": [
            "owned()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "owned()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "TestekCrowdsale": {
        "function_list": [
            "owned()",
            "transferOwnership(address)",
            "TestekCrowdsale(uint256,address)",
            "fallback()",
            "claimEthIfFailed()",
            "batchReturnEthIfFailed(uint256)",
            "changeMultisigAddress(address)",
            "participantCount()",
            "claimTeamTokens(address)",
            "setTokenContract(address)",
            "getTestekTokenIssuance(uint256,uint256)",
            "withdrawEther()",
            "endCrowdsale()",
            "salvageTokensFromContract(address,address,uint256)",
            "getTSTTokenAddress()",
            "crowdsaleInProgress()",
            "participantContributionInEth(address)",
            "withdrawRemainingBalanceForManualRecovery()"
        ],
        "initial_state": {
            "owned()": {
                "argument": {},
                "contract": {
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minEthToRaise": "uint256",
                    "maxEthToRaise": "uint256",
                    "totalEthRaised": "uint256",
                    "nextFreeParticipantIndex": "uint256",
                    "blocksInADay": "uint256",
                    "lastEthReturnIndex": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minEthToRaise": "uint256",
                    "maxEthToRaise": "uint256",
                    "totalEthRaised": "uint256",
                    "nextFreeParticipantIndex": "uint256",
                    "blocksInADay": "uint256",
                    "lastEthReturnIndex": "uint256"
                }
            },
            "TestekCrowdsale(uint256,address)": {
                "argument": {
                    "_startBlock": "uint256"
                },
                "contract": {
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minEthToRaise": "uint256",
                    "maxEthToRaise": "uint256",
                    "totalEthRaised": "uint256",
                    "nextFreeParticipantIndex": "uint256",
                    "blocksInADay": "uint256",
                    "lastEthReturnIndex": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minEthToRaise": "uint256",
                    "maxEthToRaise": "uint256",
                    "totalEthRaised": "uint256",
                    "nextFreeParticipantIndex": "uint256",
                    "blocksInADay": "uint256",
                    "lastEthReturnIndex": "uint256"
                }
            },
            "claimEthIfFailed()": {
                "argument": {},
                "contract": {
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minEthToRaise": "uint256",
                    "maxEthToRaise": "uint256",
                    "totalEthRaised": "uint256",
                    "nextFreeParticipantIndex": "uint256",
                    "blocksInADay": "uint256",
                    "lastEthReturnIndex": "uint256"
                }
            },
            "batchReturnEthIfFailed(uint256)": {
                "argument": {
                    "_numberOfReturns": "uint256"
                },
                "contract": {
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minEthToRaise": "uint256",
                    "maxEthToRaise": "uint256",
                    "totalEthRaised": "uint256",
                    "nextFreeParticipantIndex": "uint256",
                    "blocksInADay": "uint256",
                    "lastEthReturnIndex": "uint256"
                }
            },
            "changeMultisigAddress(address)": {
                "argument": {},
                "contract": {
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minEthToRaise": "uint256",
                    "maxEthToRaise": "uint256",
                    "totalEthRaised": "uint256",
                    "nextFreeParticipantIndex": "uint256",
                    "blocksInADay": "uint256",
                    "lastEthReturnIndex": "uint256"
                }
            },
            "participantCount()": {
                "argument": {},
                "contract": {
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minEthToRaise": "uint256",
                    "maxEthToRaise": "uint256",
                    "totalEthRaised": "uint256",
                    "nextFreeParticipantIndex": "uint256",
                    "blocksInADay": "uint256",
                    "lastEthReturnIndex": "uint256"
                }
            },
            "claimTeamTokens(address)": {
                "argument": {},
                "contract": {
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minEthToRaise": "uint256",
                    "maxEthToRaise": "uint256",
                    "totalEthRaised": "uint256",
                    "nextFreeParticipantIndex": "uint256",
                    "blocksInADay": "uint256",
                    "lastEthReturnIndex": "uint256"
                }
            },
            "setTokenContract(address)": {
                "argument": {},
                "contract": {
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minEthToRaise": "uint256",
                    "maxEthToRaise": "uint256",
                    "totalEthRaised": "uint256",
                    "nextFreeParticipantIndex": "uint256",
                    "blocksInADay": "uint256",
                    "lastEthReturnIndex": "uint256"
                }
            },
            "getTestekTokenIssuance(uint256,uint256)": {
                "argument": {
                    "_blockNumber": "uint256",
                    "_ethSent": "uint256"
                },
                "contract": {
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minEthToRaise": "uint256",
                    "maxEthToRaise": "uint256",
                    "totalEthRaised": "uint256",
                    "nextFreeParticipantIndex": "uint256",
                    "blocksInADay": "uint256",
                    "lastEthReturnIndex": "uint256"
                }
            },
            "withdrawEther()": {
                "argument": {},
                "contract": {
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minEthToRaise": "uint256",
                    "maxEthToRaise": "uint256",
                    "totalEthRaised": "uint256",
                    "nextFreeParticipantIndex": "uint256",
                    "blocksInADay": "uint256",
                    "lastEthReturnIndex": "uint256"
                }
            },
            "endCrowdsale()": {
                "argument": {},
                "contract": {
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minEthToRaise": "uint256",
                    "maxEthToRaise": "uint256",
                    "totalEthRaised": "uint256",
                    "nextFreeParticipantIndex": "uint256",
                    "blocksInADay": "uint256",
                    "lastEthReturnIndex": "uint256"
                }
            },
            "salvageTokensFromContract(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minEthToRaise": "uint256",
                    "maxEthToRaise": "uint256",
                    "totalEthRaised": "uint256",
                    "nextFreeParticipantIndex": "uint256",
                    "blocksInADay": "uint256",
                    "lastEthReturnIndex": "uint256"
                }
            },
            "getTSTTokenAddress()": {
                "argument": {},
                "contract": {
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minEthToRaise": "uint256",
                    "maxEthToRaise": "uint256",
                    "totalEthRaised": "uint256",
                    "nextFreeParticipantIndex": "uint256",
                    "blocksInADay": "uint256",
                    "lastEthReturnIndex": "uint256"
                }
            },
            "crowdsaleInProgress()": {
                "argument": {},
                "contract": {
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minEthToRaise": "uint256",
                    "maxEthToRaise": "uint256",
                    "totalEthRaised": "uint256",
                    "nextFreeParticipantIndex": "uint256",
                    "blocksInADay": "uint256",
                    "lastEthReturnIndex": "uint256"
                }
            },
            "participantContributionInEth(address)": {
                "argument": {},
                "contract": {
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minEthToRaise": "uint256",
                    "maxEthToRaise": "uint256",
                    "totalEthRaised": "uint256",
                    "nextFreeParticipantIndex": "uint256",
                    "blocksInADay": "uint256",
                    "lastEthReturnIndex": "uint256"
                }
            },
            "withdrawRemainingBalanceForManualRecovery()": {
                "argument": {},
                "contract": {
                    "startBlock": "uint256",
                    "endBlock": "uint256",
                    "minEthToRaise": "uint256",
                    "maxEthToRaise": "uint256",
                    "totalEthRaised": "uint256",
                    "nextFreeParticipantIndex": "uint256",
                    "blocksInADay": "uint256",
                    "lastEthReturnIndex": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "claimEthIfFailed()": [
                2441,
                339
            ],
            "changeMultisigAddress(address)": [
                1797,
                75
            ],
            "getTestekTokenIssuance(uint256,uint256)": [
                1950,
                141
            ],
            "claimTeamTokens(address)": [
                2905,
                515
            ],
            "endCrowdsale()": [
                2025,
                163
            ],
            "batchReturnEthIfFailed(uint256)": [
                2464,
                361
            ],
            "participantContributionInEth(address)": [
                2071,
                207
            ],
            "withdrawRemainingBalanceForManualRecovery()": [
                2048,
                185
            ],
            "withdrawEther()": [
                2418,
                317
            ],
            "getTSTTokenAddress()": [
                2201,
                251
            ],
            "setTokenContract(address)": [
                2705,
                427
            ],
            "transferOwnership(address)": [
                2972,
                537
            ],
            "participantCount()": [
                2158,
                229
            ],
            "salvageTokensFromContract(address,address,uint256)": [
                2596,
                405
            ],
            "crowdsaleInProgress()": [
                2815,
                471
            ]
        },
        "block_CALL_mapping": {
            "block6546": [
                "TestekTokenContract.totalSupply()"
            ],
            "block6749": [
                "TestekTokenContract.mintTokens(_to, TestekTokenContract.totalSupply() * 49/51)"
            ],
            "jump1422_0": [
                "TestekTokenContract.mintTokens(msg.sender, getTestekTokenIssuance(block.number, maxContribution))",
                "TestekTokenContract.mintTokens(msg.sender, getTestekTokenIssuance(block.number, maxContribution))"
            ],
            "block5268": [
                "currentParticipantAddress.send(contribution)"
            ],
            "jump5268": [
                "currentParticipantAddress.send(contribution)",
                "currentParticipantAddress.send(contribution)"
            ],
            "jump964": [
                "TestekTokenContract.mintTokens(msg.sender, getTestekTokenIssuance(block.number, msg.value))",
                "TestekTokenContract.mintTokens(msg.sender, getTestekTokenIssuance(block.number, msg.value))"
            ],
            "jump4629": [
                "msg.sender.send(ethContributed)",
                "msg.sender.send(ethContributed)"
            ],
            "jump1442_0": [
                "msg.sender.send(toReturn)",
                "msg.sender.send(toReturn)"
            ],
            "block1422_0": [
                "TestekTokenContract.mintTokens(msg.sender, getTestekTokenIssuance(block.number, maxContribution))"
            ],
            "jump6546": [
                "TestekTokenContract.totalSupply()",
                "TestekTokenContract.totalSupply()"
            ],
            "block1422": [
                "TestekTokenContract.mintTokens(msg.sender, getTestekTokenIssuance(block.number, maxContribution))"
            ],
            "block964": [
                "TestekTokenContract.mintTokens(msg.sender, getTestekTokenIssuance(block.number, msg.value))"
            ],
            "jump5917": [
                "IERC20Token(_tokenAddress).transfer(_to, _amount)",
                "IERC20Token(_tokenAddress).transfer(_to, _amount)"
            ],
            "block4629": [
                "msg.sender.send(ethContributed)"
            ],
            "block4319": [
                "multisigAddress.send(this.balance)"
            ],
            "block1442": [
                "msg.sender.send(toReturn)"
            ],
            "block964_0": [
                "TestekTokenContract.mintTokens(msg.sender, getTestekTokenIssuance(block.number, msg.value))"
            ],
            "jump1422": [
                "TestekTokenContract.mintTokens(msg.sender, getTestekTokenIssuance(block.number, maxContribution))",
                "TestekTokenContract.mintTokens(msg.sender, getTestekTokenIssuance(block.number, maxContribution))"
            ],
            "jump6749": [
                "TestekTokenContract.mintTokens(_to, TestekTokenContract.totalSupply() * 49/51)",
                "TestekTokenContract.mintTokens(_to, TestekTokenContract.totalSupply() * 49/51)"
            ],
            "jump1442": [
                "msg.sender.send(toReturn)",
                "msg.sender.send(toReturn)"
            ],
            "block3892": [
                "multisigAddress.send(this.balance)"
            ],
            "block5917": [
                "IERC20Token(_tokenAddress).transfer(_to, _amount)"
            ],
            "block1442_0": [
                "msg.sender.send(toReturn)"
            ],
            "jump964_0": [
                "TestekTokenContract.mintTokens(msg.sender, getTestekTokenIssuance(block.number, msg.value))",
                "TestekTokenContract.mintTokens(msg.sender, getTestekTokenIssuance(block.number, msg.value))"
            ]
        }
    }
}