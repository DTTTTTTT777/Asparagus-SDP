{
    "SafeMath": {
        "function_list": [
            "ADD(uint256,uint256)",
            "SUB(uint256,uint256)"
        ],
        "initial_state": {
            "ADD(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "SUB(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "token": {
        "function_list": [
            "transfer(address,uint256)",
            "burn(uint256)"
        ],
        "initial_state": {
            "transfer(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {}
            },
            "burn(uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transfer(address,uint256)": [
                1038,
                251
            ]
        },
        "block_CALL_mapping": {
            "jump3650": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "block3650": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "Crowdsale": {
        "function_list": [
            "Crowdsale()",
            "fallback()",
            "checkGoalReached()",
            "getPrice()",
            "safeWithdrawal()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Crowdsale()": {
                "argument": {},
                "contract": {
                    "hardCapInTokens": "uint256",
                    "fundingGoal": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256",
                    "price": "uint256",
                    "soldTokens": "uint256",
                    "restTokens": "uint256",
                    "MIN_ETHER": "uint256",
                    "MAX_ETHER": "uint256",
                    "START": "uint256",
                    "TIER2": "uint256",
                    "TIER3": "uint256",
                    "TIER4": "uint256",
                    "TIER1_PRICE": "uint256",
                    "TIER2_PRICE": "uint256",
                    "TIER3_PRICE": "uint256",
                    "TIER4_PRICE": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "hardCapInTokens": "uint256",
                    "fundingGoal": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256",
                    "price": "uint256",
                    "soldTokens": "uint256",
                    "restTokens": "uint256",
                    "MIN_ETHER": "uint256",
                    "MAX_ETHER": "uint256",
                    "START": "uint256",
                    "TIER2": "uint256",
                    "TIER3": "uint256",
                    "TIER4": "uint256",
                    "TIER1_PRICE": "uint256",
                    "TIER2_PRICE": "uint256",
                    "TIER3_PRICE": "uint256",
                    "TIER4_PRICE": "uint256"
                }
            },
            "checkGoalReached()": {
                "argument": {},
                "contract": {
                    "hardCapInTokens": "uint256",
                    "fundingGoal": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256",
                    "price": "uint256",
                    "soldTokens": "uint256",
                    "restTokens": "uint256",
                    "MIN_ETHER": "uint256",
                    "MAX_ETHER": "uint256",
                    "START": "uint256",
                    "TIER2": "uint256",
                    "TIER3": "uint256",
                    "TIER4": "uint256",
                    "TIER1_PRICE": "uint256",
                    "TIER2_PRICE": "uint256",
                    "TIER3_PRICE": "uint256",
                    "TIER4_PRICE": "uint256"
                }
            },
            "getPrice()": {
                "argument": {},
                "contract": {
                    "hardCapInTokens": "uint256",
                    "fundingGoal": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256",
                    "price": "uint256",
                    "soldTokens": "uint256",
                    "restTokens": "uint256",
                    "MIN_ETHER": "uint256",
                    "MAX_ETHER": "uint256",
                    "START": "uint256",
                    "TIER2": "uint256",
                    "TIER3": "uint256",
                    "TIER4": "uint256",
                    "TIER1_PRICE": "uint256",
                    "TIER2_PRICE": "uint256",
                    "TIER3_PRICE": "uint256",
                    "TIER4_PRICE": "uint256"
                }
            },
            "safeWithdrawal()": {
                "argument": {},
                "contract": {
                    "hardCapInTokens": "uint256",
                    "fundingGoal": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256",
                    "price": "uint256",
                    "soldTokens": "uint256",
                    "restTokens": "uint256",
                    "MIN_ETHER": "uint256",
                    "MAX_ETHER": "uint256",
                    "START": "uint256",
                    "TIER2": "uint256",
                    "TIER3": "uint256",
                    "TIER4": "uint256",
                    "TIER1_PRICE": "uint256",
                    "TIER2_PRICE": "uint256",
                    "TIER3_PRICE": "uint256",
                    "TIER4_PRICE": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "hardCapInTokens": "uint256",
                    "fundingGoal": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256",
                    "price": "uint256",
                    "soldTokens": "uint256",
                    "restTokens": "uint256",
                    "MIN_ETHER": "uint256",
                    "MAX_ETHER": "uint256",
                    "START": "uint256",
                    "TIER2": "uint256",
                    "TIER3": "uint256",
                    "TIER4": "uint256",
                    "TIER1_PRICE": "uint256",
                    "TIER2_PRICE": "uint256",
                    "TIER3_PRICE": "uint256",
                    "TIER4_PRICE": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "safeWithdrawal()": [
                1870,
                537
            ],
            "checkGoalReached()": [
                855,
                75
            ]
        },
        "block_CALL_mapping": {
            "jump2288": [
                "tokenReward.burn(hardCapInTokens - soldTokens)",
                "tokenReward.burn(hardCapInTokens - soldTokens)"
            ],
            "jump2719": [
                "msg.sender.send(amount)",
                "msg.sender.send(amount)"
            ],
            "block2288": [
                "tokenReward.burn(hardCapInTokens - soldTokens)"
            ],
            "jump708": [
                "tokenReward.transfer(msg.sender, amount / price)",
                "tokenReward.transfer(msg.sender, amount / price)"
            ],
            "block2719": [
                "msg.sender.send(amount)"
            ],
            "jump708_0": [
                "tokenReward.transfer(msg.sender, amount / price)",
                "tokenReward.transfer(msg.sender, amount / price)"
            ],
            "block3082": [
                "beneficiary.send(amountRaised)"
            ],
            "block708": [
                "tokenReward.transfer(msg.sender, amount / price)"
            ],
            "jump3082": [
                "beneficiary.send(amountRaised)",
                "beneficiary.send(amountRaised)"
            ],
            "block708_0": [
                "tokenReward.transfer(msg.sender, amount / price)"
            ]
        }
    }
}