{
    "ERC20Basic": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "balanceOf(address)": [
                124,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "Own": {
        "function_list": [
            "Own()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Own()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "BasicToken": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transfer(address,uint256)": [
                222,
                119
            ],
            "balanceOf(address)": [
                135,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "StandardToken": {
        "function_list": [
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                147,
                75
            ],
            "balanceOf(address)": [
                525,
                163
            ],
            "allowance(address,address)": [
                814,
                229
            ],
            "transferFrom(address,address,uint256)": [
                291,
                119
            ],
            "transfer(address,uint256)": [
                612,
                185
            ]
        },
        "block_CALL_mapping": {}
    },
    "Token": {
        "function_list": [
            "Own()",
            "transferOwnership(address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)",
            "Token()",
            "burner(uint256)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Own()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "Token()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "burner(uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "Crowdsale": {
        "function_list": [
            "asyncSend(address,uint256)",
            "withdrawPayments()",
            "emergencyStop()",
            "release()",
            "Own()",
            "transferOwnership(address)",
            "Crowdsale(address,address)",
            "fallback()",
            "start()",
            "receiveETH(address)",
            "bonus(uint256)",
            "finalize()",
            "drain()",
            "coinDrain()",
            "changeMultisig(address)",
            "changeTribeOwner()",
            "setRefundState()",
            "refund(uint256)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "asyncSend(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "withdrawPayments()": {
                "argument": {},
                "contract": {
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "emergencyStop()": {
                "argument": {},
                "contract": {
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "release()": {
                "argument": {},
                "contract": {
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "Own()": {
                "argument": {},
                "contract": {
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "Crowdsale(address,address)": {
                "argument": {},
                "contract": {
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "start()": {
                "argument": {},
                "contract": {
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "receiveETH(address)": {
                "argument": {},
                "contract": {
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "bonus(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "finalize()": {
                "argument": {},
                "contract": {
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "drain()": {
                "argument": {},
                "contract": {
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "coinDrain()": {
                "argument": {},
                "contract": {
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "changeMultisig(address)": {
                "argument": {},
                "contract": {
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "changeTribeOwner()": {
                "argument": {},
                "contract": {
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "setRefundState()": {
                "argument": {},
                "contract": {
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "refund(uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "withdrawPayments()": [
                1258,
                330
            ],
            "transferOwnership(address)": [
                2580,
                836
            ],
            "finalize()": [
                1052,
                198
            ]
        },
        "block_CALL_mapping": {
            "block7066_3": [
                "rok.totalSupply()"
            ],
            "jump9070_0": [
                "rok.totalSupply()",
                "rok.totalSupply()"
            ],
            "jump9505_0": [
                "rok.burn(rok.totalSupply().sub(checkRokSold()))",
                "rok.burn(rok.totalSupply().sub(checkRokSold()))"
            ],
            "block4670": [
                "rok.transfer(msg.sender,balancesRokToken[msg.sender])"
            ],
            "block7066_4": [
                "rok.totalSupply()"
            ],
            "jump7066_3": [
                "rok.totalSupply()",
                "rok.totalSupply()"
            ],
            "block9070": [
                "rok.totalSupply()"
            ],
            "block9505": [
                "rok.burn(rok.totalSupply().sub(checkRokSold()))"
            ],
            "jump5614": [
                "rok.transfer(bounty, checkRokBounty())",
                "rok.transfer(bounty, checkRokBounty())"
            ],
            "block5614": [
                "rok.transfer(bounty, checkRokBounty())"
            ],
            "block8876": [
                "rok.transfer(team, checkRokTeam())"
            ],
            "jump9070": [
                "rok.totalSupply()",
                "rok.totalSupply()"
            ],
            "jump9505": [
                "rok.burn(rok.totalSupply().sub(checkRokSold()))",
                "rok.burn(rok.totalSupply().sub(checkRokSold()))"
            ],
            "jump9350_0": [
                "rok.totalSupply()",
                "rok.totalSupply()"
            ],
            "block9350_0": [
                "rok.totalSupply()"
            ],
            "block3191": [
                "escrow.transfer(msg.value)"
            ],
            "block6150": [
                "rok.transfer(bounty, checkRokBounty())"
            ],
            "block9070_0": [
                "rok.totalSupply()"
            ],
            "block9505_0": [
                "rok.burn(rok.totalSupply().sub(checkRokSold()))"
            ],
            "block5701": [
                "escrow.transfer(savedBalance)"
            ],
            "block9711_0": [
                "rok.totalSupply()"
            ],
            "block9711": [
                "rok.totalSupply()"
            ],
            "jump3191_0": [
                "escrow.transfer(msg.value)",
                "escrow.transfer(msg.value)"
            ],
            "block7066": [
                "rok.totalSupply()"
            ],
            "jump6150": [
                "rok.transfer(bounty, checkRokBounty())",
                "rok.transfer(bounty, checkRokBounty())"
            ],
            "jump5116": [
                "payee.send(payment)",
                "payee.send(payment)"
            ],
            "jump8876_0": [
                "rok.transfer(team, checkRokTeam())",
                "rok.transfer(team, checkRokTeam())"
            ],
            "block6804": [
                "rok.balanceOf(address(this))"
            ],
            "jump4670": [
                "rok.transfer(msg.sender,balancesRokToken[msg.sender])",
                "rok.transfer(msg.sender,balancesRokToken[msg.sender])"
            ],
            "block7066_0": [
                "rok.totalSupply()"
            ],
            "block7066_1": [
                "rok.totalSupply()"
            ],
            "block7066_2": [
                "rok.totalSupply()"
            ],
            "block9350": [
                "rok.totalSupply()"
            ],
            "jump7066_4": [
                "rok.totalSupply()",
                "rok.totalSupply()"
            ],
            "jump9350": [
                "rok.totalSupply()",
                "rok.totalSupply()"
            ],
            "jump7066_2": [
                "rok.totalSupply()",
                "rok.totalSupply()"
            ],
            "jump5701": [
                "escrow.transfer(savedBalance)",
                "escrow.transfer(savedBalance)"
            ],
            "jump7066_0": [
                "rok.totalSupply()",
                "rok.totalSupply()"
            ],
            "jump7066_1": [
                "rok.totalSupply()",
                "rok.totalSupply()"
            ],
            "jump9711_0": [
                "rok.totalSupply()",
                "rok.totalSupply()"
            ],
            "block8876_0": [
                "rok.transfer(team, checkRokTeam())"
            ],
            "block3191_0": [
                "escrow.transfer(msg.value)"
            ],
            "block5116": [
                "payee.send(payment)"
            ],
            "jump4181": [
                "rok.transfer(msg.sender,balancesRokToken[msg.sender])",
                "rok.transfer(msg.sender,balancesRokToken[msg.sender])"
            ],
            "jump7066": [
                "rok.totalSupply()",
                "rok.totalSupply()"
            ],
            "jump9711": [
                "rok.totalSupply()",
                "rok.totalSupply()"
            ],
            "block4181": [
                "rok.transfer(msg.sender,balancesRokToken[msg.sender])"
            ],
            "jump6804": [
                "rok.balanceOf(address(this))",
                "rok.balanceOf(address(this))"
            ],
            "jump3191": [
                "escrow.transfer(msg.value)",
                "escrow.transfer(msg.value)"
            ],
            "jump8876": [
                "rok.transfer(team, checkRokTeam())",
                "rok.transfer(team, checkRokTeam())"
            ]
        }
    },
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)",
            "assert(bool)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "assert(bool)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    }
}