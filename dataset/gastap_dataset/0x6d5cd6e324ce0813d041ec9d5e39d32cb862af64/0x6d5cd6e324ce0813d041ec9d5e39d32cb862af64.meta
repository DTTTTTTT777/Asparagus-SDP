{
    "SafeMath": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "StdToken": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "MNTP": {
        "function_list": [
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "safeMul(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "setCreator(address)",
            "setIcoContractAddress(address)",
            "MNTP()",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "issueTokens(address,uint256)",
            "burnTokens(address,uint256)",
            "lockTransfer(bool)",
            "fallback()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "setCreator(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "setIcoContractAddress(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "MNTP()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "issueTokens(address,uint256)": {
                "argument": {
                    "_tokens": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "burnTokens(address,uint256)": {
                "argument": {
                    "_tokens": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "lockTransfer(bool)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                501,
                119
            ],
            "setCreator(address)": [
                1012,
                273
            ],
            "issueTokens(address,uint256)": [
                1079,
                295
            ],
            "setIcoContractAddress(address)": [
                679,
                163
            ],
            "burnTokens(address,uint256)": [
                602,
                141
            ],
            "balanceOf(address)": [
                1156,
                317
            ],
            "transferFrom(address,address,uint256)": [
                836,
                229
            ],
            "lockTransfer(bool)": [
                789,
                207
            ],
            "allowance(address,address)": [
                1665,
                449
            ],
            "transfer(address,uint256)": [
                1521,
                405
            ]
        },
        "block_CALL_mapping": {}
    },
    "GoldmintUnsold": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "GoldmintUnsold(address,address)",
            "setIcoContractAddress(address)",
            "finishIco()",
            "withdrawTokens()",
            "fallback()"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "icoIsFinishedDate": "uint64"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "icoIsFinishedDate": "uint64"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "icoIsFinishedDate": "uint64"
                }
            },
            "GoldmintUnsold(address,address)": {
                "argument": {},
                "contract": {
                    "icoIsFinishedDate": "uint64"
                }
            },
            "setIcoContractAddress(address)": {
                "argument": {},
                "contract": {
                    "icoIsFinishedDate": "uint64"
                }
            },
            "finishIco()": {
                "argument": {},
                "contract": {
                    "icoIsFinishedDate": "uint64"
                }
            },
            "withdrawTokens()": {
                "argument": {},
                "contract": {
                    "icoIsFinishedDate": "uint64"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "icoIsFinishedDate": "uint64"
                }
            }
        },
        "function_block_mapping": {
            "setIcoContractAddress(address)": [
                234,
                97
            ],
            "finishIco()": [
                648,
                229
            ],
            "withdrawTokens()": [
                451,
                163
            ]
        },
        "block_CALL_mapping": {
            "block1471": [
                "mntToken.transfer(teamAccountAddress,total)"
            ],
            "jump1471": [
                "mntToken.transfer(teamAccountAddress,total)",
                "mntToken.transfer(teamAccountAddress,total)"
            ],
            "block1179": [
                "mntToken.balanceOf(this)"
            ],
            "jump1179": [
                "mntToken.balanceOf(this)",
                "mntToken.balanceOf(this)"
            ]
        }
    },
    "FoundersVesting": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "FoundersVesting(address,address)",
            "withdrawTokens()",
            "fallback()",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "lastWithdrawTime": "uint64",
                    "withdrawsCount": "uint256",
                    "amountToSend": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "lastWithdrawTime": "uint64",
                    "withdrawsCount": "uint256",
                    "amountToSend": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "lastWithdrawTime": "uint64",
                    "withdrawsCount": "uint256",
                    "amountToSend": "uint256"
                }
            },
            "FoundersVesting(address,address)": {
                "argument": {},
                "contract": {
                    "lastWithdrawTime": "uint64",
                    "withdrawsCount": "uint256",
                    "amountToSend": "uint256"
                }
            },
            "withdrawTokens()": {
                "argument": {},
                "contract": {
                    "lastWithdrawTime": "uint64",
                    "withdrawsCount": "uint256",
                    "amountToSend": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "lastWithdrawTime": "uint64",
                    "withdrawsCount": "uint256",
                    "amountToSend": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "withdrawTokens()": [
                255,
                119
            ]
        },
        "block_CALL_mapping": {
            "jump1058": [
                "mntToken.balanceOf(this)",
                "mntToken.balanceOf(this)"
            ],
            "jump1369": [
                "mntToken.transfer(teamAccountAddress,amountToSend)",
                "mntToken.transfer(teamAccountAddress,amountToSend)"
            ],
            "jump775": [
                "mntToken.balanceOf(this)",
                "mntToken.balanceOf(this)"
            ],
            "block775": [
                "mntToken.balanceOf(this)"
            ],
            "block1369": [
                "mntToken.transfer(teamAccountAddress,amountToSend)"
            ],
            "block1058": [
                "mntToken.balanceOf(this)"
            ]
        }
    },
    "Goldmint": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "Goldmint(address,address,address,address,address)",
            "startICO()",
            "pauseICO()",
            "resumeICO()",
            "startRefunding()",
            "startMigration()",
            "finishICO()",
            "setState(Goldmint.State)",
            "setTokenManager(address)",
            "getTokensIcoSold()",
            "getTotalIcoTokens()",
            "getMntTokenBalance(address)",
            "getBlockLength()",
            "getCurrentPrice()",
            "isIcoFinished()",
            "getMntTokensPerEth(uint256)",
            "buyTokens(address)",
            "issueTokensFromOtherCurrency(address,uint256)",
            "issueTokensExternal(address,uint256)",
            "issueTokensInternal(address,uint256)",
            "getMyRefund()",
            "fallback()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "Goldmint(address,address,address,address,address)": {
                "argument": {},
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "startICO()": {
                "argument": {},
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "pauseICO()": {
                "argument": {},
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "resumeICO()": {
                "argument": {},
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "startRefunding()": {
                "argument": {},
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "startMigration()": {
                "argument": {},
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "finishICO()": {
                "argument": {},
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "setState(Goldmint.State)": {
                "argument": {},
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "setTokenManager(address)": {
                "argument": {},
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "getTokensIcoSold()": {
                "argument": {},
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "getTotalIcoTokens()": {
                "argument": {},
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "getMntTokenBalance(address)": {
                "argument": {},
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "getBlockLength()": {
                "argument": {},
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "getCurrentPrice()": {
                "argument": {},
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "isIcoFinished()": {
                "argument": {},
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "getMntTokensPerEth(uint256)": {
                "argument": {
                    "_tokensSold": "uint256"
                },
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "buyTokens(address)": {
                "argument": {},
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "issueTokensFromOtherCurrency(address,uint256)": {
                "argument": {
                    "_weiCount": "uint256"
                },
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "issueTokensExternal(address,uint256)": {
                "argument": {
                    "_tokens": "uint256"
                },
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "issueTokensInternal(address,uint256)": {
                "argument": {
                    "_tokens": "uint256"
                },
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "getMyRefund()": {
                "argument": {},
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "multisigs": "address[]",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "ICO_TOKEN_SOFT_CAP": "uint256",
                    "icoStartedTime": "uint64",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "getTokensIcoSold()": [
                969,
                295
            ],
            "setTokenManager(address)": [
                1059,
                339
            ],
            "getBlockLength()": [
                1877,
                647
            ],
            "startRefunding()": [
                716,
                185
            ],
            "getCurrentPrice()": [
                2028,
                713
            ],
            "getMyRefund()": [
                739,
                207
            ],
            "resumeICO()": [
                1385,
                471
            ],
            "getMntTokenBalance(address)": [
                1581,
                559
            ],
            "pauseICO()": [
                693,
                163
            ],
            "getMntTokensPerEth(uint256)": [
                1963,
                691
            ],
            "isIcoFinished()": [
                1012,
                317
            ],
            "startMigration()": [
                583,
                119
            ],
            "getTotalIcoTokens()": [
                2255,
                801
            ],
            "startICO()": [
                1213,
                383
            ],
            "issueTokensFromOtherCurrency(address,uint256)": [
                892,
                273
            ],
            "issueTokensExternal(address,uint256)": [
                1800,
                625
            ],
            "finishICO()": [
                1668,
                581
            ],
            "buyTokens(address)": [
                2071,
                735
            ]
        },
        "block_CALL_mapping": {
            "jump7675": [
                "mntToken.issueTokens(_to,_tokens)",
                "mntToken.issueTokens(_to,_tokens)"
            ],
            "jump5949": [
                "mntToken.balanceOf(_of)",
                "mntToken.balanceOf(_of)"
            ],
            "block8335_2": [
                "mntToken.issueTokens(_to,_tokens)"
            ],
            "block8335_0": [
                "mntToken.issueTokens(_to,_tokens)"
            ],
            "block8335_1": [
                "mntToken.issueTokens(_to,_tokens)"
            ],
            "block3458": [
                "mntToken.lockTransfers()"
            ],
            "jump2920": [
                "mntToken.lockTransfer(true)",
                "mntToken.lockTransfer(true)"
            ],
            "jump4252": [
                "mntToken.burnTokens(sender, mntToken.balanceOf(sender))",
                "mntToken.burnTokens(sender, mntToken.balanceOf(sender))"
            ],
            "jump5478": [
                "mntToken.issueTokens(foundersRewardsAccount, FOUNDERS_REWARD)",
                "mntToken.issueTokens(foundersRewardsAccount, FOUNDERS_REWARD)"
            ],
            "jump6636": [
                "mntToken.issueTokens(unsoldContract,icoTokensUnsold)",
                "mntToken.issueTokens(unsoldContract,icoTokensUnsold)"
            ],
            "jump6341": [
                "mntToken.lockTransfer(false)",
                "mntToken.lockTransfer(false)"
            ],
            "jump7095": [
                "lastMs.transfer(this.balance)",
                "lastMs.transfer(this.balance)"
            ],
            "block6636": [
                "mntToken.issueTokens(unsoldContract,icoTokensUnsold)"
            ],
            "block6341": [
                "mntToken.lockTransfer(false)"
            ],
            "block5478": [
                "mntToken.issueTokens(foundersRewardsAccount, FOUNDERS_REWARD)"
            ],
            "block5949": [
                "mntToken.balanceOf(_of)"
            ],
            "jump6794": [
                "unsoldContract.finishIco()",
                "unsoldContract.finishIco()"
            ],
            "block2920": [
                "mntToken.lockTransfer(true)"
            ],
            "jump8335_0": [
                "mntToken.issueTokens(_to,_tokens)",
                "mntToken.issueTokens(_to,_tokens)"
            ],
            "block4252": [
                "mntToken.burnTokens(sender, mntToken.balanceOf(sender))"
            ],
            "jump8335_2": [
                "mntToken.issueTokens(_to,_tokens)",
                "mntToken.issueTokens(_to,_tokens)"
            ],
            "block6794": [
                "unsoldContract.finishIco()"
            ],
            "block3668": [
                "sender.transfer(ethValue)"
            ],
            "jump3668": [
                "sender.transfer(ethValue)",
                "sender.transfer(ethValue)"
            ],
            "jump3458": [
                "mntToken.lockTransfers()",
                "mntToken.lockTransfers()"
            ],
            "jump4060": [
                "mntToken.balanceOf(sender)",
                "mntToken.balanceOf(sender)"
            ],
            "jump8335": [
                "mntToken.issueTokens(_to,_tokens)",
                "mntToken.issueTokens(_to,_tokens)"
            ],
            "block4060": [
                "mntToken.balanceOf(sender)"
            ],
            "block5212": [
                "mntToken.lockTransfer(true)"
            ],
            "block8335": [
                "mntToken.issueTokens(_to,_tokens)"
            ],
            "block7095": [
                "lastMs.transfer(this.balance)"
            ],
            "jump5212": [
                "mntToken.lockTransfer(true)",
                "mntToken.lockTransfer(true)"
            ],
            "block6964": [
                "ms.transfer(sendThisAmount)"
            ],
            "block7675": [
                "mntToken.issueTokens(_to,_tokens)"
            ],
            "jump8335_1": [
                "mntToken.issueTokens(_to,_tokens)",
                "mntToken.issueTokens(_to,_tokens)"
            ],
            "jump6964": [
                "ms.transfer(sendThisAmount)",
                "ms.transfer(sendThisAmount)"
            ]
        }
    }
}