{
    "SafeMathLib": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "assert(bool)"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "assert(bool)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "safeSub(uint256,uint256)": [
                92,
                75
            ],
            "safeAdd(uint256,uint256)": [
                242,
                119
            ],
            "safeMul(uint256,uint256)": [
                167,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20Basic": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "balanceOf(address)": [
                124,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "StandardToken": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "assert(bool)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "addApproval(address,uint256)",
            "subApproval(address,uint256)"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "assert(bool)": {
                "argument": {},
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "addApproval(address,uint256)": {
                "argument": {
                    "_addedValue": "uint256"
                },
                "contract": {}
            },
            "subApproval(address,uint256)": {
                "argument": {
                    "_subtractedValue": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "safeSub(uint256,uint256)": [
                544,
                163
            ],
            "approve(address,uint256)": [
                180,
                75
            ],
            "subApproval(address,uint256)": [
                1015,
                273
            ],
            "balanceOf(address)": [
                457,
                141
            ],
            "safeAdd(uint256,uint256)": [
                1116,
                295
            ],
            "addApproval(address,uint256)": [
                720,
                207
            ],
            "allowance(address,address)": [
                896,
                251
            ],
            "safeMul(uint256,uint256)": [
                821,
                229
            ],
            "transferFrom(address,address,uint256)": [
                324,
                119
            ],
            "transfer(address,uint256)": [
                619,
                185
            ]
        },
        "block_CALL_mapping": {}
    },
    "UpgradeableToken": {
        "function_list": [
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "addApproval(address,uint256)",
            "subApproval(address,uint256)",
            "safeMul(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "assert(bool)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "UpgradeableToken(address)",
            "upgrade(uint256)",
            "setUpgradeAgent(address)",
            "getUpgradeState()",
            "setUpgradeMaster(address)",
            "canUpgrade()"
        ],
        "initial_state": {
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalUpgraded": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalUpgraded": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalUpgraded": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalUpgraded": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "totalUpgraded": "uint256"
                }
            },
            "addApproval(address,uint256)": {
                "argument": {
                    "_addedValue": "uint256"
                },
                "contract": {
                    "totalUpgraded": "uint256"
                }
            },
            "subApproval(address,uint256)": {
                "argument": {
                    "_subtractedValue": "uint256"
                },
                "contract": {
                    "totalUpgraded": "uint256"
                }
            },
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalUpgraded": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalUpgraded": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalUpgraded": "uint256"
                }
            },
            "assert(bool)": {
                "argument": {},
                "contract": {
                    "totalUpgraded": "uint256"
                }
            },
            "UpgradeableToken(address)": {
                "argument": {},
                "contract": {
                    "totalUpgraded": "uint256"
                }
            },
            "upgrade(uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalUpgraded": "uint256"
                }
            },
            "setUpgradeAgent(address)": {
                "argument": {},
                "contract": {
                    "totalUpgraded": "uint256"
                }
            },
            "getUpgradeState()": {
                "argument": {},
                "contract": {
                    "totalUpgraded": "uint256"
                }
            },
            "setUpgradeMaster(address)": {
                "argument": {},
                "contract": {
                    "totalUpgraded": "uint256"
                }
            },
            "canUpgrade()": {
                "argument": {},
                "contract": {
                    "totalUpgraded": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "upgrade(uint256)": [
                545,
                141
            ],
            "approve(address,uint256)": [
                268,
                75
            ],
            "setUpgradeAgent(address)": [
                1350,
                383
            ],
            "subApproval(address,uint256)": [
                1536,
                427
            ],
            "balanceOf(address)": [
                764,
                207
            ],
            "safeAdd(uint256,uint256)": [
                1637,
                449
            ],
            "canUpgrade()": [
                908,
                251
            ],
            "addApproval(address,uint256)": [
                1131,
                317
            ],
            "allowance(address,address)": [
                1417,
                405
            ],
            "safeMul(uint256,uint256)": [
                1275,
                361
            ],
            "safeSub(uint256,uint256)": [
                955,
                273
            ],
            "transferFrom(address,address,uint256)": [
                412,
                119
            ],
            "transfer(address,uint256)": [
                1030,
                295
            ],
            "setUpgradeMaster(address)": [
                1712,
                471
            ],
            "getUpgradeState()": [
                851,
                229
            ]
        },
        "block_CALL_mapping": {
            "block5377": [
                "upgradeAgent.originalSupply()"
            ],
            "jump3307": [
                "upgradeAgent.upgradeFrom(msg.sender, value)",
                "upgradeAgent.upgradeFrom(msg.sender, value)"
            ],
            "jump5170": [
                "upgradeAgent.isUpgradeAgent()",
                "upgradeAgent.isUpgradeAgent()"
            ],
            "jump5377": [
                "upgradeAgent.originalSupply()",
                "upgradeAgent.originalSupply()"
            ],
            "block3307": [
                "upgradeAgent.upgradeFrom(msg.sender, value)"
            ],
            "block5170": [
                "upgradeAgent.isUpgradeAgent()"
            ]
        }
    },
    "ReleasableToken": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "setReleaseAgent(address)",
            "setTransferAgent(address,bool)",
            "releaseTokenTransfer()",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "setReleaseAgent(address)": {
                "argument": {},
                "contract": {}
            },
            "setTransferAgent(address,bool)": {
                "argument": {},
                "contract": {}
            },
            "releaseTokenTransfer()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                314,
                97
            ],
            "setTransferAgent(address,bool)": [
                235,
                75
            ],
            "releaseTokenTransfer()": [
                658,
                185
            ],
            "balanceOf(address)": [
                782,
                229
            ],
            "transferFrom(address,address,uint256)": [
                458,
                141
            ],
            "setReleaseAgent(address)": [
                591,
                163
            ],
            "allowance(address,address)": [
                1383,
                383
            ],
            "transfer(address,uint256)": [
                1094,
                317
            ],
            "transferOwnership(address)": [
                1502,
                405
            ]
        },
        "block_CALL_mapping": {}
    },
    "MintableToken": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "addApproval(address,uint256)",
            "subApproval(address,uint256)",
            "safeMul(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "assert(bool)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "mint(address,uint256)",
            "setMintAgent(address,bool)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "addApproval(address,uint256)": {
                "argument": {
                    "_addedValue": "uint256"
                },
                "contract": {}
            },
            "subApproval(address,uint256)": {
                "argument": {
                    "_subtractedValue": "uint256"
                },
                "contract": {}
            },
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "assert(bool)": {
                "argument": {},
                "contract": {}
            },
            "mint(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {}
            },
            "setMintAgent(address,bool)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "setMintAgent(address,bool)": [
                738,
                207
            ],
            "approve(address,uint256)": [
                293,
                97
            ],
            "subApproval(address,uint256)": [
                1462,
                383
            ],
            "mint(address,uint256)": [
                570,
                163
            ],
            "balanceOf(address)": [
                817,
                229
            ],
            "safeAdd(uint256,uint256)": [
                1563,
                405
            ],
            "addApproval(address,uint256)": [
                1167,
                317
            ],
            "allowance(address,address)": [
                1343,
                361
            ],
            "safeMul(uint256,uint256)": [
                1268,
                339
            ],
            "safeSub(uint256,uint256)": [
                991,
                273
            ],
            "transferFrom(address,address,uint256)": [
                437,
                141
            ],
            "transfer(address,uint256)": [
                1066,
                295
            ],
            "transferOwnership(address)": [
                1638,
                427
            ]
        },
        "block_CALL_mapping": {}
    },
    "CrowdsaleToken": {
        "function_list": [
            "UpgradeableToken(address)",
            "upgrade(uint256)",
            "setUpgradeAgent(address)",
            "getUpgradeState()",
            "setUpgradeMaster(address)",
            "canUpgrade()",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "addApproval(address,uint256)",
            "subApproval(address,uint256)",
            "safeMul(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "assert(bool)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "mint(address,uint256)",
            "setMintAgent(address,bool)",
            "Ownable()",
            "transferOwnership(address)",
            "setReleaseAgent(address)",
            "setTransferAgent(address,bool)",
            "releaseTokenTransfer()",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "CrowdsaleToken(string,string,uint256,uint256,bool)",
            "releaseTokenTransfer()",
            "canUpgrade()",
            "setTokenInformation(string,string)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "UpgradeableToken(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "upgrade(uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "setUpgradeAgent(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "getUpgradeState()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "setUpgradeMaster(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "canUpgrade()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "addApproval(address,uint256)": {
                "argument": {
                    "_addedValue": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "subApproval(address,uint256)": {
                "argument": {
                    "_subtractedValue": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "assert(bool)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "mint(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "setMintAgent(address,bool)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "Ownable()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "setReleaseAgent(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "setTransferAgent(address,bool)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "releaseTokenTransfer()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "CrowdsaleToken(string,string,uint256,uint256,bool)": {
                "argument": {
                    "_name": "string",
                    "_symbol": "string",
                    "_initialSupply": "uint256",
                    "_decimals": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "setTokenInformation(string,string)": {
                "argument": {
                    "_name": "string",
                    "_symbol": "string"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "setMintAgent(address,bool)": [
                1269,
                295
            ],
            "upgrade(uint256)": [
                1348,
                317
            ],
            "setTransferAgent(address,bool)": [
                444,
                75
            ],
            "setTokenInformation(string,string)": [
                1393,
                339
            ],
            "allowance(address,address)": [
                2874,
                735
            ],
            "transferFrom(address,address,uint256)": [
                858,
                185
            ],
            "subApproval(address,uint256)": [
                2993,
                757
            ],
            "approve(address,uint256)": [
                714,
                141
            ],
            "safeAdd(uint256,uint256)": [
                3094,
                779
            ],
            "addApproval(address,uint256)": [
                2501,
                625
            ],
            "balanceOf(address)": [
                1765,
                427
            ],
            "setUpgradeAgent(address)": [
                2807,
                713
            ],
            "setReleaseAgent(address)": [
                991,
                207
            ],
            "setUpgradeMaster(address)": [
                3236,
                823
            ],
            "transferOwnership(address)": [
                3169,
                801
            ],
            "safeSub(uint256,uint256)": [
                2325,
                581
            ],
            "releaseTokenTransfer()": [
                1655,
                383
            ],
            "mint(address,uint256)": [
                1101,
                251
            ],
            "canUpgrade()": [
                2278,
                559
            ],
            "safeMul(uint256,uint256)": [
                2645,
                669
            ],
            "transfer(address,uint256)": [
                2400,
                603
            ],
            "getUpgradeState()": [
                1852,
                449
            ]
        },
        "block_CALL_mapping": {
            "block5611": [
                "upgradeAgent.upgradeFrom(msg.sender, value)"
            ],
            "block8308": [
                "upgradeAgent.originalSupply()"
            ],
            "jump8101": [
                "upgradeAgent.isUpgradeAgent()",
                "upgradeAgent.isUpgradeAgent()"
            ],
            "block8101": [
                "upgradeAgent.isUpgradeAgent()"
            ],
            "jump8308": [
                "upgradeAgent.originalSupply()",
                "upgradeAgent.originalSupply()"
            ],
            "jump5611": [
                "upgradeAgent.upgradeFrom(msg.sender, value)",
                "upgradeAgent.upgradeFrom(msg.sender, value)"
            ]
        }
    },
    "PricingStrategy": {
        "function_list": [
            "isPricingStrategy()",
            "isSane(address)",
            "calculatePrice(uint256,uint256,uint256,address,uint256)"
        ],
        "initial_state": {
            "isPricingStrategy()": {
                "argument": {},
                "contract": {}
            },
            "isSane(address)": {
                "argument": {},
                "contract": {}
            },
            "calculatePrice(uint256,uint256,uint256,address,uint256)": {
                "argument": {
                    "value": "uint256",
                    "weiRaised": "uint256",
                    "tokensSold": "uint256",
                    "decimals": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {
            "jump769": [
                "owner.send(this.balance)",
                "owner.send(this.balance)"
            ],
            "block769": [
                "owner.send(this.balance)"
            ]
        }
    },
    "Haltable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "halt()",
            "unhalt()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "halt()": {
                "argument": {},
                "contract": {}
            },
            "unhalt()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "unhalt()": [
                271,
                141
            ],
            "transferOwnership(address)": [
                294,
                163
            ],
            "halt()": [
                114,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "Crowdsale": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "assert(bool)",
            "halt()",
            "unhalt()",
            "Ownable()",
            "transferOwnership(address)",
            "Crowdsale(address,PricingStrategy,address,uint256,uint256,uint256)",
            "fallback()",
            "investInternal(address,uint128)",
            "preallocate(address,uint256,uint256)",
            "investWithSignedAddress(address,uint128,uint8,bytes32,bytes32)",
            "investWithCustomerId(address,uint128)",
            "invest(address)",
            "buyWithSignedAddress(uint128,uint8,bytes32,bytes32)",
            "buyWithCustomerId(uint128)",
            "buy()",
            "finalize()",
            "setFinalizeAgent(FinalizeAgent)",
            "setRequireCustomerId(bool)",
            "setRequireSignedAddress(bool,address)",
            "setEarlyParicipantWhitelist(address,bool)",
            "setEndsAt(uint256)",
            "setPricingStrategy(PricingStrategy)",
            "loadRefund()",
            "refund()",
            "isMinimumGoalReached()",
            "isFinalizerSane()",
            "isPricingSane()",
            "getState()",
            "setOwnerTestValue(uint256)",
            "isCrowdsale()",
            "isBreakingCap(uint256,uint256,uint256,uint256)",
            "isCrowdsaleFull()",
            "assignTokens(address,uint256)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "assert(bool)": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "halt()": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "unhalt()": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "Ownable()": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "Crowdsale(address,PricingStrategy,address,uint256,uint256,uint256)": {
                "argument": {
                    "_start": "uint256",
                    "_end": "uint256",
                    "_minimumFundingGoal": "uint256"
                },
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "investInternal(address,uint128)": {
                "argument": {
                    "customerId": "uint128"
                },
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "preallocate(address,uint256,uint256)": {
                "argument": {
                    "fullTokens": "uint256",
                    "weiPrice": "uint256"
                },
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "investWithSignedAddress(address,uint128,uint8,bytes32,bytes32)": {
                "argument": {
                    "customerId": "uint128",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "investWithCustomerId(address,uint128)": {
                "argument": {
                    "customerId": "uint128"
                },
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "invest(address)": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "buyWithSignedAddress(uint128,uint8,bytes32,bytes32)": {
                "argument": {
                    "customerId": "uint128",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "buyWithCustomerId(uint128)": {
                "argument": {
                    "customerId": "uint128"
                },
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "buy()": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "finalize()": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "setFinalizeAgent(FinalizeAgent)": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "setRequireCustomerId(bool)": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "setRequireSignedAddress(bool,address)": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "setEarlyParicipantWhitelist(address,bool)": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "setEndsAt(uint256)": {
                "argument": {
                    "time": "uint256"
                },
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "setPricingStrategy(PricingStrategy)": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "loadRefund()": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "refund()": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "isMinimumGoalReached()": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "isFinalizerSane()": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "isPricingSane()": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "getState()": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "setOwnerTestValue(uint256)": {
                "argument": {
                    "val": "uint256"
                },
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "isCrowdsale()": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "isBreakingCap(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "weiAmount": "uint256",
                    "tokenAmount": "uint256",
                    "weiRaisedTotal": "uint256",
                    "tokensSoldTotal": "uint256"
                },
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "isCrowdsaleFull()": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "assignTokens(address,uint256)": {
                "argument": {
                    "tokenAmount": "uint256"
                },
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {
            "jump2015": [
                "beneficiary.send(amountRaised)",
                "beneficiary.send(amountRaised)"
            ],
            "jump1652": [
                "msg.sender.send(amount)",
                "msg.sender.send(amount)"
            ],
            "jump499_0": [
                "tokenReward.transfer(msg.sender, (amount * 10 ** 18) / price)",
                "tokenReward.transfer(msg.sender, (amount * 10 ** 18) / price)"
            ],
            "block499_0": [
                "tokenReward.transfer(msg.sender, (amount * 10 ** 18) / price)"
            ],
            "block2015": [
                "beneficiary.send(amountRaised)"
            ],
            "block499": [
                "tokenReward.transfer(msg.sender, (amount * 10 ** 18) / price)"
            ],
            "jump499": [
                "tokenReward.transfer(msg.sender, (amount * 10 ** 18) / price)",
                "tokenReward.transfer(msg.sender, (amount * 10 ** 18) / price)"
            ],
            "block1652": [
                "msg.sender.send(amount)"
            ]
        }
    },
    "BonusFinalizeAgent": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "assert(bool)",
            "isFinalizeAgent()",
            "isSane()",
            "finalizeCrowdsale()",
            "BonusFinalizeAgent(CrowdsaleToken,Crowdsale,uint256[],address[])",
            "isSane()",
            "finalizeCrowdsale()"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalMembers": "uint256",
                    "allocatedBonus": "uint256",
                    "teamAddresses": "address[]"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalMembers": "uint256",
                    "allocatedBonus": "uint256",
                    "teamAddresses": "address[]"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalMembers": "uint256",
                    "allocatedBonus": "uint256",
                    "teamAddresses": "address[]"
                }
            },
            "assert(bool)": {
                "argument": {},
                "contract": {
                    "totalMembers": "uint256",
                    "allocatedBonus": "uint256",
                    "teamAddresses": "address[]"
                }
            },
            "isFinalizeAgent()": {
                "argument": {},
                "contract": {
                    "totalMembers": "uint256",
                    "allocatedBonus": "uint256",
                    "teamAddresses": "address[]"
                }
            },
            "isSane()": {
                "argument": {},
                "contract": {
                    "totalMembers": "uint256",
                    "allocatedBonus": "uint256",
                    "teamAddresses": "address[]"
                }
            },
            "finalizeCrowdsale()": {
                "argument": {},
                "contract": {
                    "totalMembers": "uint256",
                    "allocatedBonus": "uint256",
                    "teamAddresses": "address[]"
                }
            },
            "BonusFinalizeAgent(CrowdsaleToken,Crowdsale,uint256[],address[])": {
                "argument": {
                    "_bonusBasePoints": "uint256[]",
                    "_teamAddresses": "address[]"
                },
                "contract": {
                    "totalMembers": "uint256",
                    "allocatedBonus": "uint256",
                    "teamAddresses": "address[]"
                }
            }
        },
        "function_block_mapping": {
            "safeSub(uint256,uint256)": [
                579,
                229
            ],
            "finalizeCrowdsale()": [
                180,
                75
            ],
            "isSane()": [
                445,
                185
            ],
            "safeAdd(uint256,uint256)": [
                729,
                273
            ],
            "safeMul(uint256,uint256)": [
                654,
                251
            ],
            "isFinalizeAgent()": [
                312,
                119
            ]
        },
        "block_CALL_mapping": {
            "block2300": [
                "token.releaseAgent()"
            ],
            "jump1120": [
                "crowdsale.tokensSold()",
                "crowdsale.tokensSold()"
            ],
            "block2075": [
                "token.mintAgents(address(this))"
            ],
            "jump1770": [
                "token.releaseTokenTransfer()",
                "token.releaseTokenTransfer()"
            ],
            "block1770": [
                "token.releaseTokenTransfer()"
            ],
            "jump1600": [
                "token.mint(teamAddresses[i], allocatedBonus)",
                "token.mint(teamAddresses[i], allocatedBonus)"
            ],
            "jump2075": [
                "token.mintAgents(address(this))",
                "token.mintAgents(address(this))"
            ],
            "jump2300": [
                "token.releaseAgent()",
                "token.releaseAgent()"
            ],
            "block1120": [
                "crowdsale.tokensSold()"
            ],
            "block1600": [
                "token.mint(teamAddresses[i], allocatedBonus)"
            ]
        }
    },
    "MintedTokenCappedCrowdsale": {
        "function_list": [
            "Crowdsale(address,PricingStrategy,address,uint256,uint256,uint256)",
            "fallback()",
            "investInternal(address,uint128)",
            "preallocate(address,uint256,uint256)",
            "investWithSignedAddress(address,uint128,uint8,bytes32,bytes32)",
            "investWithCustomerId(address,uint128)",
            "invest(address)",
            "buyWithSignedAddress(uint128,uint8,bytes32,bytes32)",
            "buyWithCustomerId(uint128)",
            "buy()",
            "finalize()",
            "setFinalizeAgent(FinalizeAgent)",
            "setRequireCustomerId(bool)",
            "setRequireSignedAddress(bool,address)",
            "setEarlyParicipantWhitelist(address,bool)",
            "setEndsAt(uint256)",
            "setPricingStrategy(PricingStrategy)",
            "loadRefund()",
            "refund()",
            "isMinimumGoalReached()",
            "isFinalizerSane()",
            "isPricingSane()",
            "getState()",
            "setOwnerTestValue(uint256)",
            "isCrowdsale()",
            "isBreakingCap(uint256,uint256,uint256,uint256)",
            "isCrowdsaleFull()",
            "assignTokens(address,uint256)",
            "safeMul(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "assert(bool)",
            "halt()",
            "unhalt()",
            "Ownable()",
            "transferOwnership(address)",
            "MintedTokenCappedCrowdsale(address,PricingStrategy,address,uint256,uint256,uint256,uint256)",
            "isBreakingCap(uint256,uint256,uint256,uint256)",
            "isCrowdsaleFull()",
            "assignTokens(address,uint256)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Crowdsale(address,PricingStrategy,address,uint256,uint256,uint256)": {
                "argument": {
                    "_start": "uint256",
                    "_end": "uint256",
                    "_minimumFundingGoal": "uint256"
                },
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "investInternal(address,uint128)": {
                "argument": {
                    "customerId": "uint128"
                },
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "preallocate(address,uint256,uint256)": {
                "argument": {
                    "fullTokens": "uint256",
                    "weiPrice": "uint256"
                },
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "investWithSignedAddress(address,uint128,uint8,bytes32,bytes32)": {
                "argument": {
                    "customerId": "uint128",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "investWithCustomerId(address,uint128)": {
                "argument": {
                    "customerId": "uint128"
                },
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "invest(address)": {
                "argument": {},
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "buyWithSignedAddress(uint128,uint8,bytes32,bytes32)": {
                "argument": {
                    "customerId": "uint128",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "buyWithCustomerId(uint128)": {
                "argument": {
                    "customerId": "uint128"
                },
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "buy()": {
                "argument": {},
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "finalize()": {
                "argument": {},
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "setFinalizeAgent(FinalizeAgent)": {
                "argument": {},
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "setRequireCustomerId(bool)": {
                "argument": {},
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "setRequireSignedAddress(bool,address)": {
                "argument": {},
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "setEarlyParicipantWhitelist(address,bool)": {
                "argument": {},
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "setEndsAt(uint256)": {
                "argument": {
                    "time": "uint256"
                },
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "setPricingStrategy(PricingStrategy)": {
                "argument": {},
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "loadRefund()": {
                "argument": {},
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "refund()": {
                "argument": {},
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "isMinimumGoalReached()": {
                "argument": {},
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "isFinalizerSane()": {
                "argument": {},
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "isPricingSane()": {
                "argument": {},
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "getState()": {
                "argument": {},
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "setOwnerTestValue(uint256)": {
                "argument": {
                    "val": "uint256"
                },
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "isCrowdsale()": {
                "argument": {},
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "isBreakingCap(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "weiAmount": "uint256",
                    "tokenAmount": "uint256",
                    "weiRaisedTotal": "uint256",
                    "tokensSoldTotal": "uint256"
                },
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "isCrowdsaleFull()": {
                "argument": {},
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "assignTokens(address,uint256)": {
                "argument": {
                    "tokenAmount": "uint256"
                },
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "assert(bool)": {
                "argument": {},
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "halt()": {
                "argument": {},
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "unhalt()": {
                "argument": {},
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "Ownable()": {
                "argument": {},
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            },
            "MintedTokenCappedCrowdsale(address,PricingStrategy,address,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_start": "uint256",
                    "_end": "uint256",
                    "_minimumFundingGoal": "uint256",
                    "_maximumSellableTokens": "uint256"
                },
                "contract": {
                    "maximumSellableTokens": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "setRequireSignedAddress(bool,address)": [
                3352,
                1131
            ],
            "refund()": [
                1693,
                471
            ],
            "buyWithCustomerId(uint128)": [
                2454,
                779
            ],
            "buy()": [
                2678,
                845
            ],
            "investWithCustomerId(address,uint128)": [
                3431,
                1153
            ],
            "investWithSignedAddress(address,uint128,uint8,bytes32,bytes32)": [
                1043,
                251
            ],
            "isMinimumGoalReached()": [
                2044,
                625
            ],
            "buyWithSignedAddress(uint128,uint8,bytes32,bytes32)": [
                3580,
                1197
            ],
            "invest(address)": [
                732,
                119
            ],
            "setRequireCustomerId(bool)": [
                2091,
                647
            ],
            "preallocate(address,uint256,uint256)": [
                1340,
                317
            ],
            "isFinalizerSane()": [
                2688,
                867
            ],
            "isBreakingCap(uint256,uint256,uint256,uint256)": [
                2504,
                801
            ],
            "setEndsAt(uint256)": [
                1869,
                559
            ],
            "safeAdd(uint256,uint256)": [
                3198,
                1087
            ],
            "safeMul(uint256,uint256)": [
                2986,
                999
            ],
            "isCrowdsaleFull()": [
                3108,
                1043
            ],
            "loadRefund()": [
                2138,
                669
            ],
            "safeSub(uint256,uint256)": [
                2603,
                823
            ],
            "finalize()": [
                1560,
                405
            ],
            "isPricingSane()": [
                786,
                141
            ],
            "halt()": [
                1846,
                537
            ],
            "setEarlyParicipantWhitelist(address,bool)": [
                3273,
                1109
            ],
            "isCrowdsale()": [
                1513,
                383
            ],
            "setOwnerTestValue(uint256)": [
                2148,
                691
            ],
            "getState()": [
                919,
                207
            ],
            "unhalt()": [
                2963,
                977
            ],
            "transferOwnership(address)": [
                3513,
                1175
            ]
        },
        "block_CALL_mapping": {
            "block11881_5": [
                "mintableToken.mint(receiver, tokenAmount)"
            ],
            "block11881_4": [
                "mintableToken.mint(receiver, tokenAmount)"
            ],
            "block11881_3": [
                "mintableToken.mint(receiver, tokenAmount)"
            ],
            "block11881_2": [
                "mintableToken.mint(receiver, tokenAmount)"
            ],
            "block11881_1": [
                "mintableToken.mint(receiver, tokenAmount)"
            ],
            "block11881_0": [
                "mintableToken.mint(receiver, tokenAmount)"
            ],
            "block5324": [
                "ecrecover(hash, v, r, s)"
            ],
            "block7490": [
                "msg.sender.send(weiValue)"
            ],
            "jump4619_2": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "block10685_4": [
                "token.decimals()"
            ],
            "block10685_2": [
                "token.decimals()"
            ],
            "block10685_3": [
                "token.decimals()"
            ],
            "block10685_0": [
                "token.decimals()"
            ],
            "block10685_1": [
                "token.decimals()"
            ],
            "block4619_9": [
                "pricingStrategy.isSane(address(this))"
            ],
            "block10898_4": [
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())"
            ],
            "block5122": [
                "finalizeAgent.isFinalizeAgent()"
            ],
            "block10898_3": [
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())"
            ],
            "block10898_0": [
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())"
            ],
            "block10898_1": [
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())"
            ],
            "jump4619_1": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "block5195_0": [
                "sha256(addr)"
            ],
            "jump4356_9": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "jump4356_8": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "block5195": [
                "sha256(addr)"
            ],
            "jump4619_0": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "jump4356_1": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "jump4356_0": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "jump4356_3": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "jump4356_2": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "jump4356_5": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "jump4356_4": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "jump4356_7": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "jump4356_6": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "block11416_4": [
                "multisigWallet.send(weiAmount)"
            ],
            "block11416_3": [
                "multisigWallet.send(weiAmount)"
            ],
            "block11416_2": [
                "multisigWallet.send(weiAmount)"
            ],
            "block11416_1": [
                "multisigWallet.send(weiAmount)"
            ],
            "block11416_0": [
                "multisigWallet.send(weiAmount)"
            ],
            "jump4619_14": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "jump4619_13": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "jump4619_12": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "jump4619_11": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "jump4619_10": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "jump10685": [
                "token.decimals()",
                "token.decimals()"
            ],
            "block6858": [
                "finalizeAgent.finalizeCrowdsale()"
            ],
            "jump10685_4": [
                "token.decimals()",
                "token.decimals()"
            ],
            "jump10685_0": [
                "token.decimals()",
                "token.decimals()"
            ],
            "jump10685_1": [
                "token.decimals()",
                "token.decimals()"
            ],
            "jump10685_2": [
                "token.decimals()",
                "token.decimals()"
            ],
            "jump10685_3": [
                "token.decimals()",
                "token.decimals()"
            ],
            "block4356": [
                "finalizeAgent.isSane()"
            ],
            "jump4619": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "block4619_2": [
                "pricingStrategy.isSane(address(this))"
            ],
            "jump11416": [
                "multisigWallet.send(weiAmount)",
                "multisigWallet.send(weiAmount)"
            ],
            "block7203": [
                "pricingStrategy.isPricingStrategy()"
            ],
            "block11881": [
                "mintableToken.mint(receiver, tokenAmount)"
            ],
            "jump7203": [
                "pricingStrategy.isPricingStrategy()",
                "pricingStrategy.isPricingStrategy()"
            ],
            "jump4356": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "jump11881_1": [
                "mintableToken.mint(receiver, tokenAmount)",
                "mintableToken.mint(receiver, tokenAmount)"
            ],
            "jump11881_0": [
                "mintableToken.mint(receiver, tokenAmount)",
                "mintableToken.mint(receiver, tokenAmount)"
            ],
            "jump11881_3": [
                "mintableToken.mint(receiver, tokenAmount)",
                "mintableToken.mint(receiver, tokenAmount)"
            ],
            "jump11881_2": [
                "mintableToken.mint(receiver, tokenAmount)",
                "mintableToken.mint(receiver, tokenAmount)"
            ],
            "jump11881_5": [
                "mintableToken.mint(receiver, tokenAmount)",
                "mintableToken.mint(receiver, tokenAmount)"
            ],
            "jump11881_4": [
                "mintableToken.mint(receiver, tokenAmount)",
                "mintableToken.mint(receiver, tokenAmount)"
            ],
            "jump11881": [
                "mintableToken.mint(receiver, tokenAmount)",
                "mintableToken.mint(receiver, tokenAmount)"
            ],
            "block4619": [
                "pricingStrategy.isSane(address(this))"
            ],
            "jump5324_0": [
                "ecrecover(hash, v, r, s)",
                "ecrecover(hash, v, r, s)"
            ],
            "jump10898": [
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())",
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())"
            ],
            "jump5122": [
                "finalizeAgent.isFinalizeAgent()",
                "finalizeAgent.isFinalizeAgent()"
            ],
            "jump5324": [
                "ecrecover(hash, v, r, s)",
                "ecrecover(hash, v, r, s)"
            ],
            "jump6858": [
                "finalizeAgent.finalizeCrowdsale()",
                "finalizeAgent.finalizeCrowdsale()"
            ],
            "block8854": [
                "finalizeAgent.isSane()"
            ],
            "jump5195_0": [
                "sha256(addr)",
                "sha256(addr)"
            ],
            "block10898": [
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())"
            ],
            "block4356_9": [
                "finalizeAgent.isSane()"
            ],
            "block4356_8": [
                "finalizeAgent.isSane()"
            ],
            "block5903": [
                "token.decimals()"
            ],
            "block4356_3": [
                "finalizeAgent.isSane()"
            ],
            "block10898_2": [
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())"
            ],
            "block4356_1": [
                "finalizeAgent.isSane()"
            ],
            "block4356_0": [
                "finalizeAgent.isSane()"
            ],
            "block4356_7": [
                "finalizeAgent.isSane()"
            ],
            "block4356_6": [
                "finalizeAgent.isSane()"
            ],
            "block4356_5": [
                "finalizeAgent.isSane()"
            ],
            "block4356_4": [
                "finalizeAgent.isSane()"
            ],
            "block4619_10": [
                "pricingStrategy.isSane(address(this))"
            ],
            "jump4356_14": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "jump4356_11": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "jump4356_10": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "jump4356_13": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "jump4356_12": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "block4619_5": [
                "pricingStrategy.isSane(address(this))"
            ],
            "block4619_4": [
                "pricingStrategy.isSane(address(this))"
            ],
            "block4619_7": [
                "pricingStrategy.isSane(address(this))"
            ],
            "block4619_6": [
                "pricingStrategy.isSane(address(this))"
            ],
            "block4619_1": [
                "pricingStrategy.isSane(address(this))"
            ],
            "block4619_0": [
                "pricingStrategy.isSane(address(this))"
            ],
            "block4619_3": [
                "pricingStrategy.isSane(address(this))"
            ],
            "block4356_2": [
                "finalizeAgent.isSane()"
            ],
            "jump4040": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "block4619_8": [
                "pricingStrategy.isSane(address(this))"
            ],
            "block11416": [
                "multisigWallet.send(weiAmount)"
            ],
            "jump4619_7": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "jump4619_6": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "jump4619_4": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "jump8854": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "block4356_13": [
                "finalizeAgent.isSane()"
            ],
            "jump11416_0": [
                "multisigWallet.send(weiAmount)",
                "multisigWallet.send(weiAmount)"
            ],
            "block4356_11": [
                "finalizeAgent.isSane()"
            ],
            "jump11416_2": [
                "multisigWallet.send(weiAmount)",
                "multisigWallet.send(weiAmount)"
            ],
            "block4040": [
                "pricingStrategy.isSane(address(this))"
            ],
            "jump7490": [
                "msg.sender.send(weiValue)",
                "msg.sender.send(weiValue)"
            ],
            "block5324_0": [
                "ecrecover(hash, v, r, s)"
            ],
            "jump10898_0": [
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())",
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())"
            ],
            "jump10898_1": [
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())",
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())"
            ],
            "jump10898_2": [
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())",
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())"
            ],
            "jump10898_3": [
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())",
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())"
            ],
            "jump10898_4": [
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())",
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())"
            ],
            "block4619_11": [
                "pricingStrategy.isSane(address(this))"
            ],
            "block10685": [
                "token.decimals()"
            ],
            "block4619_13": [
                "pricingStrategy.isSane(address(this))"
            ],
            "block4619_12": [
                "pricingStrategy.isSane(address(this))"
            ],
            "block4619_14": [
                "pricingStrategy.isSane(address(this))"
            ],
            "jump4619_9": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "jump4619_8": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "jump5195": [
                "sha256(addr)",
                "sha256(addr)"
            ],
            "jump11416_4": [
                "multisigWallet.send(weiAmount)",
                "multisigWallet.send(weiAmount)"
            ],
            "jump4619_5": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "block4356_14": [
                "finalizeAgent.isSane()"
            ],
            "jump11416_1": [
                "multisigWallet.send(weiAmount)",
                "multisigWallet.send(weiAmount)"
            ],
            "block4356_12": [
                "finalizeAgent.isSane()"
            ],
            "jump11416_3": [
                "multisigWallet.send(weiAmount)",
                "multisigWallet.send(weiAmount)"
            ],
            "block4356_10": [
                "finalizeAgent.isSane()"
            ],
            "jump5903": [
                "token.decimals()",
                "token.decimals()"
            ],
            "jump4619_3": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ]
        }
    }
}