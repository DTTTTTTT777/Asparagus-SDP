{
    "DSAuthEvents": {
        "function_list": [],
        "initial_state": {},
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "DSAuth": {
        "function_list": [
            "DSAuth()",
            "setOwner(address)",
            "setAuthority(DSAuthority)",
            "isAuthorized(address,bytes4)"
        ],
        "initial_state": {
            "DSAuth()": {
                "argument": {},
                "contract": {}
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "setAuthority(DSAuthority)": {
                "argument": {},
                "contract": {}
            },
            "isAuthorized(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "setOwner(address)": [
                103,
                75
            ]
        },
        "block_CALL_mapping": {
            "jump1499": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block1499_0": [
                "authority.canCall(src, this, sig)"
            ],
            "jump1499_0": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block1499": [
                "authority.canCall(src, this, sig)"
            ]
        }
    },
    "DSRoles": {
        "function_list": [
            "canCall(address,address,bytes4)",
            "DSAuth()",
            "setOwner(address)",
            "setAuthority(DSAuthority)",
            "isAuthorized(address,bytes4)",
            "getUserRoles(address)",
            "getCapabilityRoles(address,bytes4)",
            "isUserRoot(address)",
            "isCapabilityPublic(address,bytes4)",
            "hasUserRole(address,uint8)",
            "canCall(address,address,bytes4)",
            "BITNOT(bytes32)",
            "setRootUser(address,bool)",
            "setUserRole(address,uint8,bool)",
            "setPublicCapability(address,bytes4,bool)",
            "setRoleCapability(uint8,address,bytes4,bool)"
        ],
        "initial_state": {
            "canCall(address,address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {}
            },
            "DSAuth()": {
                "argument": {},
                "contract": {}
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "setAuthority(DSAuthority)": {
                "argument": {},
                "contract": {}
            },
            "isAuthorized(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {}
            },
            "getUserRoles(address)": {
                "argument": {},
                "contract": {}
            },
            "getCapabilityRoles(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {}
            },
            "isUserRoot(address)": {
                "argument": {},
                "contract": {}
            },
            "isCapabilityPublic(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {}
            },
            "hasUserRole(address,uint8)": {
                "argument": {
                    "role": "uint8"
                },
                "contract": {}
            },
            "BITNOT(bytes32)": {
                "argument": {
                    "input": "bytes32"
                },
                "contract": {}
            },
            "setRootUser(address,bool)": {
                "argument": {},
                "contract": {}
            },
            "setUserRole(address,uint8,bool)": {
                "argument": {
                    "role": "uint8"
                },
                "contract": {}
            },
            "setPublicCapability(address,bytes4,bool)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {}
            },
            "setRoleCapability(uint8,address,bytes4,bool)": {
                "argument": {
                    "role": "uint8",
                    "sig": "bytes4"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "hasUserRole(address,uint8)": [
                1022,
                251
            ],
            "canCall(address,address,bytes4)": [
                4627,
                995
            ],
            "isCapabilityPublic(address,bytes4)": [
                511,
                141
            ],
            "isUserRoot(address)": [
                1576,
                361
            ],
            "setPublicCapability(address,bytes4,bool)": [
                1377,
                317
            ],
            "getUserRoles(address)": [
                213,
                75
            ],
            "setOwner(address)": [
                308,
                97
            ],
            "setRoleCapability(uint8,address,bytes4,bool)": [
                802,
                207
            ],
            "setUserRole(address,uint8,bool)": [
                643,
                163
            ],
            "setRootUser(address,bool)": [
                1497,
                339
            ],
            "getCapabilityRoles(address,bytes4)": [
                375,
                119
            ]
        },
        "block_CALL_mapping": {
            "jump4627_4": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block4627_4": [
                "authority.canCall(src, this, sig)"
            ],
            "block4627": [
                "authority.canCall(src, this, sig)"
            ],
            "jump4627": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block4627_2": [
                "authority.canCall(src, this, sig)"
            ],
            "block4627_3": [
                "authority.canCall(src, this, sig)"
            ],
            "block4627_0": [
                "authority.canCall(src, this, sig)"
            ],
            "block4627_1": [
                "authority.canCall(src, this, sig)"
            ],
            "jump4627_0": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump4627_1": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump4627_2": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump4627_3": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ]
        }
    },
    "DSMath": {
        "function_list": [
            "add(uint256,uint256)",
            "sub(uint256,uint256)",
            "mul(uint256,uint256)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "imin(int256,int256)",
            "imax(int256,int256)",
            "wmul(uint256,uint256)",
            "rmul(uint256,uint256)",
            "wdiv(uint256,uint256)",
            "rdiv(uint256,uint256)",
            "rpow(uint256,uint256)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "imin(int256,int256)": {
                "argument": {},
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "imax(int256,int256)": {
                "argument": {},
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "wmul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "rmul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "wdiv(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "rdiv(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "rpow(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "n": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "DSNote": {
        "function_list": [],
        "initial_state": {},
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "DSThing": {
        "function_list": [
            "add(uint256,uint256)",
            "sub(uint256,uint256)",
            "mul(uint256,uint256)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "imin(int256,int256)",
            "imax(int256,int256)",
            "wmul(uint256,uint256)",
            "rmul(uint256,uint256)",
            "wdiv(uint256,uint256)",
            "rdiv(uint256,uint256)",
            "rpow(uint256,uint256)",
            "DSAuth()",
            "setOwner(address)",
            "setAuthority(DSAuthority)",
            "isAuthorized(address,bytes4)",
            "S(string)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "imin(int256,int256)": {
                "argument": {},
                "contract": {}
            },
            "imax(int256,int256)": {
                "argument": {},
                "contract": {}
            },
            "wmul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "rmul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "wdiv(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "rdiv(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "rpow(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "n": "uint256"
                },
                "contract": {}
            },
            "DSAuth()": {
                "argument": {},
                "contract": {}
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "setAuthority(DSAuthority)": {
                "argument": {},
                "contract": {}
            },
            "isAuthorized(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {}
            },
            "S(string)": {
                "argument": {
                    "s": "string"
                },
                "contract": {}
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "setOwner(address)": [
                103,
                75
            ]
        },
        "block_CALL_mapping": {
            "jump1499": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block1499_0": [
                "authority.canCall(src, this, sig)"
            ],
            "jump1499_0": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block1499": [
                "authority.canCall(src, this, sig)"
            ]
        }
    },
    "DSStop": {
        "function_list": [
            "DSAuth()",
            "setOwner(address)",
            "setAuthority(DSAuthority)",
            "isAuthorized(address,bytes4)",
            "stop()",
            "start()"
        ],
        "initial_state": {
            "DSAuth()": {
                "argument": {},
                "contract": {}
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "setAuthority(DSAuthority)": {
                "argument": {},
                "contract": {}
            },
            "isAuthorized(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {}
            },
            "stop()": {
                "argument": {},
                "contract": {}
            },
            "start()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "setOwner(address)": [
                159,
                97
            ],
            "start()": [
                427,
                185
            ],
            "stop()": [
                136,
                75
            ]
        },
        "block_CALL_mapping": {
            "block2161_1": [
                "authority.canCall(src, this, sig)"
            ],
            "block2161_0": [
                "authority.canCall(src, this, sig)"
            ],
            "block2161": [
                "authority.canCall(src, this, sig)"
            ],
            "jump2161_0": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump2161_2": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump2161": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump2161_1": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block2161_2": [
                "authority.canCall(src, this, sig)"
            ]
        }
    },
    "ERC20Events": {
        "function_list": [],
        "initial_state": {},
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "allowance(address,address)",
            "approve(address,uint256)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "wad": "uint256"
                },
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "wad": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "wad": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                346,
                97
            ],
            "totalSupply()": [
                447,
                119
            ],
            "balanceOf(address)": [
                773,
                207
            ],
            "transferFrom(address,address,uint256)": [
                490,
                141
            ],
            "allowance(address,address)": [
                1394,
                339
            ],
            "transfer(address,uint256)": [
                1091,
                273
            ]
        },
        "block_CALL_mapping": {}
    },
    "DSTokenBase": {
        "function_list": [
            "add(uint256,uint256)",
            "sub(uint256,uint256)",
            "mul(uint256,uint256)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "imin(int256,int256)",
            "imax(int256,int256)",
            "wmul(uint256,uint256)",
            "rmul(uint256,uint256)",
            "wdiv(uint256,uint256)",
            "rdiv(uint256,uint256)",
            "rpow(uint256,uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "allowance(address,address)",
            "approve(address,uint256)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "DSTokenBase(uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "_supply": "uint256"
                }
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "_supply": "uint256"
                }
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "_supply": "uint256"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "_supply": "uint256"
                }
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "_supply": "uint256"
                }
            },
            "imin(int256,int256)": {
                "argument": {},
                "contract": {
                    "_supply": "uint256"
                }
            },
            "imax(int256,int256)": {
                "argument": {},
                "contract": {
                    "_supply": "uint256"
                }
            },
            "wmul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "_supply": "uint256"
                }
            },
            "rmul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "_supply": "uint256"
                }
            },
            "wdiv(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "_supply": "uint256"
                }
            },
            "rdiv(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "_supply": "uint256"
                }
            },
            "rpow(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "n": "uint256"
                },
                "contract": {
                    "_supply": "uint256"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "_supply": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "_supply": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "_supply": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "wad": "uint256"
                },
                "contract": {
                    "_supply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "wad": "uint256"
                },
                "contract": {
                    "_supply": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "wad": "uint256"
                },
                "contract": {
                    "_supply": "uint256"
                }
            },
            "DSTokenBase(uint256)": {
                "argument": {
                    "supply": "uint256"
                },
                "contract": {
                    "_supply": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "_supply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "totalSupply()": [
                226,
                97
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "DSToken": {
        "function_list": [
            "stop()",
            "start()",
            "DSAuth()",
            "setOwner(address)",
            "setAuthority(DSAuthority)",
            "isAuthorized(address,bytes4)",
            "DSTokenBase(uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "add(uint256,uint256)",
            "sub(uint256,uint256)",
            "mul(uint256,uint256)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "imin(int256,int256)",
            "imax(int256,int256)",
            "wmul(uint256,uint256)",
            "rmul(uint256,uint256)",
            "wdiv(uint256,uint256)",
            "rdiv(uint256,uint256)",
            "rpow(uint256,uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "allowance(address,address)",
            "approve(address,uint256)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "DSToken(bytes32)",
            "approve(address)",
            "approve(address,uint256)",
            "transferFrom(address,address,uint256)",
            "push(address,uint256)",
            "pull(address,uint256)",
            "move(address,address,uint256)",
            "mint(uint256)",
            "burn(uint256)",
            "mint(address,uint256)",
            "burn(address,uint256)",
            "setName(bytes32)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "stop()": {
                "argument": {},
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "start()": {
                "argument": {},
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "DSAuth()": {
                "argument": {},
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "setAuthority(DSAuthority)": {
                "argument": {},
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "isAuthorized(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "DSTokenBase(uint256)": {
                "argument": {
                    "supply": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "wad": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "wad": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "wad": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "imin(int256,int256)": {
                "argument": {},
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "imax(int256,int256)": {
                "argument": {},
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "wmul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "rmul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "wdiv(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "rdiv(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "rpow(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "n": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "DSToken(bytes32)": {
                "argument": {
                    "symbol_": "bytes32"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "approve(address)": {
                "argument": {},
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "push(address,uint256)": {
                "argument": {
                    "wad": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "pull(address,uint256)": {
                "argument": {
                    "wad": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "move(address,address,uint256)": {
                "argument": {
                    "wad": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "mint(uint256)": {
                "argument": {
                    "wad": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "burn(uint256)": {
                "argument": {
                    "wad": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "mint(address,uint256)": {
                "argument": {
                    "wad": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "burn(address,uint256)": {
                "argument": {
                    "wad": "uint256"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "setName(bytes32)": {
                "argument": {
                    "name_": "bytes32"
                },
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "symbol": "bytes32",
                    "decimals": "uint256",
                    "name": "bytes32"
                }
            }
        },
        "function_block_mapping": {
            "totalSupply()": [
                576,
                163
            ],
            "transferFrom(address,address,uint256)": [
                619,
                185
            ],
            "move(address,address,uint256)": [
                1605,
                493
            ],
            "setName(bytes32)": [
                917,
                273
            ],
            "approve(address,uint256)": [
                408,
                119
            ],
            "start()": [
                1714,
                515
            ],
            "setOwner(address)": [
                509,
                141
            ],
            "mint(uint256)": [
                1382,
                427
            ],
            "approve(address)": [
                1824,
                559
            ],
            "balanceOf(address)": [
                966,
                295
            ],
            "pull(address,uint256)": [
                2034,
                603
            ],
            "push(address,uint256)": [
                1528,
                471
            ],
            "mint(address,uint256)": [
                795,
                229
            ],
            "burn(uint256)": [
                872,
                251
            ],
            "burn(address,uint256)": [
                1305,
                405
            ],
            "transfer(address,uint256)": [
                1427,
                449
            ],
            "stop()": [
                385,
                97
            ],
            "allowance(address,address)": [
                1915,
                581
            ]
        },
        "block_CALL_mapping": {
            "jump6310_1": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump6310_0": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump6310_3": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump6310_2": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block6310_3": [
                "authority.canCall(src, this, sig)"
            ],
            "block6310_2": [
                "authority.canCall(src, this, sig)"
            ],
            "block6310_1": [
                "authority.canCall(src, this, sig)"
            ],
            "block6310_0": [
                "authority.canCall(src, this, sig)"
            ],
            "block6310_6": [
                "authority.canCall(src, this, sig)"
            ],
            "block6310_5": [
                "authority.canCall(src, this, sig)"
            ],
            "block6310": [
                "authority.canCall(src, this, sig)"
            ],
            "block6310_4": [
                "authority.canCall(src, this, sig)"
            ],
            "block6310_7": [
                "authority.canCall(src, this, sig)"
            ],
            "jump6310_5": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump6310": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump6310_6": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump6310_7": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump6310_4": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ]
        }
    },
    "DSChiefApprovals": {
        "function_list": [
            "S(string)",
            "add(uint256,uint256)",
            "sub(uint256,uint256)",
            "mul(uint256,uint256)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "imin(int256,int256)",
            "imax(int256,int256)",
            "wmul(uint256,uint256)",
            "rmul(uint256,uint256)",
            "wdiv(uint256,uint256)",
            "rdiv(uint256,uint256)",
            "rpow(uint256,uint256)",
            "DSAuth()",
            "setOwner(address)",
            "setAuthority(DSAuthority)",
            "isAuthorized(address,bytes4)",
            "DSChiefApprovals(DSToken,DSToken,uint256)",
            "lock(uint256)",
            "free(uint256)",
            "etch(address[])",
            "vote(address[])",
            "vote(bytes32)",
            "lift(address)",
            "addWeight(uint256,bytes32)",
            "subWeight(uint256,bytes32)",
            "requireByteOrderedSet(address[])",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "S(string)": {
                "argument": {
                    "s": "string"
                },
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "imin(int256,int256)": {
                "argument": {},
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "imax(int256,int256)": {
                "argument": {},
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "wmul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "rmul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "wdiv(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "rdiv(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "rpow(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "n": "uint256"
                },
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "DSAuth()": {
                "argument": {},
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "setAuthority(DSAuthority)": {
                "argument": {},
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "isAuthorized(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "DSChiefApprovals(DSToken,DSToken,uint256)": {
                "argument": {
                    "MAX_YAYS_": "uint256"
                },
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "lock(uint256)": {
                "argument": {
                    "wad": "uint256"
                },
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "free(uint256)": {
                "argument": {
                    "wad": "uint256"
                },
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "etch(address[])": {
                "argument": {
                    "yays": "address[]"
                },
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "vote(address[])": {
                "argument": {
                    "yays": "address[]"
                },
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "vote(bytes32)": {
                "argument": {
                    "slate": "bytes32"
                },
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "lift(address)": {
                "argument": {},
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "addWeight(uint256,bytes32)": {
                "argument": {
                    "weight": "uint256",
                    "slate": "bytes32"
                },
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "subWeight(uint256,bytes32)": {
                "argument": {
                    "weight": "uint256",
                    "slate": "bytes32"
                },
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "requireByteOrderedSet(address[])": {
                "argument": {
                    "yays": "address[]"
                },
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "slates": "mapping(bytes32 => address[])",
                    "MAX_YAYS": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "etch(address[])": [
                608,
                185
            ],
            "setOwner(address)": [
                344,
                97
            ],
            "vote(address[])": [
                1423,
                405
            ],
            "free(uint256)": [
                1333,
                361
            ],
            "vote(bytes32)": [
                979,
                273
            ],
            "lift(address)": [
                541,
                163
            ],
            "lock(uint256)": [
                1378,
                383
            ]
        },
        "block_CALL_mapping": {
            "block4517": [
                "GOV.push(msg.sender, wad)"
            ],
            "block4914": [
                "GOV.pull(msg.sender, wad)"
            ],
            "block6034_0": [
                "authority.canCall(src, this, sig)"
            ],
            "block6034": [
                "authority.canCall(src, this, sig)"
            ],
            "jump4914": [
                "GOV.pull(msg.sender, wad)",
                "GOV.pull(msg.sender, wad)"
            ],
            "jump4296": [
                "IOU.burn(msg.sender, wad)",
                "IOU.burn(msg.sender, wad)"
            ],
            "block5135": [
                "IOU.mint(msg.sender, wad)"
            ],
            "block4296": [
                "IOU.burn(msg.sender, wad)"
            ],
            "jump6034": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump5135": [
                "IOU.mint(msg.sender, wad)",
                "IOU.mint(msg.sender, wad)"
            ],
            "jump6034_0": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump4517": [
                "GOV.push(msg.sender, wad)",
                "GOV.push(msg.sender, wad)"
            ]
        }
    },
    "DSChief": {
        "function_list": [
            "DSChiefApprovals(DSToken,DSToken,uint256)",
            "lock(uint256)",
            "free(uint256)",
            "etch(address[])",
            "vote(address[])",
            "vote(bytes32)",
            "lift(address)",
            "addWeight(uint256,bytes32)",
            "subWeight(uint256,bytes32)",
            "requireByteOrderedSet(address[])",
            "S(string)",
            "add(uint256,uint256)",
            "sub(uint256,uint256)",
            "mul(uint256,uint256)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "imin(int256,int256)",
            "imax(int256,int256)",
            "wmul(uint256,uint256)",
            "rmul(uint256,uint256)",
            "wdiv(uint256,uint256)",
            "rdiv(uint256,uint256)",
            "rpow(uint256,uint256)",
            "DSAuth()",
            "setOwner(address)",
            "setAuthority(DSAuthority)",
            "isAuthorized(address,bytes4)",
            "getUserRoles(address)",
            "getCapabilityRoles(address,bytes4)",
            "isUserRoot(address)",
            "isCapabilityPublic(address,bytes4)",
            "hasUserRole(address,uint8)",
            "canCall(address,address,bytes4)",
            "BITNOT(bytes32)",
            "setRootUser(address,bool)",
            "setUserRole(address,uint8,bool)",
            "setPublicCapability(address,bytes4,bool)",
            "setRoleCapability(uint8,address,bytes4,bool)",
            "canCall(address,address,bytes4)",
            "DSChief(DSToken,DSToken,uint256)",
            "setOwner(address)",
            "setAuthority(DSAuthority)",
            "isUserRoot(address)",
            "setRootUser(address,bool)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "DSChiefApprovals(DSToken,DSToken,uint256)": {
                "argument": {
                    "MAX_YAYS_": "uint256"
                },
                "contract": {}
            },
            "lock(uint256)": {
                "argument": {
                    "wad": "uint256"
                },
                "contract": {}
            },
            "free(uint256)": {
                "argument": {
                    "wad": "uint256"
                },
                "contract": {}
            },
            "etch(address[])": {
                "argument": {
                    "yays": "address[]"
                },
                "contract": {}
            },
            "vote(address[])": {
                "argument": {
                    "yays": "address[]"
                },
                "contract": {}
            },
            "vote(bytes32)": {
                "argument": {
                    "slate": "bytes32"
                },
                "contract": {}
            },
            "lift(address)": {
                "argument": {},
                "contract": {}
            },
            "addWeight(uint256,bytes32)": {
                "argument": {
                    "weight": "uint256",
                    "slate": "bytes32"
                },
                "contract": {}
            },
            "subWeight(uint256,bytes32)": {
                "argument": {
                    "weight": "uint256",
                    "slate": "bytes32"
                },
                "contract": {}
            },
            "requireByteOrderedSet(address[])": {
                "argument": {
                    "yays": "address[]"
                },
                "contract": {}
            },
            "S(string)": {
                "argument": {
                    "s": "string"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "imin(int256,int256)": {
                "argument": {},
                "contract": {}
            },
            "imax(int256,int256)": {
                "argument": {},
                "contract": {}
            },
            "wmul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "rmul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "wdiv(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "rdiv(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "rpow(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "n": "uint256"
                },
                "contract": {}
            },
            "DSAuth()": {
                "argument": {},
                "contract": {}
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "setAuthority(DSAuthority)": {
                "argument": {},
                "contract": {}
            },
            "isAuthorized(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {}
            },
            "getUserRoles(address)": {
                "argument": {},
                "contract": {}
            },
            "getCapabilityRoles(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {}
            },
            "isUserRoot(address)": {
                "argument": {},
                "contract": {}
            },
            "isCapabilityPublic(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {}
            },
            "hasUserRole(address,uint8)": {
                "argument": {
                    "role": "uint8"
                },
                "contract": {}
            },
            "canCall(address,address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {}
            },
            "BITNOT(bytes32)": {
                "argument": {
                    "input": "bytes32"
                },
                "contract": {}
            },
            "setRootUser(address,bool)": {
                "argument": {},
                "contract": {}
            },
            "setUserRole(address,uint8,bool)": {
                "argument": {
                    "role": "uint8"
                },
                "contract": {}
            },
            "setPublicCapability(address,bytes4,bool)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {}
            },
            "setRoleCapability(uint8,address,bytes4,bool)": {
                "argument": {
                    "role": "uint8",
                    "sig": "bytes4"
                },
                "contract": {}
            },
            "DSChief(DSToken,DSToken,uint256)": {
                "argument": {
                    "MAX_YAYS": "uint256"
                },
                "contract": {}
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "setPublicCapability(address,bytes4,bool)": [
                2204,
                493
            ],
            "isCapabilityPublic(address,bytes4)": [
                839,
                185
            ],
            "setOwner(address)": [
                549,
                119
            ],
            "etch(address[])": [
                1081,
                251
            ],
            "setRootUser(address,bool)": [
                2324,
                515
            ],
            "lock(uint256)": [
                2543,
                581
            ],
            "hasUserRole(address,uint8)": [
                1677,
                383
            ],
            "vote(address[])": [
                2588,
                603
            ],
            "isUserRoot(address)": [
                2718,
                625
            ],
            "free(uint256)": [
                2498,
                559
            ],
            "getUserRoles(address)": [
                454,
                97
            ],
            "vote(bytes32)": [
                1781,
                405
            ],
            "lift(address)": [
                1014,
                229
            ],
            "setUserRole(address,uint8,bool)": [
                1298,
                295
            ],
            "getCapabilityRoles(address,bytes4)": [
                703,
                163
            ],
            "canCall(address,address,bytes4)": [
                8767,
                995
            ],
            "setRoleCapability(uint8,address,bytes4,bool)": [
                1457,
                339
            ]
        },
        "block_CALL_mapping": {
            "block6755": [
                "IOU.burn(msg.sender, wad)"
            ],
            "block7373": [
                "GOV.pull(msg.sender, wad)"
            ],
            "jump8767_0": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block8767": [
                "authority.canCall(src, this, sig)"
            ],
            "jump8767": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block8767_1": [
                "authority.canCall(src, this, sig)"
            ],
            "block8767_0": [
                "authority.canCall(src, this, sig)"
            ],
            "jump8767_1": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump7373": [
                "GOV.pull(msg.sender, wad)",
                "GOV.pull(msg.sender, wad)"
            ],
            "jump7594": [
                "IOU.mint(msg.sender, wad)",
                "IOU.mint(msg.sender, wad)"
            ],
            "jump6755": [
                "IOU.burn(msg.sender, wad)",
                "IOU.burn(msg.sender, wad)"
            ],
            "jump6976": [
                "GOV.push(msg.sender, wad)",
                "GOV.push(msg.sender, wad)"
            ],
            "block7594": [
                "IOU.mint(msg.sender, wad)"
            ],
            "block6976": [
                "GOV.push(msg.sender, wad)"
            ]
        }
    }
}