{
    "Owned": {
        "function_list": [
            "Owned()",
            "destroy()",
            "changeContractOwnership(address)",
            "claimContractOwnership()"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {}
            },
            "destroy()": {
                "argument": {},
                "contract": {}
            },
            "changeContractOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "claimContractOwnership()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "claimContractOwnership()": [
                114,
                75
            ],
            "changeContractOwnership(address)": [
                161,
                97
            ],
            "destroy()": [
                339,
                141
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20Interface": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "symbol": "string"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "symbol": "string"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "symbol": "string"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "symbol": "string"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "symbol": "string"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "symbol": "string"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "totalSupply()": [
                226,
                97
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "Object": {
        "function_list": [
            "Owned()",
            "destroy()",
            "changeContractOwnership(address)",
            "claimContractOwnership()",
            "withdrawnTokens(address[],address)",
            "checkOnlyContractOwner()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {
                    "OK": "uint256",
                    "OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER": "uint256"
                }
            },
            "destroy()": {
                "argument": {},
                "contract": {
                    "OK": "uint256",
                    "OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER": "uint256"
                }
            },
            "changeContractOwnership(address)": {
                "argument": {},
                "contract": {
                    "OK": "uint256",
                    "OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER": "uint256"
                }
            },
            "claimContractOwnership()": {
                "argument": {},
                "contract": {
                    "OK": "uint256",
                    "OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER": "uint256"
                }
            },
            "withdrawnTokens(address[],address)": {
                "argument": {
                    "tokens": "address[]"
                },
                "contract": {
                    "OK": "uint256",
                    "OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER": "uint256"
                }
            },
            "checkOnlyContractOwner()": {
                "argument": {},
                "contract": {
                    "OK": "uint256",
                    "OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "OK": "uint256",
                    "OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "withdrawnTokens(address[],address)": [
                460,
                185
            ],
            "changeContractOwnership(address)": [
                172,
                97
            ],
            "destroy()": [
                350,
                141
            ],
            "claimContractOwnership()": [
                125,
                75
            ]
        },
        "block_CALL_mapping": {
            "block1531": [
                "ERC20Interface(token).balanceOf(this)"
            ],
            "block1765": [
                "ERC20Interface(token).transfer(_to,balance)"
            ],
            "jump1531": [
                "ERC20Interface(token).balanceOf(this)",
                "ERC20Interface(token).balanceOf(this)"
            ],
            "jump1765": [
                "ERC20Interface(token).transfer(_to,balance)",
                "ERC20Interface(token).transfer(_to,balance)"
            ]
        }
    },
    "MultiEventsHistoryAdapter": {
        "function_list": [
            "_self()"
        ],
        "initial_state": {
            "_self()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "DelayedPaymentsEmitter": {
        "function_list": [
            "_self()",
            "emitError(bytes32)"
        ],
        "initial_state": {
            "_self()": {
                "argument": {},
                "contract": {}
            },
            "emitError(bytes32)": {
                "argument": {
                    "_message": "bytes32"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "emitError(bytes32)": [
                68,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "Lockup6m": {
        "function_list": [
            "withdrawnTokens(address[],address)",
            "checkOnlyContractOwner()",
            "Owned()",
            "destroy()",
            "changeContractOwnership(address)",
            "claimContractOwnership()",
            "Lockup6m(address)",
            "_error(uint256,bytes32)",
            "setupEventsHistory(address)",
            "payIn()",
            "payOut(address)",
            "getLockedFunds()",
            "getLockedFundsReleaseTime()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "withdrawnTokens(address[],address)": {
                "argument": {
                    "tokens": "address[]"
                },
                "contract": {
                    "TIME_LOCK_SCOPE": "uint256",
                    "TIME_LOCK_TRANSFER_ERROR": "uint256",
                    "TIME_LOCK_TRANSFERFROM_ERROR": "uint256",
                    "TIME_LOCK_BALANCE_ERROR": "uint256",
                    "TIME_LOCK_TIMESTAMP_ERROR": "uint256",
                    "TIME_LOCK_INVALID_INVOCATION": "uint256"
                }
            },
            "checkOnlyContractOwner()": {
                "argument": {},
                "contract": {
                    "TIME_LOCK_SCOPE": "uint256",
                    "TIME_LOCK_TRANSFER_ERROR": "uint256",
                    "TIME_LOCK_TRANSFERFROM_ERROR": "uint256",
                    "TIME_LOCK_BALANCE_ERROR": "uint256",
                    "TIME_LOCK_TIMESTAMP_ERROR": "uint256",
                    "TIME_LOCK_INVALID_INVOCATION": "uint256"
                }
            },
            "Owned()": {
                "argument": {},
                "contract": {
                    "TIME_LOCK_SCOPE": "uint256",
                    "TIME_LOCK_TRANSFER_ERROR": "uint256",
                    "TIME_LOCK_TRANSFERFROM_ERROR": "uint256",
                    "TIME_LOCK_BALANCE_ERROR": "uint256",
                    "TIME_LOCK_TIMESTAMP_ERROR": "uint256",
                    "TIME_LOCK_INVALID_INVOCATION": "uint256"
                }
            },
            "destroy()": {
                "argument": {},
                "contract": {
                    "TIME_LOCK_SCOPE": "uint256",
                    "TIME_LOCK_TRANSFER_ERROR": "uint256",
                    "TIME_LOCK_TRANSFERFROM_ERROR": "uint256",
                    "TIME_LOCK_BALANCE_ERROR": "uint256",
                    "TIME_LOCK_TIMESTAMP_ERROR": "uint256",
                    "TIME_LOCK_INVALID_INVOCATION": "uint256"
                }
            },
            "changeContractOwnership(address)": {
                "argument": {},
                "contract": {
                    "TIME_LOCK_SCOPE": "uint256",
                    "TIME_LOCK_TRANSFER_ERROR": "uint256",
                    "TIME_LOCK_TRANSFERFROM_ERROR": "uint256",
                    "TIME_LOCK_BALANCE_ERROR": "uint256",
                    "TIME_LOCK_TIMESTAMP_ERROR": "uint256",
                    "TIME_LOCK_INVALID_INVOCATION": "uint256"
                }
            },
            "claimContractOwnership()": {
                "argument": {},
                "contract": {
                    "TIME_LOCK_SCOPE": "uint256",
                    "TIME_LOCK_TRANSFER_ERROR": "uint256",
                    "TIME_LOCK_TRANSFERFROM_ERROR": "uint256",
                    "TIME_LOCK_BALANCE_ERROR": "uint256",
                    "TIME_LOCK_TIMESTAMP_ERROR": "uint256",
                    "TIME_LOCK_INVALID_INVOCATION": "uint256"
                }
            },
            "Lockup6m(address)": {
                "argument": {},
                "contract": {
                    "TIME_LOCK_SCOPE": "uint256",
                    "TIME_LOCK_TRANSFER_ERROR": "uint256",
                    "TIME_LOCK_TRANSFERFROM_ERROR": "uint256",
                    "TIME_LOCK_BALANCE_ERROR": "uint256",
                    "TIME_LOCK_TIMESTAMP_ERROR": "uint256",
                    "TIME_LOCK_INVALID_INVOCATION": "uint256"
                }
            },
            "_error(uint256,bytes32)": {
                "argument": {
                    "_errorCode": "uint256",
                    "_message": "bytes32"
                },
                "contract": {
                    "TIME_LOCK_SCOPE": "uint256",
                    "TIME_LOCK_TRANSFER_ERROR": "uint256",
                    "TIME_LOCK_TRANSFERFROM_ERROR": "uint256",
                    "TIME_LOCK_BALANCE_ERROR": "uint256",
                    "TIME_LOCK_TIMESTAMP_ERROR": "uint256",
                    "TIME_LOCK_INVALID_INVOCATION": "uint256"
                }
            },
            "setupEventsHistory(address)": {
                "argument": {},
                "contract": {
                    "TIME_LOCK_SCOPE": "uint256",
                    "TIME_LOCK_TRANSFER_ERROR": "uint256",
                    "TIME_LOCK_TRANSFERFROM_ERROR": "uint256",
                    "TIME_LOCK_BALANCE_ERROR": "uint256",
                    "TIME_LOCK_TIMESTAMP_ERROR": "uint256",
                    "TIME_LOCK_INVALID_INVOCATION": "uint256"
                }
            },
            "payIn()": {
                "argument": {},
                "contract": {
                    "TIME_LOCK_SCOPE": "uint256",
                    "TIME_LOCK_TRANSFER_ERROR": "uint256",
                    "TIME_LOCK_TRANSFERFROM_ERROR": "uint256",
                    "TIME_LOCK_BALANCE_ERROR": "uint256",
                    "TIME_LOCK_TIMESTAMP_ERROR": "uint256",
                    "TIME_LOCK_INVALID_INVOCATION": "uint256"
                }
            },
            "payOut(address)": {
                "argument": {},
                "contract": {
                    "TIME_LOCK_SCOPE": "uint256",
                    "TIME_LOCK_TRANSFER_ERROR": "uint256",
                    "TIME_LOCK_TRANSFERFROM_ERROR": "uint256",
                    "TIME_LOCK_BALANCE_ERROR": "uint256",
                    "TIME_LOCK_TIMESTAMP_ERROR": "uint256",
                    "TIME_LOCK_INVALID_INVOCATION": "uint256"
                }
            },
            "getLockedFunds()": {
                "argument": {},
                "contract": {
                    "TIME_LOCK_SCOPE": "uint256",
                    "TIME_LOCK_TRANSFER_ERROR": "uint256",
                    "TIME_LOCK_TRANSFERFROM_ERROR": "uint256",
                    "TIME_LOCK_BALANCE_ERROR": "uint256",
                    "TIME_LOCK_TIMESTAMP_ERROR": "uint256",
                    "TIME_LOCK_INVALID_INVOCATION": "uint256"
                }
            },
            "getLockedFundsReleaseTime()": {
                "argument": {},
                "contract": {
                    "TIME_LOCK_SCOPE": "uint256",
                    "TIME_LOCK_TRANSFER_ERROR": "uint256",
                    "TIME_LOCK_TRANSFERFROM_ERROR": "uint256",
                    "TIME_LOCK_BALANCE_ERROR": "uint256",
                    "TIME_LOCK_TIMESTAMP_ERROR": "uint256",
                    "TIME_LOCK_INVALID_INVOCATION": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "TIME_LOCK_SCOPE": "uint256",
                    "TIME_LOCK_TRANSFER_ERROR": "uint256",
                    "TIME_LOCK_TRANSFERFROM_ERROR": "uint256",
                    "TIME_LOCK_BALANCE_ERROR": "uint256",
                    "TIME_LOCK_TIMESTAMP_ERROR": "uint256",
                    "TIME_LOCK_INVALID_INVOCATION": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "getLockedFundsReleaseTime()": [
                455,
                163
            ],
            "withdrawnTokens(address[],address)": [
                786,
                273
            ],
            "getLockedFunds()": [
                365,
                119
            ],
            "changeContractOwnership(address)": [
                498,
                185
            ],
            "payOut(address)": [
                278,
                97
            ],
            "payIn()": [
                1027,
                317
            ],
            "destroy()": [
                676,
                229
            ],
            "claimContractOwnership()": [
                408,
                141
            ],
            "setupEventsHistory(address)": [
                191,
                75
            ]
        },
        "block_CALL_mapping": {
            "block3375": [
                "ERC20Interface(asset).balanceOf(this)"
            ],
            "jump1685": [
                "ERC20Interface(asset).transfer(_getter,amount)",
                "ERC20Interface(asset).transfer(_getter,amount)"
            ],
            "block2738": [
                "ERC20Interface(token).balanceOf(this)"
            ],
            "block2972": [
                "ERC20Interface(token).transfer(_to,balance)"
            ],
            "jump2972": [
                "ERC20Interface(token).transfer(_to,balance)",
                "ERC20Interface(token).transfer(_to,balance)"
            ],
            "block1685": [
                "ERC20Interface(asset).transfer(_getter,amount)"
            ],
            "jump3375": [
                "ERC20Interface(asset).balanceOf(this)",
                "ERC20Interface(asset).balanceOf(this)"
            ],
            "jump2738": [
                "ERC20Interface(token).balanceOf(this)",
                "ERC20Interface(token).balanceOf(this)"
            ]
        }
    }
}