{
    "DSSafeAddSub": {
        "function_list": [
            "safeToAdd(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "safeToSubtract(uint256,uint256)",
            "safeSub(uint256,uint256)"
        ],
        "initial_state": {
            "safeToAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeToSubtract(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "MyDice75": {
        "function_list": [
            "safeToAdd(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "safeToSubtract(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "MyDice75()",
            "GetRandomNumber()",
            "playerRollDice()",
            "playerWithdrawPendingTransactions()",
            "playerGetPendingTxByAddress(address)",
            "setMaxProfit()",
            "fallback()",
            "setNonce(uint256)",
            "ownerAddBankroll()",
            "getcontractBalance()",
            "getTotalBets()",
            "ownerSetHouseEdge(uint256)",
            "getHouseEdge()",
            "ownerSetMaxProfitAsPercentOfHouse(uint256)",
            "getMaxProfitAsPercentOfHouse()",
            "ownerSetMinBet(uint256)",
            "getMinBet()",
            "ownerTransferEther(address,uint256)",
            "ownerPauseGame(bool)",
            "ownerPausePayouts(bool)",
            "ownerChangeOwner(address)",
            "ownerkill()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "safeToAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "safeToSubtract(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "MyDice75()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "GetRandomNumber()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "playerRollDice()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "playerWithdrawPendingTransactions()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "playerGetPendingTxByAddress(address)": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "setMaxProfit()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "setNonce(uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "ownerAddBankroll()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "getcontractBalance()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "getTotalBets()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "ownerSetHouseEdge(uint256)": {
                "argument": {
                    "newHouseEdge": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "getHouseEdge()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "ownerSetMaxProfitAsPercentOfHouse(uint256)": {
                "argument": {
                    "newMaxProfitAsPercent": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "getMaxProfitAsPercentOfHouse()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "ownerSetMinBet(uint256)": {
                "argument": {
                    "newMinimumBet": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "getMinBet()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "ownerTransferEther(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "ownerPauseGame(bool)": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "ownerPausePayouts(bool)": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "ownerChangeOwner(address)": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "ownerkill()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "nonce": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "ownerTransferEther(address,uint256)": [
                1114,
                405
            ],
            "ownerSetHouseEdge(uint256)": [
                545,
                141
            ],
            "ownerkill()": [
                1716,
                669
            ],
            "getcontractBalance()": [
                1321,
                471
            ],
            "playerGetPendingTxByAddress(address)": [
                690,
                229
            ],
            "setNonce(uint256)": [
                1835,
                757
            ],
            "getMinBet()": [
                502,
                119
            ],
            "getHouseEdge()": [
                824,
                273
            ],
            "ownerAddBankroll()": [
                637,
                185
            ],
            "ownerPausePayouts(bool)": [
                777,
                251
            ],
            "getTotalBets()": [
                1407,
                515
            ],
            "ownerChangeOwner(address)": [
                867,
                295
            ],
            "playerRollDice()": [
                1782,
                713
            ],
            "ownerSetMaxProfitAsPercentOfHouse(uint256)": [
                977,
                339
            ],
            "ownerPauseGame(bool)": [
                1067,
                383
            ],
            "getMaxProfitAsPercentOfHouse()": [
                416,
                75
            ],
            "ownerSetMinBet(uint256)": [
                1022,
                361
            ],
            "playerWithdrawPendingTransactions()": [
                1450,
                537
            ]
        },
        "block_CALL_mapping": {
            "block4806": [
                "msg.sender.call.value(withdrawAmount)()"
            ],
            "jump2299": [
                "msg.sender.send(reward)",
                "msg.sender.send(reward)"
            ],
            "block2299": [
                "msg.sender.send(reward)"
            ],
            "jump2782_0": [
                "msg.sender.send(1)",
                "msg.sender.send(1)"
            ],
            "jump2782_1": [
                "msg.sender.send(1)",
                "msg.sender.send(1)"
            ],
            "block2782_0": [
                "msg.sender.send(1)"
            ],
            "jump4806": [
                "msg.sender.call.value(withdrawAmount)()",
                "msg.sender.call.value(withdrawAmount)()"
            ],
            "block2299_0": [
                "msg.sender.send(reward)"
            ],
            "jump4381": [
                "sendTo.send(amount)",
                "sendTo.send(amount)"
            ],
            "block2782_1": [
                "msg.sender.send(1)"
            ],
            "block2299_1": [
                "msg.sender.send(reward)"
            ],
            "jump2782": [
                "msg.sender.send(1)",
                "msg.sender.send(1)"
            ],
            "jump2299_1": [
                "msg.sender.send(reward)",
                "msg.sender.send(reward)"
            ],
            "jump2299_0": [
                "msg.sender.send(reward)",
                "msg.sender.send(reward)"
            ],
            "block4381": [
                "sendTo.send(amount)"
            ],
            "block2782": [
                "msg.sender.send(1)"
            ]
        }
    }
}