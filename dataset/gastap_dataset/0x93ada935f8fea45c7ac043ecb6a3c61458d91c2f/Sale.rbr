jump0(s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	lt(s(1), s(0))
	call(block846(g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump0(s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	geq(s(1), s(0))
	call(block13(g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))

block0(g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	s(0) = 128
	nop(PUSH1)
	s(1) = 64
	nop(PUSH1)
	l(l0) = s(0)
	nop(MSTORE)
	s(0) = 4
	nop(PUSH1)
	s(1) = calldatasize
	nop(CALLDATASIZE)
	call(jump0(s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))
	nop(LT)
	nop(PUSH2)
	nop(JUMPI)

jump13(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block947(s(0),g(guideInvestmentAttractedShareToPay), l(l1), l(l0), callvalue))

jump13(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block65(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))

block13(g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	s(0) = 0
	nop(PUSH1)
	s(0) = calldataload
	nop(CALLDATALOAD)
	s(1) = 26959946667150639794667015087019630673637144422540572481103610249216
	nop(PUSH29)
	s(2) = s(0)
	s(0) = s(1)
	s(1) = s(2)
	nop(SWAP1)
	s(0) = s(1)/s(0)
	nop(DIV)
	s(1) = 4294967295
	nop(PUSH4)
	s(0) = and(s(1), s(0))
	nop(AND)
	s(1) = s(0)
	nop(DUP1)
	s(2) = 43523326
	nop(PUSH4)
	call(jump13(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump65(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block990(s(0), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), callvalue))

jump65(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block76(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))

block65(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 117300739
	nop(PUSH4)
	call(jump65(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block76(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 126867946
	nop(PUSH4)
	call(jump76(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump76(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block1134(s(0),g(totalInvested), l(l1), l(l0), callvalue))

jump76(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block87(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))

block87(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 157198259
	nop(PUSH4)
	call(jump87(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump87(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block1177(s(0),g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, callvalue, spender, value))

jump87(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block98(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))

jump98(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block1278(s(0),g(allowedAmountToTransferToPool), l(l7), l(l6), caller, callvalue))

jump98(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block109(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))

block98(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 291230712
	nop(PUSH4)
	call(jump98(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump109(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block1301(s(0), l(l7), l(l6), l(l1), l(l0), calldataload, calldatasize, callvalue))

jump109(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block120(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))

block109(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 341740161
	nop(PUSH4)
	call(jump109(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump120(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block1392(s(0),g(pool), l(l1), l(l0), callvalue))

jump120(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block131(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))

block120(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 384831835
	nop(PUSH4)
	call(jump120(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block131(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 404098525
	nop(PUSH4)
	call(jump131(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump131(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block1479(s(0),g(totalSupply), l(l1), l(l0), callvalue))

jump131(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block142(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))

block142(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 599290589
	nop(PUSH4)
	call(jump142(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump142(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block1522(s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, callvalue, from, to, value))

jump142(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, from, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block153(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))

jump153(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block1655(s(0),g(saleCap), g(usdPerEther), l(l1), l(l0), calldatasize, callvalue, input_stake))

jump153(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block164(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))

block153(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 725819751
	nop(PUSH4)
	call(jump153(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_stake, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump164(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block1720(s(0),g(totalWithdrawn), l(l1), l(l0), callvalue))

jump164(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block175(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))

block164(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 815215180
	nop(PUSH4)
	call(jump164(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block175(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 826074471
	nop(PUSH4)
	call(jump175(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump175(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block1769(s(0), l(l1), l(l0), callvalue))

jump175(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block186(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))

block186(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 920673684
	nop(PUSH4)
	call(jump186(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump186(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block1818(s(0),g(fundariaShare), l(l1), l(l0), callvalue))

jump186(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block197(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))

block197(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 978839192
	nop(PUSH4)
	call(jump197(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump197(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block1867(s(0),g(balances), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, callvalue, investment_guide))

jump197(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, investment_guide, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block208(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))

jump208(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block1934(s(0),g(supplier), l(l1), l(l0), callvalue))

jump208(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block219(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))

block208(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1009216902
	nop(PUSH4)
	call(jump208(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump219(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block1977(s(0),g(contractCreatedTimestamp), l(l1), l(l0), callvalue))

jump219(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block230(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))

block219(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1010690900
	nop(PUSH4)
	call(jump219(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump230(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block2020(s(0),g(distributedTeamStakes), l(l1), l(l0), callvalue))

jump230(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block241(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))

block230(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1102099661
	nop(PUSH4)
	call(jump230(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump241(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block2063(s(0), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue))

jump241(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block252(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))

block241(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1219932749
	nop(PUSH4)
	call(jump241(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump252(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block2222(s(0),g(usdPerEther), l(l1), l(l0), callvalue))

jump252(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block263(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))

block252(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1241804162
	nop(PUSH4)
	call(jump252(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump263(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block2265(s(0),g(distributedSaleStakes), l(l1), l(l0), callvalue))

jump263(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block274(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))

block263(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1261541139
	nop(PUSH4)
	call(jump263(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block274(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1285791392
	nop(PUSH4)
	call(jump274(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump274(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block2308(s(0),g(saleShare), g(balances), l(l6), l(l4), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, n, stake_price_us_cents))

jump274(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, n, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stake_price_us_cents, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block285(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value))

jump285(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block2366(s(0),g(poolCapUSD), g(balances), l(l4), l(l1), l(l0), calldatasize, caller, callvalue, new_pool_cap_usd))

jump285(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block296(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value))

block285(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1332382910
	nop(PUSH4)
	call(jump285(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_pool_cap_usd, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump296(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block2411(s(0),g(owner), l(l1), l(l0), callvalue))

jump296(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block307(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value))

block296(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1377218284
	nop(PUSH4)
	call(jump296(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump307(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block2454(s(0),g(allowedAmountToTransferToPool), l(l1), l(l0), callvalue))

jump307(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block318(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value))

block307(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1380287646
	nop(PUSH4)
	call(jump307(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block318(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1489992817
	nop(PUSH4)
	call(jump318(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump318(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block2497(s(0),g(lastStakePriceUSCents), g(balances), caller, callvalue))

jump318(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block329(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value))

jump329(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block2520(s(0),g(distributedBountyStakes), l(l1), l(l0), callvalue))

jump329(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block340(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value))

block329(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1537990683
	nop(PUSH4)
	call(jump329(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block340(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1631774607
	nop(PUSH4)
	call(jump340(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump340(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block2563(s(0),g(allowedAmountTransferedToPoolTotal), l(l1), l(l0), callvalue))

jump340(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block351(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value))

block351(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1655964809
	nop(PUSH4)
	call(jump351(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump351(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block2606(s(0),g(businessPlannedPeriodEndTimestamp), l(l1), l(l0), callvalue))

jump351(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block362(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value))

jump362(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block2649(s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, key))

jump362(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block373(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value))

block362(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1668414935
	nop(PUSH4)
	call(jump362(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, key, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block373(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1710999967
	nop(PUSH4)
	call(jump373(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump373(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block2716(s(0),g(saleStartTimestamp), l(l1), l(l0), callvalue))

jump373(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block384(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value))

jump384(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block2759(s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, callvalue, spender, subtractedValue))

jump384(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block395(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))

block384(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1712882787
	nop(PUSH4)
	call(jump384(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, subtractedValue, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block395(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1835839154
	nop(PUSH4)
	call(jump395(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump395(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block2860(s(0),g(poolCapUSD), l(l1), l(l0), callvalue))

jump395(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block406(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))

block406(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1837201307
	nop(PUSH4)
	call(jump406(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump406(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block2903(s(0),g(teamCap), l(l1), l(l0), callvalue))

jump406(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block417(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))

block417(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1889567281
	nop(PUSH4)
	call(jump417(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump417(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block2946(s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, callvalue, owner))

jump417(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block428(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))

block428(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 1970240744
	nop(PUSH4)
	call(jump428(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump428(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block3033(s(0),g(fundariaStakesFrozen), l(l1), l(l0), callvalue))

jump428(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block439(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))

jump439(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block3080(s(0),g(businessPlannedPeriodEndTimestamp), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), caller, callvalue, timestamp))

jump439(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block450(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))

block439(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2096180112
	nop(PUSH4)
	call(jump439(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump450(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block3103(s(0),g(saleShare), l(l6), l(l1), l(l0), calldataload, calldatasize, callvalue))

jump450(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block461(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))

block450(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2175762833
	nop(PUSH4)
	call(jump450(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump461(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block3168(s(0),g(fundaria), l(l1), l(l0), callvalue))

jump461(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block472(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))

block461(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2204014807
	nop(PUSH4)
	call(jump461(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump472(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block3211(s(0),g(balances), l(l1), l(l0), callvalue))

jump472(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block483(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))

block472(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2376452955
	nop(PUSH4)
	call(jump472(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump483(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block3298(s(0),g(supplyCap), l(l1), l(l0), callvalue))

jump483(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block494(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))

block483(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2406943440
	nop(PUSH4)
	call(jump483(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump494(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block3341(s(0), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), callvalue))

jump494(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block505(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))

block494(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2514000705
	nop(PUSH4)
	call(jump494(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block505(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2652944232
	nop(PUSH4)
	call(jump505(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump505(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block3485(s(0),g(guidesStat), l(l1), l(l0), callvalue))

jump505(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block516(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))

jump516(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block3528(s(0),g(lastStakePriceUSCents), l(l1), l(l0), callvalue))

jump516(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block527(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))

block516(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2657483440
	nop(PUSH4)
	call(jump516(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block527(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2809539154
	nop(PUSH4)
	call(jump527(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump527(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block3575(s(0), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue))

jump527(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block538(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))

block538(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2835717307
	nop(PUSH4)
	call(jump538(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump538(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	eq(s(2), s(1))
	call(block3687(s(0),g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, callvalue, to, value))

jump538(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to, value)=>
	neq(s(2), s(1))
	call(block549(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to))

jump549(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to)=>
	eq(s(2), s(1))
	call(block3788(s(0),g(usdPerEther), g(poolCapUSD), g(owner), l(l1), l(l0), callvalue))

jump549(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to)=>
	neq(s(2), s(1))
	call(block560(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to))

block549(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 2942106344
	nop(PUSH4)
	call(jump549(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block560(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3077589103
	nop(PUSH4)
	call(jump560(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump560(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to)=>
	eq(s(2), s(1))
	call(block3831(s(0),g(investmentGuidesRewardsWithdrawn), l(l1), l(l0), callvalue))

jump560(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(investmentGuidesRewardsWithdrawn), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to)=>
	neq(s(2), s(1))
	call(block571(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to))

jump571(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to)=>
	eq(s(2), s(1))
	call(block3874(s(0),g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump571(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to)=>
	neq(s(2), s(1))
	call(block582(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to))

block571(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3208526158
	nop(PUSH4)
	call(jump571(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump582(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to)=>
	eq(s(2), s(1))
	call(block3897(s(0),g(supplier), g(bountyCap), g(distributedBountyStakes), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0), calldatasize, caller, callvalue, stakes, to))

jump582(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to)=>
	neq(s(2), s(1))
	call(block593(s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, timestamp))

block582(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3239337633
	nop(PUSH4)
	call(jump582(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedBountyStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, stakes, timestamp, to))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump593(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, timestamp)=>
	eq(s(2), s(1))
	call(block3974(s(0),g(transferedToPool), l(l1), l(l0), callvalue))

jump593(s(2), s(1), s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, timestamp)=>
	neq(s(2), s(1))
	call(block604(s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, timestamp))

block593(s(0), g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3258665819
	nop(PUSH4)
	call(jump593(s(2),s(1),s(0),g(transferedToPool), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump604(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, timestamp)=>
	eq(s(2), s(1))
	call(block4023(s(0),g(distributedBonusStakes), l(l1), l(l0), callvalue))

jump604(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, timestamp)=>
	neq(s(2), s(1))
	call(block615(s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, timestamp))

block604(s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3320591967
	nop(PUSH4)
	call(jump604(s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block615(s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3331189630
	nop(PUSH4)
	call(jump615(s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump615(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, timestamp)=>
	eq(s(2), s(1))
	call(block4072(s(0),g(saleStat), l(l1), l(l0), callvalue))

jump615(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, timestamp)=>
	neq(s(2), s(1))
	call(block626(s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, timestamp))

jump626(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, timestamp)=>
	eq(s(2), s(1))
	call(block4115(s(0),g(usdPerEther), g(balances), l(l4), l(l1), l(l0), calldatasize, caller, callvalue, new_usd_per_ether))

jump626(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, timestamp)=>
	neq(s(2), s(1))
	call(block637(s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp))

block626(s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3446783044
	nop(PUSH4)
	call(jump626(s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, new_usd_per_ether, owner, pool, returndatasize, spender, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump637(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp)=>
	eq(s(2), s(1))
	call(block4160(s(0),g(distributedFundariaStakes), l(l1), l(l0), callvalue))

jump637(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp)=>
	neq(s(2), s(1))
	call(block648(s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp))

block637(s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3467072859
	nop(PUSH4)
	call(jump637(s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump648(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp)=>
	eq(s(2), s(1))
	call(block4203(s(0),g(owner), l(l1), l(l0), callvalue))

jump648(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp)=>
	neq(s(2), s(1))
	call(block659(s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp))

block648(s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3577709064
	nop(PUSH4)
	call(jump648(s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block659(s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3611153955
	nop(PUSH4)
	call(jump659(s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump659(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp)=>
	eq(s(2), s(1))
	call(block4290(s(0),g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), addedValue, calldatasize, caller, callvalue, spender))

jump659(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), addedValue, address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp)=>
	neq(s(2), s(1))
	call(block670(s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp))

jump670(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp)=>
	eq(s(2), s(1))
	call(block4391(s(0),g(saleCap), g(usdPerEther), l(l1), l(l0), calldatasize, callvalue, input_wei))

jump670(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp)=>
	neq(s(2), s(1))
	call(block681(s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp))

block670(s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3644829301
	nop(PUSH4)
	call(jump670(s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, input_wei, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump681(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp)=>
	eq(s(2), s(1))
	call(block4456(s(0),g(fundariaCap), l(l1), l(l0), callvalue))

jump681(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp)=>
	neq(s(2), s(1))
	call(block692(s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp))

block681(s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3675415306
	nop(PUSH4)
	call(jump681(s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump692(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp)=>
	eq(s(2), s(1))
	call(block4499(s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, callvalue, owner, spender))

jump692(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp)=>
	neq(s(2), s(1))
	call(block703(s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, pool, returndatasize, timestamp))

block692(s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3714247998
	nop(PUSH4)
	call(jump692(s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, owner, pool, returndatasize, spender, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump703(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, pool, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block4618(s(0),g(priceIsFrozen), l(l1), l(l0), callvalue))

jump703(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, pool, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block714(s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, pool, returndatasize, timestamp))

block703(s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, pool, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3810917195
	nop(PUSH4)
	call(jump703(s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, pool, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump714(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, pool, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block4661(s(0),g(saleCap), l(l1), l(l0), callvalue))

jump714(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, pool, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block725(s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, pool, returndatasize, timestamp))

block714(s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, pool, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3831928040
	nop(PUSH4)
	call(jump714(s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, pool, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump725(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, pool, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block4704(s(0),g(pool), g(balances), calldatasize, caller, callvalue, pool))

jump725(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, pool, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block736(s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp))

block725(s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, pool, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3923860303
	nop(PUSH4)
	call(jump725(s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, pool, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump736(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block4771(s(0),g(teamShare), l(l1), l(l0), callvalue))

jump736(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block747(s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp))

block736(s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3933139710
	nop(PUSH4)
	call(jump736(s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block747(s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3960570562
	nop(PUSH4)
	call(jump747(s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump747(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block4820(s(0),g(lastStakePriceUSCents), g(balances), caller, callvalue))

jump747(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block758(s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp))

block758(s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3989163952
	nop(PUSH4)
	call(jump758(s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump758(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block4843(s(0),g(bonusShare), l(l6), l(l1), l(l0), calldataload, calldatasize, callvalue))

jump758(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldataload, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block769(s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp))

jump769(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block4908(s(0),g(teamStakesFrozen), l(l1), l(l0), callvalue))

jump769(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block780(s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp))

block769(s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 3991899101
	nop(PUSH4)
	call(jump769(s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(teamStakesFrozen), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block780(s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 4099643040
	nop(PUSH4)
	call(jump780(s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump780(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block4955(s(0),g(financePeriodsCount), l(l1), l(l0), callvalue))

jump780(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block791(s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp))

block791(s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 4112546865
	nop(PUSH4)
	call(jump791(s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump791(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block5004(s(0),g(businessPlannedPeriodDuration), l(l1), l(l0), callvalue))

jump791(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(businessPlannedPeriodDuration), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block802(s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp))

jump802(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block5047(s(0),g(balances), calldatasize, caller, callvalue, new_owner))

jump802(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block813(s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, returndatasize, timestamp))

block802(s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 4121032116
	nop(PUSH4)
	call(jump802(s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, new_owner, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump813(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block5114(s(0),g(bountyCap), l(l1), l(l0), callvalue))

jump813(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block824(s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, returndatasize, timestamp))

block813(s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 4212220401
	nop(PUSH4)
	call(jump813(s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump824(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block5157(s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), g(balances), l(l6), l(l4), l(l1), l(l0), address, balance, caller, callvalue, returndatasize, timestamp))

jump824(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block835(s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, new_fundaria, returndatasize, timestamp))

block824(s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 4262527254
	nop(PUSH4)
	call(jump824(s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(distributedSaleStakes), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), address, balance, calldatasize, caller, callvalue, new_fundaria, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

block835(s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, new_fundaria, returndatasize, timestamp)=>
	s(1) = s(0)
	nop(DUP1)
	s(2) = 4285099419
	nop(PUSH4)
	call(jump835(s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, new_fundaria, returndatasize, timestamp))
	nop(EQ)
	nop(PUSH2)
	nop(JUMPI)

jump835(s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, new_fundaria, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block5180(s(0),g(owner), g(balances), calldatasize, caller, callvalue, new_fundaria))

jump835(s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, new_fundaria, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block846_0(s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump846(s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	neq(s(1), s(0))
	call(block906(g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump846(s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	eq(s(1), s(0))
	call(block902())

block846(g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(0) = 0
	nop(PUSH1)
	s(1) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(0) = and(s(1), s(0))
	nop(AND)
	s(1) = caller
	nop(CALLER)
	s(2) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(1) = and(s(2), s(1))
	nop(AND)
	call(jump846(s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block902()=>
	s(0) = 0
	nop(PUSH1)
	s(1) = s(0)
	nop(DUP1)
	nop(REVERT)

block906(g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(0) = 0
	nop(PUSH1)
	s(1) = callvalue
	nop(CALLVALUE)
	call(jump906(s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump906(s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	gt(s(1), s(0))
	call(block921(g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump906(s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	leq(s(1), s(0))
	call(block917())

block917()=>
	s(0) = 0
	nop(PUSH1)
	s(1) = s(0)
	nop(DUP1)
	nop(REVERT)

jump921(s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	lt(s(1), s(0))
	call(block937(g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump921(s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	geq(s(1), s(0))
	call(block933())

block921(g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(0) = 10
	nop(PUSH1)
	s(0) = g(businessPlannedPeriodEndTimestamp)
	nop(SLOAD)
	s(1) = timestamp
	nop(TIMESTAMP)
	call(jump921(s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block933()=>
	s(0) = 0
	nop(PUSH1)
	s(1) = s(0)
	nop(DUP1)
	nop(REVERT)

block937(g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(0) = 945
	nop(PUSH2)
	s(1) = 5247
	nop(PUSH2)
	call(block5247(s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(JUMP)

block945()=>
	nop(JUMPDEST)
	skip
	nop(STOP)

jump947(s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block959(s(1), s(0),g(guideInvestmentAttractedShareToPay), l(l1), l(l0)))

jump947(s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block955(s(1), s(0)))

block947(s(0), g(guideInvestmentAttractedShareToPay), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump947(s(2),s(1),s(0),g(guideInvestmentAttractedShareToPay), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block955(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block959(s(1), s(0), g(guideInvestmentAttractedShareToPay), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 968
	nop(PUSH2)
	s(2) = 6459
	nop(PUSH2)
	call(block6459(s(1),s(0),g(guideInvestmentAttractedShareToPay), l(l1), l(l0)))
	nop(JUMP)

block968(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump990(s(2), s(1), s(0), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block1002(s(1), s(0), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0)))

jump990(s(2), s(1), s(0), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block998(s(1), s(0)))

block990(s(0), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump990(s(2),s(1),s(0), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block998(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block1002(s(1), s(0), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 1011
	nop(PUSH2)
	s(2) = 6465
	nop(PUSH2)
	call(block6465(s(1),s(0), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0)))
	nop(JUMP)

block1011(s(2), s(1), s(0), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(3)
	nop(DUP3)
	s(7) = s(5)
	nop(DUP2)
	s(6) = s(7)-s(6)
	nop(SUB)
	s(7) = s(4)
	nop(DUP3)
	l(l2) = s(6)
	nop(MSTORE)
	s(6) = s(2)
	nop(DUP4)
	s(7) = s(5)
	nop(DUP2)
	s(8) = s(6)
	nop(DUP2)
	s(8) = l(l1)
	nop(MLOAD)
	s(9) = s(7)
	nop(DUP2)
	l(l3) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	nop(POP)
	s(7) = s(6)
	nop(DUP1)
	s(7) = l(l1)
	nop(MLOAD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(7)
	nop(DUP1)
	s(9) = s(5)
	nop(DUP4)
	s(10) = s(6)
	nop(DUP4)
	s(11) = 0
	nop(PUSH1)
	call(block1048(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l4), l(l0)))

block1048(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l4), l(l0))=>
	nop(JUMPDEST)
	s(12) = s(8)
	nop(DUP4)
	s(13) = s(11)
	nop(DUP2)
	call(jump1048(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l4), l(l0)))
	nop(LT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1048(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l4), l(l0))=>
	geq(s(13), s(12))
	call(block1075(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0)))

jump1048(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l4), l(l0))=>
	lt(s(13), s(12))
	call(block1057(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l4), l(l0)))

block1057(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l4), l(l0))=>
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	nop(DUP3)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(12) = l(l4)
	nop(MLOAD)
	s(13) = s(11)
	nop(DUP2)
	s(14) = s(9)
	nop(DUP5)
	s(13) = s(14)+s(13)
	nop(ADD)
	l(l5) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(13) = s(11)
	nop(DUP2)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(POP)
	s(12) = 1048
	nop(PUSH2)
	call(block1048(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l4), l(l0)))
	nop(JUMP)

block1075(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	nop(POP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 31
	nop(PUSH1)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(6)
	nop(DUP1)
	call(jump1075(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l0)))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1075(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0))=>
	eq(s(7), 0)
	call(block1120(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0)))

jump1075(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0))=>
	neq(s(7), 0)
	call(block1095(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0)))

block1095(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0))=>
	s(7) = s(6)
	nop(DUP1)
	s(8) = s(5)
	nop(DUP3)
	s(7) = s(8)-s(7)
	nop(SUB)
	s(8) = s(7)
	nop(DUP1)
	s(8) = l(l5)
	nop(MLOAD)
	s(9) = 1
	nop(PUSH1)
	s(10) = s(6)
	nop(DUP4)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)-s(10)
	nop(SUB)
	s(11) = 256
	nop(PUSH2)
	s(10) = s(11)^s(10)
	nop(EXP)
	s(9) = s(10)-s(9)
	nop(SUB)
	s(9) = not(s(9))
	nop(NOT)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	l(l5) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	nop(POP)
	call(block1120(s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l0)))

block1120(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump1134(s(2), s(1), s(0), g(totalInvested), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block1146(s(1), s(0),g(totalInvested), l(l1), l(l0)))

jump1134(s(2), s(1), s(0), g(totalInvested), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block1142(s(1), s(0)))

block1134(s(0), g(totalInvested), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump1134(s(2),s(1),s(0),g(totalInvested), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1142(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block1146(s(1), s(0), g(totalInvested), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 1155
	nop(PUSH2)
	s(2) = 6522
	nop(PUSH2)
	call(block6522(s(1),s(0),g(totalInvested), l(l1), l(l0)))
	nop(JUMP)

block1155(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump1177(s(2), s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, callvalue, spender, value)=>
	eq(s(2), 0)
	call(block1189(s(1), s(0),g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, spender, value))

jump1177(s(2), s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, callvalue, spender, value)=>
	neq(s(2), 0)
	call(block1185(s(1), s(0)))

block1177(s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, callvalue, spender, value)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump1177(s(2),s(1),s(0),g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, callvalue, spender, value))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1185(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block1189(s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, spender, value)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 1252
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = spender
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(5)
	nop(DUP1)
	s(6) = value
	nop(CALLDATALOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(3)
	s(3) = s(6)
	s(6) = s(7)
	nop(SWAP3)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(4) = 6528
	nop(PUSH2)
	call(block6528(s(3),s(2),s(1),s(0),g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMP)

block1252(s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 64
	nop(PUSH1)
	s(2) = l(l0)
	nop(MLOAD)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(1)
	nop(DUP3)
	s(4)= eq(s(4), 0)
	nop(ISZERO)
	s(4)= eq(s(4), 0)
	nop(ISZERO)
	s(4)= eq(s(4), 0)
	nop(ISZERO)
	s(4)= eq(s(4), 0)
	nop(ISZERO)
	s(5) = s(3)
	nop(DUP2)
	l(l1) = s(4)
	nop(MSTORE)
	s(4) = 32
	nop(PUSH1)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(1)
	s(1) = s(3)
	s(3) = s(4)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(2) = 64
	nop(PUSH1)
	s(2) = l(l0)
	nop(MLOAD)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(1)
	s(1) = s(3)
	s(3) = s(4)
	nop(SWAP2)
	s(2) = s(3)-s(2)
	nop(SUB)
	s(3) = s(1)
	s(1) = s(2)
	s(2) = s(3)
	nop(SWAP1)
	nop(RETURN)

block1278(s(0), g(allowedAmountToTransferToPool), l(l7), l(l6), caller, callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump1278(s(2),s(1),s(0),g(allowedAmountToTransferToPool), l(l7), l(l6), caller, callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1278(s(2), s(1), s(0), g(allowedAmountToTransferToPool), l(l7), l(l6), caller, callvalue)=>
	eq(s(2), 0)
	call(block1290(s(1), s(0),g(allowedAmountToTransferToPool), l(l7), l(l6), caller))

jump1278(s(2), s(1), s(0), g(allowedAmountToTransferToPool), l(l7), l(l6), caller, callvalue)=>
	neq(s(2), 0)
	call(block1286(s(1), s(0)))

block1286(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block1290(s(1), s(0), g(allowedAmountToTransferToPool), l(l7), l(l6), caller)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 1299
	nop(PUSH2)
	s(2) = 7088
	nop(PUSH2)
	call(block7088(s(1),s(0),g(allowedAmountToTransferToPool), l(l7), l(l6), caller))
	nop(JUMP)

block1299(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

jump1301(s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	eq(s(2), 0)
	call(block1313(s(1), s(0), l(l7), l(l6), l(l1), l(l0), calldataload, calldatasize))

jump1301(s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	neq(s(2), 0)
	call(block1309(s(1), s(0)))

block1301(s(0), l(l7), l(l6), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump1301(s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), calldataload, calldatasize, callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1309(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block1313(s(1), s(0), l(l7), l(l6), l(l1), l(l0), calldataload, calldatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 1366
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = calldataload
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 8747
	nop(PUSH2)
	call(block8747(s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0)))
	nop(JUMP)

block1366(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block1392(s(0), g(pool), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump1392(s(2),s(1),s(0),g(pool), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1392(s(2), s(1), s(0), g(pool), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block1404(s(1), s(0),g(pool), l(l1), l(l0)))

jump1392(s(2), s(1), s(0), g(pool), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block1400(s(1), s(0)))

block1400(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block1404(s(1), s(0), g(pool), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 1413
	nop(PUSH2)
	s(2) = 8779
	nop(PUSH2)
	call(block8779(s(1),s(0),g(pool), l(l1), l(l0)))
	nop(JUMP)

block1413(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump1479(s(2), s(1), s(0), g(totalSupply), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block1491(s(1), s(0),g(totalSupply), l(l1), l(l0)))

jump1479(s(2), s(1), s(0), g(totalSupply), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block1487(s(1), s(0)))

block1479(s(0), g(totalSupply), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump1479(s(2),s(1),s(0),g(totalSupply), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1487(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block1491(s(1), s(0), g(totalSupply), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 1500
	nop(PUSH2)
	s(2) = 8817
	nop(PUSH2)
	call(block8817(s(1),s(0),g(totalSupply), l(l1), l(l0)))
	nop(JUMP)

block1500(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump1522(s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, callvalue, from, to, value)=>
	eq(s(2), 0)
	call(block1534(s(1), s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, from, to, value))

jump1522(s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, callvalue, from, to, value)=>
	neq(s(2), 0)
	call(block1530(s(1), s(0)))

block1522(s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, callvalue, from, to, value)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump1522(s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, callvalue, from, to, value))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block1530(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block1534(s(1), s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, from, to, value)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 1629
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = from
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(5)
	nop(DUP1)
	s(6) = to
	nop(CALLDATALOAD)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(3)
	s(3) = s(6)
	s(6) = s(7)
	nop(SWAP3)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(6)
	nop(DUP1)
	s(7) = value
	nop(CALLDATALOAD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(4)
	s(4) = s(7)
	s(7) = s(8)
	nop(SWAP3)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(5) = 8823
	nop(PUSH2)
	call(block8823(s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMP)

block1629(s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 64
	nop(PUSH1)
	s(2) = l(l0)
	nop(MLOAD)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(1)
	nop(DUP3)
	s(4)= eq(s(4), 0)
	nop(ISZERO)
	s(4)= eq(s(4), 0)
	nop(ISZERO)
	s(4)= eq(s(4), 0)
	nop(ISZERO)
	s(4)= eq(s(4), 0)
	nop(ISZERO)
	s(5) = s(3)
	nop(DUP2)
	l(l1) = s(4)
	nop(MSTORE)
	s(4) = 32
	nop(PUSH1)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(1)
	s(1) = s(3)
	s(3) = s(4)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(2) = 64
	nop(PUSH1)
	s(2) = l(l0)
	nop(MLOAD)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(1)
	s(1) = s(3)
	s(3) = s(4)
	nop(SWAP2)
	s(2) = s(3)-s(2)
	nop(SUB)
	s(3) = s(1)
	s(1) = s(2)
	s(2) = s(3)
	nop(SWAP1)
	nop(RETURN)

block1655(s(0), g(saleCap), g(usdPerEther), l(l1), l(l0), calldatasize, callvalue, input_stake)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump1655(s(2),s(1),s(0),g(saleCap), g(usdPerEther), l(l1), l(l0), calldatasize, callvalue, input_stake))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1655(s(2), s(1), s(0), g(saleCap), g(usdPerEther), l(l1), l(l0), calldatasize, callvalue, input_stake)=>
	eq(s(2), 0)
	call(block1667(s(1), s(0),g(saleCap), g(usdPerEther), l(l1), l(l0), calldatasize, input_stake))

jump1655(s(2), s(1), s(0), g(saleCap), g(usdPerEther), l(l1), l(l0), calldatasize, callvalue, input_stake)=>
	neq(s(2), 0)
	call(block1663(s(1), s(0)))

block1663(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block1667(s(1), s(0), g(saleCap), g(usdPerEther), l(l1), l(l0), calldatasize, input_stake)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 1698
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = input_stake
	nop(CALLDATALOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 9782
	nop(PUSH2)
	call(block9782_0(s(2),s(1),s(0),g(saleCap), g(usdPerEther), l(l1), l(l0)))
	nop(JUMP)

block1698(s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 64
	nop(PUSH1)
	s(2) = l(l0)
	nop(MLOAD)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(1)
	nop(DUP3)
	s(5) = s(3)
	nop(DUP2)
	l(l1) = s(4)
	nop(MSTORE)
	s(4) = 32
	nop(PUSH1)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(1)
	s(1) = s(3)
	s(3) = s(4)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(2) = 64
	nop(PUSH1)
	s(2) = l(l0)
	nop(MLOAD)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(1)
	s(1) = s(3)
	s(3) = s(4)
	nop(SWAP2)
	s(2) = s(3)-s(2)
	nop(SUB)
	s(3) = s(1)
	s(1) = s(2)
	s(2) = s(3)
	nop(SWAP1)
	nop(RETURN)

block1720(s(0), g(totalWithdrawn), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump1720(s(2),s(1),s(0),g(totalWithdrawn), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1720(s(2), s(1), s(0), g(totalWithdrawn), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block1732(s(1), s(0),g(totalWithdrawn), l(l1), l(l0)))

jump1720(s(2), s(1), s(0), g(totalWithdrawn), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block1728(s(1), s(0)))

block1728(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block1732(s(1), s(0), g(totalWithdrawn), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 1741
	nop(PUSH2)
	s(2) = 9822
	nop(PUSH2)
	call(block9822(s(1),s(0),g(totalWithdrawn), l(l1), l(l0)))
	nop(JUMP)

block1741(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block1769(s(0), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump1769(s(2),s(1),s(0), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1769(s(2), s(1), s(0), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block1781(s(1), s(0), l(l1), l(l0)))

jump1769(s(2), s(1), s(0), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block1777(s(1), s(0)))

block1777(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block1781(s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 1790
	nop(PUSH2)
	s(2) = 9841
	nop(PUSH2)
	call(block9841(s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block1790(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block1818(s(0), g(fundariaShare), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump1818(s(2),s(1),s(0),g(fundariaShare), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1818(s(2), s(1), s(0), g(fundariaShare), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block1830(s(1), s(0),g(fundariaShare), l(l1), l(l0)))

jump1818(s(2), s(1), s(0), g(fundariaShare), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block1826(s(1), s(0)))

block1826(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block1830(s(1), s(0), g(fundariaShare), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 1839
	nop(PUSH2)
	s(2) = 9846
	nop(PUSH2)
	call(block9846(s(1),s(0),g(fundariaShare), l(l1), l(l0)))
	nop(JUMP)

block1839(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block1867(s(0), g(balances), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, callvalue, investment_guide)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump1867(s(2),s(1),s(0),g(balances), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, callvalue, investment_guide))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1867(s(2), s(1), s(0), g(balances), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, callvalue, investment_guide)=>
	eq(s(2), 0)
	call(block1879(s(1), s(0),g(balances), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, investment_guide))

jump1867(s(2), s(1), s(0), g(balances), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, callvalue, investment_guide)=>
	neq(s(2), 0)
	call(block1875(s(1), s(0)))

block1875(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block1879(s(1), s(0), g(balances), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, investment_guide)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 1932
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = investment_guide
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 9865
	nop(PUSH2)
	call(block9865(s(2),s(1),s(0),g(balances), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMP)

block1932(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

block1934(s(0), g(supplier), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump1934(s(2),s(1),s(0),g(supplier), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1934(s(2), s(1), s(0), g(supplier), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block1946(s(1), s(0),g(supplier), l(l1), l(l0)))

jump1934(s(2), s(1), s(0), g(supplier), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block1942(s(1), s(0)))

block1942(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block1946(s(1), s(0), g(supplier), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 1955
	nop(PUSH2)
	s(2) = 10150
	nop(PUSH2)
	call(block10150(s(1),s(0),g(supplier), l(l1), l(l0)))
	nop(JUMP)

block1955(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block1977(s(0), g(contractCreatedTimestamp), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump1977(s(2),s(1),s(0),g(contractCreatedTimestamp), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump1977(s(2), s(1), s(0), g(contractCreatedTimestamp), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block1989(s(1), s(0),g(contractCreatedTimestamp), l(l1), l(l0)))

jump1977(s(2), s(1), s(0), g(contractCreatedTimestamp), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block1985(s(1), s(0)))

block1985(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block1989(s(1), s(0), g(contractCreatedTimestamp), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 1998
	nop(PUSH2)
	s(2) = 10156
	nop(PUSH2)
	call(block10156(s(1),s(0),g(contractCreatedTimestamp), l(l1), l(l0)))
	nop(JUMP)

block1998(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump2020(s(2), s(1), s(0), g(distributedTeamStakes), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block2032(s(1), s(0),g(distributedTeamStakes), l(l1), l(l0)))

jump2020(s(2), s(1), s(0), g(distributedTeamStakes), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block2028(s(1), s(0)))

block2020(s(0), g(distributedTeamStakes), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2020(s(2),s(1),s(0),g(distributedTeamStakes), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block2028(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2032(s(1), s(0), g(distributedTeamStakes), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2041
	nop(PUSH2)
	s(2) = 10162
	nop(PUSH2)
	call(block10162(s(1),s(0),g(distributedTeamStakes), l(l1), l(l0)))
	nop(JUMP)

block2041(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block2063(s(0), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2063(s(2),s(1),s(0), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump2063(s(2), s(1), s(0), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	eq(s(2), 0)
	call(block2075(s(1), s(0), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize))

jump2063(s(2), s(1), s(0), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	neq(s(2), 0)
	call(block2071(s(1), s(0)))

block2071(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2075(s(1), s(0), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2128
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = calldataload
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 10168
	nop(PUSH2)
	call(block10168(s(2),s(1),s(0), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0)))
	nop(JUMP)

block2128(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(7) = 64
	nop(PUSH1)
	s(7) = l(l0)
	nop(MLOAD)
	s(8) = s(7)
	nop(DUP1)
	s(9) = s(2)
	nop(DUP7)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(3)
	nop(DUP6)
	s(10) = s(8)
	nop(DUP2)
	l(l4) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(4)
	nop(DUP5)
	s(10) = s(8)
	nop(DUP2)
	l(l2) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(5)
	nop(DUP4)
	s(10) = s(8)
	nop(DUP2)
	l(l3) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(6)
	nop(DUP3)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l5) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(2)
	s(2) = s(8)
	s(8) = s(9)
	nop(SWAP6)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump2222(s(2), s(1), s(0), g(usdPerEther), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block2234(s(1), s(0),g(usdPerEther), l(l1), l(l0)))

jump2222(s(2), s(1), s(0), g(usdPerEther), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block2230(s(1), s(0)))

block2222(s(0), g(usdPerEther), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2222(s(2),s(1),s(0),g(usdPerEther), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block2230(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2234(s(1), s(0), g(usdPerEther), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2243
	nop(PUSH2)
	s(2) = 10254
	nop(PUSH2)
	call(block10254(s(1),s(0),g(usdPerEther), l(l1), l(l0)))
	nop(JUMP)

block2243(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block2265(s(0), g(distributedSaleStakes), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2265(s(2),s(1),s(0),g(distributedSaleStakes), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump2265(s(2), s(1), s(0), g(distributedSaleStakes), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block2277(s(1), s(0),g(distributedSaleStakes), l(l1), l(l0)))

jump2265(s(2), s(1), s(0), g(distributedSaleStakes), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block2273(s(1), s(0)))

block2273(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2277(s(1), s(0), g(distributedSaleStakes), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2286
	nop(PUSH2)
	s(2) = 10260
	nop(PUSH2)
	call(block10260(s(1),s(0),g(distributedSaleStakes), l(l1), l(l0)))
	nop(JUMP)

block2286(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump2308(s(2), s(1), s(0), g(saleShare), g(balances), l(l6), l(l4), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, n, stake_price_us_cents)=>
	eq(s(2), 0)
	call(block2320(s(1), s(0),g(saleShare), g(balances), l(l6), l(l4), l(l2), l(l1), l(l0), calldatasize, caller, n, stake_price_us_cents))

jump2308(s(2), s(1), s(0), g(saleShare), g(balances), l(l6), l(l4), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, n, stake_price_us_cents)=>
	neq(s(2), 0)
	call(block2316(s(1), s(0)))

block2308(s(0), g(saleShare), g(balances), l(l6), l(l4), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, n, stake_price_us_cents)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2308(s(2),s(1),s(0),g(saleShare), g(balances), l(l6), l(l4), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, n, stake_price_us_cents))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block2316(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2320(s(1), s(0), g(saleShare), g(balances), l(l6), l(l4), l(l2), l(l1), l(l0), calldatasize, caller, n, stake_price_us_cents)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2364
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = n
	nop(CALLDATALOAD)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(5)
	nop(DUP1)
	s(6) = stake_price_us_cents
	nop(CALLDATALOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(3)
	s(3) = s(6)
	s(6) = s(7)
	nop(SWAP3)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(4) = 10266
	nop(PUSH2)
	call(block10266(s(3),s(2),s(1),s(0),g(saleShare), g(balances), l(l6), l(l4), l(l2), l(l1), l(l0), caller))
	nop(JUMP)

block2364(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

block2366(s(0), g(poolCapUSD), g(balances), l(l4), l(l1), l(l0), calldatasize, caller, callvalue, new_pool_cap_usd)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2366(s(2),s(1),s(0),g(poolCapUSD), g(balances), l(l4), l(l1), l(l0), calldatasize, caller, callvalue, new_pool_cap_usd))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump2366(s(2), s(1), s(0), g(poolCapUSD), g(balances), l(l4), l(l1), l(l0), calldatasize, caller, callvalue, new_pool_cap_usd)=>
	eq(s(2), 0)
	call(block2378(s(1), s(0),g(poolCapUSD), g(balances), l(l4), l(l1), l(l0), calldatasize, caller, new_pool_cap_usd))

jump2366(s(2), s(1), s(0), g(poolCapUSD), g(balances), l(l4), l(l1), l(l0), calldatasize, caller, callvalue, new_pool_cap_usd)=>
	neq(s(2), 0)
	call(block2374(s(1), s(0)))

block2374(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2378(s(1), s(0), g(poolCapUSD), g(balances), l(l4), l(l1), l(l0), calldatasize, caller, new_pool_cap_usd)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2409
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = new_pool_cap_usd
	nop(CALLDATALOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 10500
	nop(PUSH2)
	call(block10500(s(2),s(1),s(0),g(poolCapUSD), g(balances), l(l4), l(l1), l(l0), caller))
	nop(JUMP)

block2409(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

block2411(s(0), g(owner), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2411(s(2),s(1),s(0),g(owner), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump2411(s(2), s(1), s(0), g(owner), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block2423(s(1), s(0),g(owner), l(l1), l(l0)))

jump2411(s(2), s(1), s(0), g(owner), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block2419(s(1), s(0)))

block2419(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2423(s(1), s(0), g(owner), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2432
	nop(PUSH2)
	s(2) = 10667
	nop(PUSH2)
	call(block10667(s(1),s(0),g(owner), l(l1), l(l0)))
	nop(JUMP)

block2432(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump2454(s(2), s(1), s(0), g(allowedAmountToTransferToPool), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block2466(s(1), s(0),g(allowedAmountToTransferToPool), l(l1), l(l0)))

jump2454(s(2), s(1), s(0), g(allowedAmountToTransferToPool), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block2462(s(1), s(0)))

block2454(s(0), g(allowedAmountToTransferToPool), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2454(s(2),s(1),s(0),g(allowedAmountToTransferToPool), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block2462(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2466(s(1), s(0), g(allowedAmountToTransferToPool), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2475
	nop(PUSH2)
	s(2) = 10673
	nop(PUSH2)
	call(block10673(s(1),s(0),g(allowedAmountToTransferToPool), l(l1), l(l0)))
	nop(JUMP)

block2475(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump2497(s(2), s(1), s(0), g(lastStakePriceUSCents), g(balances), caller, callvalue)=>
	eq(s(2), 0)
	call(block2509(s(1), s(0),g(lastStakePriceUSCents), g(balances), caller))

jump2497(s(2), s(1), s(0), g(lastStakePriceUSCents), g(balances), caller, callvalue)=>
	neq(s(2), 0)
	call(block2505(s(1), s(0)))

block2497(s(0), g(lastStakePriceUSCents), g(balances), caller, callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2497(s(2),s(1),s(0),g(lastStakePriceUSCents), g(balances), caller, callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block2505(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2509(s(1), s(0), g(lastStakePriceUSCents), g(balances), caller)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2518
	nop(PUSH2)
	s(2) = 10679
	nop(PUSH2)
	call(block10679(s(1),s(0),g(lastStakePriceUSCents), g(balances), caller))
	nop(JUMP)

block2518(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

block2520(s(0), g(distributedBountyStakes), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2520(s(2),s(1),s(0),g(distributedBountyStakes), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump2520(s(2), s(1), s(0), g(distributedBountyStakes), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block2532(s(1), s(0),g(distributedBountyStakes), l(l1), l(l0)))

jump2520(s(2), s(1), s(0), g(distributedBountyStakes), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block2528(s(1), s(0)))

block2528(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2532(s(1), s(0), g(distributedBountyStakes), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2541
	nop(PUSH2)
	s(2) = 10800
	nop(PUSH2)
	call(block10800(s(1),s(0),g(distributedBountyStakes), l(l1), l(l0)))
	nop(JUMP)

block2541(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block2563(s(0), g(allowedAmountTransferedToPoolTotal), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2563(s(2),s(1),s(0),g(allowedAmountTransferedToPoolTotal), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump2563(s(2), s(1), s(0), g(allowedAmountTransferedToPoolTotal), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block2575(s(1), s(0),g(allowedAmountTransferedToPoolTotal), l(l1), l(l0)))

jump2563(s(2), s(1), s(0), g(allowedAmountTransferedToPoolTotal), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block2571(s(1), s(0)))

block2571(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2575(s(1), s(0), g(allowedAmountTransferedToPoolTotal), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2584
	nop(PUSH2)
	s(2) = 10806
	nop(PUSH2)
	call(block10806(s(1),s(0),g(allowedAmountTransferedToPoolTotal), l(l1), l(l0)))
	nop(JUMP)

block2584(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block2606(s(0), g(businessPlannedPeriodEndTimestamp), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2606(s(2),s(1),s(0),g(businessPlannedPeriodEndTimestamp), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump2606(s(2), s(1), s(0), g(businessPlannedPeriodEndTimestamp), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block2618(s(1), s(0),g(businessPlannedPeriodEndTimestamp), l(l1), l(l0)))

jump2606(s(2), s(1), s(0), g(businessPlannedPeriodEndTimestamp), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block2614(s(1), s(0)))

block2614(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2618(s(1), s(0), g(businessPlannedPeriodEndTimestamp), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2627
	nop(PUSH2)
	s(2) = 10812
	nop(PUSH2)
	call(block10812(s(1),s(0),g(businessPlannedPeriodEndTimestamp), l(l1), l(l0)))
	nop(JUMP)

block2627(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump2649(s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, key)=>
	eq(s(2), 0)
	call(block2661(s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, key))

jump2649(s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, key)=>
	neq(s(2), 0)
	call(block2657(s(1), s(0)))

block2649(s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, key)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2649(s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, callvalue, key))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block2657(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2661(s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), calldatasize, caller, key)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2714
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = key
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 10818
	nop(PUSH2)
	call(block10818(s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller))
	nop(JUMP)

block2714(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

block2716(s(0), g(saleStartTimestamp), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2716(s(2),s(1),s(0),g(saleStartTimestamp), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump2716(s(2), s(1), s(0), g(saleStartTimestamp), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block2728(s(1), s(0),g(saleStartTimestamp), l(l1), l(l0)))

jump2716(s(2), s(1), s(0), g(saleStartTimestamp), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block2724(s(1), s(0)))

block2724(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2728(s(1), s(0), g(saleStartTimestamp), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2737
	nop(PUSH2)
	s(2) = 11417
	nop(PUSH2)
	call(block11417(s(1),s(0),g(saleStartTimestamp), l(l1), l(l0)))
	nop(JUMP)

block2737(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump2759(s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, callvalue, spender, subtractedValue)=>
	eq(s(2), 0)
	call(block2771(s(1), s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, spender, subtractedValue))

jump2759(s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, callvalue, spender, subtractedValue)=>
	neq(s(2), 0)
	call(block2767(s(1), s(0)))

block2759(s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, callvalue, spender, subtractedValue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2759(s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, callvalue, spender, subtractedValue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block2767(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2771(s(1), s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, spender, subtractedValue)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2834
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = spender
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(5)
	nop(DUP1)
	s(6) = subtractedValue
	nop(CALLDATALOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(3)
	s(3) = s(6)
	s(6) = s(7)
	nop(SWAP3)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(4) = 11423
	nop(PUSH2)
	call(block11423(s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMP)

block2834(s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 64
	nop(PUSH1)
	s(2) = l(l0)
	nop(MLOAD)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(1)
	nop(DUP3)
	s(4)= eq(s(4), 0)
	nop(ISZERO)
	s(4)= eq(s(4), 0)
	nop(ISZERO)
	s(4)= eq(s(4), 0)
	nop(ISZERO)
	s(4)= eq(s(4), 0)
	nop(ISZERO)
	s(5) = s(3)
	nop(DUP2)
	l(l1) = s(4)
	nop(MSTORE)
	s(4) = 32
	nop(PUSH1)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(1)
	s(1) = s(3)
	s(3) = s(4)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(2) = 64
	nop(PUSH1)
	s(2) = l(l0)
	nop(MLOAD)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(1)
	s(1) = s(3)
	s(3) = s(4)
	nop(SWAP2)
	s(2) = s(3)-s(2)
	nop(SUB)
	s(3) = s(1)
	s(1) = s(2)
	s(2) = s(3)
	nop(SWAP1)
	nop(RETURN)

jump2860(s(2), s(1), s(0), g(poolCapUSD), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block2872(s(1), s(0),g(poolCapUSD), l(l1), l(l0)))

jump2860(s(2), s(1), s(0), g(poolCapUSD), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block2868(s(1), s(0)))

block2860(s(0), g(poolCapUSD), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2860(s(2),s(1),s(0),g(poolCapUSD), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block2868(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2872(s(1), s(0), g(poolCapUSD), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2881
	nop(PUSH2)
	s(2) = 12080
	nop(PUSH2)
	call(block12080(s(1),s(0),g(poolCapUSD), l(l1), l(l0)))
	nop(JUMP)

block2881(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block2903(s(0), g(teamCap), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2903(s(2),s(1),s(0),g(teamCap), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump2903(s(2), s(1), s(0), g(teamCap), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block2915(s(1), s(0),g(teamCap), l(l1), l(l0)))

jump2903(s(2), s(1), s(0), g(teamCap), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block2911(s(1), s(0)))

block2911(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2915(s(1), s(0), g(teamCap), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 2924
	nop(PUSH2)
	s(2) = 12086
	nop(PUSH2)
	call(block12086(s(1),s(0),g(teamCap), l(l1), l(l0)))
	nop(JUMP)

block2924(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block2946(s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, callvalue, owner)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump2946(s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, callvalue, owner))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump2946(s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, callvalue, owner)=>
	eq(s(2), 0)
	call(block2958(s(1), s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, owner))

jump2946(s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, callvalue, owner)=>
	neq(s(2), 0)
	call(block2954(s(1), s(0)))

block2954(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block2958(s(1), s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, owner)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3011
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = owner
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 12092
	nop(PUSH2)
	call(block12092(s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0)))
	nop(JUMP)

block3011(s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 64
	nop(PUSH1)
	s(2) = l(l0)
	nop(MLOAD)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(1)
	nop(DUP3)
	s(5) = s(3)
	nop(DUP2)
	l(l1) = s(4)
	nop(MSTORE)
	s(4) = 32
	nop(PUSH1)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(1)
	s(1) = s(3)
	s(3) = s(4)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(2) = 64
	nop(PUSH1)
	s(2) = l(l0)
	nop(MLOAD)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(1)
	s(1) = s(3)
	s(3) = s(4)
	nop(SWAP2)
	s(2) = s(3)-s(2)
	nop(SUB)
	s(3) = s(1)
	s(1) = s(2)
	s(2) = s(3)
	nop(SWAP1)
	nop(RETURN)

block3033(s(0), g(fundariaStakesFrozen), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3033(s(2),s(1),s(0),g(fundariaStakesFrozen), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3033(s(2), s(1), s(0), g(fundariaStakesFrozen), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block3045(s(1), s(0),g(fundariaStakesFrozen), l(l1), l(l0)))

jump3033(s(2), s(1), s(0), g(fundariaStakesFrozen), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block3041(s(1), s(0)))

block3041(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3045(s(1), s(0), g(fundariaStakesFrozen), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3054
	nop(PUSH2)
	s(2) = 12165
	nop(PUSH2)
	call(block12165(s(1),s(0),g(fundariaStakesFrozen), l(l1), l(l0)))
	nop(JUMP)

block3054(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block3080(s(0), g(businessPlannedPeriodEndTimestamp), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), caller, callvalue, timestamp)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3080(s(2),s(1),s(0),g(businessPlannedPeriodEndTimestamp), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), caller, callvalue, timestamp))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3080(s(2), s(1), s(0), g(businessPlannedPeriodEndTimestamp), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), caller, callvalue, timestamp)=>
	eq(s(2), 0)
	call(block3092(s(1), s(0),g(businessPlannedPeriodEndTimestamp), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), caller, timestamp))

jump3080(s(2), s(1), s(0), g(businessPlannedPeriodEndTimestamp), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), caller, callvalue, timestamp)=>
	neq(s(2), 0)
	call(block3088(s(1), s(0)))

block3088(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3092(s(1), s(0), g(businessPlannedPeriodEndTimestamp), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), caller, timestamp)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3101
	nop(PUSH2)
	s(2) = 12183
	nop(PUSH2)
	call(block12183(s(1),s(0),g(businessPlannedPeriodEndTimestamp), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), caller, timestamp))
	nop(JUMP)

block3101(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

block3103(s(0), g(saleShare), l(l6), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3103(s(2),s(1),s(0),g(saleShare), l(l6), l(l1), l(l0), calldataload, calldatasize, callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3103(s(2), s(1), s(0), g(saleShare), l(l6), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	eq(s(2), 0)
	call(block3115(s(1), s(0),g(saleShare), l(l6), l(l1), l(l0), calldataload, calldatasize))

jump3103(s(2), s(1), s(0), g(saleShare), l(l6), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	neq(s(2), 0)
	call(block3111(s(1), s(0)))

block3111(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3115(s(1), s(0), g(saleShare), l(l6), l(l1), l(l0), calldataload, calldatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3146
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = calldataload
	nop(CALLDATALOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 12341
	nop(PUSH2)
	call(block12341(s(2),s(1),s(0),g(saleShare), l(l6), l(l1), l(l0)))
	nop(JUMP)

block3146(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block3168(s(0), g(fundaria), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3168(s(2),s(1),s(0),g(fundaria), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3168(s(2), s(1), s(0), g(fundaria), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block3180(s(1), s(0),g(fundaria), l(l1), l(l0)))

jump3168(s(2), s(1), s(0), g(fundaria), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block3176(s(1), s(0)))

block3176(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3180(s(1), s(0), g(fundaria), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3189
	nop(PUSH2)
	s(2) = 12376
	nop(PUSH2)
	call(block12376(s(1),s(0),g(fundaria), l(l1), l(l0)))
	nop(JUMP)

block3189(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump3211(s(2), s(1), s(0), g(balances), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block3223(s(1), s(0),g(balances), l(l1), l(l0)))

jump3211(s(2), s(1), s(0), g(balances), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block3219(s(1), s(0)))

block3211(s(0), g(balances), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3211(s(2),s(1),s(0),g(balances), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block3219(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3223(s(1), s(0), g(balances), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3232
	nop(PUSH2)
	s(2) = 12382
	nop(PUSH2)
	call(block12382(s(1),s(0),g(balances), l(l1), l(l0)))
	nop(JUMP)

block3232(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block3298(s(0), g(supplyCap), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3298(s(2),s(1),s(0),g(supplyCap), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3298(s(2), s(1), s(0), g(supplyCap), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block3310(s(1), s(0),g(supplyCap), l(l1), l(l0)))

jump3298(s(2), s(1), s(0), g(supplyCap), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block3306(s(1), s(0)))

block3306(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3310(s(1), s(0), g(supplyCap), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3319
	nop(PUSH2)
	s(2) = 12420
	nop(PUSH2)
	call(block12420(s(1),s(0),g(supplyCap), l(l1), l(l0)))
	nop(JUMP)

block3319(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block3341(s(0), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3341(s(2),s(1),s(0), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3341(s(2), s(1), s(0), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block3353(s(1), s(0), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0)))

jump3341(s(2), s(1), s(0), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block3349(s(1), s(0)))

block3349(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3353(s(1), s(0), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3362
	nop(PUSH2)
	s(2) = 12426
	nop(PUSH2)
	call(block12426(s(1),s(0), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0)))
	nop(JUMP)

block3362(s(2), s(1), s(0), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(3)
	nop(DUP3)
	s(7) = s(5)
	nop(DUP2)
	s(6) = s(7)-s(6)
	nop(SUB)
	s(7) = s(4)
	nop(DUP3)
	l(l2) = s(6)
	nop(MSTORE)
	s(6) = s(2)
	nop(DUP4)
	s(7) = s(5)
	nop(DUP2)
	s(8) = s(6)
	nop(DUP2)
	s(8) = l(l1)
	nop(MLOAD)
	s(9) = s(7)
	nop(DUP2)
	l(l3) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	nop(POP)
	s(7) = s(6)
	nop(DUP1)
	s(7) = l(l1)
	nop(MLOAD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(7)
	nop(DUP1)
	s(9) = s(5)
	nop(DUP4)
	s(10) = s(6)
	nop(DUP4)
	s(11) = 0
	nop(PUSH1)
	call(block3399(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l4), l(l0)))

block3399(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l4), l(l0))=>
	nop(JUMPDEST)
	s(12) = s(8)
	nop(DUP4)
	s(13) = s(11)
	nop(DUP2)
	call(jump3399(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l4), l(l0)))
	nop(LT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3399(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l4), l(l0))=>
	geq(s(13), s(12))
	call(block3426(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0)))

jump3399(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l4), l(l0))=>
	lt(s(13), s(12))
	call(block3408(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l4), l(l0)))

block3408(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l4), l(l0))=>
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	nop(DUP3)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(12) = l(l4)
	nop(MLOAD)
	s(13) = s(11)
	nop(DUP2)
	s(14) = s(9)
	nop(DUP5)
	s(13) = s(14)+s(13)
	nop(ADD)
	l(l5) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(13) = s(11)
	nop(DUP2)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(POP)
	s(12) = 3399
	nop(PUSH2)
	call(block3399(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l4), l(l0)))
	nop(JUMP)

jump3426(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0))=>
	eq(s(7), 0)
	call(block3471(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0)))

jump3426(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0))=>
	neq(s(7), 0)
	call(block3446(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0)))

block3426(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	nop(POP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 31
	nop(PUSH1)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(6)
	nop(DUP1)
	call(jump3426(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l0)))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block3446(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l5), l(l0))=>
	s(7) = s(6)
	nop(DUP1)
	s(8) = s(5)
	nop(DUP3)
	s(7) = s(8)-s(7)
	nop(SUB)
	s(8) = s(7)
	nop(DUP1)
	s(8) = l(l5)
	nop(MLOAD)
	s(9) = 1
	nop(PUSH1)
	s(10) = s(6)
	nop(DUP4)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)-s(10)
	nop(SUB)
	s(11) = 256
	nop(PUSH2)
	s(10) = s(11)^s(10)
	nop(EXP)
	s(9) = s(10)-s(9)
	nop(SUB)
	s(9) = not(s(9))
	nop(NOT)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	l(l5) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	nop(POP)
	call(block3471(s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l0)))

block3471(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump3485(s(2), s(1), s(0), g(guidesStat), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block3497(s(1), s(0),g(guidesStat), l(l1), l(l0)))

jump3485(s(2), s(1), s(0), g(guidesStat), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block3493(s(1), s(0)))

block3485(s(0), g(guidesStat), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3485(s(2),s(1),s(0),g(guidesStat), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block3493(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3497(s(1), s(0), g(guidesStat), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3506
	nop(PUSH2)
	s(2) = 12483
	nop(PUSH2)
	call(block12483(s(1),s(0),g(guidesStat), l(l1), l(l0)))
	nop(JUMP)

block3506(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block3528(s(0), g(lastStakePriceUSCents), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3528(s(2),s(1),s(0),g(lastStakePriceUSCents), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3528(s(2), s(1), s(0), g(lastStakePriceUSCents), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block3540(s(1), s(0),g(lastStakePriceUSCents), l(l1), l(l0)))

jump3528(s(2), s(1), s(0), g(lastStakePriceUSCents), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block3536(s(1), s(0)))

block3536(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3540(s(1), s(0), g(lastStakePriceUSCents), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3549
	nop(PUSH2)
	s(2) = 12489
	nop(PUSH2)
	call(block12489(s(1),s(0),g(lastStakePriceUSCents), l(l1), l(l0)))
	nop(JUMP)

block3549(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block3575(s(0), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3575(s(2),s(1),s(0), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3575(s(2), s(1), s(0), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	eq(s(2), 0)
	call(block3587(s(1), s(0), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize))

jump3575(s(2), s(1), s(0), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	neq(s(2), 0)
	call(block3583(s(1), s(0)))

block3583(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3587(s(1), s(0), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), calldataload, calldatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3640
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = calldataload
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 12508
	nop(PUSH2)
	call(block12508(s(2),s(1),s(0), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0)))
	nop(JUMP)

block3640(s(5), s(4), s(3), s(2), s(1), s(0), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(6) = 64
	nop(PUSH1)
	s(6) = l(l0)
	nop(MLOAD)
	s(7) = s(6)
	nop(DUP1)
	s(8) = s(2)
	nop(DUP6)
	s(8)= eq(s(8), 0)
	nop(ISZERO)
	s(8)= eq(s(8), 0)
	nop(ISZERO)
	s(8)= eq(s(8), 0)
	nop(ISZERO)
	s(8)= eq(s(8), 0)
	nop(ISZERO)
	s(9) = s(7)
	nop(DUP2)
	l(l1) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(3)
	nop(DUP5)
	s(9) = s(7)
	nop(DUP2)
	l(l4) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(4)
	nop(DUP4)
	s(9) = s(7)
	nop(DUP2)
	l(l2) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(5)
	nop(DUP3)
	s(9) = s(7)
	nop(DUP2)
	l(l3) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(2)
	s(2) = s(7)
	s(7) = s(8)
	nop(SWAP5)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump3687(s(2), s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, callvalue, to, value)=>
	eq(s(2), 0)
	call(block3699(s(1), s(0),g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, to, value))

jump3687(s(2), s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, callvalue, to, value)=>
	neq(s(2), 0)
	call(block3695(s(1), s(0)))

block3687(s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, callvalue, to, value)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3687(s(2),s(1),s(0),g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, callvalue, to, value))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block3695(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3699(s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), calldatasize, caller, to, value)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3762
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = to
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(5)
	nop(DUP1)
	s(6) = value
	nop(CALLDATALOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(3)
	s(3) = s(6)
	s(6) = s(7)
	nop(SWAP3)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(4) = 12569
	nop(PUSH2)
	call(block12569(s(3),s(2),s(1),s(0),g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMP)

block3762(s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 64
	nop(PUSH1)
	s(2) = l(l0)
	nop(MLOAD)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(1)
	nop(DUP3)
	s(4)= eq(s(4), 0)
	nop(ISZERO)
	s(4)= eq(s(4), 0)
	nop(ISZERO)
	s(4)= eq(s(4), 0)
	nop(ISZERO)
	s(4)= eq(s(4), 0)
	nop(ISZERO)
	s(5) = s(3)
	nop(DUP2)
	l(l1) = s(4)
	nop(MSTORE)
	s(4) = 32
	nop(PUSH1)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(1)
	s(1) = s(3)
	s(3) = s(4)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(2) = 64
	nop(PUSH1)
	s(2) = l(l0)
	nop(MLOAD)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(1)
	s(1) = s(3)
	s(3) = s(4)
	nop(SWAP2)
	s(2) = s(3)-s(2)
	nop(SUB)
	s(3) = s(1)
	s(1) = s(2)
	s(2) = s(3)
	nop(SWAP1)
	nop(RETURN)

jump3788(s(2), s(1), s(0), g(usdPerEther), g(poolCapUSD), g(owner), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block3800(s(1), s(0),g(usdPerEther), g(poolCapUSD), g(owner), l(l1), l(l0)))

jump3788(s(2), s(1), s(0), g(usdPerEther), g(poolCapUSD), g(owner), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block3796(s(1), s(0)))

block3788(s(0), g(usdPerEther), g(poolCapUSD), g(owner), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3788(s(2),s(1),s(0),g(usdPerEther), g(poolCapUSD), g(owner), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block3796(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3800(s(1), s(0), g(usdPerEther), g(poolCapUSD), g(owner), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3809
	nop(PUSH2)
	s(2) = 13436
	nop(PUSH2)
	call(block13436_0(s(1),s(0),g(usdPerEther), g(poolCapUSD), g(owner), l(l1), l(l0)))
	nop(JUMP)

block3809(s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 64
	nop(PUSH1)
	s(2) = l(l0)
	nop(MLOAD)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(1)
	nop(DUP3)
	s(5) = s(3)
	nop(DUP2)
	l(l1) = s(4)
	nop(MSTORE)
	s(4) = 32
	nop(PUSH1)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(1)
	s(1) = s(3)
	s(3) = s(4)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(2) = 64
	nop(PUSH1)
	s(2) = l(l0)
	nop(MLOAD)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(1)
	s(1) = s(3)
	s(3) = s(4)
	nop(SWAP2)
	s(2) = s(3)-s(2)
	nop(SUB)
	s(3) = s(1)
	s(1) = s(2)
	s(2) = s(3)
	nop(SWAP1)
	nop(RETURN)

jump3831(s(2), s(1), s(0), g(investmentGuidesRewardsWithdrawn), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block3843(s(1), s(0),g(investmentGuidesRewardsWithdrawn), l(l1), l(l0)))

jump3831(s(2), s(1), s(0), g(investmentGuidesRewardsWithdrawn), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block3839(s(1), s(0)))

block3831(s(0), g(investmentGuidesRewardsWithdrawn), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3831(s(2),s(1),s(0),g(investmentGuidesRewardsWithdrawn), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block3839(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3843(s(1), s(0), g(investmentGuidesRewardsWithdrawn), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3852
	nop(PUSH2)
	s(2) = 13512
	nop(PUSH2)
	call(block13512(s(1),s(0),g(investmentGuidesRewardsWithdrawn), l(l1), l(l0)))
	nop(JUMP)

block3852(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block3874(s(0), g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3874(s(2),s(1),s(0),g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3874(s(2), s(1), s(0), g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	eq(s(2), 0)
	call(block3886(s(1), s(0),g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp))

jump3874(s(2), s(1), s(0), g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	neq(s(2), 0)
	call(block3882(s(1), s(0)))

block3882(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3886(s(1), s(0), g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3895
	nop(PUSH2)
	s(2) = 13518
	nop(PUSH2)
	call(block13518(s(1),s(0),g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp))
	nop(JUMP)

block3895(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

block3897(s(0), g(supplier), g(bountyCap), g(distributedBountyStakes), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0), calldatasize, caller, callvalue, stakes, to)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3897(s(2),s(1),s(0),g(supplier), g(bountyCap), g(distributedBountyStakes), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0), calldatasize, caller, callvalue, stakes, to))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3897(s(2), s(1), s(0), g(supplier), g(bountyCap), g(distributedBountyStakes), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0), calldatasize, caller, callvalue, stakes, to)=>
	eq(s(2), 0)
	call(block3909(s(1), s(0),g(supplier), g(bountyCap), g(distributedBountyStakes), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0), calldatasize, caller, stakes, to))

jump3897(s(2), s(1), s(0), g(supplier), g(bountyCap), g(distributedBountyStakes), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0), calldatasize, caller, callvalue, stakes, to)=>
	neq(s(2), 0)
	call(block3905(s(1), s(0)))

block3905(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3909(s(1), s(0), g(supplier), g(bountyCap), g(distributedBountyStakes), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0), calldatasize, caller, stakes, to)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3972
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = to
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(5)
	nop(DUP1)
	s(6) = stakes
	nop(CALLDATALOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(3)
	s(3) = s(6)
	s(6) = s(7)
	nop(SWAP3)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(4) = 16708
	nop(PUSH2)
	call(block16708(s(3),s(2),s(1),s(0),g(supplier), g(bountyCap), g(distributedBountyStakes), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0), caller))
	nop(JUMP)

block3972(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

block3974(s(0), g(transferedToPool), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump3974(s(2),s(1),s(0),g(transferedToPool), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump3974(s(2), s(1), s(0), g(transferedToPool), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block3986(s(1), s(0),g(transferedToPool), l(l1), l(l0)))

jump3974(s(2), s(1), s(0), g(transferedToPool), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block3982(s(1), s(0)))

block3982(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block3986(s(1), s(0), g(transferedToPool), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 3995
	nop(PUSH2)
	s(2) = 17247
	nop(PUSH2)
	call(block17247(s(1),s(0),g(transferedToPool), l(l1), l(l0)))
	nop(JUMP)

block3995(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block4023(s(0), g(distributedBonusStakes), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4023(s(2),s(1),s(0),g(distributedBonusStakes), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump4023(s(2), s(1), s(0), g(distributedBonusStakes), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block4035(s(1), s(0),g(distributedBonusStakes), l(l1), l(l0)))

jump4023(s(2), s(1), s(0), g(distributedBonusStakes), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block4031(s(1), s(0)))

block4031(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4035(s(1), s(0), g(distributedBonusStakes), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4044
	nop(PUSH2)
	s(2) = 17266
	nop(PUSH2)
	call(block17266(s(1),s(0),g(distributedBonusStakes), l(l1), l(l0)))
	nop(JUMP)

block4044(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump4072(s(2), s(1), s(0), g(saleStat), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block4084(s(1), s(0),g(saleStat), l(l1), l(l0)))

jump4072(s(2), s(1), s(0), g(saleStat), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block4080(s(1), s(0)))

block4072(s(0), g(saleStat), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4072(s(2),s(1),s(0),g(saleStat), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4080(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4084(s(1), s(0), g(saleStat), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4093
	nop(PUSH2)
	s(2) = 17285
	nop(PUSH2)
	call(block17285(s(1),s(0),g(saleStat), l(l1), l(l0)))
	nop(JUMP)

block4093(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump4115(s(2), s(1), s(0), g(usdPerEther), g(balances), l(l4), l(l1), l(l0), calldatasize, caller, callvalue, new_usd_per_ether)=>
	eq(s(2), 0)
	call(block4127(s(1), s(0),g(usdPerEther), g(balances), l(l4), l(l1), l(l0), calldatasize, caller, new_usd_per_ether))

jump4115(s(2), s(1), s(0), g(usdPerEther), g(balances), l(l4), l(l1), l(l0), calldatasize, caller, callvalue, new_usd_per_ether)=>
	neq(s(2), 0)
	call(block4123(s(1), s(0)))

block4115(s(0), g(usdPerEther), g(balances), l(l4), l(l1), l(l0), calldatasize, caller, callvalue, new_usd_per_ether)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4115(s(2),s(1),s(0),g(usdPerEther), g(balances), l(l4), l(l1), l(l0), calldatasize, caller, callvalue, new_usd_per_ether))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4123(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4127(s(1), s(0), g(usdPerEther), g(balances), l(l4), l(l1), l(l0), calldatasize, caller, new_usd_per_ether)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4158
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = new_usd_per_ether
	nop(CALLDATALOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 17291
	nop(PUSH2)
	call(block17291(s(2),s(1),s(0),g(usdPerEther), g(balances), l(l4), l(l1), l(l0), caller))
	nop(JUMP)

block4158(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

jump4160(s(2), s(1), s(0), g(distributedFundariaStakes), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block4172(s(1), s(0),g(distributedFundariaStakes), l(l1), l(l0)))

jump4160(s(2), s(1), s(0), g(distributedFundariaStakes), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block4168(s(1), s(0)))

block4160(s(0), g(distributedFundariaStakes), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4160(s(2),s(1),s(0),g(distributedFundariaStakes), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4168(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4172(s(1), s(0), g(distributedFundariaStakes), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4181
	nop(PUSH2)
	s(2) = 17458
	nop(PUSH2)
	call(block17458(s(1),s(0),g(distributedFundariaStakes), l(l1), l(l0)))
	nop(JUMP)

block4181(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump4203(s(2), s(1), s(0), g(owner), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block4215(s(1), s(0),g(owner), l(l1), l(l0)))

jump4203(s(2), s(1), s(0), g(owner), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block4211(s(1), s(0)))

block4203(s(0), g(owner), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4203(s(2),s(1),s(0),g(owner), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4211(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4215(s(1), s(0), g(owner), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4224
	nop(PUSH2)
	s(2) = 17464
	nop(PUSH2)
	call(block17464(s(1),s(0),g(owner), l(l1), l(l0)))
	nop(JUMP)

block4224(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block4290(s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), addedValue, calldatasize, caller, callvalue, spender)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4290(s(2),s(1),s(0),g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), addedValue, calldatasize, caller, callvalue, spender))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump4290(s(2), s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), addedValue, calldatasize, caller, callvalue, spender)=>
	eq(s(2), 0)
	call(block4302(s(1), s(0),g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), addedValue, calldatasize, caller, spender))

jump4290(s(2), s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), addedValue, calldatasize, caller, callvalue, spender)=>
	neq(s(2), 0)
	call(block4298(s(1), s(0)))

block4298(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4302(s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), addedValue, calldatasize, caller, spender)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4365
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = spender
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(5)
	nop(DUP1)
	s(6) = addedValue
	nop(CALLDATALOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(3)
	s(3) = s(6)
	s(6) = s(7)
	nop(SWAP3)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(4) = 17502
	nop(PUSH2)
	call(block17502(s(3),s(2),s(1),s(0),g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMP)

block4365(s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 64
	nop(PUSH1)
	s(2) = l(l0)
	nop(MLOAD)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(1)
	nop(DUP3)
	s(4)= eq(s(4), 0)
	nop(ISZERO)
	s(4)= eq(s(4), 0)
	nop(ISZERO)
	s(4)= eq(s(4), 0)
	nop(ISZERO)
	s(4)= eq(s(4), 0)
	nop(ISZERO)
	s(5) = s(3)
	nop(DUP2)
	l(l1) = s(4)
	nop(MSTORE)
	s(4) = 32
	nop(PUSH1)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(1)
	s(1) = s(3)
	s(3) = s(4)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(2) = 64
	nop(PUSH1)
	s(2) = l(l0)
	nop(MLOAD)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(1)
	s(1) = s(3)
	s(3) = s(4)
	nop(SWAP2)
	s(2) = s(3)-s(2)
	nop(SUB)
	s(3) = s(1)
	s(1) = s(2)
	s(2) = s(3)
	nop(SWAP1)
	nop(RETURN)

block4391(s(0), g(saleCap), g(usdPerEther), l(l1), l(l0), calldatasize, callvalue, input_wei)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4391(s(2),s(1),s(0),g(saleCap), g(usdPerEther), l(l1), l(l0), calldatasize, callvalue, input_wei))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump4391(s(2), s(1), s(0), g(saleCap), g(usdPerEther), l(l1), l(l0), calldatasize, callvalue, input_wei)=>
	eq(s(2), 0)
	call(block4403(s(1), s(0),g(saleCap), g(usdPerEther), l(l1), l(l0), calldatasize, input_wei))

jump4391(s(2), s(1), s(0), g(saleCap), g(usdPerEther), l(l1), l(l0), calldatasize, callvalue, input_wei)=>
	neq(s(2), 0)
	call(block4399(s(1), s(0)))

block4399(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4403(s(1), s(0), g(saleCap), g(usdPerEther), l(l1), l(l0), calldatasize, input_wei)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4434
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = input_wei
	nop(CALLDATALOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 18328
	nop(PUSH2)
	call(block18328_1(s(2),s(1),s(0),g(saleCap), g(usdPerEther), l(l1), l(l0)))
	nop(JUMP)

block4434(s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 64
	nop(PUSH1)
	s(2) = l(l0)
	nop(MLOAD)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(1)
	nop(DUP3)
	s(5) = s(3)
	nop(DUP2)
	l(l1) = s(4)
	nop(MSTORE)
	s(4) = 32
	nop(PUSH1)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(1)
	s(1) = s(3)
	s(3) = s(4)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(2) = 64
	nop(PUSH1)
	s(2) = l(l0)
	nop(MLOAD)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(1)
	s(1) = s(3)
	s(3) = s(4)
	nop(SWAP2)
	s(2) = s(3)-s(2)
	nop(SUB)
	s(3) = s(1)
	s(1) = s(2)
	s(2) = s(3)
	nop(SWAP1)
	nop(RETURN)

jump4456(s(2), s(1), s(0), g(fundariaCap), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block4468(s(1), s(0),g(fundariaCap), l(l1), l(l0)))

jump4456(s(2), s(1), s(0), g(fundariaCap), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block4464(s(1), s(0)))

block4456(s(0), g(fundariaCap), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4456(s(2),s(1),s(0),g(fundariaCap), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4464(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4468(s(1), s(0), g(fundariaCap), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4477
	nop(PUSH2)
	s(2) = 18377
	nop(PUSH2)
	call(block18377(s(1),s(0),g(fundariaCap), l(l1), l(l0)))
	nop(JUMP)

block4477(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block4499(s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, callvalue, owner, spender)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4499(s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, callvalue, owner, spender))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump4499(s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, callvalue, owner, spender)=>
	eq(s(2), 0)
	call(block4511(s(1), s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, owner, spender))

jump4499(s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, callvalue, owner, spender)=>
	neq(s(2), 0)
	call(block4507(s(1), s(0)))

block4507(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4511(s(1), s(0), l(l7), l(l6), l(l1), l(l0), calldatasize, owner, spender)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4596
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = owner
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(5)
	nop(DUP1)
	s(6) = spender
	nop(CALLDATALOAD)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(3)
	s(3) = s(6)
	s(6) = s(7)
	nop(SWAP3)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(4) = 18383
	nop(PUSH2)
	call(block18383(s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0)))
	nop(JUMP)

block4596(s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 64
	nop(PUSH1)
	s(2) = l(l0)
	nop(MLOAD)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(1)
	nop(DUP3)
	s(5) = s(3)
	nop(DUP2)
	l(l1) = s(4)
	nop(MSTORE)
	s(4) = 32
	nop(PUSH1)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(1)
	s(1) = s(3)
	s(3) = s(4)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(2) = 64
	nop(PUSH1)
	s(2) = l(l0)
	nop(MLOAD)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(1)
	s(1) = s(3)
	s(3) = s(4)
	nop(SWAP2)
	s(2) = s(3)-s(2)
	nop(SUB)
	s(3) = s(1)
	s(1) = s(2)
	s(2) = s(3)
	nop(SWAP1)
	nop(RETURN)

block4618(s(0), g(priceIsFrozen), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4618(s(2),s(1),s(0),g(priceIsFrozen), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump4618(s(2), s(1), s(0), g(priceIsFrozen), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block4630(s(1), s(0),g(priceIsFrozen), l(l1), l(l0)))

jump4618(s(2), s(1), s(0), g(priceIsFrozen), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block4626(s(1), s(0)))

block4626(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4630(s(1), s(0), g(priceIsFrozen), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4639
	nop(PUSH2)
	s(2) = 18518
	nop(PUSH2)
	call(block18518(s(1),s(0),g(priceIsFrozen), l(l1), l(l0)))
	nop(JUMP)

block4639(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump4661(s(2), s(1), s(0), g(saleCap), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block4673(s(1), s(0),g(saleCap), l(l1), l(l0)))

jump4661(s(2), s(1), s(0), g(saleCap), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block4669(s(1), s(0)))

block4661(s(0), g(saleCap), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4661(s(2),s(1),s(0),g(saleCap), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4669(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4673(s(1), s(0), g(saleCap), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4682
	nop(PUSH2)
	s(2) = 18524
	nop(PUSH2)
	call(block18524(s(1),s(0),g(saleCap), l(l1), l(l0)))
	nop(JUMP)

block4682(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block4704(s(0), g(pool), g(balances), calldatasize, caller, callvalue, pool)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4704(s(2),s(1),s(0),g(pool), g(balances), calldatasize, caller, callvalue, pool))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump4704(s(2), s(1), s(0), g(pool), g(balances), calldatasize, caller, callvalue, pool)=>
	eq(s(2), 0)
	call(block4716(s(1), s(0),g(pool), g(balances), calldatasize, caller, pool))

jump4704(s(2), s(1), s(0), g(pool), g(balances), calldatasize, caller, callvalue, pool)=>
	neq(s(2), 0)
	call(block4712(s(1), s(0)))

block4712(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4716(s(1), s(0), g(pool), g(balances), calldatasize, caller, pool)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4769
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = pool
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 18530
	nop(PUSH2)
	call(block18530(s(2),s(1),s(0),g(pool), g(balances), caller))
	nop(JUMP)

block4769(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

jump4771(s(2), s(1), s(0), g(teamShare), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block4783(s(1), s(0),g(teamShare), l(l1), l(l0)))

jump4771(s(2), s(1), s(0), g(teamShare), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block4779(s(1), s(0)))

block4771(s(0), g(teamShare), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4771(s(2),s(1),s(0),g(teamShare), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4779(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4783(s(1), s(0), g(teamShare), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4792
	nop(PUSH2)
	s(2) = 18690
	nop(PUSH2)
	call(block18690(s(1),s(0),g(teamShare), l(l1), l(l0)))
	nop(JUMP)

block4792(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block4820(s(0), g(lastStakePriceUSCents), g(balances), caller, callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4820(s(2),s(1),s(0),g(lastStakePriceUSCents), g(balances), caller, callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump4820(s(2), s(1), s(0), g(lastStakePriceUSCents), g(balances), caller, callvalue)=>
	eq(s(2), 0)
	call(block4832(s(1), s(0),g(lastStakePriceUSCents), g(balances), caller))

jump4820(s(2), s(1), s(0), g(lastStakePriceUSCents), g(balances), caller, callvalue)=>
	neq(s(2), 0)
	call(block4828(s(1), s(0)))

block4828(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4832(s(1), s(0), g(lastStakePriceUSCents), g(balances), caller)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4841
	nop(PUSH2)
	s(2) = 18709
	nop(PUSH2)
	call(block18709(s(1),s(0),g(lastStakePriceUSCents), g(balances), caller))
	nop(JUMP)

block4841(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

block4843(s(0), g(bonusShare), l(l6), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4843(s(2),s(1),s(0),g(bonusShare), l(l6), l(l1), l(l0), calldataload, calldatasize, callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump4843(s(2), s(1), s(0), g(bonusShare), l(l6), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	eq(s(2), 0)
	call(block4855(s(1), s(0),g(bonusShare), l(l6), l(l1), l(l0), calldataload, calldatasize))

jump4843(s(2), s(1), s(0), g(bonusShare), l(l6), l(l1), l(l0), calldataload, calldatasize, callvalue)=>
	neq(s(2), 0)
	call(block4851(s(1), s(0)))

block4851(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4855(s(1), s(0), g(bonusShare), l(l6), l(l1), l(l0), calldataload, calldatasize)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4886
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = calldataload
	nop(CALLDATALOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 18830
	nop(PUSH2)
	call(block18830(s(2),s(1),s(0),g(bonusShare), l(l6), l(l1), l(l0)))
	nop(JUMP)

block4886(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump4908(s(2), s(1), s(0), g(teamStakesFrozen), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block4920(s(1), s(0),g(teamStakesFrozen), l(l1), l(l0)))

jump4908(s(2), s(1), s(0), g(teamStakesFrozen), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block4916(s(1), s(0)))

block4908(s(0), g(teamStakesFrozen), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4908(s(2),s(1),s(0),g(teamStakesFrozen), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4916(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4920(s(1), s(0), g(teamStakesFrozen), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4929
	nop(PUSH2)
	s(2) = 18865
	nop(PUSH2)
	call(block18865(s(1),s(0),g(teamStakesFrozen), l(l1), l(l0)))
	nop(JUMP)

block4929(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump4955(s(2), s(1), s(0), g(financePeriodsCount), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block4967(s(1), s(0),g(financePeriodsCount), l(l1), l(l0)))

jump4955(s(2), s(1), s(0), g(financePeriodsCount), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block4963(s(1), s(0)))

block4955(s(0), g(financePeriodsCount), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump4955(s(2),s(1),s(0),g(financePeriodsCount), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block4963(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block4967(s(1), s(0), g(financePeriodsCount), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 4976
	nop(PUSH2)
	s(2) = 18884
	nop(PUSH2)
	call(block18884(s(1),s(0),g(financePeriodsCount), l(l1), l(l0)))
	nop(JUMP)

block4976(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block5004(s(0), g(businessPlannedPeriodDuration), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump5004(s(2),s(1),s(0),g(businessPlannedPeriodDuration), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump5004(s(2), s(1), s(0), g(businessPlannedPeriodDuration), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block5016(s(1), s(0),g(businessPlannedPeriodDuration), l(l1), l(l0)))

jump5004(s(2), s(1), s(0), g(businessPlannedPeriodDuration), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block5012(s(1), s(0)))

block5012(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block5016(s(1), s(0), g(businessPlannedPeriodDuration), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 5025
	nop(PUSH2)
	s(2) = 18903
	nop(PUSH2)
	call(block18903(s(1),s(0),g(businessPlannedPeriodDuration), l(l1), l(l0)))
	nop(JUMP)

block5025(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

jump5047(s(2), s(1), s(0), g(balances), calldatasize, caller, callvalue, new_owner)=>
	eq(s(2), 0)
	call(block5059(s(1), s(0),g(balances), calldatasize, caller, new_owner))

jump5047(s(2), s(1), s(0), g(balances), calldatasize, caller, callvalue, new_owner)=>
	neq(s(2), 0)
	call(block5055(s(1), s(0)))

block5047(s(0), g(balances), calldatasize, caller, callvalue, new_owner)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump5047(s(2),s(1),s(0),g(balances), calldatasize, caller, callvalue, new_owner))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block5055(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block5059(s(1), s(0), g(balances), calldatasize, caller, new_owner)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 5112
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = new_owner
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 18909
	nop(PUSH2)
	call(block18909(s(2),s(1),s(0),g(balances), caller))
	nop(JUMP)

block5112(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

jump5114(s(2), s(1), s(0), g(bountyCap), l(l1), l(l0), callvalue)=>
	eq(s(2), 0)
	call(block5126(s(1), s(0),g(bountyCap), l(l1), l(l0)))

jump5114(s(2), s(1), s(0), g(bountyCap), l(l1), l(l0), callvalue)=>
	neq(s(2), 0)
	call(block5122(s(1), s(0)))

block5114(s(0), g(bountyCap), l(l1), l(l0), callvalue)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump5114(s(2),s(1),s(0),g(bountyCap), l(l1), l(l0), callvalue))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block5122(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block5126(s(1), s(0), g(bountyCap), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 5135
	nop(PUSH2)
	s(2) = 19069
	nop(PUSH2)
	call(block19069(s(1),s(0),g(bountyCap), l(l1), l(l0)))
	nop(JUMP)

block5135(s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(4)
	nop(DUP2)
	l(l1) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(3) = 64
	nop(PUSH1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(RETURN)

block5157(s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), g(balances), l(l6), l(l4), l(l1), l(l0), address, balance, caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump5157(s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), g(balances), l(l6), l(l4), l(l1), l(l0), address, balance, caller, callvalue, returndatasize, timestamp))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump5157(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), g(balances), l(l6), l(l4), l(l1), l(l0), address, balance, caller, callvalue, returndatasize, timestamp)=>
	eq(s(2), 0)
	call(block5169(s(1), s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), g(balances), l(l6), l(l4), l(l1), l(l0), address, balance, caller, returndatasize, timestamp))

jump5157(s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), g(balances), l(l6), l(l4), l(l1), l(l0), address, balance, caller, callvalue, returndatasize, timestamp)=>
	neq(s(2), 0)
	call(block5165(s(1), s(0)))

block5165(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block5169(s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), g(balances), l(l6), l(l4), l(l1), l(l0), address, balance, caller, returndatasize, timestamp)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 5178
	nop(PUSH2)
	s(2) = 19075
	nop(PUSH2)
	call(block19075(s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), g(balances), l(l6), l(l4), l(l1), l(l0), address, balance, caller, returndatasize, timestamp))
	nop(JUMP)

block5178(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

jump5180(s(2), s(1), s(0), g(owner), g(balances), calldatasize, caller, callvalue, new_fundaria)=>
	eq(s(2), 0)
	call(block5192(s(1), s(0),g(owner), g(balances), calldatasize, caller, new_fundaria))

jump5180(s(2), s(1), s(0), g(owner), g(balances), calldatasize, caller, callvalue, new_fundaria)=>
	neq(s(2), 0)
	call(block5188(s(1), s(0)))

block5180(s(0), g(owner), g(balances), calldatasize, caller, callvalue, new_fundaria)=>
	nop(JUMPDEST)
	s(1) = callvalue
	nop(CALLVALUE)
	s(2) = s(1)
	nop(DUP1)
	call(jump5180(s(2),s(1),s(0),g(owner), g(balances), calldatasize, caller, callvalue, new_fundaria))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block5188(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block5192(s(1), s(0), g(owner), g(balances), calldatasize, caller, new_fundaria)=>
	nop(JUMPDEST)
	nop(POP)
	s(1) = 5245
	nop(PUSH2)
	s(2) = 4
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = calldatasize
	nop(CALLDATASIZE)
	s(3) = s(4)-s(3)
	nop(SUB)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = s(4)
	nop(DUP1)
	s(5) = new_fundaria
	nop(CALLDATALOAD)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	nop(POP)
	nop(POP)
	s(3) = 19769
	nop(PUSH2)
	call(block19769(s(2),s(1),s(0),g(owner), g(balances), caller))
	nop(JUMP)

block5245(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

block5247(s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(1) = 0
	nop(PUSH1)
	s(2) = s(1)
	nop(DUP1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = 0
	nop(PUSH1)
	s(6) = s(5)
	nop(DUP1)
	s(7) = 36
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(8) = g(lastStakePriceUSCents)
	nop(SLOAD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = 255
	nop(PUSH1)
	s(7) = and(s(8), s(7))
	nop(AND)
	call(jump5247(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump5247(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	neq(s(7), 0)
	call(block5287(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump5247(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	eq(s(7), 0)
	call(block5279(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

block5279(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	s(7) = 5286
	nop(PUSH2)
	s(8) = 19929
	nop(PUSH2)
	call(block19929(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(JUMP)

block5286(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	call(block5287(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block5287(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(7) = 5295
	nop(PUSH2)
	s(8) = 20244
	nop(PUSH2)
	call(block20244(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block5295(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(7) = 5304
	nop(PUSH2)
	s(8) = callvalue
	nop(CALLVALUE)
	s(9) = 18328
	nop(PUSH2)
	call(block18328_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

jump5304(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	leq(s(8), s(7))
	call(block6379(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0), caller, callvalue, returndatasize))

jump5304(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	gt(s(8), s(7))
	call(block5316(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block5304(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	nop(POP)
	s(7) = 1
	nop(PUSH1)
	s(8) = s(5)
	nop(DUP3)
	call(jump5304(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump5316(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	gt(s(8), s(7))
	call(block5344(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump5316(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	leq(s(8), s(7))
	call(block5334(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block5316(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	s(7) = s(5)
	nop(DUP2)
	s(8) = 29
	nop(PUSH1)
	s(8) = g(saleStartTimestamp)
	nop(SLOAD)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	nop(POP)
	s(7) = 32
	nop(PUSH1)
	s(7) = g(totalInvested)
	nop(SLOAD)
	s(8) = s(6)
	nop(DUP2)
	call(jump5316(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block5334(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	s(7) = s(5)
	nop(DUP2)
	s(8) = s(3)
	s(3) = s(7)
	s(7) = s(8)
	nop(SWAP4)
	nop(POP)
	s(7) = callvalue
	nop(CALLVALUE)
	s(8) = s(4)
	s(4) = s(7)
	s(7) = s(8)
	nop(SWAP3)
	nop(POP)
	s(7) = 5365
	nop(PUSH2)
	call(block5365(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block5344(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(7) = 29
	nop(PUSH1)
	s(7) = g(saleStartTimestamp)
	nop(SLOAD)
	s(8) = 32
	nop(PUSH1)
	s(8) = g(totalInvested)
	nop(SLOAD)
	s(7) = s(8)-s(7)
	nop(SUB)
	s(8) = s(3)
	s(3) = s(7)
	s(7) = s(8)
	nop(SWAP4)
	nop(POP)
	s(7) = 5362
	nop(PUSH2)
	s(8) = s(3)
	nop(DUP5)
	s(9) = 9782
	nop(PUSH2)
	call(block9782(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block5362(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(8) = s(4)
	s(4) = s(7)
	s(7) = s(8)
	nop(SWAP3)
	nop(POP)
	call(block5365(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block5365(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(7) = 5422
	nop(PUSH2)
	s(8) = 33
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(9) = g(totalWithdrawn)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 255
	nop(PUSH1)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 255
	nop(PUSH1)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 12
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(10) = g(teamShare)
	nop(SLOAD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 256
	nop(PUSH2)
	s(10) = s(11)^s(10)
	nop(EXP)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(9) = s(10)/s(9)
	nop(DIV)
	s(10) = 255
	nop(PUSH1)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 255
	nop(PUSH1)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(3)
	nop(DUP7)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(10) = 20581
	nop(PUSH2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 4294967295
	nop(PUSH4)
	s(10) = and(s(11), s(10))
	nop(AND)
	call(block20581_4(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block5422(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(8) = s(1)
	s(1) = s(7)
	s(7) = s(8)
	nop(SWAP6)
	nop(POP)
	s(7) = 5481
	nop(PUSH2)
	s(8) = 33
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(9) = g(totalWithdrawn)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 255
	nop(PUSH1)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 255
	nop(PUSH1)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 15
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(10) = g(fundariaShare)
	nop(SLOAD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 256
	nop(PUSH2)
	s(10) = s(11)^s(10)
	nop(EXP)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(9) = s(10)/s(9)
	nop(DIV)
	s(10) = 255
	nop(PUSH1)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 255
	nop(PUSH1)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(3)
	nop(DUP7)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(10) = 20581
	nop(PUSH2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 4294967295
	nop(PUSH4)
	s(10) = and(s(11), s(10))
	nop(AND)
	call(block20581_5(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block5481(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(8) = s(2)
	s(2) = s(7)
	s(7) = s(8)
	nop(SWAP5)
	nop(POP)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(3)
	nop(DUP5)
	call(jump5481(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump5481(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	leq(s(8), s(7))
	call(block6290(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(totalInvested), l(l0), caller, callvalue, returndatasize))

jump5481(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	gt(s(8), s(7))
	call(block5493(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block5493(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	s(7) = s(1)
	nop(DUP6)
	s(8) = 2
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = 3
	nop(PUSH1)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(11) = g(balances)
	nop(SLOAD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = 256
	nop(PUSH2)
	s(11) = s(12)^s(11)
	nop(EXP)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(10) = s(11)/s(10)
	nop(DIV)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l6) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l7) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(8)
	nop(DUP3)
	gl = s(11)
	s(11) = fresh(0)
	nop(SLOAD)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(9) = s(7)
	nop(DUP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gs(1) = s(9)
	gs(2) = s(8)
	nop(SSTORE)
	nop(POP)
	s(7) = s(1)
	nop(DUP6)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(8)
	nop(DUP1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(8)
	nop(DUP3)
	s(11) = g(totalSupply)
	nop(SLOAD)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(9) = s(7)
	nop(DUP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	g(totalSupply) = s(8)
	nop(SSTORE)
	nop(POP)
	s(7) = s(1)
	nop(DUP6)
	s(8) = 13
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(8)
	nop(DUP3)
	s(11) = g(distributedTeamStakes)
	nop(SLOAD)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(9) = s(7)
	nop(DUP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	g(distributedTeamStakes) = s(8)
	nop(SSTORE)
	nop(POP)
	s(7) = 3
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(8) = g(balances)
	nop(SLOAD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 25
	nop(PUSH1)
	s(9) = 1
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(9) = g(supplier)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 100389287136786176327247604509743168900146139575972864366142685224231313322991
	nop(PUSH32)
	s(10) = s(1)
	nop(DUP9)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	nop(DUP3)
	s(14) = s(12)
	nop(DUP2)
	l(l1) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	s(11) = s(12)-s(11)
	nop(SUB)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	nop(LOG3)
	s(7) = s(2)
	nop(DUP5)
	s(8) = 2
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = 4
	nop(PUSH1)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(11) = g(owner)
	nop(SLOAD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = 256
	nop(PUSH2)
	s(11) = s(12)^s(11)
	nop(EXP)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(10) = s(11)/s(10)
	nop(DIV)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l6) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l7) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(8)
	nop(DUP3)
	gl = s(11)
	s(11) = fresh(1)
	nop(SLOAD)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(9) = s(7)
	nop(DUP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gs(1) = s(9)
	gs(2) = s(8)
	nop(SSTORE)
	nop(POP)
	s(7) = s(2)
	nop(DUP5)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(8)
	nop(DUP1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(8)
	nop(DUP3)
	s(11) = g(totalSupply)
	nop(SLOAD)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(9) = s(7)
	nop(DUP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	g(totalSupply) = s(8)
	nop(SSTORE)
	nop(POP)
	s(7) = s(2)
	nop(DUP5)
	s(8) = 16
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(8)
	nop(DUP3)
	s(11) = g(distributedFundariaStakes)
	nop(SLOAD)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(9) = s(7)
	nop(DUP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	g(distributedFundariaStakes) = s(8)
	nop(SSTORE)
	nop(POP)
	s(7) = 4
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(8) = g(owner)
	nop(SLOAD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 25
	nop(PUSH1)
	s(9) = 1
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(9) = g(supplier)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 100389287136786176327247604509743168900146139575972864366142685224231313322991
	nop(PUSH32)
	s(10) = s(2)
	nop(DUP8)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	nop(DUP3)
	s(14) = s(12)
	nop(DUP2)
	l(l1) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	s(11) = s(12)-s(11)
	nop(SUB)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	nop(LOG3)
	s(7) = 6125
	nop(PUSH2)
	s(8) = caller
	nop(CALLER)
	s(9) = s(3)
	nop(DUP6)
	s(10) = s(4)
	nop(DUP6)
	s(11) = 20608
	nop(PUSH2)
	call(block20608(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block6125(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(7) = 0
	nop(PUSH1)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 26
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l6) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l7) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 4
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gl = s(9)
	s(9) = fresh(0)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	call(jump6125(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump6125(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(8), s(7))
	call(block6289(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(totalInvested), l(l0), caller, callvalue, returndatasize))

jump6125(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(8), s(7))
	call(block6278(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block6278(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	s(7) = 6288
	nop(PUSH2)
	s(8) = caller
	nop(CALLER)
	s(9) = s(3)
	nop(DUP6)
	s(10) = s(4)
	nop(DUP6)
	s(11) = 21133
	nop(PUSH2)
	call(block21133(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block6288(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(totalInvested), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	call(block6289(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(totalInvested), l(l0), caller, callvalue, returndatasize))

block6289(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(totalInvested), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	call(block6290(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(totalInvested), l(l0), caller, callvalue, returndatasize))

block6290(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(totalInvested), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(7) = 32
	nop(PUSH1)
	s(7) = g(totalInvested)
	nop(SLOAD)
	s(8) = s(6)
	nop(DUP2)
	call(jump6290(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(totalInvested), l(l0), caller, callvalue, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump6290(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(totalInvested), l(l0), caller, callvalue, returndatasize)=>
	leq(s(8), s(7))
	call(block6374(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

jump6290(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(totalInvested), l(l0), caller, callvalue, returndatasize)=>
	gt(s(8), s(7))
	call(block6301(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0), caller, callvalue, returndatasize))

jump6301(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0), caller, callvalue, returndatasize)=>
	eq(s(8), 0)
	call(block6372(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

jump6301(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0), caller, callvalue, returndatasize)=>
	neq(s(8), 0)
	call(block6363(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize))

block6301(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0), caller, callvalue, returndatasize)=>
	s(7) = caller
	nop(CALLER)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 2300
	nop(PUSH2)
	s(9) = s(4)
	nop(DUP5)
	s(10) = callvalue
	nop(CALLVALUE)
	s(9) = s(10)-s(9)
	nop(SUB)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	s(10)= eq(s(10), 0)
	nop(ISZERO)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = 0
	nop(PUSH1)
	s(12) = 64
	nop(PUSH1)
	s(12) = l(l0)
	nop(MLOAD)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(10)
	nop(DUP4)
	s(13) = s(14)-s(13)
	nop(SUB)
	s(14) = s(12)
	nop(DUP2)
	s(15) = s(9)
	nop(DUP6)
	s(16) = s(7)
	nop(DUP9)
	s(17) = s(8)
	nop(DUP9)
	s(11) = 1
	nop(CALL)
	s(12) = s(7)
	s(7) = s(11)
	s(11) = s(12)
	nop(SWAP4)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	s(8) = s(7)
	nop(DUP1)
	call(jump6301(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block6363(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize)=>
	s(8) = returndatasize
	nop(RETURNDATASIZE)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(9)
	nop(DUP1)
	nop(RETURNDATACOPY)
	s(9) = returndatasize
	nop(RETURNDATASIZE)
	s(10) = 0
	nop(PUSH1)
	nop(REVERT)

block6372(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(JUMPDEST)
	nop(POP)
	call(block6374(s(6),s(5),s(4),s(3),s(2),s(1),s(0)))

block6374(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(JUMPDEST)
	s(7) = 6451
	nop(PUSH2)
	call(block6451(s(6),s(5),s(4),s(3),s(2),s(1),s(0)))
	nop(JUMP)

block6379(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(7) = caller
	nop(CALLER)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 2300
	nop(PUSH2)
	s(9) = callvalue
	nop(CALLVALUE)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	s(10)= eq(s(10), 0)
	nop(ISZERO)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = 0
	nop(PUSH1)
	s(12) = 64
	nop(PUSH1)
	s(12) = l(l0)
	nop(MLOAD)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(10)
	nop(DUP4)
	s(13) = s(14)-s(13)
	nop(SUB)
	s(14) = s(12)
	nop(DUP2)
	s(15) = s(9)
	nop(DUP6)
	s(16) = s(7)
	nop(DUP9)
	s(17) = s(8)
	nop(DUP9)
	s(11) = 1
	nop(CALL)
	s(12) = s(7)
	s(7) = s(11)
	s(11) = s(12)
	nop(SWAP4)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	s(8) = s(7)
	nop(DUP1)
	call(jump6379(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump6379(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0), caller, callvalue, returndatasize)=>
	eq(s(8), 0)
	call(block6449(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

jump6379(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0), caller, callvalue, returndatasize)=>
	neq(s(8), 0)
	call(block6440(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize))

block6440(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize)=>
	s(8) = returndatasize
	nop(RETURNDATASIZE)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(9)
	nop(DUP1)
	nop(RETURNDATACOPY)
	s(9) = returndatasize
	nop(RETURNDATASIZE)
	s(10) = 0
	nop(PUSH1)
	nop(REVERT)

block6449(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(JUMPDEST)
	nop(POP)
	call(block6451(s(6),s(5),s(4),s(3),s(2),s(1),s(0)))

block6451(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(JUMPDEST)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	call(block945())
	nop(JUMP)

block6459(s(1), s(0), g(guideInvestmentAttractedShareToPay), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 43
	nop(PUSH1)
	s(2) = g(guideInvestmentAttractedShareToPay)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block968(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block6465(s(1), s(0), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 64
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = 64
	nop(PUSH1)
	l(l0) = s(3)
	nop(MSTORE)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 15
	nop(PUSH1)
	s(5) = s(3)
	nop(DUP2)
	l(l1) = s(4)
	nop(MSTORE)
	s(4) = 32
	nop(PUSH1)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = 30477134527177681381760442260361903213988498443240746977001699517562416529408
	nop(PUSH32)
	s(5) = s(3)
	nop(DUP2)
	l(l4) = s(4)
	nop(MSTORE)
	nop(POP)
	s(3) = s(1)
	nop(DUP2)
	call(block1011(s(2),s(1),s(0), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0)))
	nop(JUMP)

block6522(s(1), s(0), g(totalInvested), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 32
	nop(PUSH1)
	s(2) = g(totalInvested)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block1155(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block6528(s(3), s(2), s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(4) = 0
	nop(PUSH1)
	s(5) = 3
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(6) = g(balances)
	nop(SLOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 256
	nop(PUSH2)
	s(6) = s(7)^s(6)
	nop(EXP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(5)= eq(s(6), s(5))
	nop(EQ)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(6) = s(5)
	nop(DUP1)
	s(7) = 6725
	nop(PUSH2)
	call(jump6528(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMPI)

jump6528(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	eq(s(6), 1 )
	call(block6725(s(5), s(4), s(3), s(2), s(1), s(0),g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))

jump6528(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	neq(s(6), 1 )
	call(block6618(s(5), s(4), s(3), s(2), s(1), s(0),g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))

block6618(s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(POP)
	s(5) = 3
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(6) = g(balances)
	nop(SLOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 256
	nop(PUSH2)
	s(6) = s(7)^s(6)
	nop(EXP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(5)= eq(s(6), s(5))
	nop(EQ)
	s(6) = s(5)
	nop(DUP1)
	call(jump6618(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump6618(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	eq(s(6), 0)
	call(block6724(s(5), s(4), s(3), s(2), s(1), s(0),g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))

jump6618(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	neq(s(6), 0)
	call(block6706(s(5), s(4), s(3), s(2), s(1), s(0),g(owner), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))

block6706(s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(POP)
	s(5) = 1
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(6) = g(teamStakesFrozen)
	nop(SLOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 256
	nop(PUSH2)
	s(6) = s(7)^s(6)
	nop(EXP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	call(block6724(s(5),s(4),s(3),s(2),s(1),s(0),g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))

block6724(s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	call(block6725(s(5),s(4),s(3),s(2),s(1),s(0),g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))

block6725(s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = s(5)
	nop(DUP1)
	s(7) = 6837
	nop(PUSH2)
	call(jump6725(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMPI)

jump6725(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	eq(s(6), 1 )
	call(block6837(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller))

jump6725(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	neq(s(6), 1 )
	call(block6731(s(5), s(4), s(3), s(2), s(1), s(0),g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))

block6731(s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(POP)
	s(5) = 4
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(6) = g(owner)
	nop(SLOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 256
	nop(PUSH2)
	s(6) = s(7)^s(6)
	nop(EXP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(5)= eq(s(6), s(5))
	nop(EQ)
	s(6) = s(5)
	nop(DUP1)
	call(jump6731(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump6731(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	eq(s(6), 0)
	call(block6836(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller))

jump6731(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	neq(s(6), 0)
	call(block6819(s(5), s(4), s(3), s(2), s(1), s(0),g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))

block6819(s(5), s(4), s(3), s(2), s(1), s(0), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(POP)
	s(5) = 1
	nop(PUSH1)
	s(6) = s(5)
	nop(DUP1)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(6) = g(fundariaStakesFrozen)
	nop(SLOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 256
	nop(PUSH2)
	s(6) = s(7)^s(6)
	nop(EXP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	call(block6836(s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))

block6836(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	call(block6837(s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))

block6837(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	call(jump6837(s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump6837(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	neq(s(5), 0)
	call(block6848(s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller))

jump6837(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	eq(s(5), 0)
	call(block6844(s(4), s(3), s(2), s(1), s(0)))

block6844(s(4), s(3), s(2), s(1), s(0))=>
	s(5) = 0
	nop(PUSH1)
	s(6) = s(5)
	nop(DUP1)
	nop(REVERT)

block6848(s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(5) = s(3)
	nop(DUP2)
	s(6) = 5
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = caller
	nop(CALLER)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	l(l6) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(6)
	nop(DUP2)
	l(l7) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(2)
	nop(DUP6)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	l(l6) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(6)
	nop(DUP2)
	l(l7) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	s(7) = s(5)
	nop(DUP2)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	gs(1) = s(7)
	gs(2) = s(6)
	nop(SSTORE)
	nop(POP)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = 63486140976153616755203102783360879283472101686154884697241723088393386309925
	nop(PUSH32)
	s(8) = s(3)
	nop(DUP5)
	s(9) = 64
	nop(PUSH1)
	s(9) = l(l0)
	nop(MLOAD)
	s(10) = s(9)
	nop(DUP1)
	s(11) = s(8)
	nop(DUP3)
	s(12) = s(10)
	nop(DUP2)
	l(l1) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(9) = 64
	nop(PUSH1)
	s(9) = l(l0)
	nop(MLOAD)
	s(10) = s(9)
	nop(DUP1)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	s(9) = s(10)-s(9)
	nop(SUB)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	nop(LOG3)
	s(5) = 1
	nop(PUSH1)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	s(5) = s(1)
	s(1) = s(4)
	s(4) = s(5)
	nop(SWAP3)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block1252(s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block7088(s(1), s(0), g(allowedAmountToTransferToPool), l(l7), l(l6), caller)=>
	nop(JUMPDEST)
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 1
	nop(PUSH1)
	s(5) = 19
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = caller
	nop(CALLER)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l6) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	l(l7) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(5) = sha3(s(6), s(5))
	nop(SHA3)
	s(6) = 0
	nop(PUSH1)
	s(7) = 256
	nop(PUSH2)
	s(6) = s(7)^s(6)
	nop(EXP)
	s(7) = s(5)
	nop(DUP2)
	gl = s(7)
	s(7) = fresh(0)
	nop(SLOAD)
	s(8) = s(6)
	nop(DUP2)
	s(9) = 255
	nop(PUSH1)
	s(8) = s(9)*s(8)
	nop(MUL)
	s(8) = not(s(8))
	nop(NOT)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(4)
	nop(DUP4)
	s(8)= eq(s(8), 0)
	nop(ISZERO)
	s(8)= eq(s(8), 0)
	nop(ISZERO)
	s(7) = s(8)*s(7)
	nop(MUL)
	s(6) = or(s(7), s(6))
	nop(OR)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	gs(1) = s(6)
	gs(2) = s(5)
	nop(SSTORE)
	nop(POP)
	s(4) = 26
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	nop(DUP2)
	l(l6) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(4)
	nop(DUP2)
	l(l7) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = 0
	nop(PUSH1)
	s(4) = sha3(s(5), s(4))
	nop(SHA3)
	s(5) = 4
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = 0
	nop(PUSH1)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	gl = s(5)
	s(5) = fresh(1)
	nop(SLOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(4) = s(5)/s(4)
	nop(DIV)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	s(4) = 0
	nop(PUSH1)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	call(jump7088(s(5),s(4),s(3),s(2),s(1),s(0),g(allowedAmountToTransferToPool), l(l7), l(l6), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump7088(s(5), s(4), s(3), s(2), s(1), s(0), g(allowedAmountToTransferToPool), l(l7), l(l6), caller)=>
	eq(s(5), s(4))
	call(block8661(s(3), s(2), s(1), s(0),g(allowedAmountToTransferToPool), l(l7), l(l6), caller))

jump7088(s(5), s(4), s(3), s(2), s(1), s(0), g(allowedAmountToTransferToPool), l(l7), l(l6), caller)=>
	neq(s(5), s(4))
	call(block7335(s(3), s(2), s(1), s(0),g(allowedAmountToTransferToPool), l(l7), l(l6), caller))

jump7335(s(5), s(4), s(3), s(2), s(1), s(0), g(allowedAmountToTransferToPool), l(l7), l(l6), caller)=>
	lt(s(5), s(4))
	call(block8002(s(3), s(2), s(1), s(0),g(allowedAmountToTransferToPool), l(l7), l(l6), caller))

jump7335(s(5), s(4), s(3), s(2), s(1), s(0), g(allowedAmountToTransferToPool), l(l7), l(l6), caller)=>
	geq(s(5), s(4))
	call(block7476(s(3), s(2), s(1), s(0),g(allowedAmountToTransferToPool), l(l7), l(l6), caller))

block7335(s(3), s(2), s(1), s(0), g(allowedAmountToTransferToPool), l(l7), l(l6), caller)=>
	s(4) = 37
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = s(2)
	nop(DUP4)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	nop(DUP2)
	l(l6) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(4)
	nop(DUP2)
	l(l7) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = 0
	nop(PUSH1)
	s(4) = sha3(s(5), s(4))
	nop(SHA3)
	s(5) = 3
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	gl = s(4)
	s(4) = fresh(0)
	nop(SLOAD)
	s(5) = 26
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = caller
	nop(CALLER)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l6) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	l(l7) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(5) = sha3(s(6), s(5))
	nop(SHA3)
	s(6) = 3
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	gl = s(5)
	s(5) = fresh(1)
	nop(SLOAD)
	call(jump7335(s(5),s(4),s(3),s(2),s(1),s(0),g(allowedAmountToTransferToPool), l(l7), l(l6), caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block7476(s(3), s(2), s(1), s(0), g(allowedAmountToTransferToPool), l(l7), l(l6), caller)=>
	s(4) = 37
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = s(2)
	nop(DUP4)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	nop(DUP2)
	l(l6) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(4)
	nop(DUP2)
	l(l7) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = 0
	nop(PUSH1)
	s(4) = sha3(s(5), s(4))
	nop(SHA3)
	s(5) = 3
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	gl = s(4)
	s(4) = fresh(0)
	nop(SLOAD)
	s(5) = 26
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = caller
	nop(CALLER)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l6) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	l(l7) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(5) = sha3(s(6), s(5))
	nop(SHA3)
	s(6) = 3
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	gl = s(5)
	s(5) = fresh(1)
	nop(SLOAD)
	s(4) = s(5)-s(4)
	nop(SUB)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	nop(POP)
	s(4) = 0
	nop(PUSH1)
	s(5) = 37
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(2)
	nop(DUP5)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l6) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	l(l7) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(5) = sha3(s(6), s(5))
	nop(SHA3)
	s(6) = 3
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	nop(DUP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	gs(1) = s(6)
	gs(2) = s(5)
	nop(SSTORE)
	nop(POP)
	s(4) = s(3)
	nop(DUP1)
	s(5) = 37
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(2)
	nop(DUP5)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l6) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	l(l7) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(5) = sha3(s(6), s(5))
	nop(SHA3)
	s(6) = 1
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	gl = s(5)
	s(5) = fresh(2)
	nop(SLOAD)
	call(jump7476(s(5),s(4),s(3),s(2),s(1),s(0),g(allowedAmountToTransferToPool), l(l7), l(l6), caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump7476(s(5), s(4), s(3), s(2), s(1), s(0), g(allowedAmountToTransferToPool), l(l7), l(l6), caller)=>
	lt(s(5), s(4))
	call(block7924(s(3), s(2), s(1), s(0),g(allowedAmountToTransferToPool), l(l7), l(l6), caller))

jump7476(s(5), s(4), s(3), s(2), s(1), s(0), g(allowedAmountToTransferToPool), l(l7), l(l6), caller)=>
	geq(s(5), s(4))
	call(block7760(s(3), s(2), s(1), s(0),g(allowedAmountToTransferToPool), l(l7), l(l6), caller))

block7760(s(3), s(2), s(1), s(0), g(allowedAmountToTransferToPool), l(l7), l(l6), caller)=>
	s(4) = s(3)
	nop(DUP1)
	s(5) = 37
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(2)
	nop(DUP5)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l6) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	l(l7) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(5) = sha3(s(6), s(5))
	nop(SHA3)
	s(6) = 1
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(4)
	nop(DUP3)
	s(8) = s(5)
	nop(DUP3)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	s(7) = s(8)-s(7)
	nop(SUB)
	s(8) = s(4)
	s(4) = s(7)
	s(7) = s(8)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(6) = s(4)
	nop(DUP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	gs(1) = s(6)
	gs(2) = s(5)
	nop(SSTORE)
	nop(POP)
	s(4) = s(3)
	nop(DUP1)
	s(5) = 37
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(2)
	nop(DUP5)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l6) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	l(l7) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(5) = sha3(s(6), s(5))
	nop(SHA3)
	s(6) = 2
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(4)
	nop(DUP3)
	s(8) = s(5)
	nop(DUP3)
	gl = s(8)
	s(8) = fresh(1)
	nop(SLOAD)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(4)
	s(4) = s(7)
	s(7) = s(8)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(6) = s(4)
	nop(DUP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	gs(1) = s(6)
	gs(2) = s(5)
	nop(SSTORE)
	nop(POP)
	s(4) = 7997
	nop(PUSH2)
	call(block7997(s(3),s(2),s(1),s(0),g(allowedAmountToTransferToPool), l(l7), l(l6), caller))
	nop(JUMP)

block7924(s(3), s(2), s(1), s(0), g(allowedAmountToTransferToPool), l(l7), l(l6), caller)=>
	nop(JUMPDEST)
	s(4) = 0
	nop(PUSH1)
	s(5) = 37
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(2)
	nop(DUP5)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l6) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	l(l7) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(5) = sha3(s(6), s(5))
	nop(SHA3)
	s(6) = 1
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	nop(DUP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	gs(1) = s(6)
	gs(2) = s(5)
	nop(SSTORE)
	nop(POP)
	call(block7997(s(3),s(2),s(1),s(0),g(allowedAmountToTransferToPool), l(l7), l(l6), caller))

block7997(s(3), s(2), s(1), s(0), g(allowedAmountToTransferToPool), l(l7), l(l6), caller)=>
	nop(JUMPDEST)
	s(4) = 8660
	nop(PUSH2)
	call(block8660(s(3),s(2),s(1),s(0),g(allowedAmountToTransferToPool), l(l7), l(l6), caller))
	nop(JUMP)

block8002(s(3), s(2), s(1), s(0), g(allowedAmountToTransferToPool), l(l7), l(l6), caller)=>
	nop(JUMPDEST)
	s(4) = 26
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	nop(DUP2)
	l(l6) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(4)
	nop(DUP2)
	l(l7) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = 0
	nop(PUSH1)
	s(4) = sha3(s(5), s(4))
	nop(SHA3)
	s(5) = 3
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	gl = s(4)
	s(4) = fresh(0)
	nop(SLOAD)
	s(5) = 37
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(2)
	nop(DUP5)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l6) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	l(l7) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(5) = sha3(s(6), s(5))
	nop(SHA3)
	s(6) = 3
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(4)
	nop(DUP3)
	s(8) = s(5)
	nop(DUP3)
	gl = s(8)
	s(8) = fresh(1)
	nop(SLOAD)
	s(7) = s(8)-s(7)
	nop(SUB)
	s(8) = s(4)
	s(4) = s(7)
	s(7) = s(8)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(6) = s(4)
	nop(DUP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	gs(1) = s(6)
	gs(2) = s(5)
	nop(SSTORE)
	nop(POP)
	s(4) = 26
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	nop(DUP2)
	l(l6) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(4)
	nop(DUP2)
	l(l7) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = 0
	nop(PUSH1)
	s(4) = sha3(s(5), s(4))
	nop(SHA3)
	s(5) = 3
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	gl = s(4)
	s(4) = fresh(2)
	nop(SLOAD)
	s(5) = 37
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(2)
	nop(DUP5)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l6) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	l(l7) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(5) = sha3(s(6), s(5))
	nop(SHA3)
	s(6) = 1
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	gl = s(5)
	s(5) = fresh(3)
	nop(SLOAD)
	call(jump8002(s(5),s(4),s(3),s(2),s(1),s(0),g(allowedAmountToTransferToPool), l(l7), l(l6), caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump8002(s(5), s(4), s(3), s(2), s(1), s(0), g(allowedAmountToTransferToPool), l(l7), l(l6), caller)=>
	lt(s(5), s(4))
	call(block8586(s(3), s(2), s(1), s(0),g(allowedAmountToTransferToPool), l(l7), l(l6), caller))

jump8002(s(5), s(4), s(3), s(2), s(1), s(0), g(allowedAmountToTransferToPool), l(l7), l(l6), caller)=>
	geq(s(5), s(4))
	call(block8290(s(3), s(2), s(1), s(0),g(allowedAmountToTransferToPool), l(l7), l(l6), caller))

block8290(s(3), s(2), s(1), s(0), g(allowedAmountToTransferToPool), l(l7), l(l6), caller)=>
	s(4) = 26
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	nop(DUP2)
	l(l6) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(4)
	nop(DUP2)
	l(l7) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = 0
	nop(PUSH1)
	s(4) = sha3(s(5), s(4))
	nop(SHA3)
	s(5) = 3
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	gl = s(4)
	s(4) = fresh(0)
	nop(SLOAD)
	s(5) = 37
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(2)
	nop(DUP5)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l6) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	l(l7) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(5) = sha3(s(6), s(5))
	nop(SHA3)
	s(6) = 1
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(4)
	nop(DUP3)
	s(8) = s(5)
	nop(DUP3)
	gl = s(8)
	s(8) = fresh(1)
	nop(SLOAD)
	s(7) = s(8)-s(7)
	nop(SUB)
	s(8) = s(4)
	s(4) = s(7)
	s(7) = s(8)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(6) = s(4)
	nop(DUP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	gs(1) = s(6)
	gs(2) = s(5)
	nop(SSTORE)
	nop(POP)
	s(4) = 26
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	nop(DUP2)
	l(l6) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(4)
	nop(DUP2)
	l(l7) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = 0
	nop(PUSH1)
	s(4) = sha3(s(5), s(4))
	nop(SHA3)
	s(5) = 3
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	gl = s(4)
	s(4) = fresh(2)
	nop(SLOAD)
	s(5) = 37
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(2)
	nop(DUP5)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l6) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	l(l7) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(5) = sha3(s(6), s(5))
	nop(SHA3)
	s(6) = 2
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(4)
	nop(DUP3)
	s(8) = s(5)
	nop(DUP3)
	gl = s(8)
	s(8) = fresh(3)
	nop(SLOAD)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(4)
	s(4) = s(7)
	s(7) = s(8)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(6) = s(4)
	nop(DUP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	gs(1) = s(6)
	gs(2) = s(5)
	nop(SSTORE)
	nop(POP)
	s(4) = 8659
	nop(PUSH2)
	call(block8659(s(3),s(2),s(1),s(0),g(allowedAmountToTransferToPool), l(l7), l(l6), caller))
	nop(JUMP)

block8586(s(3), s(2), s(1), s(0), g(allowedAmountToTransferToPool), l(l7), l(l6), caller)=>
	nop(JUMPDEST)
	s(4) = 0
	nop(PUSH1)
	s(5) = 37
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(2)
	nop(DUP5)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l6) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	l(l7) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(5) = sha3(s(6), s(5))
	nop(SHA3)
	s(6) = 1
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	nop(DUP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	gs(1) = s(6)
	gs(2) = s(5)
	nop(SSTORE)
	nop(POP)
	call(block8659(s(3),s(2),s(1),s(0),g(allowedAmountToTransferToPool), l(l7), l(l6), caller))

block8659(s(3), s(2), s(1), s(0), g(allowedAmountToTransferToPool), l(l7), l(l6), caller)=>
	nop(JUMPDEST)
	call(block8660(s(3),s(2),s(1),s(0),g(allowedAmountToTransferToPool), l(l7), l(l6), caller))

block8660(s(3), s(2), s(1), s(0), g(allowedAmountToTransferToPool), l(l7), l(l6), caller)=>
	nop(JUMPDEST)
	call(block8661(s(3),s(2),s(1),s(0),g(allowedAmountToTransferToPool), l(l7), l(l6), caller))

block8661(s(3), s(2), s(1), s(0), g(allowedAmountToTransferToPool), l(l7), l(l6), caller)=>
	nop(JUMPDEST)
	s(4) = 26
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	nop(DUP2)
	l(l6) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(4)
	nop(DUP2)
	l(l7) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = 0
	nop(PUSH1)
	s(4) = sha3(s(5), s(4))
	nop(SHA3)
	s(5) = 1
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	gl = s(4)
	s(4) = fresh(0)
	nop(SLOAD)
	s(5) = 20
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(4)
	nop(DUP3)
	s(8) = s(5)
	nop(DUP3)
	s(8) = g(allowedAmountToTransferToPool)
	nop(SLOAD)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(4)
	s(4) = s(7)
	s(7) = s(8)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(6) = s(4)
	nop(DUP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	g(allowedAmountToTransferToPool) = s(5)
	nop(SSTORE)
	nop(POP)
	nop(POP)
	nop(POP)
	call(block1299(s(0)))
	nop(JUMP)

block8747(s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 19
	nop(PUSH1)
	s(4) = 32
	nop(PUSH1)
	l(l7) = s(3)
	nop(MSTORE)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 0
	nop(PUSH1)
	l(l6) = s(3)
	nop(MSTORE)
	s(3) = 64
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(3) = sha3(s(4), s(3))
	nop(SHA3)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	gl = s(3)
	s(3) = fresh(0)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 255
	nop(PUSH1)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block1366(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block8779(s(1), s(0), g(pool), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 18
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(pool)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block1413(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block8817(s(1), s(0), g(totalSupply), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 0
	nop(PUSH1)
	s(2) = g(totalSupply)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block1500(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block8823(s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(5) = 0
	nop(PUSH1)
	s(6) = s(5)
	nop(DUP1)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(3)
	nop(DUP4)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	call(jump8823(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump8823(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	neq(s(7), s(6))
	call(block8884(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller))

jump8823(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	eq(s(7), s(6))
	call(block8880(s(5), s(4), s(3), s(2), s(1), s(0)))

block8880(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

jump8884(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	leq(s(7), s(6))
	call(block8962(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller))

jump8884(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	gt(s(7), s(6))
	call(block8958(s(5), s(4), s(3), s(2), s(1), s(0)))

block8884(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = 2
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(2)
	nop(DUP6)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	l(l6) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(6)
	nop(DUP2)
	l(l7) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	gl = s(6)
	s(6) = fresh(0)
	nop(SLOAD)
	s(7) = s(4)
	nop(DUP3)
	call(jump8884(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block8958(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

block8962(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = 5
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(2)
	nop(DUP6)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	l(l6) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(6)
	nop(DUP2)
	l(l7) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	s(7) = 0
	nop(PUSH1)
	s(8) = caller
	nop(CALLER)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	l(l6) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(6)
	nop(DUP2)
	l(l7) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	gl = s(6)
	s(6) = fresh(0)
	nop(SLOAD)
	s(7) = s(4)
	nop(DUP3)
	call(jump8962(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump8962(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	leq(s(7), s(6))
	call(block9101(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller))

jump8962(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	gt(s(7), s(6))
	call(block9097(s(5), s(4), s(3), s(2), s(1), s(0)))

block9097(s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	nop(REVERT)

block9101(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = 9183
	nop(PUSH2)
	s(7) = s(4)
	nop(DUP3)
	s(8) = 2
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(2)
	nop(DUP8)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l6) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l7) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	s(9) = 22370
	nop(PUSH2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(7)
	s(7) = s(9)
	s(9) = s(10)
	nop(SWAP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 4294967295
	nop(PUSH4)
	s(9) = and(s(10), s(9))
	nop(AND)
	call(block22370_3(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMP)

block9183(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = 2
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(2)
	nop(DUP7)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l6) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l7) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = s(6)
	nop(DUP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	s(6) = 9332
	nop(PUSH2)
	s(7) = s(4)
	nop(DUP3)
	s(8) = 2
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(3)
	nop(DUP7)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l6) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l7) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	s(9) = 22395
	nop(PUSH2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(7)
	s(7) = s(9)
	s(9) = s(10)
	nop(SWAP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 4294967295
	nop(PUSH4)
	s(9) = and(s(10), s(9))
	nop(AND)
	call(block22395_1(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMP)

block9332(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = 2
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(3)
	nop(DUP6)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l6) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l7) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = s(6)
	nop(DUP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	s(6) = 9542
	nop(PUSH2)
	s(7) = s(4)
	nop(DUP3)
	s(8) = 5
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(2)
	nop(DUP8)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l6) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l7) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l6) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l7) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	s(9) = 22370
	nop(PUSH2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(7)
	s(7) = s(9)
	s(9) = s(10)
	nop(SWAP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 4294967295
	nop(PUSH4)
	s(9) = and(s(10), s(9))
	nop(AND)
	call(block22370_4(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMP)

block9542(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = 5
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(2)
	nop(DUP7)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l6) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l7) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l6) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l7) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = s(6)
	nop(DUP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	s(6) = s(3)
	nop(DUP3)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(2)
	nop(DUP5)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 100389287136786176327247604509743168900146139575972864366142685224231313322991
	nop(PUSH32)
	s(9) = s(4)
	nop(DUP5)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = s(11)
	nop(DUP2)
	l(l1) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(10) = s(11)-s(10)
	nop(SUB)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	nop(LOG3)
	s(6) = 1
	nop(PUSH1)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	nop(POP)
	s(6) = s(1)
	s(1) = s(5)
	s(5) = s(6)
	nop(SWAP4)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	nop(POP)
	call(block1629(s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

jump9782(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(12), 0)
	call(block9814(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump9782(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(12), 0)
	call(block9813(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block9782(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(9) = 0
	nop(PUSH1)
	s(10) = 100
	nop(PUSH1)
	s(11) = 7
	nop(PUSH1)
	s(11) = g(usdPerEther)
	nop(SLOAD)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(11) = 1000000000000000000
	nop(PUSH8)
	s(12) = 34
	nop(PUSH1)
	s(12) = g(saleCap)
	nop(SLOAD)
	s(13) = s(8)
	nop(DUP5)
	s(12) = s(13)*s(12)
	nop(MUL)
	s(11) = s(12)*s(11)
	nop(MUL)
	s(12) = s(10)
	nop(DUP2)
	call(jump9782(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block9813(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block9814(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(10) = s(11)/s(10)
	nop(DIV)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	nop(POP)
	s(10) = s(7)
	s(7) = s(9)
	s(9) = s(10)
	nop(SWAP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	nop(POP)
	call(block5362(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block9822(s(1), s(0), g(totalWithdrawn), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 33
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(totalWithdrawn)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 255
	nop(PUSH1)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block1741(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block9841(s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 0
	nop(PUSH1)
	s(3) = s(1)
	nop(DUP2)
	call(block1790(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block9846(s(1), s(0), g(fundariaShare), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 15
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(fundariaShare)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 255
	nop(PUSH1)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block1839(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block9865(s(2), s(1), s(0), g(balances), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(3) = 3
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(4) = g(balances)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = caller
	nop(CALLER)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	call(jump9865(s(4),s(3),s(2),s(1),s(0),g(balances), l(l7), l(l6), l(l1), l(l0), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump9865(s(4), s(3), s(2), s(1), s(0), g(balances), l(l7), l(l6), l(l1), l(l0), caller)=>
	eq(s(4), s(3))
	call(block9957(s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0)))

jump9865(s(4), s(3), s(2), s(1), s(0), g(balances), l(l7), l(l6), l(l1), l(l0), caller)=>
	neq(s(4), s(3))
	call(block9953(s(2), s(1), s(0)))

block9953(s(2), s(1), s(0))=>
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	nop(REVERT)

block9957(s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 1
	nop(PUSH1)
	s(4) = 37
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = s(2)
	nop(DUP4)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	nop(DUP2)
	l(l6) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(4)
	nop(DUP2)
	l(l7) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = 0
	nop(PUSH1)
	s(4) = sha3(s(5), s(4))
	nop(SHA3)
	s(5) = 0
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = 0
	nop(PUSH1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	nop(DUP2)
	gl = s(6)
	s(6) = fresh(0)
	nop(SLOAD)
	s(7) = s(5)
	nop(DUP2)
	s(8) = 255
	nop(PUSH1)
	s(7) = s(8)*s(7)
	nop(MUL)
	s(7) = not(s(7))
	nop(NOT)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(3)
	nop(DUP4)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	s(7)= eq(s(7), 0)
	nop(ISZERO)
	s(6) = s(7)*s(6)
	nop(MUL)
	s(5) = or(s(6), s(5))
	nop(OR)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	gs(1) = s(5)
	gs(2) = s(4)
	nop(SSTORE)
	nop(POP)
	s(3) = 74690229460080076773977143971028755641734768986340892270864022976825899138355
	nop(PUSH32)
	s(4) = s(2)
	nop(DUP2)
	s(5) = 64
	nop(PUSH1)
	s(5) = l(l0)
	nop(MLOAD)
	s(6) = s(5)
	nop(DUP1)
	s(7) = s(4)
	nop(DUP3)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l1) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(5) = 64
	nop(PUSH1)
	s(5) = l(l0)
	nop(MLOAD)
	s(6) = s(5)
	nop(DUP1)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	s(5) = s(6)-s(5)
	nop(SUB)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(LOG1)
	nop(POP)
	call(block1932(s(0)))
	nop(JUMP)

block10150(s(1), s(0), g(supplier), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 27
	nop(PUSH1)
	s(2) = g(supplier)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block1955(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block10156(s(1), s(0), g(contractCreatedTimestamp), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 17
	nop(PUSH1)
	s(2) = g(contractCreatedTimestamp)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block1998(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block10162(s(1), s(0), g(distributedTeamStakes), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 13
	nop(PUSH1)
	s(2) = g(distributedTeamStakes)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block2041(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block10168(s(2), s(1), s(0), l(l7), l(l6), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 26
	nop(PUSH1)
	s(4) = 32
	nop(PUSH1)
	l(l7) = s(3)
	nop(MSTORE)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 0
	nop(PUSH1)
	l(l6) = s(3)
	nop(MSTORE)
	s(3) = 64
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(3) = sha3(s(4), s(3))
	nop(SHA3)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(POP)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 0
	nop(PUSH1)
	s(3) = s(4)+s(3)
	nop(ADD)
	gl = s(3)
	s(3) = fresh(0)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = 1
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	gl = s(4)
	s(4) = fresh(1)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = s(4)
	nop(DUP1)
	s(6) = 2
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	gl = s(5)
	s(5) = fresh(2)
	nop(SLOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(5)
	nop(DUP1)
	s(7) = 3
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	gl = s(6)
	s(6) = fresh(3)
	nop(SLOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(6)
	nop(DUP1)
	s(8) = 4
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gl = s(8)
	s(8) = fresh(4)
	nop(SLOAD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 256
	nop(PUSH2)
	s(8) = s(9)^s(8)
	nop(EXP)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(7) = s(8)/s(7)
	nop(DIV)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	nop(POP)
	s(7) = s(1)
	nop(DUP6)
	call(block2128(s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0)))
	nop(JUMP)

block10254(s(1), s(0), g(usdPerEther), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 7
	nop(PUSH1)
	s(2) = g(usdPerEther)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block2243(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block10260(s(1), s(0), g(distributedSaleStakes), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 31
	nop(PUSH1)
	s(2) = g(distributedSaleStakes)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block2286(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

jump10266(s(5), s(4), s(3), s(2), s(1), s(0), g(saleShare), g(balances), l(l6), l(l4), l(l2), l(l1), l(l0), caller)=>
	eq(s(5), s(4))
	call(block10358(s(3), s(2), s(1), s(0),g(saleShare), l(l6), l(l4), l(l2), l(l1), l(l0)))

jump10266(s(5), s(4), s(3), s(2), s(1), s(0), g(saleShare), g(balances), l(l6), l(l4), l(l2), l(l1), l(l0), caller)=>
	neq(s(5), s(4))
	call(block10354(s(3), s(2), s(1), s(0)))

block10266(s(3), s(2), s(1), s(0), g(saleShare), g(balances), l(l6), l(l4), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(4) = 3
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(5) = g(balances)
	nop(SLOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(4) = s(5)/s(4)
	nop(DIV)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(5) = caller
	nop(CALLER)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	call(jump10266(s(5),s(4),s(3),s(2),s(1),s(0),g(saleShare), g(balances), l(l6), l(l4), l(l2), l(l1), l(l0), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block10354(s(3), s(2), s(1), s(0))=>
	s(4) = 0
	nop(PUSH1)
	s(5) = s(4)
	nop(DUP1)
	nop(REVERT)

block10358(s(3), s(2), s(1), s(0), g(saleShare), l(l6), l(l4), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(4) = 38542286264638929965756872400505687355306226076748146400959412412322190655518
	nop(PUSH32)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 35
	nop(PUSH1)
	s(7) = s(2)
	nop(DUP5)
	s(8) = 255
	nop(PUSH1)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	s(8) = g(saleShare)
	nop(SLOAD)
	s(9) = s(7)
	nop(DUP2)
	call(jump10358(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(saleShare), l(l6), l(l4), l(l2), l(l1), l(l0)))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump10358(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(saleShare), l(l6), l(l4), l(l2), l(l1), l(l0))=>
	lt(s(9), s(8))
	call(block10410(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(saleShare), l(l6), l(l4), l(l2), l(l1), l(l0)))

jump10358(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(saleShare), l(l6), l(l4), l(l2), l(l1), l(l0))=>
	geq(s(9), s(8))
	call(block10409(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block10409(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump10410(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(saleShare), l(l6), l(l4), l(l2), l(l1), l(l0))=>
	lt(s(8), s(7))
	call(block10482(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l6)))

jump10410(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(saleShare), l(l6), l(l4), l(l2), l(l1), l(l0))=>
	geq(s(8), s(7))
	call(block10481(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block10410(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(saleShare), l(l6), l(l4), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 0
	nop(PUSH1)
	l(l6) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(6) = s(7)+s(6)
	nop(ADD)
	gl = s(6)
	s(6) = fresh(0)
	nop(SLOAD)
	s(7) = s(3)
	nop(DUP4)
	s(8) = 64
	nop(PUSH1)
	s(8) = l(l0)
	nop(MLOAD)
	s(9) = s(8)
	nop(DUP1)
	s(10) = s(5)
	nop(DUP5)
	s(11) = 255
	nop(PUSH1)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 255
	nop(PUSH1)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(6)
	nop(DUP4)
	s(11) = s(9)
	nop(DUP2)
	l(l4) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(9)
	nop(DUP2)
	l(l2) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(5)
	s(5) = s(9)
	s(9) = s(10)
	nop(SWAP4)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(6) = 64
	nop(PUSH1)
	s(6) = l(l0)
	nop(MLOAD)
	s(7) = s(6)
	nop(DUP1)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	s(6) = s(7)-s(6)
	nop(SUB)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	nop(LOG1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = 35
	nop(PUSH1)
	s(6) = s(2)
	nop(DUP4)
	s(7) = 255
	nop(PUSH1)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	nop(DUP2)
	s(7) = g(saleShare)
	nop(SLOAD)
	s(8) = s(6)
	nop(DUP2)
	call(jump10410(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(saleShare), l(l6), l(l4), l(l2), l(l1), l(l0)))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block10481(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block10482(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l6))=>
	nop(JUMPDEST)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 0
	nop(PUSH1)
	l(l6) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	nop(DUP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	gs(1) = s(6)
	gs(2) = s(5)
	nop(SSTORE)
	nop(POP)
	nop(POP)
	nop(POP)
	call(block2364(s(0)))
	nop(JUMP)

block10500(s(2), s(1), s(0), g(poolCapUSD), g(balances), l(l4), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(3) = 3
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(4) = g(balances)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = caller
	nop(CALLER)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	call(jump10500(s(4),s(3),s(2),s(1),s(0),g(poolCapUSD), g(balances), l(l4), l(l1), l(l0), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump10500(s(4), s(3), s(2), s(1), s(0), g(poolCapUSD), g(balances), l(l4), l(l1), l(l0), caller)=>
	eq(s(4), s(3))
	call(block10592(s(2), s(1), s(0),g(poolCapUSD), l(l4), l(l1), l(l0)))

jump10500(s(4), s(3), s(2), s(1), s(0), g(poolCapUSD), g(balances), l(l4), l(l1), l(l0), caller)=>
	neq(s(4), s(3))
	call(block10588(s(2), s(1), s(0)))

block10588(s(2), s(1), s(0))=>
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	nop(REVERT)

block10592(s(2), s(1), s(0), g(poolCapUSD), l(l4), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 114194013262987755910992578155860030329241928304966195380937679144418034219059
	nop(PUSH32)
	s(4) = 6
	nop(PUSH1)
	s(4) = g(poolCapUSD)
	nop(SLOAD)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 64
	nop(PUSH1)
	s(6) = l(l0)
	nop(MLOAD)
	s(7) = s(6)
	nop(DUP1)
	s(8) = s(4)
	nop(DUP4)
	s(9) = s(7)
	nop(DUP2)
	l(l1) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(5)
	nop(DUP3)
	s(9) = s(7)
	nop(DUP2)
	l(l4) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(4)
	s(4) = s(7)
	s(7) = s(8)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	nop(POP)
	s(5) = 64
	nop(PUSH1)
	s(5) = l(l0)
	nop(MLOAD)
	s(6) = s(5)
	nop(DUP1)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	s(5) = s(6)-s(5)
	nop(SUB)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(LOG1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 6
	nop(PUSH1)
	s(5) = s(3)
	nop(DUP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	g(poolCapUSD) = s(4)
	nop(SSTORE)
	nop(POP)
	nop(POP)
	call(block2409(s(0)))
	nop(JUMP)

block10667(s(1), s(0), g(owner), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 30
	nop(PUSH1)
	s(2) = g(owner)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block2432(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block10673(s(1), s(0), g(allowedAmountToTransferToPool), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 20
	nop(PUSH1)
	s(2) = g(allowedAmountToTransferToPool)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block2475(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

jump10679(s(3), s(2), s(1), s(0), g(lastStakePriceUSCents), g(balances), caller)=>
	eq(s(3), s(2))
	call(block10771(s(1), s(0),g(lastStakePriceUSCents)))

jump10679(s(3), s(2), s(1), s(0), g(lastStakePriceUSCents), g(balances), caller)=>
	neq(s(3), s(2))
	call(block10767(s(1), s(0)))

block10679(s(1), s(0), g(lastStakePriceUSCents), g(balances), caller)=>
	nop(JUMPDEST)
	s(2) = 3
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(balances)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = caller
	nop(CALLER)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	call(jump10679(s(3),s(2),s(1),s(0),g(lastStakePriceUSCents), g(balances), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block10767(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block10771(s(1), s(0), g(lastStakePriceUSCents))=>
	nop(JUMPDEST)
	s(2) = 0
	nop(PUSH1)
	s(3) = 36
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	nop(DUP2)
	s(5) = g(lastStakePriceUSCents)
	nop(SLOAD)
	s(6) = s(4)
	nop(DUP2)
	s(7) = 255
	nop(PUSH1)
	s(6) = s(7)*s(6)
	nop(MUL)
	s(6) = not(s(6))
	nop(NOT)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	nop(DUP4)
	s(6)= eq(s(6), 0)
	nop(ISZERO)
	s(6)= eq(s(6), 0)
	nop(ISZERO)
	s(5) = s(6)*s(5)
	nop(MUL)
	s(4) = or(s(5), s(4))
	nop(OR)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	g(lastStakePriceUSCents) = s(3)
	nop(SSTORE)
	nop(POP)
	call(block2518(s(0)))
	nop(JUMP)

block10800(s(1), s(0), g(distributedBountyStakes), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 23
	nop(PUSH1)
	s(2) = g(distributedBountyStakes)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block2541(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block10806(s(1), s(0), g(allowedAmountTransferedToPoolTotal), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 21
	nop(PUSH1)
	s(2) = g(allowedAmountTransferedToPoolTotal)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block2584(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block10812(s(1), s(0), g(businessPlannedPeriodEndTimestamp), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 10
	nop(PUSH1)
	s(2) = g(businessPlannedPeriodEndTimestamp)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block2627(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

jump10818(s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(3), 0)
	call(block10909(s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller))

jump10818(s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(3), 0)
	call(block10905(s(2), s(1), s(0)))

block10818(s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(3) = 37
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	l(l6) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = s(3)
	nop(DUP2)
	l(l7) = s(4)
	nop(MSTORE)
	s(4) = 32
	nop(PUSH1)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = 0
	nop(PUSH1)
	s(3) = sha3(s(4), s(3))
	nop(SHA3)
	s(4) = 0
	nop(PUSH1)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	gl = s(4)
	s(4) = fresh(0)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = 255
	nop(PUSH1)
	s(3) = and(s(4), s(3))
	nop(AND)
	call(jump10818(s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block10905(s(2), s(1), s(0))=>
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	nop(REVERT)

block10909(s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(3) = 0
	nop(PUSH1)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 26
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	nop(DUP2)
	l(l6) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(4)
	nop(DUP2)
	l(l7) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = 0
	nop(PUSH1)
	s(4) = sha3(s(5), s(4))
	nop(SHA3)
	s(5) = 4
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = 0
	nop(PUSH1)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	gl = s(5)
	s(5) = fresh(0)
	nop(SLOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(4) = s(5)/s(4)
	nop(DIV)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	call(jump10909(s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump10909(s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller)=>
	eq(s(4), s(3))
	call(block11066(s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller))

jump10909(s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller)=>
	neq(s(4), s(3))
	call(block11062(s(2), s(1), s(0)))

block11062(s(2), s(1), s(0))=>
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	nop(REVERT)

block11066(s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 26
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	nop(DUP2)
	l(l6) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(4)
	nop(DUP2)
	l(l7) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = 0
	nop(PUSH1)
	s(4) = sha3(s(5), s(4))
	nop(SHA3)
	s(5) = 4
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = 0
	nop(PUSH1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	nop(DUP2)
	gl = s(6)
	s(6) = fresh(0)
	nop(SLOAD)
	s(7) = s(5)
	nop(DUP2)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = s(8)*s(7)
	nop(MUL)
	s(7) = not(s(7))
	nop(NOT)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(3)
	nop(DUP4)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(6) = s(7)*s(6)
	nop(MUL)
	s(5) = or(s(6), s(5))
	nop(OR)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	gs(1) = s(5)
	gs(2) = s(4)
	nop(SSTORE)
	nop(POP)
	s(3) = 0
	nop(PUSH1)
	s(4) = 26
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	nop(DUP2)
	l(l6) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(4)
	nop(DUP2)
	l(l7) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = 0
	nop(PUSH1)
	s(4) = sha3(s(5), s(4))
	nop(SHA3)
	s(5) = 1
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	gl = s(4)
	s(4) = fresh(1)
	nop(SLOAD)
	call(jump11066(s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump11066(s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller)=>
	leq(s(4), s(3))
	call(block11414(s(2), s(1), s(0)))

jump11066(s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller)=>
	gt(s(4), s(3))
	call(block11271(s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller))

block11271(s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller)=>
	s(3) = 11413
	nop(PUSH2)
	s(4) = caller
	nop(CALLER)
	s(5) = 26
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = caller
	nop(CALLER)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l6) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	l(l7) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(5) = sha3(s(6), s(5))
	nop(SHA3)
	s(6) = 0
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	gl = s(5)
	s(5) = fresh(0)
	nop(SLOAD)
	s(6) = 26
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = caller
	nop(CALLER)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	l(l6) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(6)
	nop(DUP2)
	l(l7) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	s(7) = 1
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	gl = s(6)
	s(6) = fresh(1)
	nop(SLOAD)
	s(7) = 21133
	nop(PUSH2)
	call(block21133_0(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0)))
	nop(JUMP)

block11413(s(2), s(1), s(0))=>
	nop(JUMPDEST)
	call(block11414(s(2),s(1),s(0)))

block11414(s(2), s(1), s(0))=>
	nop(JUMPDEST)
	nop(POP)
	call(block2714(s(0)))
	nop(JUMP)

block11417(s(1), s(0), g(saleStartTimestamp), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 29
	nop(PUSH1)
	s(2) = g(saleStartTimestamp)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block2737(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block11423(s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(4)
	nop(DUP1)
	s(6) = 5
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = caller
	nop(CALLER)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	l(l6) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(6)
	nop(DUP2)
	l(l7) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(2)
	nop(DUP6)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	l(l6) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(6)
	nop(DUP2)
	l(l7) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	gl = s(6)
	s(6) = fresh(0)
	nop(SLOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	nop(POP)
	s(6) = s(5)
	nop(DUP1)
	s(7) = s(3)
	nop(DUP4)
	call(jump11423(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump11423(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	leq(s(7), s(6))
	call(block11696(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller))

jump11423(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	gt(s(7), s(6))
	call(block11562(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller))

block11562(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	s(6) = 0
	nop(PUSH1)
	s(7) = 5
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l6) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l7) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(2)
	nop(DUP7)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l6) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l7) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = s(6)
	nop(DUP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	s(6) = 11844
	nop(PUSH2)
	call(block11844(s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMP)

block11696(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = 11715
	nop(PUSH2)
	s(7) = s(3)
	nop(DUP4)
	s(8) = s(5)
	nop(DUP3)
	s(9) = 22370
	nop(PUSH2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(7)
	s(7) = s(9)
	s(9) = s(10)
	nop(SWAP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 4294967295
	nop(PUSH4)
	s(9) = and(s(10), s(9))
	nop(AND)
	call(block22370_5(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMP)

block11715(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(7) = 5
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l6) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l7) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(2)
	nop(DUP7)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l6) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l7) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = s(6)
	nop(DUP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	gs(1) = s(8)
	gs(2) = s(7)
	nop(SSTORE)
	nop(POP)
	call(block11844(s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))

block11844(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = s(2)
	nop(DUP4)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = caller
	nop(CALLER)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 63486140976153616755203102783360879283472101686154884697241723088393386309925
	nop(PUSH32)
	s(9) = 5
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = caller
	nop(CALLER)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l6) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	l(l7) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(2)
	nop(DUP9)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l6) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	l(l7) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	gl = s(9)
	s(9) = fresh(0)
	nop(SLOAD)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = s(11)
	nop(DUP2)
	l(l1) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(10) = s(11)-s(10)
	nop(SUB)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	nop(LOG3)
	s(6) = 1
	nop(PUSH1)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(5) = s(1)
	s(1) = s(4)
	s(4) = s(5)
	nop(SWAP3)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block2834(s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block12080(s(1), s(0), g(poolCapUSD), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 6
	nop(PUSH1)
	s(2) = g(poolCapUSD)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block2881(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block12086(s(1), s(0), g(teamCap), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 11
	nop(PUSH1)
	s(2) = g(teamCap)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block2924(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block12092(s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 0
	nop(PUSH1)
	s(4) = 2
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = s(2)
	nop(DUP4)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	nop(DUP2)
	l(l6) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(4)
	nop(DUP2)
	l(l7) = s(5)
	nop(MSTORE)
	s(5) = 32
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	s(5) = 0
	nop(PUSH1)
	s(4) = sha3(s(5), s(4))
	nop(SHA3)
	gl = s(4)
	s(4) = fresh(0)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	nop(POP)
	s(4) = s(1)
	s(1) = s(3)
	s(3) = s(4)
	nop(SWAP2)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(POP)
	call(block3011(s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block12165(s(1), s(0), g(fundariaStakesFrozen), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 1
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(fundariaStakesFrozen)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 255
	nop(PUSH1)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block3054(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block12183(s(1), s(0), g(businessPlannedPeriodEndTimestamp), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), caller, timestamp)=>
	nop(JUMPDEST)
	s(2) = 3
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(balances)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = caller
	nop(CALLER)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	call(jump12183(s(3),s(2),s(1),s(0),g(businessPlannedPeriodEndTimestamp), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), caller, timestamp))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump12183(s(3), s(2), s(1), s(0), g(businessPlannedPeriodEndTimestamp), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), caller, timestamp)=>
	eq(s(3), s(2))
	call(block12275(s(1), s(0),g(businessPlannedPeriodEndTimestamp), g(fundariaStakesFrozen), g(teamStakesFrozen), timestamp))

jump12183(s(3), s(2), s(1), s(0), g(businessPlannedPeriodEndTimestamp), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), caller, timestamp)=>
	neq(s(3), s(2))
	call(block12271(s(1), s(0)))

block12271(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block12275(s(1), s(0), g(businessPlannedPeriodEndTimestamp), g(fundariaStakesFrozen), g(teamStakesFrozen), timestamp)=>
	nop(JUMPDEST)
	s(2) = 10
	nop(PUSH1)
	s(2) = g(businessPlannedPeriodEndTimestamp)
	nop(SLOAD)
	s(3) = timestamp
	nop(TIMESTAMP)
	call(jump12275(s(3),s(2),s(1),s(0),g(businessPlannedPeriodEndTimestamp), g(fundariaStakesFrozen), g(teamStakesFrozen), timestamp))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump12275(s(3), s(2), s(1), s(0), g(businessPlannedPeriodEndTimestamp), g(fundariaStakesFrozen), g(teamStakesFrozen), timestamp)=>
	leq(s(3), s(2))
	call(block12339(s(1), s(0)))

jump12275(s(3), s(2), s(1), s(0), g(businessPlannedPeriodEndTimestamp), g(fundariaStakesFrozen), g(teamStakesFrozen), timestamp)=>
	gt(s(3), s(2))
	call(block12286(s(1), s(0),g(fundariaStakesFrozen), g(teamStakesFrozen)))

block12286(s(1), s(0), g(fundariaStakesFrozen), g(teamStakesFrozen))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = 1
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	nop(DUP2)
	s(5) = g(teamStakesFrozen)
	nop(SLOAD)
	s(6) = s(4)
	nop(DUP2)
	s(7) = 255
	nop(PUSH1)
	s(6) = s(7)*s(6)
	nop(MUL)
	s(6) = not(s(6))
	nop(NOT)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	nop(DUP4)
	s(6)= eq(s(6), 0)
	nop(ISZERO)
	s(6)= eq(s(6), 0)
	nop(ISZERO)
	s(5) = s(6)*s(5)
	nop(MUL)
	s(4) = or(s(5), s(4))
	nop(OR)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	g(teamStakesFrozen) = s(3)
	nop(SSTORE)
	nop(POP)
	s(2) = 0
	nop(PUSH1)
	s(3) = 1
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	nop(DUP2)
	s(5) = g(teamStakesFrozen)
	nop(SLOAD)
	s(6) = s(4)
	nop(DUP2)
	s(7) = 255
	nop(PUSH1)
	s(6) = s(7)*s(6)
	nop(MUL)
	s(6) = not(s(6))
	nop(NOT)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	nop(DUP4)
	s(6)= eq(s(6), 0)
	nop(ISZERO)
	s(6)= eq(s(6), 0)
	nop(ISZERO)
	s(5) = s(6)*s(5)
	nop(MUL)
	s(4) = or(s(5), s(4))
	nop(OR)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	g(fundariaStakesFrozen) = s(3)
	nop(SSTORE)
	nop(POP)
	call(block12339(s(1),s(0)))

block12339(s(1), s(0))=>
	nop(JUMPDEST)
	call(block3101(s(0)))
	nop(JUMP)

jump12341(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(saleShare), l(l6), l(l1), l(l0))=>
	lt(s(6), s(5))
	call(block12356(s(4), s(3), s(2), s(1), s(0), l(l6), l(l1), l(l0)))

jump12341(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(saleShare), l(l6), l(l1), l(l0))=>
	geq(s(6), s(5))
	call(block12355(s(4), s(3), s(2), s(1), s(0)))

block12341(s(2), s(1), s(0), g(saleShare), l(l6), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 35
	nop(PUSH1)
	s(4) = s(2)
	nop(DUP2)
	s(5) = s(3)
	nop(DUP2)
	s(5) = g(saleShare)
	nop(SLOAD)
	s(6) = s(4)
	nop(DUP2)
	call(jump12341(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(saleShare), l(l6), l(l1), l(l0)))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block12355(s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block12356(s(4), s(3), s(2), s(1), s(0), l(l6), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 0
	nop(PUSH1)
	l(l6) = s(4)
	nop(MSTORE)
	s(4) = 32
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(4) = sha3(s(5), s(4))
	nop(SHA3)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(POP)
	gl = s(2)
	s(2) = fresh(0)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block3146(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block12376(s(1), s(0), g(fundaria), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 40
	nop(PUSH1)
	s(2) = g(fundaria)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block3189(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block12382(s(1), s(0), g(balances), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 3
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(balances)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block3232(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block12420(s(1), s(0), g(supplyCap), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 8
	nop(PUSH1)
	s(2) = g(supplyCap)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block3319(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block12426(s(1), s(0), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 64
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(3) = l(l0)
	nop(MLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(2)
	nop(DUP2)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = 64
	nop(PUSH1)
	l(l0) = s(3)
	nop(MSTORE)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 4
	nop(PUSH1)
	s(5) = s(3)
	nop(DUP2)
	l(l1) = s(4)
	nop(MSTORE)
	s(4) = 32
	nop(PUSH1)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = 37657400350776809120683214750277353010604337876618543985629925233204668661760
	nop(PUSH32)
	s(5) = s(3)
	nop(DUP2)
	l(l4) = s(4)
	nop(MSTORE)
	nop(POP)
	s(3) = s(1)
	nop(DUP2)
	call(block3362(s(2),s(1),s(0), l(l5), l(l4), l(l3), l(l2), l(l1), l(l0)))
	nop(JUMP)

block12483(s(1), s(0), g(guidesStat), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 39
	nop(PUSH1)
	s(2) = g(guidesStat)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block3506(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block12489(s(1), s(0), g(lastStakePriceUSCents), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 36
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(lastStakePriceUSCents)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 255
	nop(PUSH1)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block3549(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block12508(s(2), s(1), s(0), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 37
	nop(PUSH1)
	s(4) = 32
	nop(PUSH1)
	l(l7) = s(3)
	nop(MSTORE)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 0
	nop(PUSH1)
	l(l6) = s(3)
	nop(MSTORE)
	s(3) = 64
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(3) = sha3(s(4), s(3))
	nop(SHA3)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(POP)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 0
	nop(PUSH1)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	gl = s(4)
	s(4) = fresh(0)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = 255
	nop(PUSH1)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = s(3)
	nop(DUP1)
	s(5) = 1
	nop(PUSH1)
	s(4) = s(5)+s(4)
	nop(ADD)
	gl = s(4)
	s(4) = fresh(1)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = s(4)
	nop(DUP1)
	s(6) = 2
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	gl = s(5)
	s(5) = fresh(2)
	nop(SLOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(5)
	nop(DUP1)
	s(7) = 3
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	gl = s(6)
	s(6) = fresh(3)
	nop(SLOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	nop(POP)
	s(6) = s(1)
	nop(DUP5)
	call(block3640(s(5),s(4),s(3),s(2),s(1),s(0), l(l4), l(l3), l(l2), l(l1), l(l0)))
	nop(JUMP)

jump12569(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	eq(s(6), 1 )
	call(block12766(s(5), s(4), s(3), s(2), s(1), s(0),g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))

jump12569(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	neq(s(6), 1 )
	call(block12659(s(5), s(4), s(3), s(2), s(1), s(0),g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))

block12569(s(3), s(2), s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(4) = 0
	nop(PUSH1)
	s(5) = 3
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(6) = g(balances)
	nop(SLOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 256
	nop(PUSH2)
	s(6) = s(7)^s(6)
	nop(EXP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(5)= eq(s(6), s(5))
	nop(EQ)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(6) = s(5)
	nop(DUP1)
	s(7) = 12766
	nop(PUSH2)
	call(jump12569(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMPI)

jump12659(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	eq(s(6), 0)
	call(block12765(s(5), s(4), s(3), s(2), s(1), s(0),g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))

jump12659(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	neq(s(6), 0)
	call(block12747(s(5), s(4), s(3), s(2), s(1), s(0),g(owner), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))

block12659(s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(POP)
	s(5) = 3
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(6) = g(balances)
	nop(SLOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 256
	nop(PUSH2)
	s(6) = s(7)^s(6)
	nop(EXP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(5)= eq(s(6), s(5))
	nop(EQ)
	s(6) = s(5)
	nop(DUP1)
	call(jump12659(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block12747(s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(POP)
	s(5) = 1
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(6) = g(teamStakesFrozen)
	nop(SLOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 256
	nop(PUSH2)
	s(6) = s(7)^s(6)
	nop(EXP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	call(block12765(s(5),s(4),s(3),s(2),s(1),s(0),g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))

block12765(s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	call(block12766(s(5),s(4),s(3),s(2),s(1),s(0),g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))

jump12766(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	eq(s(6), 1 )
	call(block12878(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller))

jump12766(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	neq(s(6), 1 )
	call(block12772(s(5), s(4), s(3), s(2), s(1), s(0),g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))

block12766(s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = s(5)
	nop(DUP1)
	s(7) = 12878
	nop(PUSH2)
	call(jump12766(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMPI)

jump12772(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	eq(s(6), 0)
	call(block12877(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller))

jump12772(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	neq(s(6), 0)
	call(block12860(s(5), s(4), s(3), s(2), s(1), s(0),g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))

block12772(s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(POP)
	s(5) = 4
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(6) = g(owner)
	nop(SLOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 256
	nop(PUSH2)
	s(6) = s(7)^s(6)
	nop(EXP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(5)= eq(s(6), s(5))
	nop(EQ)
	s(6) = s(5)
	nop(DUP1)
	call(jump12772(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block12860(s(5), s(4), s(3), s(2), s(1), s(0), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(POP)
	s(5) = 1
	nop(PUSH1)
	s(6) = s(5)
	nop(DUP1)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(6) = g(fundariaStakesFrozen)
	nop(SLOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 256
	nop(PUSH2)
	s(6) = s(7)^s(6)
	nop(EXP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	call(block12877(s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))

block12877(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	call(block12878(s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))

block12878(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	call(jump12878(s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump12878(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	neq(s(5), 0)
	call(block12889(s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller))

jump12878(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	eq(s(5), 0)
	call(block12885(s(4), s(3), s(2), s(1), s(0)))

block12885(s(4), s(3), s(2), s(1), s(0))=>
	s(5) = 0
	nop(PUSH1)
	s(6) = s(5)
	nop(DUP1)
	nop(REVERT)

jump12889(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	neq(s(6), s(5))
	call(block12949(s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller))

jump12889(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	eq(s(6), s(5))
	call(block12945(s(4), s(3), s(2), s(1), s(0)))

block12889(s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(5) = 0
	nop(PUSH1)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(2)
	nop(DUP4)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	call(jump12889(s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block12945(s(4), s(3), s(2), s(1), s(0))=>
	s(5) = 0
	nop(PUSH1)
	s(6) = s(5)
	nop(DUP1)
	nop(REVERT)

jump12949(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	leq(s(6), s(5))
	call(block13027(s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller))

jump12949(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	gt(s(6), s(5))
	call(block13023(s(4), s(3), s(2), s(1), s(0)))

block12949(s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(5) = 2
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = caller
	nop(CALLER)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l6) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	l(l7) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(5) = sha3(s(6), s(5))
	nop(SHA3)
	gl = s(5)
	s(5) = fresh(0)
	nop(SLOAD)
	s(6) = s(3)
	nop(DUP3)
	call(jump12949(s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block13023(s(4), s(3), s(2), s(1), s(0))=>
	s(5) = 0
	nop(PUSH1)
	s(6) = s(5)
	nop(DUP1)
	nop(REVERT)

block13027(s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(5) = 13109
	nop(PUSH2)
	s(6) = s(3)
	nop(DUP3)
	s(7) = 2
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l6) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l7) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	gl = s(7)
	s(7) = fresh(0)
	nop(SLOAD)
	s(8) = 22370
	nop(PUSH2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(6)
	s(6) = s(8)
	s(8) = s(9)
	nop(SWAP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 4294967295
	nop(PUSH4)
	s(8) = and(s(9), s(8))
	nop(AND)
	call(block22370_6(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMP)

block13109(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = 2
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = caller
	nop(CALLER)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	l(l6) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(6)
	nop(DUP2)
	l(l7) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	s(7) = s(5)
	nop(DUP2)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	gs(1) = s(7)
	gs(2) = s(6)
	nop(SSTORE)
	nop(POP)
	s(5) = 13258
	nop(PUSH2)
	s(6) = s(3)
	nop(DUP3)
	s(7) = 2
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(2)
	nop(DUP7)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l6) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l7) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	gl = s(7)
	s(7) = fresh(0)
	nop(SLOAD)
	s(8) = 22395
	nop(PUSH2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(6)
	s(6) = s(8)
	s(8) = s(9)
	nop(SWAP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 4294967295
	nop(PUSH4)
	s(8) = and(s(9), s(8))
	nop(AND)
	call(block22395_2(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMP)

block13258(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = 2
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(2)
	nop(DUP6)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	l(l6) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(6)
	nop(DUP2)
	l(l7) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	s(7) = s(5)
	nop(DUP2)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	gs(1) = s(7)
	gs(2) = s(6)
	nop(SSTORE)
	nop(POP)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = 100389287136786176327247604509743168900146139575972864366142685224231313322991
	nop(PUSH32)
	s(8) = s(3)
	nop(DUP5)
	s(9) = 64
	nop(PUSH1)
	s(9) = l(l0)
	nop(MLOAD)
	s(10) = s(9)
	nop(DUP1)
	s(11) = s(8)
	nop(DUP3)
	s(12) = s(10)
	nop(DUP2)
	l(l1) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(9) = 64
	nop(PUSH1)
	s(9) = l(l0)
	nop(MLOAD)
	s(10) = s(9)
	nop(DUP1)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	s(9) = s(10)-s(9)
	nop(SUB)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	nop(LOG3)
	s(5) = 1
	nop(PUSH1)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	s(5) = s(1)
	s(1) = s(4)
	s(4) = s(5)
	nop(SWAP3)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block3762(s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block13436(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(10) = 0
	nop(PUSH1)
	s(11) = 13507
	nop(PUSH2)
	s(12) = 30
	nop(PUSH1)
	s(12) = g(owner)
	nop(SLOAD)
	s(13) = 13493
	nop(PUSH2)
	s(14) = 1000000000000000000
	nop(PUSH8)
	s(15) = 13479
	nop(PUSH2)
	s(16) = 7
	nop(PUSH1)
	s(16) = g(usdPerEther)
	nop(SLOAD)
	s(17) = 6
	nop(PUSH1)
	s(17) = g(poolCapUSD)
	nop(SLOAD)
	s(18) = 20581
	nop(PUSH2)
	s(19) = s(17)
	s(17) = s(18)
	s(18) = s(19)
	nop(SWAP1)
	s(19) = s(16)
	s(16) = s(18)
	s(18) = s(19)
	nop(SWAP2)
	s(19) = s(17)
	s(17) = s(18)
	s(18) = s(19)
	nop(SWAP1)
	s(19) = 4294967295
	nop(PUSH4)
	s(18) = and(s(19), s(18))
	nop(AND)
	call(block20581(s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block13479(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(16) = 22425
	nop(PUSH2)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	s(17) = s(14)
	s(14) = s(16)
	s(16) = s(17)
	nop(SWAP2)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	s(17) = 4294967295
	nop(PUSH4)
	s(16) = and(s(17), s(16))
	nop(AND)
	call(block22425(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block13493(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(14) = 22370
	nop(PUSH2)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = s(12)
	s(12) = s(14)
	s(14) = s(15)
	nop(SWAP2)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = 4294967295
	nop(PUSH4)
	s(14) = and(s(15), s(14))
	nop(AND)
	call(block22370(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block13507(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	nop(POP)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	call(block20255(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block13512(s(1), s(0), g(investmentGuidesRewardsWithdrawn), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 22
	nop(PUSH1)
	s(2) = g(investmentGuidesRewardsWithdrawn)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block3852(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

jump13518(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp)=>
	eq(s(8), 0)
	call(block13616(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp))

jump13518(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp)=>
	neq(s(8), 0)
	call(block13612(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block13518(s(1), s(0), g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(4)
	nop(DUP1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	s(8) = 19
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l6) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l7) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	gl = s(9)
	s(9) = fresh(0)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 255
	nop(PUSH1)
	s(8) = and(s(9), s(8))
	nop(AND)
	call(jump13518(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp))
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block13612(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(8) = 0
	nop(PUSH1)
	s(9) = s(8)
	nop(DUP1)
	nop(REVERT)

jump13616(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp)=>
	gt(s(9), s(8))
	call(block13697(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp))

jump13616(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp)=>
	leq(s(9), s(8))
	call(block13693(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block13616(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(8) = 0
	nop(PUSH1)
	s(9) = 26
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = caller
	nop(CALLER)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l6) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	l(l7) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	s(10) = 0
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	gl = s(9)
	s(9) = fresh(0)
	nop(SLOAD)
	call(jump13616(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block13693(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(8) = 0
	nop(PUSH1)
	s(9) = s(8)
	nop(DUP1)
	nop(REVERT)

block13697(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(8) = 26
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l6) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l7) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 2
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	s(9) = 26
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = caller
	nop(CALLER)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l6) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	l(l7) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	s(10) = 0
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	gl = s(9)
	s(9) = fresh(1)
	nop(SLOAD)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 2
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = caller
	nop(CALLER)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l6) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	l(l7) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	gl = s(9)
	s(9) = fresh(2)
	nop(SLOAD)
	call(jump13697(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump13697(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp)=>
	geq(s(9), s(8))
	call(block13909(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp))

jump13697(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp)=>
	lt(s(9), s(8))
	call(block13905(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block13905(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(8) = 0
	nop(PUSH1)
	s(9) = s(8)
	nop(DUP1)
	nop(REVERT)

block13909(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(4)
	s(4) = s(8)
	s(8) = s(9)
	nop(SWAP4)
	nop(POP)
	call(block13914(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp))

block13914(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(8) = 41
	nop(PUSH1)
	s(9) = 1
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(9) = g(financePeriodsCount)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 255
	nop(PUSH1)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 255
	nop(PUSH1)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(4)
	nop(DUP5)
	s(10) = 255
	nop(PUSH1)
	s(9) = and(s(10), s(9))
	nop(AND)
	call(jump13914(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump13914(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp)=>
	geq(s(9), s(8))
	call(block16700(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

jump13914(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp)=>
	lt(s(9), s(8))
	call(block13944(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp))

jump13944(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp)=>
	lt(s(11), s(10))
	call(block13961(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp))

jump13944(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp)=>
	geq(s(11), s(10))
	call(block13960(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block13944(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp)=>
	s(8) = 42
	nop(PUSH1)
	s(9) = s(4)
	nop(DUP5)
	s(10) = 255
	nop(PUSH1)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	s(10) = g(bonusShare)
	nop(SLOAD)
	s(11) = s(9)
	nop(DUP2)
	call(jump13944(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block13960(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump13961(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp)=>
	geq(s(9), s(8))
	call(block16687(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp))

jump13961(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp)=>
	lt(s(9), s(8))
	call(block13980(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))

block13961(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 0
	nop(PUSH1)
	l(l6) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	s(8) = s(9)+s(8)
	nop(ADD)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	s(9) = timestamp
	nop(TIMESTAMP)
	call(jump13961(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump13980(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	neq(s(10), 0)
	call(block14021(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))

jump13980(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	eq(s(10), 0)
	call(block14020(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block13980(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	s(8) = 1
	nop(PUSH1)
	s(9) = 41
	nop(PUSH1)
	s(10) = 1
	nop(PUSH1)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(10) = g(financePeriodsCount)
	nop(SLOAD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 256
	nop(PUSH2)
	s(10) = s(11)^s(10)
	nop(EXP)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(9) = s(10)/s(9)
	nop(DIV)
	s(10) = 255
	nop(PUSH1)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 255
	nop(PUSH1)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 30
	nop(PUSH1)
	s(9) = g(owner)
	nop(SLOAD)
	s(10) = 1
	nop(PUSH1)
	s(11) = s(4)
	nop(DUP7)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = 255
	nop(PUSH1)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(10) = s(8)
	nop(DUP2)
	call(jump13980(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block14020(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump14021(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	neq(s(10), 0)
	call(block14109(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))

jump14021(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	eq(s(10), 0)
	call(block14108(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block14021(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 30
	nop(PUSH1)
	s(9) = g(owner)
	nop(SLOAD)
	s(8) = s(9)-s(8)
	nop(SUB)
	s(9) = s(2)
	s(2) = s(8)
	s(8) = s(9)
	nop(SWAP6)
	nop(POP)
	s(8) = 30
	nop(PUSH1)
	s(8) = g(owner)
	nop(SLOAD)
	s(9) = s(2)
	nop(DUP7)
	s(10) = 26
	nop(PUSH1)
	s(11) = 0
	nop(PUSH1)
	s(12) = caller
	nop(CALLER)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = s(11)
	nop(DUP2)
	l(l6) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(10)
	nop(DUP2)
	l(l7) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = 0
	nop(PUSH1)
	s(10) = sha3(s(11), s(10))
	nop(SHA3)
	s(11) = 1
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	gl = s(10)
	s(10) = fresh(0)
	nop(SLOAD)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(10) = s(8)
	nop(DUP2)
	call(jump14021(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block14108(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block14109(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = s(3)
	s(3) = s(8)
	s(8) = s(9)
	nop(SWAP5)
	nop(POP)
	s(8) = 26
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l6) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l7) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 2
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	s(9) = 26
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = caller
	nop(CALLER)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l6) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	l(l7) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	s(10) = 0
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	gl = s(9)
	s(9) = fresh(1)
	nop(SLOAD)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(5)
	s(5) = s(8)
	s(8) = s(9)
	nop(SWAP3)
	nop(POP)
	s(8) = 33
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(9) = g(totalWithdrawn)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 255
	nop(PUSH1)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 255
	nop(PUSH1)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 12
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(10) = g(teamShare)
	nop(SLOAD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 256
	nop(PUSH2)
	s(10) = s(11)^s(10)
	nop(EXP)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(9) = s(10)/s(9)
	nop(DIV)
	s(10) = 255
	nop(PUSH1)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 255
	nop(PUSH1)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 26
	nop(PUSH1)
	s(11) = 0
	nop(PUSH1)
	s(12) = caller
	nop(CALLER)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = s(11)
	nop(DUP2)
	l(l6) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(10)
	nop(DUP2)
	l(l7) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = 0
	nop(PUSH1)
	s(10) = sha3(s(11), s(10))
	nop(SHA3)
	s(11) = 0
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	gl = s(10)
	s(10) = fresh(2)
	nop(SLOAD)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(10) = s(8)
	nop(DUP2)
	call(jump14109(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump14109(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	neq(s(10), 0)
	call(block14364(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))

jump14109(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	eq(s(10), 0)
	call(block14363(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block14363(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump14364(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	neq(s(10), 0)
	call(block14482(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(distributedTeamStakes), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))

jump14364(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	eq(s(10), 0)
	call(block14481(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block14364(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = s(6)
	s(6) = s(8)
	s(8) = s(9)
	nop(SWAP2)
	nop(POP)
	s(8) = 33
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(9) = g(totalWithdrawn)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 255
	nop(PUSH1)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 255
	nop(PUSH1)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 15
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(10) = g(fundariaShare)
	nop(SLOAD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 256
	nop(PUSH2)
	s(10) = s(11)^s(10)
	nop(EXP)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(9) = s(10)/s(9)
	nop(DIV)
	s(10) = 255
	nop(PUSH1)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 255
	nop(PUSH1)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 26
	nop(PUSH1)
	s(11) = 0
	nop(PUSH1)
	s(12) = caller
	nop(CALLER)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = s(11)
	nop(DUP2)
	l(l6) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(10)
	nop(DUP2)
	l(l7) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = 0
	nop(PUSH1)
	s(10) = sha3(s(11), s(10))
	nop(SHA3)
	s(11) = 0
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	gl = s(10)
	s(10) = fresh(0)
	nop(SLOAD)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(10) = s(8)
	nop(DUP2)
	call(jump14364(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block14481(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block14482(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(distributedTeamStakes), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	nop(POP)
	s(8) = 14601
	nop(PUSH2)
	s(9) = s(6)
	nop(DUP3)
	s(10) = 2
	nop(PUSH1)
	s(11) = 0
	nop(PUSH1)
	s(12) = 3
	nop(PUSH1)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(13) = g(balances)
	nop(SLOAD)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = 256
	nop(PUSH2)
	s(13) = s(14)^s(13)
	nop(EXP)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(12) = s(13)/s(12)
	nop(DIV)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = s(11)
	nop(DUP2)
	l(l6) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(10)
	nop(DUP2)
	l(l7) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = 0
	nop(PUSH1)
	s(10) = sha3(s(11), s(10))
	nop(SHA3)
	gl = s(10)
	s(10) = fresh(0)
	nop(SLOAD)
	s(11) = 22370
	nop(PUSH2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = 4294967295
	nop(PUSH4)
	s(11) = and(s(12), s(11))
	nop(AND)
	call(block22370_8(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(distributedTeamStakes), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(JUMP)

block14601(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(distributedTeamStakes), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(9) = 2
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = 3
	nop(PUSH1)
	s(12) = 0
	nop(PUSH1)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(12) = g(balances)
	nop(SLOAD)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(13) = 256
	nop(PUSH2)
	s(12) = s(13)^s(12)
	nop(EXP)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(11) = s(12)/s(11)
	nop(DIV)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l6) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	l(l7) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	gs(1) = s(10)
	gs(2) = s(9)
	nop(SSTORE)
	nop(POP)
	s(8) = 14818
	nop(PUSH2)
	s(9) = s(7)
	nop(DUP2)
	s(10) = 2
	nop(PUSH1)
	s(11) = 0
	nop(PUSH1)
	s(12) = 4
	nop(PUSH1)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(13) = g(owner)
	nop(SLOAD)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = 256
	nop(PUSH2)
	s(13) = s(14)^s(13)
	nop(EXP)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(12) = s(13)/s(12)
	nop(DIV)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = s(11)
	nop(DUP2)
	l(l6) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(10)
	nop(DUP2)
	l(l7) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = 0
	nop(PUSH1)
	s(10) = sha3(s(11), s(10))
	nop(SHA3)
	gl = s(10)
	s(10) = fresh(0)
	nop(SLOAD)
	s(11) = 22370
	nop(PUSH2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = 4294967295
	nop(PUSH4)
	s(11) = and(s(12), s(11))
	nop(AND)
	call(block22370_9(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(distributedTeamStakes), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(JUMP)

block14818(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(distributedTeamStakes), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(9) = 2
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = 4
	nop(PUSH1)
	s(12) = 0
	nop(PUSH1)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(12) = g(owner)
	nop(SLOAD)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(13) = 256
	nop(PUSH2)
	s(12) = s(13)^s(12)
	nop(EXP)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(11) = s(12)/s(11)
	nop(DIV)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l6) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	l(l7) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	gs(1) = s(10)
	gs(2) = s(9)
	nop(SSTORE)
	nop(POP)
	s(8) = 3
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(9) = g(balances)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 92312388597506580910220011357950614650372135269746937547546302273167149333669
	nop(PUSH32)
	s(10) = s(6)
	nop(DUP4)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	nop(DUP3)
	s(14) = s(12)
	nop(DUP2)
	l(l1) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	s(11) = s(12)-s(11)
	nop(SUB)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	nop(LOG2)
	s(8) = 4
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(9) = g(owner)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 92312388597506580910220011357950614650372135269746937547546302273167149333669
	nop(PUSH32)
	s(10) = s(7)
	nop(DUP3)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	nop(DUP3)
	s(14) = s(12)
	nop(DUP2)
	l(l1) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	s(11) = s(12)-s(11)
	nop(SUB)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	nop(LOG2)
	s(8) = s(6)
	nop(DUP2)
	s(9) = 13
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(8)
	nop(DUP3)
	s(12) = s(9)
	nop(DUP3)
	s(12) = g(distributedTeamStakes)
	nop(SLOAD)
	s(11) = s(12)-s(11)
	nop(SUB)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	g(distributedTeamStakes) = s(9)
	nop(SSTORE)
	nop(POP)
	s(8) = s(7)
	nop(DUP1)
	s(9) = 16
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(8)
	nop(DUP3)
	s(12) = s(9)
	nop(DUP3)
	s(12) = g(distributedFundariaStakes)
	nop(SLOAD)
	s(11) = s(12)-s(11)
	nop(SUB)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	g(distributedFundariaStakes) = s(9)
	nop(SSTORE)
	nop(POP)
	s(8) = 15257
	nop(PUSH2)
	s(9) = s(5)
	nop(DUP4)
	s(10) = 2
	nop(PUSH1)
	s(11) = 0
	nop(PUSH1)
	s(12) = caller
	nop(CALLER)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = s(11)
	nop(DUP2)
	l(l6) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(10)
	nop(DUP2)
	l(l7) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = 0
	nop(PUSH1)
	s(10) = sha3(s(11), s(10))
	nop(SHA3)
	gl = s(10)
	s(10) = fresh(0)
	nop(SLOAD)
	s(11) = 22370
	nop(PUSH2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = 4294967295
	nop(PUSH4)
	s(11) = and(s(12), s(11))
	nop(AND)
	call(block22370_10(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(JUMP)

block15257(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(9) = 2
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = caller
	nop(CALLER)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l6) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	l(l7) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	gs(1) = s(10)
	gs(2) = s(9)
	nop(SSTORE)
	nop(POP)
	s(8) = 26
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l6) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l7) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	s(9) = 29
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(8)
	nop(DUP3)
	s(12) = s(9)
	nop(DUP3)
	s(12) = g(saleStartTimestamp)
	nop(SLOAD)
	s(11) = s(12)-s(11)
	nop(SUB)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	g(saleStartTimestamp) = s(9)
	nop(SSTORE)
	nop(POP)
	s(8) = caller
	nop(CALLER)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 92312388597506580910220011357950614650372135269746937547546302273167149333669
	nop(PUSH32)
	s(10) = s(5)
	nop(DUP5)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	nop(DUP3)
	s(14) = s(12)
	nop(DUP2)
	l(l1) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	s(11) = s(12)-s(11)
	nop(SUB)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	nop(LOG2)
	s(8) = 15505
	nop(PUSH2)
	s(9) = s(3)
	nop(DUP6)
	s(10) = 30
	nop(PUSH1)
	s(10) = g(owner)
	nop(SLOAD)
	s(11) = 22370
	nop(PUSH2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = 4294967295
	nop(PUSH4)
	s(11) = and(s(12), s(11))
	nop(AND)
	call(block22370_11(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(JUMP)

block15505(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(9) = 30
	nop(PUSH1)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	g(owner) = s(9)
	nop(SSTORE)
	nop(POP)
	s(8) = 15568
	nop(PUSH2)
	s(9) = s(7)
	nop(DUP2)
	s(10) = 15554
	nop(PUSH2)
	s(11) = s(6)
	nop(DUP5)
	s(12) = 15540
	nop(PUSH2)
	s(13) = s(5)
	nop(DUP8)
	s(14) = 0
	nop(PUSH1)
	s(14) = g(totalSupply)
	nop(SLOAD)
	s(15) = 22370
	nop(PUSH2)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	s(16) = s(13)
	s(13) = s(15)
	s(15) = s(16)
	nop(SWAP2)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	s(16) = 4294967295
	nop(PUSH4)
	s(15) = and(s(16), s(15))
	nop(AND)
	call(block22370_12(s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(JUMP)

block15540(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(13) = 22370
	nop(PUSH2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = 4294967295
	nop(PUSH4)
	s(13) = and(s(14), s(13))
	nop(AND)
	call(block22370_13(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(JUMP)

block15554(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(11) = 22370
	nop(PUSH2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = 4294967295
	nop(PUSH4)
	s(11) = and(s(12), s(11))
	nop(AND)
	call(block22370_14(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(JUMP)

jump15568(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	eq(s(9), s(8))
	call(block16305(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(distributedSaleStakes), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))

jump15568(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	neq(s(9), s(8))
	call(block15727(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))

block15568(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	g(totalSupply) = s(9)
	nop(SSTORE)
	nop(POP)
	s(8) = 0
	nop(PUSH1)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 26
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = caller
	nop(CALLER)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l6) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	l(l7) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	s(10) = 4
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	gl = s(10)
	s(10) = fresh(0)
	nop(SLOAD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 256
	nop(PUSH2)
	s(10) = s(11)^s(10)
	nop(EXP)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(9) = s(10)/s(9)
	nop(DIV)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	call(jump15568(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump15727(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	neq(s(10), 0)
	call(block15832(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))

jump15727(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	eq(s(10), 0)
	call(block15831(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block15727(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	s(8) = 1
	nop(PUSH1)
	s(9) = 41
	nop(PUSH1)
	s(10) = 1
	nop(PUSH1)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(10) = g(financePeriodsCount)
	nop(SLOAD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 256
	nop(PUSH2)
	s(10) = s(11)^s(10)
	nop(EXP)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(9) = s(10)/s(9)
	nop(DIV)
	s(10) = 255
	nop(PUSH1)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 255
	nop(PUSH1)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 26
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = caller
	nop(CALLER)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l6) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	l(l7) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	s(10) = 3
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	gl = s(9)
	s(9) = fresh(0)
	nop(SLOAD)
	s(10) = 1
	nop(PUSH1)
	s(11) = s(4)
	nop(DUP7)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = 255
	nop(PUSH1)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(9) = s(10)*s(9)
	nop(MUL)
	s(10) = s(8)
	nop(DUP2)
	call(jump15727(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block15831(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block15832(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 26
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = caller
	nop(CALLER)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l6) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	l(l7) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	s(10) = 3
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	gl = s(9)
	s(9) = fresh(0)
	nop(SLOAD)
	s(8) = s(9)-s(8)
	nop(SUB)
	s(9) = 37
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = 26
	nop(PUSH1)
	s(12) = 0
	nop(PUSH1)
	s(13) = caller
	nop(CALLER)
	s(14) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(13) = and(s(14), s(13))
	nop(AND)
	s(14) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(13) = and(s(14), s(13))
	nop(AND)
	s(14) = s(12)
	nop(DUP2)
	l(l6) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(13) = s(11)
	nop(DUP2)
	l(l7) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = 0
	nop(PUSH1)
	s(11) = sha3(s(12), s(11))
	nop(SHA3)
	s(12) = 4
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = 0
	nop(PUSH1)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	gl = s(12)
	s(12) = fresh(1)
	nop(SLOAD)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(13) = 256
	nop(PUSH2)
	s(12) = s(13)^s(12)
	nop(EXP)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(11) = s(12)/s(11)
	nop(DIV)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l6) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	l(l7) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	s(10) = 1
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(8)
	nop(DUP3)
	s(12) = s(9)
	nop(DUP3)
	gl = s(12)
	s(12) = fresh(2)
	nop(SLOAD)
	s(11) = s(12)-s(11)
	nop(SUB)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	gs(1) = s(10)
	gs(2) = s(9)
	nop(SSTORE)
	nop(POP)
	s(8) = 26
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l6) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l7) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 2
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	gl = s(8)
	s(8) = fresh(3)
	nop(SLOAD)
	s(9) = 39
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(8)
	nop(DUP3)
	s(12) = s(9)
	nop(DUP3)
	s(12) = g(guidesStat)
	nop(SLOAD)
	s(11) = s(12)-s(11)
	nop(SUB)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	g(guidesStat) = s(9)
	nop(SSTORE)
	nop(POP)
	s(8) = 0
	nop(PUSH1)
	s(9) = 26
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = caller
	nop(CALLER)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l6) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	l(l7) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	s(10) = 2
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	gs(1) = s(10)
	gs(2) = s(9)
	nop(SSTORE)
	nop(POP)
	s(8) = 0
	nop(PUSH1)
	s(9) = 26
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = caller
	nop(CALLER)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l6) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	l(l7) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	s(10) = 3
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	gs(1) = s(10)
	gs(2) = s(9)
	nop(SSTORE)
	nop(POP)
	call(block16305(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(distributedSaleStakes), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))

block16305(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(distributedSaleStakes), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(8) = 0
	nop(PUSH1)
	s(9) = 26
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = caller
	nop(CALLER)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l6) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	l(l7) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	s(10) = 0
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	gs(1) = s(10)
	gs(2) = s(9)
	nop(SSTORE)
	nop(POP)
	s(8) = 0
	nop(PUSH1)
	s(9) = 26
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = caller
	nop(CALLER)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l6) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	l(l7) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	s(10) = 1
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	gs(1) = s(10)
	gs(2) = s(9)
	nop(SSTORE)
	nop(POP)
	s(8) = s(3)
	nop(DUP5)
	s(9) = 31
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(8)
	nop(DUP3)
	s(12) = s(9)
	nop(DUP3)
	s(12) = g(distributedSaleStakes)
	nop(SLOAD)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	g(distributedSaleStakes) = s(9)
	nop(SSTORE)
	nop(POP)
	s(8) = caller
	nop(CALLER)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 2300
	nop(PUSH2)
	s(10) = s(3)
	nop(DUP7)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	s(11)= eq(s(11), 0)
	nop(ISZERO)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = 0
	nop(PUSH1)
	s(13) = 64
	nop(PUSH1)
	s(13) = l(l0)
	nop(MLOAD)
	s(14) = s(13)
	nop(DUP1)
	s(15) = s(11)
	nop(DUP4)
	s(14) = s(15)-s(14)
	nop(SUB)
	s(15) = s(13)
	nop(DUP2)
	s(16) = s(10)
	nop(DUP6)
	s(17) = s(8)
	nop(DUP9)
	s(18) = s(9)
	nop(DUP9)
	s(12) = 1
	nop(CALL)
	s(13) = s(8)
	s(8) = s(12)
	s(12) = s(13)
	nop(SWAP4)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(8)= eq(s(8), 0)
	nop(ISZERO)
	s(9) = s(8)
	nop(DUP1)
	call(jump16305(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(distributedSaleStakes), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump16305(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(distributedSaleStakes), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	eq(s(9), 0)
	call(block16535(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), l(l4), l(l3), l(l2), l(l1), l(l0), caller))

jump16305(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(distributedSaleStakes), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	neq(s(9), 0)
	call(block16526(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize))

block16526(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize)=>
	s(9) = returndatasize
	nop(RETURNDATASIZE)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(10)
	nop(DUP1)
	nop(RETURNDATACOPY)
	s(10) = returndatasize
	nop(RETURNDATASIZE)
	s(11) = 0
	nop(PUSH1)
	nop(REVERT)

block16535(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), l(l4), l(l3), l(l2), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	nop(POP)
	s(8) = 29065665065941190794663224841002571248325211392503539961938724776095849587148
	nop(PUSH32)
	s(9) = caller
	nop(CALLER)
	s(10) = s(3)
	nop(DUP7)
	s(11) = s(5)
	nop(DUP6)
	s(12) = s(4)
	nop(DUP8)
	s(13) = 41
	nop(PUSH1)
	s(14) = 1
	nop(PUSH1)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(14) = g(financePeriodsCount)
	nop(SLOAD)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = 256
	nop(PUSH2)
	s(14) = s(15)^s(14)
	nop(EXP)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(13) = s(14)/s(13)
	nop(DIV)
	s(14) = 255
	nop(PUSH1)
	s(13) = and(s(14), s(13))
	nop(AND)
	s(12) = s(13)-s(12)
	nop(SUB)
	s(13) = 64
	nop(PUSH1)
	s(13) = l(l0)
	nop(MLOAD)
	s(14) = s(13)
	nop(DUP1)
	s(15) = s(9)
	nop(DUP6)
	s(16) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(15) = and(s(16), s(15))
	nop(AND)
	s(16) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(15) = and(s(16), s(15))
	nop(AND)
	s(16) = s(14)
	nop(DUP2)
	l(l1) = s(15)
	nop(MSTORE)
	s(15) = 32
	nop(PUSH1)
	s(14) = s(15)+s(14)
	nop(ADD)
	s(15) = s(10)
	nop(DUP5)
	s(16) = s(14)
	nop(DUP2)
	l(l4) = s(15)
	nop(MSTORE)
	s(15) = 32
	nop(PUSH1)
	s(14) = s(15)+s(14)
	nop(ADD)
	s(15) = s(11)
	nop(DUP4)
	s(16) = s(14)
	nop(DUP2)
	l(l2) = s(15)
	nop(MSTORE)
	s(15) = 32
	nop(PUSH1)
	s(14) = s(15)+s(14)
	nop(ADD)
	s(15) = s(12)
	nop(DUP3)
	s(16) = 255
	nop(PUSH1)
	s(15) = and(s(16), s(15))
	nop(AND)
	s(16) = 255
	nop(PUSH1)
	s(15) = and(s(16), s(15))
	nop(AND)
	s(16) = s(14)
	nop(DUP2)
	l(l3) = s(15)
	nop(MSTORE)
	s(15) = 32
	nop(PUSH1)
	s(14) = s(15)+s(14)
	nop(ADD)
	s(15) = s(9)
	s(9) = s(14)
	s(14) = s(15)
	nop(SWAP5)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(10) = s(11)-s(10)
	nop(SUB)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	nop(LOG1)
	s(8) = 16700
	nop(PUSH2)
	call(block16700(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0)))
	nop(JUMP)

block16687(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(8) = s(4)
	nop(DUP4)
	s(9) = s(8)
	nop(DUP1)
	s(10) = 1
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(4)
	s(4) = s(9)
	s(9) = s(10)
	nop(SWAP5)
	nop(POP)
	nop(POP)
	s(8) = 13914
	nop(PUSH2)
	call(block13914(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(bonusShare), g(guidesStat), g(totalWithdrawn), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize, timestamp))
	nop(JUMP)

block16700(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(JUMPDEST)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	call(block3895(s(0)))
	nop(JUMP)

jump16708(s(5), s(4), s(3), s(2), s(1), s(0), g(supplier), g(bountyCap), g(distributedBountyStakes), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0), caller)=>
	eq(s(5), s(4))
	call(block16800(s(3), s(2), s(1), s(0),g(supplier), g(bountyCap), g(distributedBountyStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0)))

jump16708(s(5), s(4), s(3), s(2), s(1), s(0), g(supplier), g(bountyCap), g(distributedBountyStakes), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0), caller)=>
	neq(s(5), s(4))
	call(block16796(s(3), s(2), s(1), s(0)))

block16708(s(3), s(2), s(1), s(0), g(supplier), g(bountyCap), g(distributedBountyStakes), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(4) = 3
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(5) = g(balances)
	nop(SLOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(4) = s(5)/s(4)
	nop(DIV)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(5) = caller
	nop(CALLER)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	call(jump16708(s(5),s(4),s(3),s(2),s(1),s(0),g(supplier), g(bountyCap), g(distributedBountyStakes), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block16796(s(3), s(2), s(1), s(0))=>
	s(4) = 0
	nop(PUSH1)
	s(5) = s(4)
	nop(DUP1)
	nop(REVERT)

block16800(s(3), s(2), s(1), s(0), g(supplier), g(bountyCap), g(distributedBountyStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(4) = 24
	nop(PUSH1)
	s(4) = g(bountyCap)
	nop(SLOAD)
	s(5) = s(3)
	nop(DUP2)
	s(6) = 23
	nop(PUSH1)
	s(6) = g(distributedBountyStakes)
	nop(SLOAD)
	s(5) = s(6)+s(5)
	nop(ADD)
	call(jump16800(s(5),s(4),s(3),s(2),s(1),s(0),g(supplier), g(bountyCap), g(distributedBountyStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump16800(s(5), s(4), s(3), s(2), s(1), s(0), g(supplier), g(bountyCap), g(distributedBountyStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0))=>
	leq(s(5), s(4))
	call(block16821(s(3), s(2), s(1), s(0),g(supplier), g(distributedBountyStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0)))

jump16800(s(5), s(4), s(3), s(2), s(1), s(0), g(supplier), g(bountyCap), g(distributedBountyStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0))=>
	gt(s(5), s(4))
	call(block16817(s(3), s(2), s(1), s(0)))

block16817(s(3), s(2), s(1), s(0))=>
	s(4) = 0
	nop(PUSH1)
	s(5) = s(4)
	nop(DUP1)
	nop(REVERT)

block16821(s(3), s(2), s(1), s(0), g(supplier), g(distributedBountyStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(4) = 16903
	nop(PUSH2)
	s(5) = s(3)
	nop(DUP2)
	s(6) = 2
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(2)
	nop(DUP6)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	l(l6) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(6)
	nop(DUP2)
	l(l7) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	gl = s(6)
	s(6) = fresh(0)
	nop(SLOAD)
	s(7) = 22395
	nop(PUSH2)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 4294967295
	nop(PUSH4)
	s(7) = and(s(8), s(7))
	nop(AND)
	call(block22395_3(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(supplier), g(distributedBountyStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0)))
	nop(JUMP)

block16903(s(4), s(3), s(2), s(1), s(0), g(supplier), g(distributedBountyStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(5) = 2
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(2)
	nop(DUP5)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l6) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	l(l7) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(5) = sha3(s(6), s(5))
	nop(SHA3)
	s(6) = s(4)
	nop(DUP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	gs(1) = s(6)
	gs(2) = s(5)
	nop(SSTORE)
	nop(POP)
	s(4) = s(3)
	nop(DUP1)
	s(5) = 0
	nop(PUSH1)
	s(6) = s(5)
	nop(DUP1)
	s(7) = s(4)
	nop(DUP3)
	s(8) = s(5)
	nop(DUP3)
	s(8) = g(totalSupply)
	nop(SLOAD)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(4)
	s(4) = s(7)
	s(7) = s(8)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(6) = s(4)
	nop(DUP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	g(totalSupply) = s(5)
	nop(SSTORE)
	nop(POP)
	s(4) = s(3)
	nop(DUP1)
	s(5) = 23
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(4)
	nop(DUP3)
	s(8) = s(5)
	nop(DUP3)
	s(8) = g(distributedBountyStakes)
	nop(SLOAD)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(4)
	s(4) = s(7)
	s(7) = s(8)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(6) = s(4)
	nop(DUP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	g(distributedBountyStakes) = s(5)
	nop(SSTORE)
	nop(POP)
	s(4) = 62614538958505596320647097984881409505025540992403589762143773726516554587899
	nop(PUSH32)
	s(5) = s(2)
	nop(DUP3)
	s(6) = s(3)
	nop(DUP3)
	s(7) = 64
	nop(PUSH1)
	s(7) = l(l0)
	nop(MLOAD)
	s(8) = s(7)
	nop(DUP1)
	s(9) = s(5)
	nop(DUP4)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l1) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(6)
	nop(DUP3)
	s(10) = s(8)
	nop(DUP2)
	l(l4) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(5)
	s(5) = s(8)
	s(8) = s(9)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	nop(POP)
	s(6) = 64
	nop(PUSH1)
	s(6) = l(l0)
	nop(MLOAD)
	s(7) = s(6)
	nop(DUP1)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	s(6) = s(7)-s(6)
	nop(SUB)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	nop(LOG1)
	s(4) = s(2)
	nop(DUP2)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	s(5) = 25
	nop(PUSH1)
	s(6) = 1
	nop(PUSH1)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(6) = g(supplier)
	nop(SLOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 256
	nop(PUSH2)
	s(6) = s(7)^s(6)
	nop(EXP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 100389287136786176327247604509743168900146139575972864366142685224231313322991
	nop(PUSH32)
	s(7) = s(3)
	nop(DUP4)
	s(8) = 64
	nop(PUSH1)
	s(8) = l(l0)
	nop(MLOAD)
	s(9) = s(8)
	nop(DUP1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(7)
	s(7) = s(9)
	s(9) = s(10)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(8) = 64
	nop(PUSH1)
	s(8) = l(l0)
	nop(MLOAD)
	s(9) = s(8)
	nop(DUP1)
	s(10) = s(7)
	s(7) = s(9)
	s(9) = s(10)
	nop(SWAP2)
	s(8) = s(9)-s(8)
	nop(SUB)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	nop(LOG3)
	nop(POP)
	nop(POP)
	call(block3972(s(0)))
	nop(JUMP)

block17247(s(1), s(0), g(transferedToPool), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 25
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(transferedToPool)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 255
	nop(PUSH1)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block3995(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block17266(s(1), s(0), g(distributedBonusStakes), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 41
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(distributedBonusStakes)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 255
	nop(PUSH1)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block4044(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block17285(s(1), s(0), g(saleStat), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 28
	nop(PUSH1)
	s(2) = g(saleStat)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block4093(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

jump17291(s(4), s(3), s(2), s(1), s(0), g(usdPerEther), g(balances), l(l4), l(l1), l(l0), caller)=>
	eq(s(4), s(3))
	call(block17383(s(2), s(1), s(0),g(usdPerEther), l(l4), l(l1), l(l0)))

jump17291(s(4), s(3), s(2), s(1), s(0), g(usdPerEther), g(balances), l(l4), l(l1), l(l0), caller)=>
	neq(s(4), s(3))
	call(block17379(s(2), s(1), s(0)))

block17291(s(2), s(1), s(0), g(usdPerEther), g(balances), l(l4), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(3) = 3
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(4) = g(balances)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = caller
	nop(CALLER)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	call(jump17291(s(4),s(3),s(2),s(1),s(0),g(usdPerEther), g(balances), l(l4), l(l1), l(l0), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block17379(s(2), s(1), s(0))=>
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	nop(REVERT)

block17383(s(2), s(1), s(0), g(usdPerEther), l(l4), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 108458020438957567819856154950935969306536107057257815563412500765568210918370
	nop(PUSH32)
	s(4) = 7
	nop(PUSH1)
	s(4) = g(usdPerEther)
	nop(SLOAD)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 64
	nop(PUSH1)
	s(6) = l(l0)
	nop(MLOAD)
	s(7) = s(6)
	nop(DUP1)
	s(8) = s(4)
	nop(DUP4)
	s(9) = s(7)
	nop(DUP2)
	l(l1) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(5)
	nop(DUP3)
	s(9) = s(7)
	nop(DUP2)
	l(l4) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(4)
	s(4) = s(7)
	s(7) = s(8)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	nop(POP)
	s(5) = 64
	nop(PUSH1)
	s(5) = l(l0)
	nop(MLOAD)
	s(6) = s(5)
	nop(DUP1)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	s(5) = s(6)-s(5)
	nop(SUB)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(LOG1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 7
	nop(PUSH1)
	s(5) = s(3)
	nop(DUP2)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	g(usdPerEther) = s(4)
	nop(SSTORE)
	nop(POP)
	nop(POP)
	call(block4158(s(0)))
	nop(JUMP)

block17458(s(1), s(0), g(distributedFundariaStakes), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 16
	nop(PUSH1)
	s(2) = g(distributedFundariaStakes)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block4181(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block17464(s(1), s(0), g(owner), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 4
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(owner)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block4224(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

jump17502(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	eq(s(6), 1 )
	call(block17699(s(5), s(4), s(3), s(2), s(1), s(0),g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))

jump17502(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	neq(s(6), 1 )
	call(block17592(s(5), s(4), s(3), s(2), s(1), s(0),g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))

block17502(s(3), s(2), s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(4) = 0
	nop(PUSH1)
	s(5) = 3
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(6) = g(balances)
	nop(SLOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 256
	nop(PUSH2)
	s(6) = s(7)^s(6)
	nop(EXP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(5)= eq(s(6), s(5))
	nop(EQ)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(6) = s(5)
	nop(DUP1)
	s(7) = 17699
	nop(PUSH2)
	call(jump17502(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMPI)

block17592(s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(POP)
	s(5) = 3
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(6) = g(balances)
	nop(SLOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 256
	nop(PUSH2)
	s(6) = s(7)^s(6)
	nop(EXP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(5)= eq(s(6), s(5))
	nop(EQ)
	s(6) = s(5)
	nop(DUP1)
	call(jump17592(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump17592(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	eq(s(6), 0)
	call(block17698(s(5), s(4), s(3), s(2), s(1), s(0),g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))

jump17592(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(balances), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	neq(s(6), 0)
	call(block17680(s(5), s(4), s(3), s(2), s(1), s(0),g(owner), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))

block17680(s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(fundariaStakesFrozen), g(teamStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(POP)
	s(5) = 1
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(6) = g(teamStakesFrozen)
	nop(SLOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 256
	nop(PUSH2)
	s(6) = s(7)^s(6)
	nop(EXP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	call(block17698(s(5),s(4),s(3),s(2),s(1),s(0),g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))

block17698(s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	call(block17699(s(5),s(4),s(3),s(2),s(1),s(0),g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))

block17699(s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = s(5)
	nop(DUP1)
	s(7) = 17811
	nop(PUSH2)
	call(jump17699(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMPI)

jump17699(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	eq(s(6), 1 )
	call(block17811(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller))

jump17699(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	neq(s(6), 1 )
	call(block17705(s(5), s(4), s(3), s(2), s(1), s(0),g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))

block17705(s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(POP)
	s(5) = 4
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(6) = g(owner)
	nop(SLOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 256
	nop(PUSH2)
	s(6) = s(7)^s(6)
	nop(EXP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(5)= eq(s(6), s(5))
	nop(EQ)
	s(6) = s(5)
	nop(DUP1)
	call(jump17705(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump17705(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	eq(s(6), 0)
	call(block17810(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller))

jump17705(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(owner), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	neq(s(6), 0)
	call(block17793(s(5), s(4), s(3), s(2), s(1), s(0),g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller))

block17793(s(5), s(4), s(3), s(2), s(1), s(0), g(fundariaStakesFrozen), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(POP)
	s(5) = 1
	nop(PUSH1)
	s(6) = s(5)
	nop(DUP1)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(6) = g(fundariaStakesFrozen)
	nop(SLOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 256
	nop(PUSH2)
	s(6) = s(7)^s(6)
	nop(EXP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	call(block17810(s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))

block17810(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	call(block17811(s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))

block17811(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	call(jump17811(s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump17811(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	neq(s(5), 0)
	call(block17822(s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller))

jump17811(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	eq(s(5), 0)
	call(block17818(s(4), s(3), s(2), s(1), s(0)))

block17818(s(4), s(3), s(2), s(1), s(0))=>
	s(5) = 0
	nop(PUSH1)
	s(6) = s(5)
	nop(DUP1)
	nop(REVERT)

block17822(s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(5) = 17965
	nop(PUSH2)
	s(6) = s(3)
	nop(DUP3)
	s(7) = 5
	nop(PUSH1)
	s(8) = 0
	nop(PUSH1)
	s(9) = caller
	nop(CALLER)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l6) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l7) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(2)
	nop(DUP7)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = s(8)
	nop(DUP2)
	l(l6) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(7)
	nop(DUP2)
	l(l7) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 0
	nop(PUSH1)
	s(7) = sha3(s(8), s(7))
	nop(SHA3)
	gl = s(7)
	s(7) = fresh(0)
	nop(SLOAD)
	s(8) = 22395
	nop(PUSH2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(6)
	s(6) = s(8)
	s(8) = s(9)
	nop(SWAP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 4294967295
	nop(PUSH4)
	s(8) = and(s(9), s(8))
	nop(AND)
	call(block22395_4(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMP)

block17965(s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(6) = 5
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = caller
	nop(CALLER)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	l(l6) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(6)
	nop(DUP2)
	l(l7) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(2)
	nop(DUP6)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = s(7)
	nop(DUP2)
	l(l6) = s(8)
	nop(MSTORE)
	s(8) = 32
	nop(PUSH1)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(6)
	nop(DUP2)
	l(l7) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	s(7) = s(5)
	nop(DUP2)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	gs(1) = s(7)
	gs(2) = s(6)
	nop(SSTORE)
	nop(POP)
	s(5) = s(2)
	nop(DUP3)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = 63486140976153616755203102783360879283472101686154884697241723088393386309925
	nop(PUSH32)
	s(8) = 5
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = caller
	nop(CALLER)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l6) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l7) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(2)
	nop(DUP8)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l6) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = s(8)
	nop(DUP2)
	l(l7) = s(9)
	nop(MSTORE)
	s(9) = 32
	nop(PUSH1)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 0
	nop(PUSH1)
	s(8) = sha3(s(9), s(8))
	nop(SHA3)
	gl = s(8)
	s(8) = fresh(0)
	nop(SLOAD)
	s(9) = 64
	nop(PUSH1)
	s(9) = l(l0)
	nop(MLOAD)
	s(10) = s(9)
	nop(DUP1)
	s(11) = s(8)
	nop(DUP3)
	s(12) = s(10)
	nop(DUP2)
	l(l1) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(9) = 64
	nop(PUSH1)
	s(9) = l(l0)
	nop(MLOAD)
	s(10) = s(9)
	nop(DUP1)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	s(9) = s(10)-s(9)
	nop(SUB)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	nop(LOG3)
	s(5) = 1
	nop(PUSH1)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	s(5) = s(1)
	s(1) = s(4)
	s(4) = s(5)
	nop(SWAP3)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block4365(s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block18328(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(10) = 0
	nop(PUSH1)
	s(11) = 34
	nop(PUSH1)
	s(11) = g(saleCap)
	nop(SLOAD)
	s(12) = 1000000000000000000
	nop(PUSH8)
	s(13) = 100
	nop(PUSH1)
	s(14) = 7
	nop(PUSH1)
	s(14) = g(usdPerEther)
	nop(SLOAD)
	s(15) = s(9)
	nop(DUP6)
	s(14) = s(15)*s(14)
	nop(MUL)
	s(13) = s(14)*s(13)
	nop(MUL)
	s(14) = s(12)
	nop(DUP2)
	call(jump18328(s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump18328(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(14), 0)
	call(block18359(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump18328(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(14), 0)
	call(block18358_0(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block18358(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump18359(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(13), 0)
	call(block18369(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump18359(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(13), 0)
	call(block18368_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block18359(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(12) = s(13)/s(12)
	nop(DIV)
	s(13) = s(11)
	nop(DUP2)
	call(jump18359(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block18368(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block18369(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(11) = s(12)/s(11)
	nop(DIV)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	nop(POP)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	nop(POP)
	call(block20260(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block18377(s(1), s(0), g(fundariaCap), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 14
	nop(PUSH1)
	s(2) = g(fundariaCap)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block4477(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block18383(s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(4) = 0
	nop(PUSH1)
	s(5) = 5
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(2)
	nop(DUP5)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l6) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	l(l7) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(5) = sha3(s(6), s(5))
	nop(SHA3)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(3)
	nop(DUP4)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(8) = s(6)
	nop(DUP2)
	l(l6) = s(7)
	nop(MSTORE)
	s(7) = 32
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(5)
	nop(DUP2)
	l(l7) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 0
	nop(PUSH1)
	s(5) = sha3(s(6), s(5))
	nop(SHA3)
	gl = s(5)
	s(5) = fresh(0)
	nop(SLOAD)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	s(5) = s(1)
	s(1) = s(4)
	s(4) = s(5)
	nop(SWAP3)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block4596(s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block18518(s(1), s(0), g(priceIsFrozen), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 38
	nop(PUSH1)
	s(2) = g(priceIsFrozen)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block4639(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block18524(s(1), s(0), g(saleCap), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 34
	nop(PUSH1)
	s(2) = g(saleCap)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block4682(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

jump18530(s(4), s(3), s(2), s(1), s(0), g(pool), g(balances), caller)=>
	eq(s(4), s(3))
	call(block18622(s(2), s(1), s(0),g(pool)))

jump18530(s(4), s(3), s(2), s(1), s(0), g(pool), g(balances), caller)=>
	neq(s(4), s(3))
	call(block18618(s(2), s(1), s(0)))

block18530(s(2), s(1), s(0), g(pool), g(balances), caller)=>
	nop(JUMPDEST)
	s(3) = 3
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(4) = g(balances)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = caller
	nop(CALLER)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	call(jump18530(s(4),s(3),s(2),s(1),s(0),g(pool), g(balances), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block18618(s(2), s(1), s(0))=>
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	nop(REVERT)

block18622(s(2), s(1), s(0), g(pool))=>
	nop(JUMPDEST)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 18
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	nop(DUP2)
	s(6) = g(pool)
	nop(SLOAD)
	s(7) = s(5)
	nop(DUP2)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = s(8)*s(7)
	nop(MUL)
	s(7) = not(s(7))
	nop(NOT)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(3)
	nop(DUP4)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(6) = s(7)*s(6)
	nop(MUL)
	s(5) = or(s(6), s(5))
	nop(OR)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	g(pool) = s(4)
	nop(SSTORE)
	nop(POP)
	nop(POP)
	call(block4769(s(0)))
	nop(JUMP)

block18690(s(1), s(0), g(teamShare), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 12
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(teamShare)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 255
	nop(PUSH1)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block4792(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

jump18709(s(3), s(2), s(1), s(0), g(lastStakePriceUSCents), g(balances), caller)=>
	eq(s(3), s(2))
	call(block18801(s(1), s(0),g(lastStakePriceUSCents)))

jump18709(s(3), s(2), s(1), s(0), g(lastStakePriceUSCents), g(balances), caller)=>
	neq(s(3), s(2))
	call(block18797(s(1), s(0)))

block18709(s(1), s(0), g(lastStakePriceUSCents), g(balances), caller)=>
	nop(JUMPDEST)
	s(2) = 3
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(balances)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = caller
	nop(CALLER)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	call(jump18709(s(3),s(2),s(1),s(0),g(lastStakePriceUSCents), g(balances), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block18797(s(1), s(0))=>
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	nop(REVERT)

block18801(s(1), s(0), g(lastStakePriceUSCents))=>
	nop(JUMPDEST)
	s(2) = 1
	nop(PUSH1)
	s(3) = 36
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	nop(DUP2)
	s(5) = g(lastStakePriceUSCents)
	nop(SLOAD)
	s(6) = s(4)
	nop(DUP2)
	s(7) = 255
	nop(PUSH1)
	s(6) = s(7)*s(6)
	nop(MUL)
	s(6) = not(s(6))
	nop(NOT)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	s(6) = s(2)
	nop(DUP4)
	s(6)= eq(s(6), 0)
	nop(ISZERO)
	s(6)= eq(s(6), 0)
	nop(ISZERO)
	s(5) = s(6)*s(5)
	nop(MUL)
	s(4) = or(s(5), s(4))
	nop(OR)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	g(lastStakePriceUSCents) = s(3)
	nop(SSTORE)
	nop(POP)
	call(block4841(s(0)))
	nop(JUMP)

jump18830(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(bonusShare), l(l6), l(l1), l(l0))=>
	lt(s(6), s(5))
	call(block18845(s(4), s(3), s(2), s(1), s(0), l(l6), l(l1), l(l0)))

jump18830(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(bonusShare), l(l6), l(l1), l(l0))=>
	geq(s(6), s(5))
	call(block18844(s(4), s(3), s(2), s(1), s(0)))

block18830(s(2), s(1), s(0), g(bonusShare), l(l6), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 42
	nop(PUSH1)
	s(4) = s(2)
	nop(DUP2)
	s(5) = s(3)
	nop(DUP2)
	s(5) = g(bonusShare)
	nop(SLOAD)
	s(6) = s(4)
	nop(DUP2)
	call(jump18830(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(bonusShare), l(l6), l(l1), l(l0)))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block18844(s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block18845(s(4), s(3), s(2), s(1), s(0), l(l6), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 0
	nop(PUSH1)
	l(l6) = s(4)
	nop(MSTORE)
	s(4) = 32
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(4) = sha3(s(5), s(4))
	nop(SHA3)
	s(3) = s(4)+s(3)
	nop(ADD)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(2)
	s(2) = s(4)
	s(4) = s(5)
	nop(SWAP2)
	nop(POP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(POP)
	gl = s(2)
	s(2) = fresh(0)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block4886(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block18865(s(1), s(0), g(teamStakesFrozen), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 1
	nop(PUSH1)
	s(3) = 0
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(teamStakesFrozen)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 255
	nop(PUSH1)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block4929(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block18884(s(1), s(0), g(financePeriodsCount), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 41
	nop(PUSH1)
	s(3) = 1
	nop(PUSH1)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(3) = g(financePeriodsCount)
	nop(SLOAD)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(4) = 256
	nop(PUSH2)
	s(3) = s(4)^s(3)
	nop(EXP)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	s(2) = s(3)/s(2)
	nop(DIV)
	s(3) = 255
	nop(PUSH1)
	s(2) = and(s(3), s(2))
	nop(AND)
	s(3) = s(1)
	nop(DUP2)
	call(block4976(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block18903(s(1), s(0), g(businessPlannedPeriodDuration), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 9
	nop(PUSH1)
	s(2) = g(businessPlannedPeriodDuration)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block5025(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block18909(s(2), s(1), s(0), g(balances), caller)=>
	nop(JUMPDEST)
	s(3) = 3
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(4) = g(balances)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = caller
	nop(CALLER)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	call(jump18909(s(4),s(3),s(2),s(1),s(0),g(balances), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump18909(s(4), s(3), s(2), s(1), s(0), g(balances), caller)=>
	eq(s(4), s(3))
	call(block19001(s(2), s(1), s(0),g(balances)))

jump18909(s(4), s(3), s(2), s(1), s(0), g(balances), caller)=>
	neq(s(4), s(3))
	call(block18997(s(2), s(1), s(0)))

block18997(s(2), s(1), s(0))=>
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	nop(REVERT)

block19001(s(2), s(1), s(0), g(balances))=>
	nop(JUMPDEST)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 3
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	nop(DUP2)
	s(6) = g(balances)
	nop(SLOAD)
	s(7) = s(5)
	nop(DUP2)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = s(8)*s(7)
	nop(MUL)
	s(7) = not(s(7))
	nop(NOT)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(3)
	nop(DUP4)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(6) = s(7)*s(6)
	nop(MUL)
	s(5) = or(s(6), s(5))
	nop(OR)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	g(balances) = s(4)
	nop(SSTORE)
	nop(POP)
	nop(POP)
	call(block5112(s(0)))
	nop(JUMP)

block19069(s(1), s(0), g(bountyCap), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 24
	nop(PUSH1)
	s(2) = g(bountyCap)
	nop(SLOAD)
	s(3) = s(1)
	nop(DUP2)
	call(block5135(s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block19075(s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), g(balances), l(l6), l(l4), l(l1), l(l0), address, balance, caller, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 0
	nop(PUSH1)
	s(5) = 3
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(6) = g(balances)
	nop(SLOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 256
	nop(PUSH2)
	s(6) = s(7)^s(6)
	nop(EXP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = caller
	nop(CALLER)
	s(7) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(6) = and(s(7), s(6))
	nop(AND)
	call(jump19075(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), g(balances), l(l6), l(l4), l(l1), l(l0), address, balance, caller, returndatasize, timestamp))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump19075(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), g(balances), l(l6), l(l4), l(l1), l(l0), address, balance, caller, returndatasize, timestamp)=>
	eq(s(6), s(5))
	call(block19172(s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))

jump19075(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), g(balances), l(l6), l(l4), l(l1), l(l0), address, balance, caller, returndatasize, timestamp)=>
	neq(s(6), s(5))
	call(block19168(s(4), s(3), s(2), s(1), s(0)))

block19168(s(4), s(3), s(2), s(1), s(0))=>
	s(5) = 0
	nop(PUSH1)
	s(6) = s(5)
	nop(DUP1)
	nop(REVERT)

block19172(s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(5) = 0
	nop(PUSH1)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	nop(POP)
	call(block19177(s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))

jump19177(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	gt(s(6), s(5))
	call(block19764(s(4), s(3), s(2), s(1), s(0)))

jump19177(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	leq(s(6), s(5))
	call(block19208(s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))

block19177(s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(5) = 41
	nop(PUSH1)
	s(6) = 1
	nop(PUSH1)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(6) = g(financePeriodsCount)
	nop(SLOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 256
	nop(PUSH2)
	s(6) = s(7)^s(6)
	nop(EXP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	s(7) = 255
	nop(PUSH1)
	s(6) = and(s(7), s(6))
	nop(AND)
	call(jump19177(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block19208(s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	s(5) = 42
	nop(PUSH1)
	s(6) = s(4)
	nop(DUP2)
	s(7) = 255
	nop(PUSH1)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	nop(DUP2)
	s(7) = g(bonusShare)
	nop(SLOAD)
	s(8) = s(6)
	nop(DUP2)
	call(jump19208(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump19208(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	lt(s(8), s(7))
	call(block19225(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))

jump19208(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	geq(s(8), s(7))
	call(block19224(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block19224(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block19225(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 0
	nop(PUSH1)
	l(l6) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	s(5) = s(6)+s(5)
	nop(ADD)
	gl = s(5)
	s(5) = fresh(0)
	nop(SLOAD)
	s(6) = timestamp
	nop(TIMESTAMP)
	s(5) = lt(s(6), s(5))
	nop(LT)
	s(6) = s(5)
	nop(DUP1)
	s(7) = 19308
	nop(PUSH2)
	call(jump19225(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))
	nop(JUMPI)

jump19225(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	eq(s(6), 1 )
	call(block19308(s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))

jump19225(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	neq(s(6), 1 )
	call(block19244(s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))

block19244(s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	nop(POP)
	s(5) = 41
	nop(PUSH1)
	s(6) = 1
	nop(PUSH1)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(6) = g(financePeriodsCount)
	nop(SLOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 256
	nop(PUSH2)
	s(6) = s(7)^s(6)
	nop(EXP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = s(4)
	nop(DUP2)
	s(7) = 255
	nop(PUSH1)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(5)= eq(s(6), s(5))
	nop(EQ)
	s(6) = s(5)
	nop(DUP1)
	call(jump19244(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump19244(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	eq(s(6), 0)
	call(block19307(s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))

jump19244(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	neq(s(6), 0)
	call(block19275(s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))

jump19275(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	lt(s(8), s(7))
	call(block19293(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))

jump19275(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	geq(s(8), s(7))
	call(block19292(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block19275(s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	nop(POP)
	s(5) = 42
	nop(PUSH1)
	s(6) = s(4)
	nop(DUP2)
	s(7) = 255
	nop(PUSH1)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	nop(DUP2)
	s(7) = g(bonusShare)
	nop(SLOAD)
	s(8) = s(6)
	nop(DUP2)
	call(jump19275(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block19292(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block19293(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 0
	nop(PUSH1)
	l(l6) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	s(5) = s(6)+s(5)
	nop(ADD)
	gl = s(5)
	s(5) = fresh(0)
	nop(SLOAD)
	s(6) = timestamp
	nop(TIMESTAMP)
	s(5) = gt(s(6), s(5))
	nop(GT)
	call(block19307(s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))

block19307(s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	nop(JUMPDEST)
	call(block19308(s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))

block19308(s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	nop(JUMPDEST)
	call(jump19308(s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump19308(s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	eq(s(5), 0)
	call(block19751(s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))

jump19308(s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	neq(s(5), 0)
	call(block19314(s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))

block19314(s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	s(5) = 1
	nop(PUSH1)
	s(6) = 41
	nop(PUSH1)
	s(7) = 1
	nop(PUSH1)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(7) = g(financePeriodsCount)
	nop(SLOAD)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 256
	nop(PUSH2)
	s(7) = s(8)^s(7)
	nop(EXP)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(6) = s(7)/s(6)
	nop(DIV)
	s(7) = 255
	nop(PUSH1)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(5) = s(6)+s(5)
	nop(ADD)
	s(6) = 255
	nop(PUSH1)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 21
	nop(PUSH1)
	s(6) = g(allowedAmountTransferedToPoolTotal)
	nop(SLOAD)
	s(7) = 31
	nop(PUSH1)
	s(7) = g(distributedSaleStakes)
	nop(SLOAD)
	s(8) = 30
	nop(PUSH1)
	s(8) = g(owner)
	nop(SLOAD)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(6) = s(7)-s(6)
	nop(SUB)
	s(7) = 1
	nop(PUSH1)
	s(8) = s(4)
	nop(DUP4)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 255
	nop(PUSH1)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(6) = s(7)*s(6)
	nop(MUL)
	s(7) = s(5)
	nop(DUP2)
	call(jump19314(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump19314(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	neq(s(7), 0)
	call(block19363(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))

jump19314(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	eq(s(7), 0)
	call(block19362(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block19362(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block19363(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(6) = s(2)
	s(2) = s(5)
	s(5) = s(6)
	nop(SWAP3)
	nop(POP)
	s(5) = 21
	nop(PUSH1)
	s(5) = g(allowedAmountTransferedToPoolTotal)
	nop(SLOAD)
	s(6) = 43
	nop(PUSH1)
	s(6) = g(guideInvestmentAttractedShareToPay)
	nop(SLOAD)
	s(5) = s(6)-s(5)
	nop(SUB)
	s(6) = s(2)
	nop(DUP4)
	s(5) = gt(s(6), s(5))
	nop(GT)
	s(6) = s(5)
	nop(DUP1)
	s(7) = 19388
	nop(PUSH2)
	call(jump19363(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))
	nop(JUMPI)

jump19363(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	eq(s(6), 1 )
	call(block19388(s(5), s(4), s(3), s(2), s(1), s(0),g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))

jump19363(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	neq(s(6), 1 )
	call(block19381(s(5), s(4), s(3), s(2), s(1), s(0),g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))

block19381(s(5), s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	nop(POP)
	s(5) = 0
	nop(PUSH1)
	s(6) = 20
	nop(PUSH1)
	s(6) = g(allowedAmountToTransferToPool)
	nop(SLOAD)
	s(5) = gt(s(6), s(5))
	nop(GT)
	call(block19388(s(5),s(4),s(3),s(2),s(1),s(0),g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))

jump19388(s(5), s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	eq(s(5), 0)
	call(block19738(s(4), s(3), s(2), s(1), s(0),g(allowedAmountToTransferToPool)))

jump19388(s(5), s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	neq(s(5), 0)
	call(block19394(s(4), s(3), s(2), s(1), s(0),g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))

block19388(s(5), s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	nop(JUMPDEST)
	call(jump19388(s(5),s(4),s(3),s(2),s(1),s(0),g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump19394(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	leq(s(6), s(5))
	call(block19440(s(4), s(3), s(2), s(1), s(0),g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))

jump19394(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	gt(s(6), s(5))
	call(block19405(s(4), s(3), s(2), s(1), s(0),g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))

block19394(s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	s(5) = 0
	nop(PUSH1)
	s(6) = 20
	nop(PUSH1)
	s(6) = g(allowedAmountToTransferToPool)
	nop(SLOAD)
	call(jump19394(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block19405(s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	s(5) = 20
	nop(PUSH1)
	s(5) = g(allowedAmountToTransferToPool)
	nop(SLOAD)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	nop(POP)
	s(5) = 20
	nop(PUSH1)
	s(5) = g(allowedAmountToTransferToPool)
	nop(SLOAD)
	s(6) = 21
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(5)
	nop(DUP3)
	s(9) = s(6)
	nop(DUP3)
	s(9) = g(allowedAmountTransferedToPoolTotal)
	nop(SLOAD)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(5)
	s(5) = s(8)
	s(8) = s(9)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(7) = s(5)
	nop(DUP2)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	g(allowedAmountTransferedToPoolTotal) = s(6)
	nop(SSTORE)
	nop(POP)
	s(5) = 0
	nop(PUSH1)
	s(6) = 20
	nop(PUSH1)
	s(7) = s(5)
	nop(DUP2)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	g(allowedAmountToTransferToPool) = s(6)
	nop(SSTORE)
	nop(POP)
	s(5) = 19448
	nop(PUSH2)
	call(block19448(s(4),s(3),s(2),s(1),s(0),g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))
	nop(JUMP)

block19440(s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(5) = 43
	nop(PUSH1)
	s(5) = g(guideInvestmentAttractedShareToPay)
	nop(SLOAD)
	s(6) = s(2)
	nop(DUP4)
	s(5) = s(6)-s(5)
	nop(SUB)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	nop(POP)
	call(block19448(s(4),s(3),s(2),s(1),s(0),g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))

block19448(s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(5) = address
	nop(ADDRESS)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(5) = balance
	nop(BALANCE)
	s(6) = s(3)
	nop(DUP3)
	s(5) = gt(s(6), s(5))
	nop(GT)
	s(6) = s(5)
	nop(DUP1)
	s(7) = 19512
	nop(PUSH2)
	call(jump19448(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))
	nop(JUMPI)

jump19448(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	eq(s(6), 1 )
	call(block19512(s(5), s(4), s(3), s(2), s(1), s(0),g(guideInvestmentAttractedShareToPay), g(allowedAmountToTransferToPool), g(pool), l(l4), l(l1), l(l0), address, balance, returndatasize))

jump19448(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	neq(s(6), 1 )
	call(block19480(s(5), s(4), s(3), s(2), s(1), s(0),g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))

jump19480(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	lt(s(8), s(7))
	call(block19498(s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(guideInvestmentAttractedShareToPay), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))

jump19480(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	geq(s(8), s(7))
	call(block19497(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block19480(s(5), s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	nop(POP)
	s(5) = 42
	nop(PUSH1)
	s(6) = s(4)
	nop(DUP2)
	s(7) = 255
	nop(PUSH1)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	nop(DUP2)
	s(7) = g(bonusShare)
	nop(SLOAD)
	s(8) = s(6)
	nop(DUP2)
	call(jump19480(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(guideInvestmentAttractedShareToPay), g(bonusShare), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block19497(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block19498(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(allowedAmountToTransferToPool), g(pool), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 0
	nop(PUSH1)
	l(l6) = s(6)
	nop(MSTORE)
	s(6) = 32
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(6) = sha3(s(7), s(6))
	nop(SHA3)
	s(5) = s(6)+s(5)
	nop(ADD)
	gl = s(5)
	s(5) = fresh(0)
	nop(SLOAD)
	s(6) = timestamp
	nop(TIMESTAMP)
	s(5) = gt(s(6), s(5))
	nop(GT)
	call(block19512(s(5),s(4),s(3),s(2),s(1),s(0),g(guideInvestmentAttractedShareToPay), g(allowedAmountToTransferToPool), g(pool), l(l4), l(l1), l(l0), address, balance, returndatasize))

jump19512(s(5), s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(allowedAmountToTransferToPool), g(pool), l(l4), l(l1), l(l0), address, balance, returndatasize)=>
	eq(s(5), 0)
	call(block19544(s(4), s(3), s(2), s(1), s(0),g(guideInvestmentAttractedShareToPay), g(allowedAmountToTransferToPool), g(pool), l(l4), l(l1), l(l0), returndatasize))

jump19512(s(5), s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(allowedAmountToTransferToPool), g(pool), l(l4), l(l1), l(l0), address, balance, returndatasize)=>
	neq(s(5), 0)
	call(block19518(s(4), s(3), s(2), s(1), s(0),g(guideInvestmentAttractedShareToPay), g(allowedAmountToTransferToPool), g(pool), l(l4), l(l1), l(l0), address, balance, returndatasize))

block19512(s(5), s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(allowedAmountToTransferToPool), g(pool), l(l4), l(l1), l(l0), address, balance, returndatasize)=>
	nop(JUMPDEST)
	call(jump19512(s(5),s(4),s(3),s(2),s(1),s(0),g(guideInvestmentAttractedShareToPay), g(allowedAmountToTransferToPool), g(pool), l(l4), l(l1), l(l0), address, balance, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block19518(s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(allowedAmountToTransferToPool), g(pool), l(l4), l(l1), l(l0), address, balance, returndatasize)=>
	s(5) = address
	nop(ADDRESS)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(5) = balance
	nop(BALANCE)
	s(6) = s(3)
	s(3) = s(5)
	s(5) = s(6)
	nop(SWAP2)
	nop(POP)
	call(block19544(s(4),s(3),s(2),s(1),s(0),g(guideInvestmentAttractedShareToPay), g(allowedAmountToTransferToPool), g(pool), l(l4), l(l1), l(l0), returndatasize))

jump19544(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(allowedAmountToTransferToPool), g(pool), l(l4), l(l1), l(l0), returndatasize)=>
	eq(s(6), 0)
	call(block19664(s(5), s(4), s(3), s(2), s(1), s(0),g(allowedAmountToTransferToPool), l(l4), l(l1), l(l0)))

jump19544(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(allowedAmountToTransferToPool), g(pool), l(l4), l(l1), l(l0), returndatasize)=>
	neq(s(6), 0)
	call(block19655(s(5), s(4), s(3), s(2), s(1), s(0), returndatasize))

block19544(s(4), s(3), s(2), s(1), s(0), g(guideInvestmentAttractedShareToPay), g(allowedAmountToTransferToPool), g(pool), l(l4), l(l1), l(l0), returndatasize)=>
	nop(JUMPDEST)
	s(5) = s(3)
	nop(DUP2)
	s(6) = 43
	nop(PUSH1)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(5)
	nop(DUP3)
	s(9) = s(6)
	nop(DUP3)
	s(9) = g(guideInvestmentAttractedShareToPay)
	nop(SLOAD)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(5)
	s(5) = s(8)
	s(8) = s(9)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(7) = s(5)
	nop(DUP2)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	g(guideInvestmentAttractedShareToPay) = s(6)
	nop(SSTORE)
	nop(POP)
	s(5) = 18
	nop(PUSH1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(6) = g(pool)
	nop(SLOAD)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 256
	nop(PUSH2)
	s(6) = s(7)^s(6)
	nop(EXP)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(5) = and(s(6), s(5))
	nop(AND)
	s(6) = 2300
	nop(PUSH2)
	s(7) = s(3)
	nop(DUP4)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = s(6)
	nop(DUP2)
	s(8)= eq(s(8), 0)
	nop(ISZERO)
	s(7) = s(8)*s(7)
	nop(MUL)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	s(8) = 64
	nop(PUSH1)
	s(8) = l(l0)
	nop(MLOAD)
	s(9) = 0
	nop(PUSH1)
	s(10) = 64
	nop(PUSH1)
	s(10) = l(l0)
	nop(MLOAD)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(8)
	nop(DUP4)
	s(11) = s(12)-s(11)
	nop(SUB)
	s(12) = s(10)
	nop(DUP2)
	s(13) = s(7)
	nop(DUP6)
	s(14) = s(5)
	nop(DUP9)
	s(15) = s(6)
	nop(DUP9)
	s(9) = 1
	nop(CALL)
	s(10) = s(5)
	s(5) = s(9)
	s(9) = s(10)
	nop(SWAP4)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(5)= eq(s(5), 0)
	nop(ISZERO)
	s(6) = s(5)
	nop(DUP1)
	call(jump19544(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(guideInvestmentAttractedShareToPay), g(allowedAmountToTransferToPool), g(pool), l(l4), l(l1), l(l0), returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block19655(s(5), s(4), s(3), s(2), s(1), s(0), returndatasize)=>
	s(6) = returndatasize
	nop(RETURNDATASIZE)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(7)
	nop(DUP1)
	nop(RETURNDATACOPY)
	s(7) = returndatasize
	nop(RETURNDATASIZE)
	s(8) = 0
	nop(PUSH1)
	nop(REVERT)

block19664(s(5), s(4), s(3), s(2), s(1), s(0), g(allowedAmountToTransferToPool), l(l4), l(l1), l(l0))=>
	nop(JUMPDEST)
	nop(POP)
	s(5) = 39485088300647221686824530596291872725412487376170972045504057697509214676812
	nop(PUSH32)
	s(6) = s(3)
	nop(DUP3)
	s(7) = 1
	nop(PUSH1)
	s(8) = s(4)
	nop(DUP4)
	s(7) = s(8)+s(7)
	nop(ADD)
	s(8) = 64
	nop(PUSH1)
	s(8) = l(l0)
	nop(MLOAD)
	s(9) = s(8)
	nop(DUP1)
	s(10) = s(6)
	nop(DUP4)
	s(11) = s(9)
	nop(DUP2)
	l(l1) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(7)
	nop(DUP3)
	s(11) = 255
	nop(PUSH1)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 255
	nop(PUSH1)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(9)
	nop(DUP2)
	l(l4) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(6)
	s(6) = s(9)
	s(9) = s(10)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	nop(POP)
	s(7) = 64
	nop(PUSH1)
	s(7) = l(l0)
	nop(MLOAD)
	s(8) = s(7)
	nop(DUP1)
	s(9) = s(6)
	s(6) = s(8)
	s(8) = s(9)
	nop(SWAP2)
	s(7) = s(8)-s(7)
	nop(SUB)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	nop(LOG1)
	call(block19738(s(4),s(3),s(2),s(1),s(0),g(allowedAmountToTransferToPool)))

block19738(s(4), s(3), s(2), s(1), s(0), g(allowedAmountToTransferToPool))=>
	nop(JUMPDEST)
	s(5) = 0
	nop(PUSH1)
	s(6) = 20
	nop(PUSH1)
	s(7) = s(5)
	nop(DUP2)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	g(allowedAmountToTransferToPool) = s(6)
	nop(SSTORE)
	nop(POP)
	s(5) = 19764
	nop(PUSH2)
	call(block19764(s(4),s(3),s(2),s(1),s(0)))
	nop(JUMP)

block19751(s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(5) = s(4)
	nop(DUP1)
	s(6) = s(5)
	nop(DUP1)
	s(7) = 1
	nop(PUSH1)
	s(6) = s(7)+s(6)
	nop(ADD)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(5) = 19177
	nop(PUSH2)
	call(block19177(s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guideInvestmentAttractedShareToPay), g(bonusShare), g(distributedSaleStakes), g(allowedAmountTransferedToPoolTotal), g(allowedAmountToTransferToPool), g(pool), g(owner), l(l6), l(l4), l(l1), l(l0), address, balance, returndatasize, timestamp))
	nop(JUMP)

block19764(s(4), s(3), s(2), s(1), s(0))=>
	nop(JUMPDEST)
	nop(POP)
	nop(POP)
	nop(POP)
	call(block5178(s(0)))
	nop(JUMP)

block19769(s(2), s(1), s(0), g(owner), g(balances), caller)=>
	nop(JUMPDEST)
	s(3) = 3
	nop(PUSH1)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(4) = g(balances)
	nop(SLOAD)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(5) = 256
	nop(PUSH2)
	s(4) = s(5)^s(4)
	nop(EXP)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	s(3) = s(4)/s(3)
	nop(DIV)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(3) = and(s(4), s(3))
	nop(AND)
	s(4) = caller
	nop(CALLER)
	s(5) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(4) = and(s(5), s(4))
	nop(AND)
	call(jump19769(s(4),s(3),s(2),s(1),s(0),g(owner), g(balances), caller))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump19769(s(4), s(3), s(2), s(1), s(0), g(owner), g(balances), caller)=>
	eq(s(4), s(3))
	call(block19861(s(2), s(1), s(0),g(owner)))

jump19769(s(4), s(3), s(2), s(1), s(0), g(owner), g(balances), caller)=>
	neq(s(4), s(3))
	call(block19857(s(2), s(1), s(0)))

block19857(s(2), s(1), s(0))=>
	s(3) = 0
	nop(PUSH1)
	s(4) = s(3)
	nop(DUP1)
	nop(REVERT)

block19861(s(2), s(1), s(0), g(owner))=>
	nop(JUMPDEST)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 4
	nop(PUSH1)
	s(5) = 0
	nop(PUSH1)
	s(6) = 256
	nop(PUSH2)
	s(5) = s(6)^s(5)
	nop(EXP)
	s(6) = s(4)
	nop(DUP2)
	s(6) = g(owner)
	nop(SLOAD)
	s(7) = s(5)
	nop(DUP2)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = s(8)*s(7)
	nop(MUL)
	s(7) = not(s(7))
	nop(NOT)
	s(6) = and(s(7), s(6))
	nop(AND)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(3)
	nop(DUP4)
	s(8) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(7) = and(s(8), s(7))
	nop(AND)
	s(6) = s(7)*s(6)
	nop(MUL)
	s(5) = or(s(6), s(5))
	nop(OR)
	s(6) = s(4)
	s(4) = s(5)
	s(5) = s(6)
	nop(SWAP1)
	g(owner) = s(4)
	nop(SSTORE)
	nop(POP)
	nop(POP)
	call(block5245(s(0)))
	nop(JUMP)

jump19929(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	geq(s(13), s(12))
	call(block20018(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump19929(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	lt(s(13), s(12))
	call(block19946(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

block19929(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(8)
	nop(DUP1)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(10)
	nop(DUP1)
	s(12) = 27
	nop(PUSH1)
	s(12) = g(supplier)
	nop(SLOAD)
	s(13) = timestamp
	nop(TIMESTAMP)
	call(jump19929(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump19946(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	lt(s(15), s(14))
	call(block19961(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump19946(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	geq(s(15), s(14))
	call(block19960(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block19946(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	s(12) = 35
	nop(PUSH1)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(12)
	nop(DUP2)
	s(14) = g(saleShare)
	nop(SLOAD)
	s(15) = s(13)
	nop(DUP2)
	call(jump19946(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block19960(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block19961(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = 0
	nop(PUSH1)
	l(l6) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(14) = 0
	nop(PUSH1)
	s(13) = sha3(s(14), s(13))
	nop(SHA3)
	s(12) = s(13)+s(12)
	nop(ADD)
	gl = s(12)
	s(12) = fresh(0)
	nop(SLOAD)
	s(13) = s(8)
	s(8) = s(12)
	s(12) = s(13)
	nop(SWAP4)
	nop(POP)
	s(12) = 35
	nop(PUSH1)
	s(13) = 1
	nop(PUSH1)
	s(14) = s(12)
	nop(DUP2)
	s(14) = g(saleShare)
	nop(SLOAD)
	s(15) = s(13)
	nop(DUP2)
	call(jump19961(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump19961(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	lt(s(15), s(14))
	call(block19990(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump19961(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	geq(s(15), s(14))
	call(block19989(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block19989(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block19990(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = 0
	nop(PUSH1)
	l(l6) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(14) = 0
	nop(PUSH1)
	s(13) = sha3(s(14), s(13))
	nop(SHA3)
	s(12) = s(13)+s(12)
	nop(ADD)
	gl = s(12)
	s(12) = fresh(0)
	nop(SLOAD)
	s(13) = s(9)
	s(9) = s(12)
	s(12) = s(13)
	nop(SWAP3)
	nop(POP)
	s(12) = 17
	nop(PUSH1)
	s(12) = g(contractCreatedTimestamp)
	nop(SLOAD)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	nop(POP)
	s(12) = 27
	nop(PUSH1)
	s(12) = g(supplier)
	nop(SLOAD)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(POP)
	s(12) = 20210
	nop(PUSH2)
	call(block20210(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(JUMP)

block20018(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(12) = 27
	nop(PUSH1)
	s(12) = g(supplier)
	nop(SLOAD)
	s(13) = timestamp
	nop(TIMESTAMP)
	s(12) = lt(s(13), s(12))
	nop(LT)
	s(12)= eq(s(12), 0)
	nop(ISZERO)
	s(13) = s(12)
	nop(DUP1)
	call(jump20018(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20018(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	eq(s(13), 0)
	call(block20037(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump20018(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	neq(s(13), 0)
	call(block20031(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

block20031(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(POP)
	s(12) = 28
	nop(PUSH1)
	s(12) = g(saleStat)
	nop(SLOAD)
	s(13) = timestamp
	nop(TIMESTAMP)
	s(12) = lt(s(13), s(12))
	nop(LT)
	call(block20037(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

block20037(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	call(jump20037(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20037(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	eq(s(12), 0)
	call(block20115(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump20037(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	neq(s(12), 0)
	call(block20043(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump20043(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	lt(s(15), s(14))
	call(block20058(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump20043(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	geq(s(15), s(14))
	call(block20057(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20043(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	s(12) = 35
	nop(PUSH1)
	s(13) = 1
	nop(PUSH1)
	s(14) = s(12)
	nop(DUP2)
	s(14) = g(saleShare)
	nop(SLOAD)
	s(15) = s(13)
	nop(DUP2)
	call(jump20043(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block20057(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20058(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = 0
	nop(PUSH1)
	l(l6) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(14) = 0
	nop(PUSH1)
	s(13) = sha3(s(14), s(13))
	nop(SHA3)
	s(12) = s(13)+s(12)
	nop(ADD)
	gl = s(12)
	s(12) = fresh(0)
	nop(SLOAD)
	s(13) = s(8)
	s(8) = s(12)
	s(12) = s(13)
	nop(SWAP4)
	nop(POP)
	s(12) = 35
	nop(PUSH1)
	s(13) = 2
	nop(PUSH1)
	s(14) = s(12)
	nop(DUP2)
	s(14) = g(saleShare)
	nop(SLOAD)
	s(15) = s(13)
	nop(DUP2)
	call(jump20058(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20058(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	lt(s(15), s(14))
	call(block20087(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump20058(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	geq(s(15), s(14))
	call(block20086(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20086(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20087(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = 0
	nop(PUSH1)
	l(l6) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(14) = 0
	nop(PUSH1)
	s(13) = sha3(s(14), s(13))
	nop(SHA3)
	s(12) = s(13)+s(12)
	nop(ADD)
	gl = s(12)
	s(12) = fresh(0)
	nop(SLOAD)
	s(13) = s(9)
	s(9) = s(12)
	s(12) = s(13)
	nop(SWAP3)
	nop(POP)
	s(12) = 27
	nop(PUSH1)
	s(12) = g(supplier)
	nop(SLOAD)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	nop(POP)
	s(12) = 28
	nop(PUSH1)
	s(12) = g(saleStat)
	nop(SLOAD)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(POP)
	s(12) = 20209
	nop(PUSH2)
	call(block20209(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(JUMP)

block20115(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(12) = 28
	nop(PUSH1)
	s(12) = g(saleStat)
	nop(SLOAD)
	s(13) = timestamp
	nop(TIMESTAMP)
	s(12) = lt(s(13), s(12))
	nop(LT)
	s(12)= eq(s(12), 0)
	nop(ISZERO)
	s(13) = s(12)
	nop(DUP1)
	call(jump20115(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20115(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	eq(s(13), 0)
	call(block20134(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump20115(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	neq(s(13), 0)
	call(block20128(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

block20128(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(POP)
	s(12) = 10
	nop(PUSH1)
	s(12) = g(businessPlannedPeriodEndTimestamp)
	nop(SLOAD)
	s(13) = timestamp
	nop(TIMESTAMP)
	s(12) = lt(s(13), s(12))
	nop(LT)
	call(block20134(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

block20134(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	call(jump20134(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20134(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	eq(s(12), 0)
	call(block20208(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump20134(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	neq(s(12), 0)
	call(block20140(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

block20140(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	s(12) = 35
	nop(PUSH1)
	s(13) = 2
	nop(PUSH1)
	s(14) = s(12)
	nop(DUP2)
	s(14) = g(saleShare)
	nop(SLOAD)
	s(15) = s(13)
	nop(DUP2)
	call(jump20140(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20140(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	lt(s(15), s(14))
	call(block20155(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump20140(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	geq(s(15), s(14))
	call(block20154(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20154(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20155(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = 0
	nop(PUSH1)
	l(l6) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(14) = 0
	nop(PUSH1)
	s(13) = sha3(s(14), s(13))
	nop(SHA3)
	s(12) = s(13)+s(12)
	nop(ADD)
	gl = s(12)
	s(12) = fresh(0)
	nop(SLOAD)
	s(13) = s(8)
	s(8) = s(12)
	s(12) = s(13)
	nop(SWAP4)
	nop(POP)
	s(12) = 35
	nop(PUSH1)
	s(13) = 3
	nop(PUSH1)
	s(14) = s(12)
	nop(DUP2)
	s(14) = g(saleShare)
	nop(SLOAD)
	s(15) = s(13)
	nop(DUP2)
	call(jump20155(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20155(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	lt(s(15), s(14))
	call(block20184(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump20155(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	geq(s(15), s(14))
	call(block20183(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20183(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20184(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = 0
	nop(PUSH1)
	l(l6) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(14) = 0
	nop(PUSH1)
	s(13) = sha3(s(14), s(13))
	nop(SHA3)
	s(12) = s(13)+s(12)
	nop(ADD)
	gl = s(12)
	s(12) = fresh(0)
	nop(SLOAD)
	s(13) = s(9)
	s(9) = s(12)
	s(12) = s(13)
	nop(SWAP3)
	nop(POP)
	s(12) = 28
	nop(PUSH1)
	s(12) = g(saleStat)
	nop(SLOAD)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	nop(POP)
	s(12) = 10
	nop(PUSH1)
	s(12) = g(businessPlannedPeriodEndTimestamp)
	nop(SLOAD)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(POP)
	call(block20208(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

block20208(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	call(block20209(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

block20209(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	call(block20210(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump20210(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	neq(s(14), 0)
	call(block20229(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump20210(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	eq(s(14), 0)
	call(block20228(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20210(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(12) = s(10)
	nop(DUP2)
	s(13) = s(11)
	nop(DUP2)
	s(12) = s(13)-s(12)
	nop(SUB)
	s(13) = s(8)
	nop(DUP5)
	s(14) = s(9)
	nop(DUP5)
	s(13) = s(14)-s(13)
	nop(SUB)
	s(14) = s(10)
	nop(DUP4)
	s(15) = timestamp
	nop(TIMESTAMP)
	s(14) = s(15)-s(14)
	nop(SUB)
	s(13) = s(14)*s(13)
	nop(MUL)
	s(14) = s(12)
	nop(DUP2)
	call(jump20210(s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block20228(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20229(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(12) = s(13)/s(12)
	nop(DIV)
	s(13) = s(8)
	nop(DUP5)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = 34
	nop(PUSH1)
	s(14) = s(12)
	nop(DUP2)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	g(saleCap) = s(13)
	nop(SSTORE)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	call(block5286(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20244(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(8) = 20260
	nop(PUSH2)
	s(9) = 20255
	nop(PUSH2)
	s(10) = 13436
	nop(PUSH2)
	call(block13436(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20255(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(10) = 18328
	nop(PUSH2)
	call(block18328(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20260(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(9) = 29
	nop(PUSH1)
	s(9) = g(saleStartTimestamp)
	nop(SLOAD)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = 32
	nop(PUSH1)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	g(totalInvested) = s(9)
	nop(SSTORE)
	nop(POP)
	s(8) = 20328
	nop(PUSH2)
	s(9) = 33
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(10) = g(totalWithdrawn)
	nop(SLOAD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 256
	nop(PUSH2)
	s(10) = s(11)^s(10)
	nop(EXP)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(9) = s(10)/s(9)
	nop(DIV)
	s(10) = 255
	nop(PUSH1)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 255
	nop(PUSH1)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 20314
	nop(PUSH2)
	s(11) = 100
	nop(PUSH1)
	s(12) = 32
	nop(PUSH1)
	s(12) = g(totalInvested)
	nop(SLOAD)
	s(13) = 22425
	nop(PUSH2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = 4294967295
	nop(PUSH4)
	s(13) = and(s(14), s(13))
	nop(AND)
	call(block22425_0(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20314(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(11) = 20581
	nop(PUSH2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = 4294967295
	nop(PUSH4)
	s(11) = and(s(12), s(11))
	nop(AND)
	call(block20581_0(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20328(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(9) = 8
	nop(PUSH1)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	g(supplyCap) = s(9)
	nop(SSTORE)
	nop(POP)
	s(8) = 20392
	nop(PUSH2)
	s(9) = 100
	nop(PUSH1)
	s(10) = 20378
	nop(PUSH2)
	s(11) = 12
	nop(PUSH1)
	s(12) = 0
	nop(PUSH1)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(12) = g(teamShare)
	nop(SLOAD)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(13) = 256
	nop(PUSH2)
	s(12) = s(13)^s(12)
	nop(EXP)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(11) = s(12)/s(11)
	nop(DIV)
	s(12) = 255
	nop(PUSH1)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 255
	nop(PUSH1)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 8
	nop(PUSH1)
	s(12) = g(supplyCap)
	nop(SLOAD)
	s(13) = 22425
	nop(PUSH2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = 4294967295
	nop(PUSH4)
	s(13) = and(s(14), s(13))
	nop(AND)
	call(block22425_1(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20378(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(11) = 20581
	nop(PUSH2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = 4294967295
	nop(PUSH4)
	s(11) = and(s(12), s(11))
	nop(AND)
	call(block20581_1(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20392(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(9) = 11
	nop(PUSH1)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	g(teamCap) = s(9)
	nop(SSTORE)
	nop(POP)
	s(8) = 20456
	nop(PUSH2)
	s(9) = 100
	nop(PUSH1)
	s(10) = 20442
	nop(PUSH2)
	s(11) = 15
	nop(PUSH1)
	s(12) = 0
	nop(PUSH1)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(12) = g(fundariaShare)
	nop(SLOAD)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(13) = 256
	nop(PUSH2)
	s(12) = s(13)^s(12)
	nop(EXP)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(11) = s(12)/s(11)
	nop(DIV)
	s(12) = 255
	nop(PUSH1)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 255
	nop(PUSH1)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 8
	nop(PUSH1)
	s(12) = g(supplyCap)
	nop(SLOAD)
	s(13) = 22425
	nop(PUSH2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = 4294967295
	nop(PUSH4)
	s(13) = and(s(14), s(13))
	nop(AND)
	call(block22425_2(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20442(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(11) = 20581
	nop(PUSH2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = 4294967295
	nop(PUSH4)
	s(11) = and(s(12), s(11))
	nop(AND)
	call(block20581_2(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20456(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(9) = 14
	nop(PUSH1)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	g(fundariaCap) = s(9)
	nop(SSTORE)
	nop(POP)
	s(8) = 20504
	nop(PUSH2)
	s(9) = 100
	nop(PUSH1)
	s(10) = 20490
	nop(PUSH2)
	s(11) = 40
	nop(PUSH1)
	s(11) = g(fundaria)
	nop(SLOAD)
	s(12) = 8
	nop(PUSH1)
	s(12) = g(supplyCap)
	nop(SLOAD)
	s(13) = 22425
	nop(PUSH2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = 4294967295
	nop(PUSH4)
	s(13) = and(s(14), s(13))
	nop(AND)
	call(block22425_3(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20490(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(11) = 20581
	nop(PUSH2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = 4294967295
	nop(PUSH4)
	s(11) = and(s(12), s(11))
	nop(AND)
	call(block20581_3(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20504(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(9) = 38
	nop(PUSH1)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	g(priceIsFrozen) = s(9)
	nop(SSTORE)
	nop(POP)
	s(8) = 20573
	nop(PUSH2)
	s(9) = 38
	nop(PUSH1)
	s(9) = g(priceIsFrozen)
	nop(SLOAD)
	s(10) = 20559
	nop(PUSH2)
	s(11) = 11
	nop(PUSH1)
	s(11) = g(teamCap)
	nop(SLOAD)
	s(12) = 20545
	nop(PUSH2)
	s(13) = 32
	nop(PUSH1)
	s(13) = g(totalInvested)
	nop(SLOAD)
	s(14) = 8
	nop(PUSH1)
	s(14) = g(supplyCap)
	nop(SLOAD)
	s(15) = 22370
	nop(PUSH2)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	s(16) = s(13)
	s(13) = s(15)
	s(15) = s(16)
	nop(SWAP2)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	s(16) = 4294967295
	nop(PUSH4)
	s(15) = and(s(16), s(15))
	nop(AND)
	call(block22370_0(s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20545(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(13) = 22370
	nop(PUSH2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = 4294967295
	nop(PUSH4)
	s(13) = and(s(14), s(13))
	nop(AND)
	call(block22370_1(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20559(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(11) = 22370
	nop(PUSH2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = 4294967295
	nop(PUSH4)
	s(11) = and(s(12), s(11))
	nop(AND)
	call(block22370_2(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20573(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(9) = 24
	nop(PUSH1)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	g(bountyCap) = s(9)
	nop(SSTORE)
	nop(POP)
	call(block5295(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20581(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(18) = 0
	nop(PUSH1)
	s(19) = s(18)
	nop(DUP1)
	s(20) = s(17)
	nop(DUP3)
	s(21) = s(16)
	nop(DUP5)
	s(22) = s(20)
	nop(DUP2)
	call(jump20581(s(22),s(21),s(20),s(19),s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20581(s(22), s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(22), 0)
	call(block20595(s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump20581(s(22), s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(22), 0)
	call(block20594_6(s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20594(s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20595(s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(20) = s(21)/s(20)
	nop(DIV)
	s(21) = s(19)
	s(19) = s(20)
	s(20) = s(21)
	nop(SWAP1)
	nop(POP)
	s(20) = s(19)
	nop(DUP1)
	s(21) = s(18)
	s(18) = s(20)
	s(20) = s(21)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(19) = s(15)
	s(15) = s(18)
	s(18) = s(19)
	nop(SWAP3)
	s(19) = s(16)
	s(16) = s(18)
	s(18) = s(19)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block13479(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20608(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(9)
	nop(DUP3)
	call(jump20608(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20608(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	gt(s(12), s(11))
	call(block20623(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump20608(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	leq(s(12), s(11))
	call(block20619(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20619(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(11) = 0
	nop(PUSH1)
	s(12) = s(11)
	nop(DUP1)
	nop(REVERT)

block20623(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(11) = s(9)
	nop(DUP2)
	s(12) = 2
	nop(PUSH1)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(8)
	nop(DUP6)
	s(15) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(14) = and(s(15), s(14))
	nop(AND)
	s(15) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(14) = and(s(15), s(14))
	nop(AND)
	s(15) = s(13)
	nop(DUP2)
	l(l6) = s(14)
	nop(MSTORE)
	s(14) = 32
	nop(PUSH1)
	s(13) = s(14)+s(13)
	nop(ADD)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = s(12)
	nop(DUP2)
	l(l7) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = 0
	nop(PUSH1)
	s(12) = sha3(s(13), s(12))
	nop(SHA3)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(11)
	nop(DUP3)
	s(15) = s(12)
	nop(DUP3)
	gl = s(15)
	s(15) = fresh(0)
	nop(SLOAD)
	s(14) = s(15)+s(14)
	nop(ADD)
	s(15) = s(11)
	s(11) = s(14)
	s(14) = s(15)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(13) = s(11)
	nop(DUP2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	gs(1) = s(13)
	gs(2) = s(12)
	nop(SSTORE)
	nop(POP)
	s(11) = s(9)
	nop(DUP2)
	s(12) = 0
	nop(PUSH1)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(11)
	nop(DUP3)
	s(15) = s(12)
	nop(DUP3)
	s(15) = g(totalSupply)
	nop(SLOAD)
	s(14) = s(15)+s(14)
	nop(ADD)
	s(15) = s(11)
	s(11) = s(14)
	s(14) = s(15)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(13) = s(11)
	nop(DUP2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	g(totalSupply) = s(12)
	nop(SSTORE)
	nop(POP)
	s(11) = s(9)
	nop(DUP2)
	s(12) = 29
	nop(PUSH1)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(11)
	nop(DUP3)
	s(15) = s(12)
	nop(DUP3)
	s(15) = g(saleStartTimestamp)
	nop(SLOAD)
	s(14) = s(15)+s(14)
	nop(ADD)
	s(15) = s(11)
	s(11) = s(14)
	s(14) = s(15)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(13) = s(11)
	nop(DUP2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	g(saleStartTimestamp) = s(12)
	nop(SSTORE)
	nop(POP)
	s(11) = 20752
	nop(PUSH2)
	s(12) = s(10)
	nop(DUP2)
	s(13) = 30
	nop(PUSH1)
	s(13) = g(owner)
	nop(SLOAD)
	s(14) = 22395
	nop(PUSH2)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = s(12)
	s(12) = s(14)
	s(14) = s(15)
	nop(SWAP2)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = 4294967295
	nop(PUSH4)
	s(14) = and(s(15), s(14))
	nop(AND)
	call(block22395(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20752(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(12) = 30
	nop(PUSH1)
	s(13) = s(11)
	nop(DUP2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	g(owner) = s(12)
	nop(SSTORE)
	nop(POP)
	s(11) = s(9)
	nop(DUP2)
	s(12) = 26
	nop(PUSH1)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(8)
	nop(DUP6)
	s(15) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(14) = and(s(15), s(14))
	nop(AND)
	s(15) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(14) = and(s(15), s(14))
	nop(AND)
	s(15) = s(13)
	nop(DUP2)
	l(l6) = s(14)
	nop(MSTORE)
	s(14) = 32
	nop(PUSH1)
	s(13) = s(14)+s(13)
	nop(ADD)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = s(12)
	nop(DUP2)
	l(l7) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = 0
	nop(PUSH1)
	s(12) = sha3(s(13), s(12))
	nop(SHA3)
	s(13) = 0
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(11)
	nop(DUP3)
	s(15) = s(12)
	nop(DUP3)
	gl = s(15)
	s(15) = fresh(0)
	nop(SLOAD)
	s(14) = s(15)+s(14)
	nop(ADD)
	s(15) = s(11)
	s(11) = s(14)
	s(14) = s(15)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(13) = s(11)
	nop(DUP2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	gs(1) = s(13)
	gs(2) = s(12)
	nop(SSTORE)
	nop(POP)
	s(11) = 20923
	nop(PUSH2)
	s(12) = s(10)
	nop(DUP2)
	s(13) = 26
	nop(PUSH1)
	s(14) = 0
	nop(PUSH1)
	s(15) = s(8)
	nop(DUP7)
	s(16) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(15) = and(s(16), s(15))
	nop(AND)
	s(16) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(15) = and(s(16), s(15))
	nop(AND)
	s(16) = s(14)
	nop(DUP2)
	l(l6) = s(15)
	nop(MSTORE)
	s(15) = 32
	nop(PUSH1)
	s(14) = s(15)+s(14)
	nop(ADD)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = s(13)
	nop(DUP2)
	l(l7) = s(14)
	nop(MSTORE)
	s(14) = 32
	nop(PUSH1)
	s(13) = s(14)+s(13)
	nop(ADD)
	s(14) = 0
	nop(PUSH1)
	s(13) = sha3(s(14), s(13))
	nop(SHA3)
	s(14) = 1
	nop(PUSH1)
	s(13) = s(14)+s(13)
	nop(ADD)
	gl = s(13)
	s(13) = fresh(1)
	nop(SLOAD)
	s(14) = 22395
	nop(PUSH2)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = s(12)
	s(12) = s(14)
	s(14) = s(15)
	nop(SWAP2)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = 4294967295
	nop(PUSH4)
	s(14) = and(s(15), s(14))
	nop(AND)
	call(block22395_0(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20923(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(12) = 26
	nop(PUSH1)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(8)
	nop(DUP6)
	s(15) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(14) = and(s(15), s(14))
	nop(AND)
	s(15) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(14) = and(s(15), s(14))
	nop(AND)
	s(15) = s(13)
	nop(DUP2)
	l(l6) = s(14)
	nop(MSTORE)
	s(14) = 32
	nop(PUSH1)
	s(13) = s(14)+s(13)
	nop(ADD)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = s(12)
	nop(DUP2)
	l(l7) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = 0
	nop(PUSH1)
	s(12) = sha3(s(13), s(12))
	nop(SHA3)
	s(13) = 1
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(11)
	nop(DUP2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	gs(1) = s(13)
	gs(2) = s(12)
	nop(SSTORE)
	nop(POP)
	s(11) = s(8)
	nop(DUP3)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 25
	nop(PUSH1)
	s(13) = 1
	nop(PUSH1)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(13) = g(supplier)
	nop(SLOAD)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = 256
	nop(PUSH2)
	s(13) = s(14)^s(13)
	nop(EXP)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(12) = s(13)/s(12)
	nop(DIV)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 100389287136786176327247604509743168900146139575972864366142685224231313322991
	nop(PUSH32)
	s(14) = s(9)
	nop(DUP5)
	s(15) = 64
	nop(PUSH1)
	s(15) = l(l0)
	nop(MLOAD)
	s(16) = s(15)
	nop(DUP1)
	s(17) = s(14)
	nop(DUP3)
	s(18) = s(16)
	nop(DUP2)
	l(l1) = s(17)
	nop(MSTORE)
	s(17) = 32
	nop(PUSH1)
	s(16) = s(17)+s(16)
	nop(ADD)
	s(17) = s(14)
	s(14) = s(16)
	s(16) = s(17)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(15) = 64
	nop(PUSH1)
	s(15) = l(l0)
	nop(MLOAD)
	s(16) = s(15)
	nop(DUP1)
	s(17) = s(14)
	s(14) = s(16)
	s(16) = s(17)
	nop(SWAP2)
	s(15) = s(16)-s(15)
	nop(SUB)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	nop(LOG3)
	nop(POP)
	nop(POP)
	nop(POP)
	call(block6125(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block21133(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(11)
	nop(DUP1)
	s(13) = 100
	nop(PUSH1)
	s(14) = 21180
	nop(PUSH2)
	s(15) = 33
	nop(PUSH1)
	s(16) = 0
	nop(PUSH1)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	s(16) = g(totalWithdrawn)
	nop(SLOAD)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	s(17) = 256
	nop(PUSH2)
	s(16) = s(17)^s(16)
	nop(EXP)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	s(15) = s(16)/s(15)
	nop(DIV)
	s(16) = 255
	nop(PUSH1)
	s(15) = and(s(16), s(15))
	nop(AND)
	s(16) = 255
	nop(PUSH1)
	s(15) = and(s(16), s(15))
	nop(AND)
	s(16) = 100
	nop(PUSH1)
	s(17) = 40
	nop(PUSH1)
	s(17) = g(fundaria)
	nop(SLOAD)
	s(16) = s(17)*s(16)
	nop(MUL)
	s(17) = 20581
	nop(PUSH2)
	s(18) = s(16)
	s(16) = s(17)
	s(17) = s(18)
	nop(SWAP1)
	s(18) = s(15)
	s(15) = s(17)
	s(17) = s(18)
	nop(SWAP2)
	s(18) = s(16)
	s(16) = s(17)
	s(17) = s(18)
	nop(SWAP1)
	s(18) = 4294967295
	nop(PUSH4)
	s(17) = and(s(18), s(17))
	nop(AND)
	call(block20581_6(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block21180(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(15) = s(9)
	nop(DUP6)
	s(14) = s(15)*s(14)
	nop(MUL)
	s(15) = s(13)
	nop(DUP2)
	call(jump21180(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump21180(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(15), 0)
	call(block21191(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump21180(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(15), 0)
	call(block21190(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block21190(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block21191(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(13) = s(14)/s(13)
	nop(DIV)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	nop(POP)
	s(13) = 38
	nop(PUSH1)
	s(13) = g(priceIsFrozen)
	nop(SLOAD)
	s(14) = s(11)
	nop(DUP3)
	s(15) = 39
	nop(PUSH1)
	s(15) = g(guidesStat)
	nop(SLOAD)
	s(14) = s(15)+s(14)
	nop(ADD)
	call(jump21191(s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump21191(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	leq(s(14), s(13))
	call(block21215(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump21191(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	gt(s(14), s(13))
	call(block21211(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block21211(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(13) = 0
	nop(PUSH1)
	s(14) = s(13)
	nop(DUP1)
	nop(REVERT)

block21215(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(13) = 100
	nop(PUSH1)
	s(14) = 41
	nop(PUSH1)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	s(15) = g(distributedBonusStakes)
	nop(SLOAD)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	s(16) = 256
	nop(PUSH2)
	s(15) = s(16)^s(15)
	nop(EXP)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	s(14) = s(15)/s(14)
	nop(DIV)
	s(15) = 255
	nop(PUSH1)
	s(14) = and(s(15), s(14))
	nop(AND)
	s(15) = 255
	nop(PUSH1)
	s(14) = and(s(15), s(14))
	nop(AND)
	s(15) = s(10)
	nop(DUP5)
	s(14) = s(15)*s(14)
	nop(MUL)
	s(15) = s(13)
	nop(DUP2)
	call(jump21215(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump21215(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(15), 0)
	call(block21247(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump21215(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(15), 0)
	call(block21246(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block21246(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block21247(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(13) = s(14)/s(13)
	nop(DIV)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	nop(POP)
	s(13) = 19
	nop(PUSH1)
	s(14) = 0
	nop(PUSH1)
	s(15) = s(8)
	nop(DUP7)
	s(16) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(15) = and(s(16), s(15))
	nop(AND)
	s(16) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(15) = and(s(16), s(15))
	nop(AND)
	s(16) = s(14)
	nop(DUP2)
	l(l6) = s(15)
	nop(MSTORE)
	s(15) = 32
	nop(PUSH1)
	s(14) = s(15)+s(14)
	nop(ADD)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = s(13)
	nop(DUP2)
	l(l7) = s(14)
	nop(MSTORE)
	s(14) = 32
	nop(PUSH1)
	s(13) = s(14)+s(13)
	nop(ADD)
	s(14) = 0
	nop(PUSH1)
	s(13) = sha3(s(14), s(13))
	nop(SHA3)
	s(14) = 0
	nop(PUSH1)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	gl = s(14)
	s(14) = fresh(0)
	nop(SLOAD)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = 256
	nop(PUSH2)
	s(14) = s(15)^s(14)
	nop(EXP)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(13) = s(14)/s(13)
	nop(DIV)
	s(14) = 255
	nop(PUSH1)
	s(13) = and(s(14), s(13))
	nop(AND)
	call(jump21247(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump21247(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(13), 0)
	call(block21516(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump21247(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(13), 0)
	call(block21334(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block21334(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	s(13) = s(12)
	nop(DUP1)
	s(14) = 37
	nop(PUSH1)
	s(15) = 0
	nop(PUSH1)
	s(16) = 26
	nop(PUSH1)
	s(17) = 0
	nop(PUSH1)
	s(18) = s(8)
	nop(DUP10)
	s(19) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(18) = and(s(19), s(18))
	nop(AND)
	s(19) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(18) = and(s(19), s(18))
	nop(AND)
	s(19) = s(17)
	nop(DUP2)
	l(l6) = s(18)
	nop(MSTORE)
	s(18) = 32
	nop(PUSH1)
	s(17) = s(18)+s(17)
	nop(ADD)
	s(18) = s(16)
	s(16) = s(17)
	s(17) = s(18)
	nop(SWAP1)
	s(18) = s(16)
	nop(DUP2)
	l(l7) = s(17)
	nop(MSTORE)
	s(17) = 32
	nop(PUSH1)
	s(16) = s(17)+s(16)
	nop(ADD)
	s(17) = 0
	nop(PUSH1)
	s(16) = sha3(s(17), s(16))
	nop(SHA3)
	s(17) = 4
	nop(PUSH1)
	s(16) = s(17)+s(16)
	nop(ADD)
	s(17) = 0
	nop(PUSH1)
	s(18) = s(16)
	s(16) = s(17)
	s(17) = s(18)
	nop(SWAP1)
	gl = s(17)
	s(17) = fresh(0)
	nop(SLOAD)
	s(18) = s(16)
	s(16) = s(17)
	s(17) = s(18)
	nop(SWAP1)
	s(18) = 256
	nop(PUSH2)
	s(17) = s(18)^s(17)
	nop(EXP)
	s(18) = s(16)
	s(16) = s(17)
	s(17) = s(18)
	nop(SWAP1)
	s(16) = s(17)/s(16)
	nop(DIV)
	s(17) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(16) = and(s(17), s(16))
	nop(AND)
	s(17) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(16) = and(s(17), s(16))
	nop(AND)
	s(17) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(16) = and(s(17), s(16))
	nop(AND)
	s(17) = s(15)
	nop(DUP2)
	l(l6) = s(16)
	nop(MSTORE)
	s(16) = 32
	nop(PUSH1)
	s(15) = s(16)+s(15)
	nop(ADD)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	s(16) = s(14)
	nop(DUP2)
	l(l7) = s(15)
	nop(MSTORE)
	s(15) = 32
	nop(PUSH1)
	s(14) = s(15)+s(14)
	nop(ADD)
	s(15) = 0
	nop(PUSH1)
	s(14) = sha3(s(15), s(14))
	nop(SHA3)
	s(15) = 1
	nop(PUSH1)
	s(14) = s(15)+s(14)
	nop(ADD)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(13)
	nop(DUP3)
	s(17) = s(14)
	nop(DUP3)
	gl = s(17)
	s(17) = fresh(1)
	nop(SLOAD)
	s(16) = s(17)+s(16)
	nop(ADD)
	s(17) = s(13)
	s(13) = s(16)
	s(16) = s(17)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(15) = s(13)
	nop(DUP2)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	gs(1) = s(15)
	gs(2) = s(14)
	nop(SSTORE)
	nop(POP)
	s(13) = 21695
	nop(PUSH2)
	call(block21695(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block21516(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(13) = s(12)
	nop(DUP1)
	s(14) = 37
	nop(PUSH1)
	s(15) = 0
	nop(PUSH1)
	s(16) = 26
	nop(PUSH1)
	s(17) = 0
	nop(PUSH1)
	s(18) = s(8)
	nop(DUP10)
	s(19) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(18) = and(s(19), s(18))
	nop(AND)
	s(19) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(18) = and(s(19), s(18))
	nop(AND)
	s(19) = s(17)
	nop(DUP2)
	l(l6) = s(18)
	nop(MSTORE)
	s(18) = 32
	nop(PUSH1)
	s(17) = s(18)+s(17)
	nop(ADD)
	s(18) = s(16)
	s(16) = s(17)
	s(17) = s(18)
	nop(SWAP1)
	s(18) = s(16)
	nop(DUP2)
	l(l7) = s(17)
	nop(MSTORE)
	s(17) = 32
	nop(PUSH1)
	s(16) = s(17)+s(16)
	nop(ADD)
	s(17) = 0
	nop(PUSH1)
	s(16) = sha3(s(17), s(16))
	nop(SHA3)
	s(17) = 4
	nop(PUSH1)
	s(16) = s(17)+s(16)
	nop(ADD)
	s(17) = 0
	nop(PUSH1)
	s(18) = s(16)
	s(16) = s(17)
	s(17) = s(18)
	nop(SWAP1)
	gl = s(17)
	s(17) = fresh(0)
	nop(SLOAD)
	s(18) = s(16)
	s(16) = s(17)
	s(17) = s(18)
	nop(SWAP1)
	s(18) = 256
	nop(PUSH2)
	s(17) = s(18)^s(17)
	nop(EXP)
	s(18) = s(16)
	s(16) = s(17)
	s(17) = s(18)
	nop(SWAP1)
	s(16) = s(17)/s(16)
	nop(DIV)
	s(17) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(16) = and(s(17), s(16))
	nop(AND)
	s(17) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(16) = and(s(17), s(16))
	nop(AND)
	s(17) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(16) = and(s(17), s(16))
	nop(AND)
	s(17) = s(15)
	nop(DUP2)
	l(l6) = s(16)
	nop(MSTORE)
	s(16) = 32
	nop(PUSH1)
	s(15) = s(16)+s(15)
	nop(ADD)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	s(16) = s(14)
	nop(DUP2)
	l(l7) = s(15)
	nop(MSTORE)
	s(15) = 32
	nop(PUSH1)
	s(14) = s(15)+s(14)
	nop(ADD)
	s(15) = 0
	nop(PUSH1)
	s(14) = sha3(s(15), s(14))
	nop(SHA3)
	s(15) = 2
	nop(PUSH1)
	s(14) = s(15)+s(14)
	nop(ADD)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(13)
	nop(DUP3)
	s(17) = s(14)
	nop(DUP3)
	gl = s(17)
	s(17) = fresh(1)
	nop(SLOAD)
	s(16) = s(17)+s(16)
	nop(ADD)
	s(17) = s(13)
	s(13) = s(16)
	s(16) = s(17)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(15) = s(13)
	nop(DUP2)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	gs(1) = s(15)
	gs(2) = s(14)
	nop(SSTORE)
	nop(POP)
	call(block21695(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block21695(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(13) = s(12)
	nop(DUP1)
	s(14) = 26
	nop(PUSH1)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(8)
	nop(DUP8)
	s(17) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(16) = and(s(17), s(16))
	nop(AND)
	s(17) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(16) = and(s(17), s(16))
	nop(AND)
	s(17) = s(15)
	nop(DUP2)
	l(l6) = s(16)
	nop(MSTORE)
	s(16) = 32
	nop(PUSH1)
	s(15) = s(16)+s(15)
	nop(ADD)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	s(16) = s(14)
	nop(DUP2)
	l(l7) = s(15)
	nop(MSTORE)
	s(15) = 32
	nop(PUSH1)
	s(14) = s(15)+s(14)
	nop(ADD)
	s(15) = 0
	nop(PUSH1)
	s(14) = sha3(s(15), s(14))
	nop(SHA3)
	s(15) = 3
	nop(PUSH1)
	s(14) = s(15)+s(14)
	nop(ADD)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(13)
	nop(DUP3)
	s(17) = s(14)
	nop(DUP3)
	gl = s(17)
	s(17) = fresh(0)
	nop(SLOAD)
	s(16) = s(17)+s(16)
	nop(ADD)
	s(17) = s(13)
	s(13) = s(16)
	s(16) = s(17)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(15) = s(13)
	nop(DUP2)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	gs(1) = s(15)
	gs(2) = s(14)
	nop(SSTORE)
	nop(POP)
	s(13) = s(11)
	nop(DUP2)
	s(14) = 26
	nop(PUSH1)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(8)
	nop(DUP8)
	s(17) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(16) = and(s(17), s(16))
	nop(AND)
	s(17) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(16) = and(s(17), s(16))
	nop(AND)
	s(17) = s(15)
	nop(DUP2)
	l(l6) = s(16)
	nop(MSTORE)
	s(16) = 32
	nop(PUSH1)
	s(15) = s(16)+s(15)
	nop(ADD)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	s(16) = s(14)
	nop(DUP2)
	l(l7) = s(15)
	nop(MSTORE)
	s(15) = 32
	nop(PUSH1)
	s(14) = s(15)+s(14)
	nop(ADD)
	s(15) = 0
	nop(PUSH1)
	s(14) = sha3(s(15), s(14))
	nop(SHA3)
	s(15) = 2
	nop(PUSH1)
	s(14) = s(15)+s(14)
	nop(ADD)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(13)
	nop(DUP3)
	s(17) = s(14)
	nop(DUP3)
	gl = s(17)
	s(17) = fresh(1)
	nop(SLOAD)
	s(16) = s(17)+s(16)
	nop(ADD)
	s(17) = s(13)
	s(13) = s(16)
	s(16) = s(17)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(15) = s(13)
	nop(DUP2)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	gs(1) = s(15)
	gs(2) = s(14)
	nop(SSTORE)
	nop(POP)
	s(13) = s(11)
	nop(DUP2)
	s(14) = 2
	nop(PUSH1)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(8)
	nop(DUP8)
	s(17) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(16) = and(s(17), s(16))
	nop(AND)
	s(17) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(16) = and(s(17), s(16))
	nop(AND)
	s(17) = s(15)
	nop(DUP2)
	l(l6) = s(16)
	nop(MSTORE)
	s(16) = 32
	nop(PUSH1)
	s(15) = s(16)+s(15)
	nop(ADD)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	s(16) = s(14)
	nop(DUP2)
	l(l7) = s(15)
	nop(MSTORE)
	s(15) = 32
	nop(PUSH1)
	s(14) = s(15)+s(14)
	nop(ADD)
	s(15) = 0
	nop(PUSH1)
	s(14) = sha3(s(15), s(14))
	nop(SHA3)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(13)
	nop(DUP3)
	s(17) = s(14)
	nop(DUP3)
	gl = s(17)
	s(17) = fresh(2)
	nop(SLOAD)
	s(16) = s(17)+s(16)
	nop(ADD)
	s(17) = s(13)
	s(13) = s(16)
	s(16) = s(17)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(15) = s(13)
	nop(DUP2)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	gs(1) = s(15)
	gs(2) = s(14)
	nop(SSTORE)
	nop(POP)
	s(13) = s(11)
	nop(DUP2)
	s(14) = 39
	nop(PUSH1)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(13)
	nop(DUP3)
	s(17) = s(14)
	nop(DUP3)
	s(17) = g(guidesStat)
	nop(SLOAD)
	s(16) = s(17)+s(16)
	nop(ADD)
	s(17) = s(13)
	s(13) = s(16)
	s(16) = s(17)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(15) = s(13)
	nop(DUP2)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	g(guidesStat) = s(14)
	nop(SSTORE)
	nop(POP)
	s(13) = s(11)
	nop(DUP2)
	s(14) = 0
	nop(PUSH1)
	s(15) = s(14)
	nop(DUP1)
	s(16) = s(13)
	nop(DUP3)
	s(17) = s(14)
	nop(DUP3)
	s(17) = g(totalSupply)
	nop(SLOAD)
	s(16) = s(17)+s(16)
	nop(ADD)
	s(17) = s(13)
	s(13) = s(16)
	s(16) = s(17)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(15) = s(13)
	nop(DUP2)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	g(totalSupply) = s(14)
	nop(SSTORE)
	nop(POP)
	s(13) = 106190483984544320851992182089162347111658405430666556957074112094424747200476
	nop(PUSH32)
	s(14) = s(8)
	nop(DUP6)
	s(15) = s(11)
	nop(DUP4)
	s(16) = 26
	nop(PUSH1)
	s(17) = 0
	nop(PUSH1)
	s(18) = s(8)
	nop(DUP10)
	s(19) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(18) = and(s(19), s(18))
	nop(AND)
	s(19) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(18) = and(s(19), s(18))
	nop(AND)
	s(19) = s(17)
	nop(DUP2)
	l(l6) = s(18)
	nop(MSTORE)
	s(18) = 32
	nop(PUSH1)
	s(17) = s(18)+s(17)
	nop(ADD)
	s(18) = s(16)
	s(16) = s(17)
	s(17) = s(18)
	nop(SWAP1)
	s(18) = s(16)
	nop(DUP2)
	l(l7) = s(17)
	nop(MSTORE)
	s(17) = 32
	nop(PUSH1)
	s(16) = s(17)+s(16)
	nop(ADD)
	s(17) = 0
	nop(PUSH1)
	s(16) = sha3(s(17), s(16))
	nop(SHA3)
	s(17) = 4
	nop(PUSH1)
	s(16) = s(17)+s(16)
	nop(ADD)
	s(17) = 0
	nop(PUSH1)
	s(18) = s(16)
	s(16) = s(17)
	s(17) = s(18)
	nop(SWAP1)
	gl = s(17)
	s(17) = fresh(3)
	nop(SLOAD)
	s(18) = s(16)
	s(16) = s(17)
	s(17) = s(18)
	nop(SWAP1)
	s(18) = 256
	nop(PUSH2)
	s(17) = s(18)^s(17)
	nop(EXP)
	s(18) = s(16)
	s(16) = s(17)
	s(17) = s(18)
	nop(SWAP1)
	s(16) = s(17)/s(16)
	nop(DIV)
	s(17) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(16) = and(s(17), s(16))
	nop(AND)
	s(17) = s(12)
	nop(DUP5)
	s(18) = 64
	nop(PUSH1)
	s(18) = l(l0)
	nop(MLOAD)
	s(19) = s(18)
	nop(DUP1)
	s(20) = s(14)
	nop(DUP6)
	s(21) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(20) = and(s(21), s(20))
	nop(AND)
	s(21) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(20) = and(s(21), s(20))
	nop(AND)
	s(21) = s(19)
	nop(DUP2)
	l(l1) = s(20)
	nop(MSTORE)
	s(20) = 32
	nop(PUSH1)
	s(19) = s(20)+s(19)
	nop(ADD)
	s(20) = s(15)
	nop(DUP5)
	s(21) = s(19)
	nop(DUP2)
	l(l4) = s(20)
	nop(MSTORE)
	s(20) = 32
	nop(PUSH1)
	s(19) = s(20)+s(19)
	nop(ADD)
	s(20) = s(16)
	nop(DUP4)
	s(21) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(20) = and(s(21), s(20))
	nop(AND)
	s(21) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(20) = and(s(21), s(20))
	nop(AND)
	s(21) = s(19)
	nop(DUP2)
	l(l2) = s(20)
	nop(MSTORE)
	s(20) = 32
	nop(PUSH1)
	s(19) = s(20)+s(19)
	nop(ADD)
	s(20) = s(17)
	nop(DUP3)
	s(21) = s(19)
	nop(DUP2)
	l(l3) = s(20)
	nop(MSTORE)
	s(20) = 32
	nop(PUSH1)
	s(19) = s(20)+s(19)
	nop(ADD)
	s(20) = s(14)
	s(14) = s(19)
	s(19) = s(20)
	nop(SWAP5)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(15) = 64
	nop(PUSH1)
	s(15) = l(l0)
	nop(MLOAD)
	s(16) = s(15)
	nop(DUP1)
	s(17) = s(14)
	s(14) = s(16)
	s(16) = s(17)
	nop(SWAP2)
	s(15) = s(16)-s(15)
	nop(SUB)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	nop(LOG1)
	s(13) = s(8)
	nop(DUP5)
	s(14) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(13) = and(s(14), s(13))
	nop(AND)
	s(14) = 25
	nop(PUSH1)
	s(15) = 1
	nop(PUSH1)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	s(15) = g(supplier)
	nop(SLOAD)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	s(16) = 256
	nop(PUSH2)
	s(15) = s(16)^s(15)
	nop(EXP)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	s(14) = s(15)/s(14)
	nop(DIV)
	s(15) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(14) = and(s(15), s(14))
	nop(AND)
	s(15) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(14) = and(s(15), s(14))
	nop(AND)
	s(15) = 100389287136786176327247604509743168900146139575972864366142685224231313322991
	nop(PUSH32)
	s(16) = s(11)
	nop(DUP5)
	s(17) = 64
	nop(PUSH1)
	s(17) = l(l0)
	nop(MLOAD)
	s(18) = s(17)
	nop(DUP1)
	s(19) = s(16)
	nop(DUP3)
	s(20) = s(18)
	nop(DUP2)
	l(l1) = s(19)
	nop(MSTORE)
	s(19) = 32
	nop(PUSH1)
	s(18) = s(19)+s(18)
	nop(ADD)
	s(19) = s(16)
	s(16) = s(18)
	s(18) = s(19)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(17) = 64
	nop(PUSH1)
	s(17) = l(l0)
	nop(MLOAD)
	s(18) = s(17)
	nop(DUP1)
	s(19) = s(16)
	s(16) = s(18)
	s(18) = s(19)
	nop(SWAP2)
	s(17) = s(18)-s(17)
	nop(SUB)
	s(18) = s(16)
	s(16) = s(17)
	s(17) = s(18)
	nop(SWAP1)
	nop(LOG3)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	call(block6288(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(totalInvested), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

jump22370(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	leq(s(16), s(15))
	call(block22384(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22370(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	gt(s(16), s(15))
	call(block22383_2(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22370(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(14) = 0
	nop(PUSH1)
	s(15) = s(12)
	nop(DUP3)
	s(16) = s(13)
	nop(DUP3)
	call(jump22370(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block22383(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22384(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(15) = s(13)
	nop(DUP2)
	s(16) = s(12)
	nop(DUP4)
	s(15) = s(16)-s(15)
	nop(SUB)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	nop(POP)
	s(15) = s(11)
	s(11) = s(14)
	s(14) = s(15)
	nop(SWAP3)
	s(15) = s(12)
	s(12) = s(14)
	s(14) = s(15)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block13507(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block22395(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(14) = 0
	nop(PUSH1)
	s(15) = s(14)
	nop(DUP1)
	s(16) = s(13)
	nop(DUP3)
	s(17) = s(12)
	nop(DUP5)
	s(16) = s(17)+s(16)
	nop(ADD)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	nop(POP)
	s(16) = s(12)
	nop(DUP4)
	s(17) = s(15)
	nop(DUP2)
	call(jump22395(s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22395(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	geq(s(17), s(16))
	call(block22415(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22395(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	lt(s(17), s(16))
	call(block22414_0(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22414(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22415(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(16) = s(15)
	nop(DUP1)
	s(17) = s(14)
	s(14) = s(16)
	s(16) = s(17)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(15) = s(11)
	s(11) = s(14)
	s(14) = s(15)
	nop(SWAP3)
	s(15) = s(12)
	s(12) = s(14)
	s(14) = s(15)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20752(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block22425(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(16) = 0
	nop(PUSH1)
	s(17) = s(16)
	nop(DUP1)
	s(18) = s(15)
	nop(DUP3)
	s(19) = s(14)
	nop(DUP5)
	s(18) = s(19)*s(18)
	nop(MUL)
	s(19) = s(17)
	s(17) = s(18)
	s(18) = s(19)
	nop(SWAP1)
	nop(POP)
	s(18) = 0
	nop(PUSH1)
	s(19) = s(14)
	nop(DUP5)
	s(18)= eq(s(19), s(18))
	nop(EQ)
	s(19) = s(18)
	nop(DUP1)
	s(20) = 22458
	nop(PUSH2)
	call(jump22425(s(20),s(19),s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMPI)

jump22425(s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(19), 1 )
	call(block22458(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22425(s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(19), 1 )
	call(block22443_3(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22443(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(18), 0)
	call(block22455(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22443(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(18), 0)
	call(block22454(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22443(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(POP)
	s(15) = s(12)
	nop(DUP3)
	s(16) = s(11)
	nop(DUP5)
	s(17) = s(14)
	nop(DUP3)
	s(18) = s(16)
	nop(DUP2)
	call(jump22443(s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block22454(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22455(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(16) = s(17)/s(16)
	nop(DIV)
	s(15)= eq(s(16), s(15))
	nop(EQ)
	call(block22458_3(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22458(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(18), 0)
	call(block22466(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22458(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(18), 0)
	call(block22465_3(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22458(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	call(jump22458(s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block22465(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22466(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(18) = s(17)
	nop(DUP1)
	s(19) = s(16)
	s(16) = s(18)
	s(18) = s(19)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(17) = s(13)
	s(13) = s(16)
	s(16) = s(17)
	nop(SWAP3)
	s(17) = s(14)
	s(14) = s(16)
	s(16) = s(17)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block13493(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block13436_0(s(1), s(0), g(usdPerEther), g(poolCapUSD), g(owner), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(2) = 0
	nop(PUSH1)
	s(3) = 13507
	nop(PUSH2)
	s(4) = 30
	nop(PUSH1)
	s(4) = g(owner)
	nop(SLOAD)
	s(5) = 13493
	nop(PUSH2)
	s(6) = 1000000000000000000
	nop(PUSH8)
	s(7) = 13479
	nop(PUSH2)
	s(8) = 7
	nop(PUSH1)
	s(8) = g(usdPerEther)
	nop(SLOAD)
	s(9) = 6
	nop(PUSH1)
	s(9) = g(poolCapUSD)
	nop(SLOAD)
	s(10) = 20581
	nop(PUSH2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 4294967295
	nop(PUSH4)
	s(10) = and(s(11), s(10))
	nop(AND)
	call(block20581_8(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block13436_1(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(11) = 0
	nop(PUSH1)
	s(12) = 13507
	nop(PUSH2)
	s(13) = 30
	nop(PUSH1)
	s(13) = g(owner)
	nop(SLOAD)
	s(14) = 13493
	nop(PUSH2)
	s(15) = 1000000000000000000
	nop(PUSH8)
	s(16) = 13479
	nop(PUSH2)
	s(17) = 7
	nop(PUSH1)
	s(17) = g(usdPerEther)
	nop(SLOAD)
	s(18) = 6
	nop(PUSH1)
	s(18) = g(poolCapUSD)
	nop(SLOAD)
	s(19) = 20581
	nop(PUSH2)
	s(20) = s(18)
	s(18) = s(19)
	s(19) = s(20)
	nop(SWAP1)
	s(20) = s(17)
	s(17) = s(19)
	s(19) = s(20)
	nop(SWAP2)
	s(20) = s(18)
	s(18) = s(19)
	s(19) = s(20)
	nop(SWAP1)
	s(20) = 4294967295
	nop(PUSH4)
	s(19) = and(s(20), s(19))
	nop(AND)
	call(block20581_9(s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block13479_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(8) = 22425
	nop(PUSH2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = s(6)
	s(6) = s(8)
	s(8) = s(9)
	nop(SWAP2)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	s(9) = 4294967295
	nop(PUSH4)
	s(8) = and(s(9), s(8))
	nop(AND)
	call(block22425_4(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block13479_1(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(17) = 22425
	nop(PUSH2)
	s(18) = s(16)
	s(16) = s(17)
	s(17) = s(18)
	nop(SWAP1)
	s(18) = s(15)
	s(15) = s(17)
	s(17) = s(18)
	nop(SWAP2)
	s(18) = s(16)
	s(16) = s(17)
	s(17) = s(18)
	nop(SWAP1)
	s(18) = 4294967295
	nop(PUSH4)
	s(17) = and(s(18), s(17))
	nop(AND)
	call(block22425_5(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block13493_0(s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(6) = 22370
	nop(PUSH2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	s(7) = s(5)
	s(5) = s(6)
	s(6) = s(7)
	nop(SWAP1)
	s(7) = 4294967295
	nop(PUSH4)
	s(6) = and(s(7), s(6))
	nop(AND)
	call(block22370_7(s(5),s(4),s(3),s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block13493_1(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(15) = 22370
	nop(PUSH2)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	s(16) = s(13)
	s(13) = s(15)
	s(15) = s(16)
	nop(SWAP2)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	s(16) = 4294967295
	nop(PUSH4)
	s(15) = and(s(16), s(15))
	nop(AND)
	call(block22370_15(s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block13507_0(s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(POP)
	s(3) = s(1)
	s(1) = s(2)
	s(2) = s(3)
	nop(SWAP1)
	call(block3809(s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block13507_1(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(POP)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	call(block20255_0(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

jump18328_0(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(13), 0)
	call(block18359_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump18328_0(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(13), 0)
	call(block18358(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block18328_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(9) = 0
	nop(PUSH1)
	s(10) = 34
	nop(PUSH1)
	s(10) = g(saleCap)
	nop(SLOAD)
	s(11) = 1000000000000000000
	nop(PUSH8)
	s(12) = 100
	nop(PUSH1)
	s(13) = 7
	nop(PUSH1)
	s(13) = g(usdPerEther)
	nop(SLOAD)
	s(14) = s(8)
	nop(DUP6)
	s(13) = s(14)*s(13)
	nop(MUL)
	s(12) = s(13)*s(12)
	nop(MUL)
	s(13) = s(11)
	nop(DUP2)
	call(jump18328_0(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump18328_1(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(saleCap), g(usdPerEther), l(l1), l(l0))=>
	neq(s(7), 0)
	call(block18359_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0)))

jump18328_1(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(saleCap), g(usdPerEther), l(l1), l(l0))=>
	eq(s(7), 0)
	call(block18358_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block18328_1(s(2), s(1), s(0), g(saleCap), g(usdPerEther), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 0
	nop(PUSH1)
	s(4) = 34
	nop(PUSH1)
	s(4) = g(saleCap)
	nop(SLOAD)
	s(5) = 1000000000000000000
	nop(PUSH8)
	s(6) = 100
	nop(PUSH1)
	s(7) = 7
	nop(PUSH1)
	s(7) = g(usdPerEther)
	nop(SLOAD)
	s(8) = s(2)
	nop(DUP6)
	s(7) = s(8)*s(7)
	nop(MUL)
	s(6) = s(7)*s(6)
	nop(MUL)
	s(7) = s(5)
	nop(DUP2)
	call(jump18328_1(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(saleCap), g(usdPerEther), l(l1), l(l0)))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump18328_2(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(15), 0)
	call(block18359_2(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump18328_2(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(15), 0)
	call(block18358_3(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block18328_2(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(11) = 0
	nop(PUSH1)
	s(12) = 34
	nop(PUSH1)
	s(12) = g(saleCap)
	nop(SLOAD)
	s(13) = 1000000000000000000
	nop(PUSH8)
	s(14) = 100
	nop(PUSH1)
	s(15) = 7
	nop(PUSH1)
	s(15) = g(usdPerEther)
	nop(SLOAD)
	s(16) = s(10)
	nop(DUP6)
	s(15) = s(16)*s(15)
	nop(MUL)
	s(14) = s(15)*s(14)
	nop(MUL)
	s(15) = s(13)
	nop(DUP2)
	call(jump18328_2(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block18328_3(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(10) = 0
	nop(PUSH1)
	s(11) = 34
	nop(PUSH1)
	s(11) = g(saleCap)
	nop(SLOAD)
	s(12) = 1000000000000000000
	nop(PUSH8)
	s(13) = 100
	nop(PUSH1)
	s(14) = 7
	nop(PUSH1)
	s(14) = g(usdPerEther)
	nop(SLOAD)
	s(15) = s(9)
	nop(DUP6)
	s(14) = s(15)*s(14)
	nop(MUL)
	s(13) = s(14)*s(13)
	nop(MUL)
	s(14) = s(12)
	nop(DUP2)
	call(jump18328_3(s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump18328_3(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(14), 0)
	call(block18359_3(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump18328_3(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(14), 0)
	call(block18358_2(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block18358_0(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block18358_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block18358_2(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block18358_3(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block18359_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(11) = s(12)/s(11)
	nop(DIV)
	s(12) = s(10)
	nop(DUP2)
	call(jump18359_0(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump18359_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(12), 0)
	call(block18369_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump18359_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(12), 0)
	call(block18368(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block18359_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(5) = s(6)/s(5)
	nop(DIV)
	s(6) = s(4)
	nop(DUP2)
	call(jump18359_1(s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l1), l(l0)))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump18359_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	neq(s(6), 0)
	call(block18369_1(s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0)))

jump18359_1(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	eq(s(6), 0)
	call(block18368_1(s(5), s(4), s(3), s(2), s(1), s(0)))

block18359_2(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(13) = s(14)/s(13)
	nop(DIV)
	s(14) = s(12)
	nop(DUP2)
	call(jump18359_2(s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump18359_2(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(14), 0)
	call(block18369_2(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump18359_2(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(14), 0)
	call(block18368_3(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block18359_3(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(12) = s(13)/s(12)
	nop(DIV)
	s(13) = s(11)
	nop(DUP2)
	call(jump18359_3(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump18359_3(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(13), 0)
	call(block18369_3(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump18359_3(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(13), 0)
	call(block18368_2(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block18368_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block18368_1(s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block18368_2(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block18368_3(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block18369_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(10) = s(11)/s(10)
	nop(DIV)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	nop(POP)
	s(10) = s(7)
	s(7) = s(9)
	s(9) = s(10)
	nop(SWAP2)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	nop(POP)
	call(block5304(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block18369_1(s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(4) = s(5)/s(4)
	nop(DIV)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	nop(POP)
	s(4) = s(1)
	s(1) = s(3)
	s(3) = s(4)
	nop(SWAP2)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(POP)
	call(block4434(s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block18369_2(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(12) = s(13)/s(12)
	nop(DIV)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(POP)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	nop(POP)
	call(block20260_0(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block18369_3(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(11) = s(12)/s(11)
	nop(DIV)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	nop(POP)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	nop(POP)
	call(block5304_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

jump19929_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	geq(s(14), s(13))
	call(block20018_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump19929_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	lt(s(14), s(13))
	call(block19946_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

block19929_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(9)
	nop(DUP1)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(11)
	nop(DUP1)
	s(13) = 27
	nop(PUSH1)
	s(13) = g(supplier)
	nop(SLOAD)
	s(14) = timestamp
	nop(TIMESTAMP)
	call(jump19929_0(s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump19946_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	lt(s(16), s(15))
	call(block19961_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump19946_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	geq(s(16), s(15))
	call(block19960_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block19946_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	s(13) = 35
	nop(PUSH1)
	s(14) = 0
	nop(PUSH1)
	s(15) = s(13)
	nop(DUP2)
	s(15) = g(saleShare)
	nop(SLOAD)
	s(16) = s(14)
	nop(DUP2)
	call(jump19946_0(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block19960_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block19961_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = 0
	nop(PUSH1)
	l(l6) = s(14)
	nop(MSTORE)
	s(14) = 32
	nop(PUSH1)
	s(15) = 0
	nop(PUSH1)
	s(14) = sha3(s(15), s(14))
	nop(SHA3)
	s(13) = s(14)+s(13)
	nop(ADD)
	gl = s(13)
	s(13) = fresh(0)
	nop(SLOAD)
	s(14) = s(9)
	s(9) = s(13)
	s(13) = s(14)
	nop(SWAP4)
	nop(POP)
	s(13) = 35
	nop(PUSH1)
	s(14) = 1
	nop(PUSH1)
	s(15) = s(13)
	nop(DUP2)
	s(15) = g(saleShare)
	nop(SLOAD)
	s(16) = s(14)
	nop(DUP2)
	call(jump19961_0(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump19961_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	lt(s(16), s(15))
	call(block19990_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump19961_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	geq(s(16), s(15))
	call(block19989_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block19989_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block19990_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = 0
	nop(PUSH1)
	l(l6) = s(14)
	nop(MSTORE)
	s(14) = 32
	nop(PUSH1)
	s(15) = 0
	nop(PUSH1)
	s(14) = sha3(s(15), s(14))
	nop(SHA3)
	s(13) = s(14)+s(13)
	nop(ADD)
	gl = s(13)
	s(13) = fresh(0)
	nop(SLOAD)
	s(14) = s(10)
	s(10) = s(13)
	s(13) = s(14)
	nop(SWAP3)
	nop(POP)
	s(13) = 17
	nop(PUSH1)
	s(13) = g(contractCreatedTimestamp)
	nop(SLOAD)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	nop(POP)
	s(13) = 27
	nop(PUSH1)
	s(13) = g(supplier)
	nop(SLOAD)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	nop(POP)
	s(13) = 20210
	nop(PUSH2)
	call(block20210_0(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(JUMP)

block20018_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(13) = 27
	nop(PUSH1)
	s(13) = g(supplier)
	nop(SLOAD)
	s(14) = timestamp
	nop(TIMESTAMP)
	s(13) = lt(s(14), s(13))
	nop(LT)
	s(13)= eq(s(13), 0)
	nop(ISZERO)
	s(14) = s(13)
	nop(DUP1)
	call(jump20018_0(s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20018_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	eq(s(14), 0)
	call(block20037_0(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump20018_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	neq(s(14), 0)
	call(block20031_0(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

block20031_0(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(POP)
	s(13) = 28
	nop(PUSH1)
	s(13) = g(saleStat)
	nop(SLOAD)
	s(14) = timestamp
	nop(TIMESTAMP)
	s(13) = lt(s(14), s(13))
	nop(LT)
	call(block20037_0(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump20037_0(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	eq(s(13), 0)
	call(block20115_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump20037_0(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	neq(s(13), 0)
	call(block20043_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

block20037_0(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	call(jump20037_0(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block20043_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	s(13) = 35
	nop(PUSH1)
	s(14) = 1
	nop(PUSH1)
	s(15) = s(13)
	nop(DUP2)
	s(15) = g(saleShare)
	nop(SLOAD)
	s(16) = s(14)
	nop(DUP2)
	call(jump20043_0(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20043_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	lt(s(16), s(15))
	call(block20058_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump20043_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	geq(s(16), s(15))
	call(block20057_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20057_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20058_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = 0
	nop(PUSH1)
	l(l6) = s(14)
	nop(MSTORE)
	s(14) = 32
	nop(PUSH1)
	s(15) = 0
	nop(PUSH1)
	s(14) = sha3(s(15), s(14))
	nop(SHA3)
	s(13) = s(14)+s(13)
	nop(ADD)
	gl = s(13)
	s(13) = fresh(0)
	nop(SLOAD)
	s(14) = s(9)
	s(9) = s(13)
	s(13) = s(14)
	nop(SWAP4)
	nop(POP)
	s(13) = 35
	nop(PUSH1)
	s(14) = 2
	nop(PUSH1)
	s(15) = s(13)
	nop(DUP2)
	s(15) = g(saleShare)
	nop(SLOAD)
	s(16) = s(14)
	nop(DUP2)
	call(jump20058_0(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20058_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	lt(s(16), s(15))
	call(block20087_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump20058_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	geq(s(16), s(15))
	call(block20086_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20086_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20087_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = 0
	nop(PUSH1)
	l(l6) = s(14)
	nop(MSTORE)
	s(14) = 32
	nop(PUSH1)
	s(15) = 0
	nop(PUSH1)
	s(14) = sha3(s(15), s(14))
	nop(SHA3)
	s(13) = s(14)+s(13)
	nop(ADD)
	gl = s(13)
	s(13) = fresh(0)
	nop(SLOAD)
	s(14) = s(10)
	s(10) = s(13)
	s(13) = s(14)
	nop(SWAP3)
	nop(POP)
	s(13) = 27
	nop(PUSH1)
	s(13) = g(supplier)
	nop(SLOAD)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	nop(POP)
	s(13) = 28
	nop(PUSH1)
	s(13) = g(saleStat)
	nop(SLOAD)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	nop(POP)
	s(13) = 20209
	nop(PUSH2)
	call(block20209_0(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(JUMP)

jump20115_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	eq(s(14), 0)
	call(block20134_0(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump20115_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	neq(s(14), 0)
	call(block20128_0(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

block20115_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(13) = 28
	nop(PUSH1)
	s(13) = g(saleStat)
	nop(SLOAD)
	s(14) = timestamp
	nop(TIMESTAMP)
	s(13) = lt(s(14), s(13))
	nop(LT)
	s(13)= eq(s(13), 0)
	nop(ISZERO)
	s(14) = s(13)
	nop(DUP1)
	call(jump20115_0(s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block20128_0(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(POP)
	s(13) = 10
	nop(PUSH1)
	s(13) = g(businessPlannedPeriodEndTimestamp)
	nop(SLOAD)
	s(14) = timestamp
	nop(TIMESTAMP)
	s(13) = lt(s(14), s(13))
	nop(LT)
	call(block20134_0(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump20134_0(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	eq(s(13), 0)
	call(block20208_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump20134_0(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	neq(s(13), 0)
	call(block20140_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

block20134_0(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	call(jump20134_0(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block20140_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	s(13) = 35
	nop(PUSH1)
	s(14) = 2
	nop(PUSH1)
	s(15) = s(13)
	nop(DUP2)
	s(15) = g(saleShare)
	nop(SLOAD)
	s(16) = s(14)
	nop(DUP2)
	call(jump20140_0(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20140_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	lt(s(16), s(15))
	call(block20155_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump20140_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	geq(s(16), s(15))
	call(block20154_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20154_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

jump20155_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	lt(s(16), s(15))
	call(block20184_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump20155_0(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	geq(s(16), s(15))
	call(block20183_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20155_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = 0
	nop(PUSH1)
	l(l6) = s(14)
	nop(MSTORE)
	s(14) = 32
	nop(PUSH1)
	s(15) = 0
	nop(PUSH1)
	s(14) = sha3(s(15), s(14))
	nop(SHA3)
	s(13) = s(14)+s(13)
	nop(ADD)
	gl = s(13)
	s(13) = fresh(0)
	nop(SLOAD)
	s(14) = s(9)
	s(9) = s(13)
	s(13) = s(14)
	nop(SWAP4)
	nop(POP)
	s(13) = 35
	nop(PUSH1)
	s(14) = 3
	nop(PUSH1)
	s(15) = s(13)
	nop(DUP2)
	s(15) = g(saleShare)
	nop(SLOAD)
	s(16) = s(14)
	nop(DUP2)
	call(jump20155_0(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block20183_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20184_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = 0
	nop(PUSH1)
	l(l6) = s(14)
	nop(MSTORE)
	s(14) = 32
	nop(PUSH1)
	s(15) = 0
	nop(PUSH1)
	s(14) = sha3(s(15), s(14))
	nop(SHA3)
	s(13) = s(14)+s(13)
	nop(ADD)
	gl = s(13)
	s(13) = fresh(0)
	nop(SLOAD)
	s(14) = s(10)
	s(10) = s(13)
	s(13) = s(14)
	nop(SWAP3)
	nop(POP)
	s(13) = 28
	nop(PUSH1)
	s(13) = g(saleStat)
	nop(SLOAD)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	nop(POP)
	s(13) = 10
	nop(PUSH1)
	s(13) = g(businessPlannedPeriodEndTimestamp)
	nop(SLOAD)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	nop(POP)
	call(block20208_0(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

block20208_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	call(block20209_0(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

block20209_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	call(block20210_0(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump20210_0(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	neq(s(15), 0)
	call(block20229_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump20210_0(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	eq(s(15), 0)
	call(block20228_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20210_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(13) = s(11)
	nop(DUP2)
	s(14) = s(12)
	nop(DUP2)
	s(13) = s(14)-s(13)
	nop(SUB)
	s(14) = s(9)
	nop(DUP5)
	s(15) = s(10)
	nop(DUP5)
	s(14) = s(15)-s(14)
	nop(SUB)
	s(15) = s(11)
	nop(DUP4)
	s(16) = timestamp
	nop(TIMESTAMP)
	s(15) = s(16)-s(15)
	nop(SUB)
	s(14) = s(15)*s(14)
	nop(MUL)
	s(15) = s(13)
	nop(DUP2)
	call(jump20210_0(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block20228_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20229_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(13) = s(14)/s(13)
	nop(DIV)
	s(14) = s(9)
	nop(DUP5)
	s(13) = s(14)+s(13)
	nop(ADD)
	s(14) = 34
	nop(PUSH1)
	s(15) = s(13)
	nop(DUP2)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	g(saleCap) = s(14)
	nop(SSTORE)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	call(block5286_0(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20244_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(9) = 20260
	nop(PUSH2)
	s(10) = 20255
	nop(PUSH2)
	s(11) = 13436
	nop(PUSH2)
	call(block13436_1(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20255_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(11) = 18328
	nop(PUSH2)
	call(block18328_2(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20260_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(10) = 29
	nop(PUSH1)
	s(10) = g(saleStartTimestamp)
	nop(SLOAD)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 32
	nop(PUSH1)
	s(11) = s(9)
	nop(DUP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	g(totalInvested) = s(10)
	nop(SSTORE)
	nop(POP)
	s(9) = 20328
	nop(PUSH2)
	s(10) = 33
	nop(PUSH1)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(11) = g(totalWithdrawn)
	nop(SLOAD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = 256
	nop(PUSH2)
	s(11) = s(12)^s(11)
	nop(EXP)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(10) = s(11)/s(10)
	nop(DIV)
	s(11) = 255
	nop(PUSH1)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 255
	nop(PUSH1)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 20314
	nop(PUSH2)
	s(12) = 100
	nop(PUSH1)
	s(13) = 32
	nop(PUSH1)
	s(13) = g(totalInvested)
	nop(SLOAD)
	s(14) = 22425
	nop(PUSH2)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = s(12)
	s(12) = s(14)
	s(14) = s(15)
	nop(SWAP2)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = 4294967295
	nop(PUSH4)
	s(14) = and(s(15), s(14))
	nop(AND)
	call(block22425_6(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20314_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(12) = 20581
	nop(PUSH2)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(13) = 4294967295
	nop(PUSH4)
	s(12) = and(s(13), s(12))
	nop(AND)
	call(block20581_10(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20328_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(10) = 8
	nop(PUSH1)
	s(11) = s(9)
	nop(DUP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	g(supplyCap) = s(10)
	nop(SSTORE)
	nop(POP)
	s(9) = 20392
	nop(PUSH2)
	s(10) = 100
	nop(PUSH1)
	s(11) = 20378
	nop(PUSH2)
	s(12) = 12
	nop(PUSH1)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(13) = g(teamShare)
	nop(SLOAD)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = 256
	nop(PUSH2)
	s(13) = s(14)^s(13)
	nop(EXP)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(12) = s(13)/s(12)
	nop(DIV)
	s(13) = 255
	nop(PUSH1)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 255
	nop(PUSH1)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 8
	nop(PUSH1)
	s(13) = g(supplyCap)
	nop(SLOAD)
	s(14) = 22425
	nop(PUSH2)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = s(12)
	s(12) = s(14)
	s(14) = s(15)
	nop(SWAP2)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = 4294967295
	nop(PUSH4)
	s(14) = and(s(15), s(14))
	nop(AND)
	call(block22425_7(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20378_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(12) = 20581
	nop(PUSH2)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(13) = 4294967295
	nop(PUSH4)
	s(12) = and(s(13), s(12))
	nop(AND)
	call(block20581_11(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20392_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(10) = 11
	nop(PUSH1)
	s(11) = s(9)
	nop(DUP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	g(teamCap) = s(10)
	nop(SSTORE)
	nop(POP)
	s(9) = 20456
	nop(PUSH2)
	s(10) = 100
	nop(PUSH1)
	s(11) = 20442
	nop(PUSH2)
	s(12) = 15
	nop(PUSH1)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(13) = g(fundariaShare)
	nop(SLOAD)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = 256
	nop(PUSH2)
	s(13) = s(14)^s(13)
	nop(EXP)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(12) = s(13)/s(12)
	nop(DIV)
	s(13) = 255
	nop(PUSH1)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 255
	nop(PUSH1)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 8
	nop(PUSH1)
	s(13) = g(supplyCap)
	nop(SLOAD)
	s(14) = 22425
	nop(PUSH2)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = s(12)
	s(12) = s(14)
	s(14) = s(15)
	nop(SWAP2)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = 4294967295
	nop(PUSH4)
	s(14) = and(s(15), s(14))
	nop(AND)
	call(block22425_8(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20442_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(12) = 20581
	nop(PUSH2)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(13) = 4294967295
	nop(PUSH4)
	s(12) = and(s(13), s(12))
	nop(AND)
	call(block20581_12(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20456_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(10) = 14
	nop(PUSH1)
	s(11) = s(9)
	nop(DUP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	g(fundariaCap) = s(10)
	nop(SSTORE)
	nop(POP)
	s(9) = 20504
	nop(PUSH2)
	s(10) = 100
	nop(PUSH1)
	s(11) = 20490
	nop(PUSH2)
	s(12) = 40
	nop(PUSH1)
	s(12) = g(fundaria)
	nop(SLOAD)
	s(13) = 8
	nop(PUSH1)
	s(13) = g(supplyCap)
	nop(SLOAD)
	s(14) = 22425
	nop(PUSH2)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = s(12)
	s(12) = s(14)
	s(14) = s(15)
	nop(SWAP2)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = 4294967295
	nop(PUSH4)
	s(14) = and(s(15), s(14))
	nop(AND)
	call(block22425_9(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20490_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(12) = 20581
	nop(PUSH2)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(13) = 4294967295
	nop(PUSH4)
	s(12) = and(s(13), s(12))
	nop(AND)
	call(block20581_13(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20504_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(10) = 38
	nop(PUSH1)
	s(11) = s(9)
	nop(DUP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	g(priceIsFrozen) = s(10)
	nop(SSTORE)
	nop(POP)
	s(9) = 20573
	nop(PUSH2)
	s(10) = 38
	nop(PUSH1)
	s(10) = g(priceIsFrozen)
	nop(SLOAD)
	s(11) = 20559
	nop(PUSH2)
	s(12) = 11
	nop(PUSH1)
	s(12) = g(teamCap)
	nop(SLOAD)
	s(13) = 20545
	nop(PUSH2)
	s(14) = 32
	nop(PUSH1)
	s(14) = g(totalInvested)
	nop(SLOAD)
	s(15) = 8
	nop(PUSH1)
	s(15) = g(supplyCap)
	nop(SLOAD)
	s(16) = 22370
	nop(PUSH2)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	s(17) = s(14)
	s(14) = s(16)
	s(16) = s(17)
	nop(SWAP2)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	s(17) = 4294967295
	nop(PUSH4)
	s(16) = and(s(17), s(16))
	nop(AND)
	call(block22370_16(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20545_0(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(14) = 22370
	nop(PUSH2)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = s(12)
	s(12) = s(14)
	s(14) = s(15)
	nop(SWAP2)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = 4294967295
	nop(PUSH4)
	s(14) = and(s(15), s(14))
	nop(AND)
	call(block22370_17(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20559_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(12) = 22370
	nop(PUSH2)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(13) = 4294967295
	nop(PUSH4)
	s(12) = and(s(13), s(12))
	nop(AND)
	call(block22370_18(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20573_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(10) = 24
	nop(PUSH1)
	s(11) = s(9)
	nop(DUP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	g(bountyCap) = s(10)
	nop(SSTORE)
	nop(POP)
	call(block5295_0(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20581_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	nop(DUP3)
	s(14) = s(9)
	nop(DUP5)
	s(15) = s(13)
	nop(DUP2)
	call(jump20581_0(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20581_0(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(15), 0)
	call(block20595_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump20581_0(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(15), 0)
	call(block20594_5(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20581_1(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	nop(DUP3)
	s(14) = s(9)
	nop(DUP5)
	s(15) = s(13)
	nop(DUP2)
	call(jump20581_1(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20581_1(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(15), 0)
	call(block20595_1(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump20581_1(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(15), 0)
	call(block20594_4(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20581_10(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(12) = 0
	nop(PUSH1)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(11)
	nop(DUP3)
	s(15) = s(10)
	nop(DUP5)
	s(16) = s(14)
	nop(DUP2)
	call(jump20581_10(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20581_10(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(16), 0)
	call(block20595_10(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump20581_10(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(16), 0)
	call(block20594_15(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20581_11(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(12) = 0
	nop(PUSH1)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(11)
	nop(DUP3)
	s(15) = s(10)
	nop(DUP5)
	s(16) = s(14)
	nop(DUP2)
	call(jump20581_11(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20581_11(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(16), 0)
	call(block20595_11(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump20581_11(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(16), 0)
	call(block20594_14(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20581_12(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(12) = 0
	nop(PUSH1)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(11)
	nop(DUP3)
	s(15) = s(10)
	nop(DUP5)
	s(16) = s(14)
	nop(DUP2)
	call(jump20581_12(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20581_12(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(16), 0)
	call(block20595_12(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump20581_12(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(16), 0)
	call(block20594_13(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20581_13(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(12) = 0
	nop(PUSH1)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(11)
	nop(DUP3)
	s(15) = s(10)
	nop(DUP5)
	s(16) = s(14)
	nop(DUP2)
	call(jump20581_13(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20581_13(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(16), 0)
	call(block20595_13(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump20581_13(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(16), 0)
	call(block20594_12(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20581_14(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	nop(DUP3)
	s(14) = s(9)
	nop(DUP5)
	s(15) = s(13)
	nop(DUP2)
	call(jump20581_14(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20581_14(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(15), 0)
	call(block20595_14(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump20581_14(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(15), 0)
	call(block20594_11(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20581_15(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	nop(DUP3)
	s(14) = s(9)
	nop(DUP5)
	s(15) = s(13)
	nop(DUP2)
	call(jump20581_15(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20581_15(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(15), 0)
	call(block20595_15(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump20581_15(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(15), 0)
	call(block20594_10(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20581_16(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(18) = 0
	nop(PUSH1)
	s(19) = s(18)
	nop(DUP1)
	s(20) = s(17)
	nop(DUP3)
	s(21) = s(16)
	nop(DUP5)
	s(22) = s(20)
	nop(DUP2)
	call(jump20581_16(s(22),s(21),s(20),s(19),s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20581_16(s(22), s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(22), 0)
	call(block20595_16(s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump20581_16(s(22), s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(22), 0)
	call(block20594_9(s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20581_2(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	nop(DUP3)
	s(14) = s(9)
	nop(DUP5)
	s(15) = s(13)
	nop(DUP2)
	call(jump20581_2(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20581_2(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(15), 0)
	call(block20595_2(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump20581_2(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(15), 0)
	call(block20594_3(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20581_3(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	nop(DUP3)
	s(14) = s(9)
	nop(DUP5)
	s(15) = s(13)
	nop(DUP2)
	call(jump20581_3(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20581_3(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(15), 0)
	call(block20595_3(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump20581_3(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(15), 0)
	call(block20594_2(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20581_4(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = s(8)
	nop(DUP5)
	s(14) = s(12)
	nop(DUP2)
	call(jump20581_4(s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20581_4(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(14), 0)
	call(block20595_4(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump20581_4(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(14), 0)
	call(block20594_1(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20581_5(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = s(8)
	nop(DUP5)
	s(14) = s(12)
	nop(DUP2)
	call(jump20581_5(s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20581_5(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(14), 0)
	call(block20595_5(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump20581_5(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(14), 0)
	call(block20594_0(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20581_6(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(17) = 0
	nop(PUSH1)
	s(18) = s(17)
	nop(DUP1)
	s(19) = s(16)
	nop(DUP3)
	s(20) = s(15)
	nop(DUP5)
	s(21) = s(19)
	nop(DUP2)
	call(jump20581_6(s(21),s(20),s(19),s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20581_6(s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(21), 0)
	call(block20595_6(s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump20581_6(s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(21), 0)
	call(block20594(s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20581_7(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(13)
	nop(DUP1)
	s(15) = s(12)
	nop(DUP3)
	s(16) = s(11)
	nop(DUP5)
	s(17) = s(15)
	nop(DUP2)
	call(jump20581_7(s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0)))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20581_7(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	neq(s(17), 0)
	call(block20595_7(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0)))

jump20581_7(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	eq(s(17), 0)
	call(block20594_7(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20581_8(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = s(8)
	nop(DUP5)
	s(14) = s(12)
	nop(DUP2)
	call(jump20581_8(s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l1), l(l0)))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20581_8(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	neq(s(14), 0)
	call(block20595_8(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0)))

jump20581_8(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	eq(s(14), 0)
	call(block20594_8(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20581_9(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(19) = 0
	nop(PUSH1)
	s(20) = s(19)
	nop(DUP1)
	s(21) = s(18)
	nop(DUP3)
	s(22) = s(17)
	nop(DUP5)
	s(23) = s(21)
	nop(DUP2)
	call(jump20581_9(s(23),s(22),s(21),s(20),s(19),s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump20581_9(s(23), s(22), s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(23), 0)
	call(block20595_9(s(22), s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump20581_9(s(23), s(22), s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(23), 0)
	call(block20594_16(s(22), s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20594_0(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20594_1(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20594_10(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20594_11(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20594_12(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20594_13(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20594_14(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20594_15(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20594_16(s(22), s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20594_2(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20594_3(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20594_4(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20594_5(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20594_6(s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20594_7(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20594_8(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20594_9(s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block20595_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(13) = s(14)/s(13)
	nop(DIV)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	nop(POP)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20328(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20595_1(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(13) = s(14)/s(13)
	nop(DIV)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	nop(POP)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20392(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20595_10(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(14) = s(15)/s(14)
	nop(DIV)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	nop(POP)
	s(14) = s(13)
	nop(DUP1)
	s(15) = s(12)
	s(12) = s(14)
	s(14) = s(15)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(13) = s(9)
	s(9) = s(12)
	s(12) = s(13)
	nop(SWAP3)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20328_0(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20595_11(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(14) = s(15)/s(14)
	nop(DIV)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	nop(POP)
	s(14) = s(13)
	nop(DUP1)
	s(15) = s(12)
	s(12) = s(14)
	s(14) = s(15)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(13) = s(9)
	s(9) = s(12)
	s(12) = s(13)
	nop(SWAP3)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20392_0(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20595_12(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(14) = s(15)/s(14)
	nop(DIV)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	nop(POP)
	s(14) = s(13)
	nop(DUP1)
	s(15) = s(12)
	s(12) = s(14)
	s(14) = s(15)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(13) = s(9)
	s(9) = s(12)
	s(12) = s(13)
	nop(SWAP3)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20456_0(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20595_13(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(14) = s(15)/s(14)
	nop(DIV)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	nop(POP)
	s(14) = s(13)
	nop(DUP1)
	s(15) = s(12)
	s(12) = s(14)
	s(14) = s(15)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(13) = s(9)
	s(9) = s(12)
	s(12) = s(13)
	nop(SWAP3)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20504_0(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20595_14(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(13) = s(14)/s(13)
	nop(DIV)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	nop(POP)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block5422_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20595_15(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(13) = s(14)/s(13)
	nop(DIV)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	nop(POP)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block5481_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20595_16(s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(20) = s(21)/s(20)
	nop(DIV)
	s(21) = s(19)
	s(19) = s(20)
	s(20) = s(21)
	nop(SWAP1)
	nop(POP)
	s(20) = s(19)
	nop(DUP1)
	s(21) = s(18)
	s(18) = s(20)
	s(20) = s(21)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(19) = s(15)
	s(15) = s(18)
	s(18) = s(19)
	nop(SWAP3)
	s(19) = s(16)
	s(16) = s(18)
	s(18) = s(19)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block21180_1(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20595_2(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(13) = s(14)/s(13)
	nop(DIV)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	nop(POP)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20456(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20595_3(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(13) = s(14)/s(13)
	nop(DIV)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	nop(POP)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20504(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20595_4(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(12) = s(13)/s(12)
	nop(DIV)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(POP)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block5422(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20595_5(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(12) = s(13)/s(12)
	nop(DIV)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(POP)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block5481(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20595_6(s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(19) = s(20)/s(19)
	nop(DIV)
	s(20) = s(18)
	s(18) = s(19)
	s(19) = s(20)
	nop(SWAP1)
	nop(POP)
	s(19) = s(18)
	nop(DUP1)
	s(20) = s(17)
	s(17) = s(19)
	s(19) = s(20)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(18) = s(14)
	s(14) = s(17)
	s(17) = s(18)
	nop(SWAP3)
	s(18) = s(15)
	s(15) = s(17)
	s(17) = s(18)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block21180(s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20595_7(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(15) = s(16)/s(15)
	nop(DIV)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	nop(POP)
	s(15) = s(14)
	nop(DUP1)
	s(16) = s(13)
	s(13) = s(15)
	s(15) = s(16)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(14) = s(10)
	s(10) = s(13)
	s(13) = s(14)
	nop(SWAP3)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block21180_0(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0)))
	nop(JUMP)

block20595_8(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(12) = s(13)/s(12)
	nop(DIV)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(POP)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(11) = s(7)
	s(7) = s(10)
	s(10) = s(11)
	nop(SWAP3)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block13479_0(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block20595_9(s(22), s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(21) = s(22)/s(21)
	nop(DIV)
	s(22) = s(20)
	s(20) = s(21)
	s(21) = s(22)
	nop(SWAP1)
	nop(POP)
	s(21) = s(20)
	nop(DUP1)
	s(22) = s(19)
	s(19) = s(21)
	s(21) = s(22)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(20) = s(16)
	s(16) = s(19)
	s(19) = s(20)
	nop(SWAP3)
	s(20) = s(17)
	s(17) = s(19)
	s(19) = s(20)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block13479_1(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

jump20608_0(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	gt(s(13), s(12))
	call(block20623_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump20608_0(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	leq(s(13), s(12))
	call(block20619_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block20608_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(12) = 0
	nop(PUSH1)
	s(13) = s(10)
	nop(DUP3)
	call(jump20608_0(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block20619_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(12) = 0
	nop(PUSH1)
	s(13) = s(12)
	nop(DUP1)
	nop(REVERT)

block20623_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(12) = s(10)
	nop(DUP2)
	s(13) = 2
	nop(PUSH1)
	s(14) = 0
	nop(PUSH1)
	s(15) = s(9)
	nop(DUP6)
	s(16) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(15) = and(s(16), s(15))
	nop(AND)
	s(16) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(15) = and(s(16), s(15))
	nop(AND)
	s(16) = s(14)
	nop(DUP2)
	l(l6) = s(15)
	nop(MSTORE)
	s(15) = 32
	nop(PUSH1)
	s(14) = s(15)+s(14)
	nop(ADD)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = s(13)
	nop(DUP2)
	l(l7) = s(14)
	nop(MSTORE)
	s(14) = 32
	nop(PUSH1)
	s(13) = s(14)+s(13)
	nop(ADD)
	s(14) = 0
	nop(PUSH1)
	s(13) = sha3(s(14), s(13))
	nop(SHA3)
	s(14) = 0
	nop(PUSH1)
	s(15) = s(12)
	nop(DUP3)
	s(16) = s(13)
	nop(DUP3)
	gl = s(16)
	s(16) = fresh(0)
	nop(SLOAD)
	s(15) = s(16)+s(15)
	nop(ADD)
	s(16) = s(12)
	s(12) = s(15)
	s(15) = s(16)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(14) = s(12)
	nop(DUP2)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	gs(1) = s(14)
	gs(2) = s(13)
	nop(SSTORE)
	nop(POP)
	s(12) = s(10)
	nop(DUP2)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(13)
	nop(DUP1)
	s(15) = s(12)
	nop(DUP3)
	s(16) = s(13)
	nop(DUP3)
	s(16) = g(totalSupply)
	nop(SLOAD)
	s(15) = s(16)+s(15)
	nop(ADD)
	s(16) = s(12)
	s(12) = s(15)
	s(15) = s(16)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(14) = s(12)
	nop(DUP2)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	g(totalSupply) = s(13)
	nop(SSTORE)
	nop(POP)
	s(12) = s(10)
	nop(DUP2)
	s(13) = 29
	nop(PUSH1)
	s(14) = 0
	nop(PUSH1)
	s(15) = s(12)
	nop(DUP3)
	s(16) = s(13)
	nop(DUP3)
	s(16) = g(saleStartTimestamp)
	nop(SLOAD)
	s(15) = s(16)+s(15)
	nop(ADD)
	s(16) = s(12)
	s(12) = s(15)
	s(15) = s(16)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(14) = s(12)
	nop(DUP2)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	g(saleStartTimestamp) = s(13)
	nop(SSTORE)
	nop(POP)
	s(12) = 20752
	nop(PUSH2)
	s(13) = s(11)
	nop(DUP2)
	s(14) = 30
	nop(PUSH1)
	s(14) = g(owner)
	nop(SLOAD)
	s(15) = 22395
	nop(PUSH2)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	s(16) = s(13)
	s(13) = s(15)
	s(15) = s(16)
	nop(SWAP2)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	s(16) = 4294967295
	nop(PUSH4)
	s(15) = and(s(16), s(15))
	nop(AND)
	call(block22395_5(s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20752_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(13) = 30
	nop(PUSH1)
	s(14) = s(12)
	nop(DUP2)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	g(owner) = s(13)
	nop(SSTORE)
	nop(POP)
	s(12) = s(10)
	nop(DUP2)
	s(13) = 26
	nop(PUSH1)
	s(14) = 0
	nop(PUSH1)
	s(15) = s(9)
	nop(DUP6)
	s(16) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(15) = and(s(16), s(15))
	nop(AND)
	s(16) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(15) = and(s(16), s(15))
	nop(AND)
	s(16) = s(14)
	nop(DUP2)
	l(l6) = s(15)
	nop(MSTORE)
	s(15) = 32
	nop(PUSH1)
	s(14) = s(15)+s(14)
	nop(ADD)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = s(13)
	nop(DUP2)
	l(l7) = s(14)
	nop(MSTORE)
	s(14) = 32
	nop(PUSH1)
	s(13) = s(14)+s(13)
	nop(ADD)
	s(14) = 0
	nop(PUSH1)
	s(13) = sha3(s(14), s(13))
	nop(SHA3)
	s(14) = 0
	nop(PUSH1)
	s(13) = s(14)+s(13)
	nop(ADD)
	s(14) = 0
	nop(PUSH1)
	s(15) = s(12)
	nop(DUP3)
	s(16) = s(13)
	nop(DUP3)
	gl = s(16)
	s(16) = fresh(0)
	nop(SLOAD)
	s(15) = s(16)+s(15)
	nop(ADD)
	s(16) = s(12)
	s(12) = s(15)
	s(15) = s(16)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(14) = s(12)
	nop(DUP2)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	gs(1) = s(14)
	gs(2) = s(13)
	nop(SSTORE)
	nop(POP)
	s(12) = 20923
	nop(PUSH2)
	s(13) = s(11)
	nop(DUP2)
	s(14) = 26
	nop(PUSH1)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(9)
	nop(DUP7)
	s(17) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(16) = and(s(17), s(16))
	nop(AND)
	s(17) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(16) = and(s(17), s(16))
	nop(AND)
	s(17) = s(15)
	nop(DUP2)
	l(l6) = s(16)
	nop(MSTORE)
	s(16) = 32
	nop(PUSH1)
	s(15) = s(16)+s(15)
	nop(ADD)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	s(16) = s(14)
	nop(DUP2)
	l(l7) = s(15)
	nop(MSTORE)
	s(15) = 32
	nop(PUSH1)
	s(14) = s(15)+s(14)
	nop(ADD)
	s(15) = 0
	nop(PUSH1)
	s(14) = sha3(s(15), s(14))
	nop(SHA3)
	s(15) = 1
	nop(PUSH1)
	s(14) = s(15)+s(14)
	nop(ADD)
	gl = s(14)
	s(14) = fresh(1)
	nop(SLOAD)
	s(15) = 22395
	nop(PUSH2)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	s(16) = s(13)
	s(13) = s(15)
	s(15) = s(16)
	nop(SWAP2)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	s(16) = 4294967295
	nop(PUSH4)
	s(15) = and(s(16), s(15))
	nop(AND)
	call(block22395_6(s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block20923_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(13) = 26
	nop(PUSH1)
	s(14) = 0
	nop(PUSH1)
	s(15) = s(9)
	nop(DUP6)
	s(16) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(15) = and(s(16), s(15))
	nop(AND)
	s(16) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(15) = and(s(16), s(15))
	nop(AND)
	s(16) = s(14)
	nop(DUP2)
	l(l6) = s(15)
	nop(MSTORE)
	s(15) = 32
	nop(PUSH1)
	s(14) = s(15)+s(14)
	nop(ADD)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = s(13)
	nop(DUP2)
	l(l7) = s(14)
	nop(MSTORE)
	s(14) = 32
	nop(PUSH1)
	s(13) = s(14)+s(13)
	nop(ADD)
	s(14) = 0
	nop(PUSH1)
	s(13) = sha3(s(14), s(13))
	nop(SHA3)
	s(14) = 1
	nop(PUSH1)
	s(13) = s(14)+s(13)
	nop(ADD)
	s(14) = s(12)
	nop(DUP2)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	gs(1) = s(14)
	gs(2) = s(13)
	nop(SSTORE)
	nop(POP)
	s(12) = s(9)
	nop(DUP3)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 25
	nop(PUSH1)
	s(14) = 1
	nop(PUSH1)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(14) = g(supplier)
	nop(SLOAD)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(15) = 256
	nop(PUSH2)
	s(14) = s(15)^s(14)
	nop(EXP)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	s(13) = s(14)/s(13)
	nop(DIV)
	s(14) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(13) = and(s(14), s(13))
	nop(AND)
	s(14) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(13) = and(s(14), s(13))
	nop(AND)
	s(14) = 100389287136786176327247604509743168900146139575972864366142685224231313322991
	nop(PUSH32)
	s(15) = s(10)
	nop(DUP5)
	s(16) = 64
	nop(PUSH1)
	s(16) = l(l0)
	nop(MLOAD)
	s(17) = s(16)
	nop(DUP1)
	s(18) = s(15)
	nop(DUP3)
	s(19) = s(17)
	nop(DUP2)
	l(l1) = s(18)
	nop(MSTORE)
	s(18) = 32
	nop(PUSH1)
	s(17) = s(18)+s(17)
	nop(ADD)
	s(18) = s(15)
	s(15) = s(17)
	s(17) = s(18)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(16) = 64
	nop(PUSH1)
	s(16) = l(l0)
	nop(MLOAD)
	s(17) = s(16)
	nop(DUP1)
	s(18) = s(15)
	s(15) = s(17)
	s(17) = s(18)
	nop(SWAP2)
	s(16) = s(17)-s(16)
	nop(SUB)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	nop(LOG3)
	nop(POP)
	nop(POP)
	nop(POP)
	call(block6125_0(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block21133_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(7)
	nop(DUP1)
	s(9) = 100
	nop(PUSH1)
	s(10) = 21180
	nop(PUSH2)
	s(11) = 33
	nop(PUSH1)
	s(12) = 0
	nop(PUSH1)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(12) = g(totalWithdrawn)
	nop(SLOAD)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(13) = 256
	nop(PUSH2)
	s(12) = s(13)^s(12)
	nop(EXP)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(11) = s(12)/s(11)
	nop(DIV)
	s(12) = 255
	nop(PUSH1)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 255
	nop(PUSH1)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 100
	nop(PUSH1)
	s(13) = 40
	nop(PUSH1)
	s(13) = g(fundaria)
	nop(SLOAD)
	s(12) = s(13)*s(12)
	nop(MUL)
	s(13) = 20581
	nop(PUSH2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = 4294967295
	nop(PUSH4)
	s(13) = and(s(14), s(13))
	nop(AND)
	call(block20581_7(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0)))
	nop(JUMP)

block21133_1(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(12) = 0
	nop(PUSH1)
	s(13) = s(12)
	nop(DUP1)
	s(14) = 100
	nop(PUSH1)
	s(15) = 21180
	nop(PUSH2)
	s(16) = 33
	nop(PUSH1)
	s(17) = 0
	nop(PUSH1)
	s(18) = s(16)
	s(16) = s(17)
	s(17) = s(18)
	nop(SWAP1)
	s(17) = g(totalWithdrawn)
	nop(SLOAD)
	s(18) = s(16)
	s(16) = s(17)
	s(17) = s(18)
	nop(SWAP1)
	s(18) = 256
	nop(PUSH2)
	s(17) = s(18)^s(17)
	nop(EXP)
	s(18) = s(16)
	s(16) = s(17)
	s(17) = s(18)
	nop(SWAP1)
	s(16) = s(17)/s(16)
	nop(DIV)
	s(17) = 255
	nop(PUSH1)
	s(16) = and(s(17), s(16))
	nop(AND)
	s(17) = 255
	nop(PUSH1)
	s(16) = and(s(17), s(16))
	nop(AND)
	s(17) = 100
	nop(PUSH1)
	s(18) = 40
	nop(PUSH1)
	s(18) = g(fundaria)
	nop(SLOAD)
	s(17) = s(18)*s(17)
	nop(MUL)
	s(18) = 20581
	nop(PUSH2)
	s(19) = s(17)
	s(17) = s(18)
	s(18) = s(19)
	nop(SWAP1)
	s(19) = s(16)
	s(16) = s(18)
	s(18) = s(19)
	nop(SWAP2)
	s(19) = s(17)
	s(17) = s(18)
	s(18) = s(19)
	nop(SWAP1)
	s(19) = 4294967295
	nop(PUSH4)
	s(18) = and(s(19), s(18))
	nop(AND)
	call(block20581_16(s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

jump21180_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	neq(s(11), 0)
	call(block21191_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0)))

jump21180_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	eq(s(11), 0)
	call(block21190_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block21180_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(11) = s(5)
	nop(DUP6)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(11) = s(9)
	nop(DUP2)
	call(jump21180_0(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0)))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump21180_1(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(16), 0)
	call(block21191_1(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump21180_1(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(16), 0)
	call(block21190_1(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block21180_1(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(16) = s(10)
	nop(DUP6)
	s(15) = s(16)*s(15)
	nop(MUL)
	s(16) = s(14)
	nop(DUP2)
	call(jump21180_1(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block21190_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block21190_1(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block21191_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(9) = s(10)/s(9)
	nop(DIV)
	s(10) = s(7)
	s(7) = s(9)
	s(9) = s(10)
	nop(SWAP2)
	nop(POP)
	s(9) = 38
	nop(PUSH1)
	s(9) = g(priceIsFrozen)
	nop(SLOAD)
	s(10) = s(7)
	nop(DUP3)
	s(11) = 39
	nop(PUSH1)
	s(11) = g(guidesStat)
	nop(SLOAD)
	s(10) = s(11)+s(10)
	nop(ADD)
	call(jump21191_0(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump21191_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	leq(s(10), s(9))
	call(block21215_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0)))

jump21191_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	gt(s(10), s(9))
	call(block21211_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block21191_1(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(14) = s(15)/s(14)
	nop(DIV)
	s(15) = s(12)
	s(12) = s(14)
	s(14) = s(15)
	nop(SWAP2)
	nop(POP)
	s(14) = 38
	nop(PUSH1)
	s(14) = g(priceIsFrozen)
	nop(SLOAD)
	s(15) = s(12)
	nop(DUP3)
	s(16) = 39
	nop(PUSH1)
	s(16) = g(guidesStat)
	nop(SLOAD)
	s(15) = s(16)+s(15)
	nop(ADD)
	call(jump21191_1(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump21191_1(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	leq(s(15), s(14))
	call(block21215_1(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump21191_1(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	gt(s(15), s(14))
	call(block21211_1(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block21211_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(9) = 0
	nop(PUSH1)
	s(10) = s(9)
	nop(DUP1)
	nop(REVERT)

block21211_1(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	s(14) = 0
	nop(PUSH1)
	s(15) = s(14)
	nop(DUP1)
	nop(REVERT)

block21215_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(9) = 100
	nop(PUSH1)
	s(10) = 41
	nop(PUSH1)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(11) = g(distributedBonusStakes)
	nop(SLOAD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = 256
	nop(PUSH2)
	s(11) = s(12)^s(11)
	nop(EXP)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(10) = s(11)/s(10)
	nop(DIV)
	s(11) = 255
	nop(PUSH1)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 255
	nop(PUSH1)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(6)
	nop(DUP5)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(11) = s(9)
	nop(DUP2)
	call(jump21215_0(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0)))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump21215_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	neq(s(11), 0)
	call(block21247_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(guidesStat), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0)))

jump21215_0(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	eq(s(11), 0)
	call(block21246_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block21215_1(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(14) = 100
	nop(PUSH1)
	s(15) = 41
	nop(PUSH1)
	s(16) = 0
	nop(PUSH1)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	s(16) = g(distributedBonusStakes)
	nop(SLOAD)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	s(17) = 256
	nop(PUSH2)
	s(16) = s(17)^s(16)
	nop(EXP)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	s(15) = s(16)/s(15)
	nop(DIV)
	s(16) = 255
	nop(PUSH1)
	s(15) = and(s(16), s(15))
	nop(AND)
	s(16) = 255
	nop(PUSH1)
	s(15) = and(s(16), s(15))
	nop(AND)
	s(16) = s(11)
	nop(DUP5)
	s(15) = s(16)*s(15)
	nop(MUL)
	s(16) = s(14)
	nop(DUP2)
	call(jump21215_1(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump21215_1(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(16), 0)
	call(block21247_1(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump21215_1(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(16), 0)
	call(block21246_1(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block21246_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block21246_1(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block21247_0(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guidesStat), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(9) = s(10)/s(9)
	nop(DIV)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	nop(POP)
	s(9) = 19
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(4)
	nop(DUP7)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l6) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	l(l7) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	gl = s(10)
	s(10) = fresh(0)
	nop(SLOAD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 256
	nop(PUSH2)
	s(10) = s(11)^s(10)
	nop(EXP)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(9) = s(10)/s(9)
	nop(DIV)
	s(10) = 255
	nop(PUSH1)
	s(9) = and(s(10), s(9))
	nop(AND)
	call(jump21247_0(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(guidesStat), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0)))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump21247_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guidesStat), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	neq(s(9), 0)
	call(block21516_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(guidesStat), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0)))

jump21247_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guidesStat), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	eq(s(9), 0)
	call(block21334_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(guidesStat), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0)))

block21247_1(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(14) = s(15)/s(14)
	nop(DIV)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	nop(POP)
	s(14) = 19
	nop(PUSH1)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(9)
	nop(DUP7)
	s(17) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(16) = and(s(17), s(16))
	nop(AND)
	s(17) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(16) = and(s(17), s(16))
	nop(AND)
	s(17) = s(15)
	nop(DUP2)
	l(l6) = s(16)
	nop(MSTORE)
	s(16) = 32
	nop(PUSH1)
	s(15) = s(16)+s(15)
	nop(ADD)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	s(16) = s(14)
	nop(DUP2)
	l(l7) = s(15)
	nop(MSTORE)
	s(15) = 32
	nop(PUSH1)
	s(14) = s(15)+s(14)
	nop(ADD)
	s(15) = 0
	nop(PUSH1)
	s(14) = sha3(s(15), s(14))
	nop(SHA3)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	gl = s(15)
	s(15) = fresh(0)
	nop(SLOAD)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	s(16) = 256
	nop(PUSH2)
	s(15) = s(16)^s(15)
	nop(EXP)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	s(14) = s(15)/s(14)
	nop(DIV)
	s(15) = 255
	nop(PUSH1)
	s(14) = and(s(15), s(14))
	nop(AND)
	call(jump21247_1(s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump21247_1(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(14), 0)
	call(block21516_1(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump21247_1(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(14), 0)
	call(block21334_1(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block21334_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guidesStat), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	s(9) = s(8)
	nop(DUP1)
	s(10) = 37
	nop(PUSH1)
	s(11) = 0
	nop(PUSH1)
	s(12) = 26
	nop(PUSH1)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(4)
	nop(DUP10)
	s(15) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(14) = and(s(15), s(14))
	nop(AND)
	s(15) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(14) = and(s(15), s(14))
	nop(AND)
	s(15) = s(13)
	nop(DUP2)
	l(l6) = s(14)
	nop(MSTORE)
	s(14) = 32
	nop(PUSH1)
	s(13) = s(14)+s(13)
	nop(ADD)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = s(12)
	nop(DUP2)
	l(l7) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = 0
	nop(PUSH1)
	s(12) = sha3(s(13), s(12))
	nop(SHA3)
	s(13) = 4
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	gl = s(13)
	s(13) = fresh(0)
	nop(SLOAD)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = 256
	nop(PUSH2)
	s(13) = s(14)^s(13)
	nop(EXP)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(12) = s(13)/s(12)
	nop(DIV)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = s(11)
	nop(DUP2)
	l(l6) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(10)
	nop(DUP2)
	l(l7) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = 0
	nop(PUSH1)
	s(10) = sha3(s(11), s(10))
	nop(SHA3)
	s(11) = 1
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = s(10)
	nop(DUP3)
	gl = s(13)
	s(13) = fresh(1)
	nop(SLOAD)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(9)
	s(9) = s(12)
	s(12) = s(13)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(11) = s(9)
	nop(DUP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	gs(1) = s(11)
	gs(2) = s(10)
	nop(SSTORE)
	nop(POP)
	s(9) = 21695
	nop(PUSH2)
	call(block21695_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(guidesStat), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0)))
	nop(JUMP)

block21334_1(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	s(14) = s(13)
	nop(DUP1)
	s(15) = 37
	nop(PUSH1)
	s(16) = 0
	nop(PUSH1)
	s(17) = 26
	nop(PUSH1)
	s(18) = 0
	nop(PUSH1)
	s(19) = s(9)
	nop(DUP10)
	s(20) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(19) = and(s(20), s(19))
	nop(AND)
	s(20) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(19) = and(s(20), s(19))
	nop(AND)
	s(20) = s(18)
	nop(DUP2)
	l(l6) = s(19)
	nop(MSTORE)
	s(19) = 32
	nop(PUSH1)
	s(18) = s(19)+s(18)
	nop(ADD)
	s(19) = s(17)
	s(17) = s(18)
	s(18) = s(19)
	nop(SWAP1)
	s(19) = s(17)
	nop(DUP2)
	l(l7) = s(18)
	nop(MSTORE)
	s(18) = 32
	nop(PUSH1)
	s(17) = s(18)+s(17)
	nop(ADD)
	s(18) = 0
	nop(PUSH1)
	s(17) = sha3(s(18), s(17))
	nop(SHA3)
	s(18) = 4
	nop(PUSH1)
	s(17) = s(18)+s(17)
	nop(ADD)
	s(18) = 0
	nop(PUSH1)
	s(19) = s(17)
	s(17) = s(18)
	s(18) = s(19)
	nop(SWAP1)
	gl = s(18)
	s(18) = fresh(0)
	nop(SLOAD)
	s(19) = s(17)
	s(17) = s(18)
	s(18) = s(19)
	nop(SWAP1)
	s(19) = 256
	nop(PUSH2)
	s(18) = s(19)^s(18)
	nop(EXP)
	s(19) = s(17)
	s(17) = s(18)
	s(18) = s(19)
	nop(SWAP1)
	s(17) = s(18)/s(17)
	nop(DIV)
	s(18) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(17) = and(s(18), s(17))
	nop(AND)
	s(18) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(17) = and(s(18), s(17))
	nop(AND)
	s(18) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(17) = and(s(18), s(17))
	nop(AND)
	s(18) = s(16)
	nop(DUP2)
	l(l6) = s(17)
	nop(MSTORE)
	s(17) = 32
	nop(PUSH1)
	s(16) = s(17)+s(16)
	nop(ADD)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	s(17) = s(15)
	nop(DUP2)
	l(l7) = s(16)
	nop(MSTORE)
	s(16) = 32
	nop(PUSH1)
	s(15) = s(16)+s(15)
	nop(ADD)
	s(16) = 0
	nop(PUSH1)
	s(15) = sha3(s(16), s(15))
	nop(SHA3)
	s(16) = 1
	nop(PUSH1)
	s(15) = s(16)+s(15)
	nop(ADD)
	s(16) = 0
	nop(PUSH1)
	s(17) = s(14)
	nop(DUP3)
	s(18) = s(15)
	nop(DUP3)
	gl = s(18)
	s(18) = fresh(1)
	nop(SLOAD)
	s(17) = s(18)+s(17)
	nop(ADD)
	s(18) = s(14)
	s(14) = s(17)
	s(17) = s(18)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(16) = s(14)
	nop(DUP2)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	gs(1) = s(16)
	gs(2) = s(15)
	nop(SSTORE)
	nop(POP)
	s(14) = 21695
	nop(PUSH2)
	call(block21695_1(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block21516_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guidesStat), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(9) = s(8)
	nop(DUP1)
	s(10) = 37
	nop(PUSH1)
	s(11) = 0
	nop(PUSH1)
	s(12) = 26
	nop(PUSH1)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(4)
	nop(DUP10)
	s(15) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(14) = and(s(15), s(14))
	nop(AND)
	s(15) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(14) = and(s(15), s(14))
	nop(AND)
	s(15) = s(13)
	nop(DUP2)
	l(l6) = s(14)
	nop(MSTORE)
	s(14) = 32
	nop(PUSH1)
	s(13) = s(14)+s(13)
	nop(ADD)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = s(12)
	nop(DUP2)
	l(l7) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = 0
	nop(PUSH1)
	s(12) = sha3(s(13), s(12))
	nop(SHA3)
	s(13) = 4
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	gl = s(13)
	s(13) = fresh(0)
	nop(SLOAD)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = 256
	nop(PUSH2)
	s(13) = s(14)^s(13)
	nop(EXP)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(12) = s(13)/s(12)
	nop(DIV)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = s(11)
	nop(DUP2)
	l(l6) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(10)
	nop(DUP2)
	l(l7) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = 0
	nop(PUSH1)
	s(10) = sha3(s(11), s(10))
	nop(SHA3)
	s(11) = 2
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = s(10)
	nop(DUP3)
	gl = s(13)
	s(13) = fresh(1)
	nop(SLOAD)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(9)
	s(9) = s(12)
	s(12) = s(13)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(11) = s(9)
	nop(DUP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	gs(1) = s(11)
	gs(2) = s(10)
	nop(SSTORE)
	nop(POP)
	call(block21695_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(guidesStat), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0)))

block21516_1(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(14) = s(13)
	nop(DUP1)
	s(15) = 37
	nop(PUSH1)
	s(16) = 0
	nop(PUSH1)
	s(17) = 26
	nop(PUSH1)
	s(18) = 0
	nop(PUSH1)
	s(19) = s(9)
	nop(DUP10)
	s(20) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(19) = and(s(20), s(19))
	nop(AND)
	s(20) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(19) = and(s(20), s(19))
	nop(AND)
	s(20) = s(18)
	nop(DUP2)
	l(l6) = s(19)
	nop(MSTORE)
	s(19) = 32
	nop(PUSH1)
	s(18) = s(19)+s(18)
	nop(ADD)
	s(19) = s(17)
	s(17) = s(18)
	s(18) = s(19)
	nop(SWAP1)
	s(19) = s(17)
	nop(DUP2)
	l(l7) = s(18)
	nop(MSTORE)
	s(18) = 32
	nop(PUSH1)
	s(17) = s(18)+s(17)
	nop(ADD)
	s(18) = 0
	nop(PUSH1)
	s(17) = sha3(s(18), s(17))
	nop(SHA3)
	s(18) = 4
	nop(PUSH1)
	s(17) = s(18)+s(17)
	nop(ADD)
	s(18) = 0
	nop(PUSH1)
	s(19) = s(17)
	s(17) = s(18)
	s(18) = s(19)
	nop(SWAP1)
	gl = s(18)
	s(18) = fresh(0)
	nop(SLOAD)
	s(19) = s(17)
	s(17) = s(18)
	s(18) = s(19)
	nop(SWAP1)
	s(19) = 256
	nop(PUSH2)
	s(18) = s(19)^s(18)
	nop(EXP)
	s(19) = s(17)
	s(17) = s(18)
	s(18) = s(19)
	nop(SWAP1)
	s(17) = s(18)/s(17)
	nop(DIV)
	s(18) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(17) = and(s(18), s(17))
	nop(AND)
	s(18) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(17) = and(s(18), s(17))
	nop(AND)
	s(18) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(17) = and(s(18), s(17))
	nop(AND)
	s(18) = s(16)
	nop(DUP2)
	l(l6) = s(17)
	nop(MSTORE)
	s(17) = 32
	nop(PUSH1)
	s(16) = s(17)+s(16)
	nop(ADD)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	s(17) = s(15)
	nop(DUP2)
	l(l7) = s(16)
	nop(MSTORE)
	s(16) = 32
	nop(PUSH1)
	s(15) = s(16)+s(15)
	nop(ADD)
	s(16) = 0
	nop(PUSH1)
	s(15) = sha3(s(16), s(15))
	nop(SHA3)
	s(16) = 2
	nop(PUSH1)
	s(15) = s(16)+s(15)
	nop(ADD)
	s(16) = 0
	nop(PUSH1)
	s(17) = s(14)
	nop(DUP3)
	s(18) = s(15)
	nop(DUP3)
	gl = s(18)
	s(18) = fresh(1)
	nop(SLOAD)
	s(17) = s(18)+s(17)
	nop(ADD)
	s(18) = s(14)
	s(14) = s(17)
	s(17) = s(18)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(16) = s(14)
	nop(DUP2)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	gs(1) = s(16)
	gs(2) = s(15)
	nop(SSTORE)
	nop(POP)
	call(block21695_1(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block21695_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guidesStat), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(9) = s(8)
	nop(DUP1)
	s(10) = 26
	nop(PUSH1)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(4)
	nop(DUP8)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = s(11)
	nop(DUP2)
	l(l6) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(10)
	nop(DUP2)
	l(l7) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = 0
	nop(PUSH1)
	s(10) = sha3(s(11), s(10))
	nop(SHA3)
	s(11) = 3
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = s(10)
	nop(DUP3)
	gl = s(13)
	s(13) = fresh(0)
	nop(SLOAD)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(9)
	s(9) = s(12)
	s(12) = s(13)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(11) = s(9)
	nop(DUP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	gs(1) = s(11)
	gs(2) = s(10)
	nop(SSTORE)
	nop(POP)
	s(9) = s(7)
	nop(DUP2)
	s(10) = 26
	nop(PUSH1)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(4)
	nop(DUP8)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = s(11)
	nop(DUP2)
	l(l6) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(10)
	nop(DUP2)
	l(l7) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = 0
	nop(PUSH1)
	s(10) = sha3(s(11), s(10))
	nop(SHA3)
	s(11) = 2
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = s(10)
	nop(DUP3)
	gl = s(13)
	s(13) = fresh(1)
	nop(SLOAD)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(9)
	s(9) = s(12)
	s(12) = s(13)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(11) = s(9)
	nop(DUP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	gs(1) = s(11)
	gs(2) = s(10)
	nop(SSTORE)
	nop(POP)
	s(9) = s(7)
	nop(DUP2)
	s(10) = 2
	nop(PUSH1)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(4)
	nop(DUP8)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = s(11)
	nop(DUP2)
	l(l6) = s(12)
	nop(MSTORE)
	s(12) = 32
	nop(PUSH1)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(10)
	nop(DUP2)
	l(l7) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = 0
	nop(PUSH1)
	s(10) = sha3(s(11), s(10))
	nop(SHA3)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = s(10)
	nop(DUP3)
	gl = s(13)
	s(13) = fresh(2)
	nop(SLOAD)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(9)
	s(9) = s(12)
	s(12) = s(13)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(11) = s(9)
	nop(DUP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	gs(1) = s(11)
	gs(2) = s(10)
	nop(SSTORE)
	nop(POP)
	s(9) = s(7)
	nop(DUP2)
	s(10) = 39
	nop(PUSH1)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = s(10)
	nop(DUP3)
	s(13) = g(guidesStat)
	nop(SLOAD)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(9)
	s(9) = s(12)
	s(12) = s(13)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(11) = s(9)
	nop(DUP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	g(guidesStat) = s(10)
	nop(SSTORE)
	nop(POP)
	s(9) = s(7)
	nop(DUP2)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = s(10)
	nop(DUP3)
	s(13) = g(totalSupply)
	nop(SLOAD)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = s(9)
	s(9) = s(12)
	s(12) = s(13)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(11) = s(9)
	nop(DUP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	g(totalSupply) = s(10)
	nop(SSTORE)
	nop(POP)
	s(9) = 106190483984544320851992182089162347111658405430666556957074112094424747200476
	nop(PUSH32)
	s(10) = s(4)
	nop(DUP6)
	s(11) = s(7)
	nop(DUP4)
	s(12) = 26
	nop(PUSH1)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(4)
	nop(DUP10)
	s(15) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(14) = and(s(15), s(14))
	nop(AND)
	s(15) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(14) = and(s(15), s(14))
	nop(AND)
	s(15) = s(13)
	nop(DUP2)
	l(l6) = s(14)
	nop(MSTORE)
	s(14) = 32
	nop(PUSH1)
	s(13) = s(14)+s(13)
	nop(ADD)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = s(12)
	nop(DUP2)
	l(l7) = s(13)
	nop(MSTORE)
	s(13) = 32
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = 0
	nop(PUSH1)
	s(12) = sha3(s(13), s(12))
	nop(SHA3)
	s(13) = 4
	nop(PUSH1)
	s(12) = s(13)+s(12)
	nop(ADD)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	gl = s(13)
	s(13) = fresh(3)
	nop(SLOAD)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(14) = 256
	nop(PUSH2)
	s(13) = s(14)^s(13)
	nop(EXP)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	s(12) = s(13)/s(12)
	nop(DIV)
	s(13) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(12) = and(s(13), s(12))
	nop(AND)
	s(13) = s(8)
	nop(DUP5)
	s(14) = 64
	nop(PUSH1)
	s(14) = l(l0)
	nop(MLOAD)
	s(15) = s(14)
	nop(DUP1)
	s(16) = s(10)
	nop(DUP6)
	s(17) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(16) = and(s(17), s(16))
	nop(AND)
	s(17) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(16) = and(s(17), s(16))
	nop(AND)
	s(17) = s(15)
	nop(DUP2)
	l(l1) = s(16)
	nop(MSTORE)
	s(16) = 32
	nop(PUSH1)
	s(15) = s(16)+s(15)
	nop(ADD)
	s(16) = s(11)
	nop(DUP5)
	s(17) = s(15)
	nop(DUP2)
	l(l4) = s(16)
	nop(MSTORE)
	s(16) = 32
	nop(PUSH1)
	s(15) = s(16)+s(15)
	nop(ADD)
	s(16) = s(12)
	nop(DUP4)
	s(17) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(16) = and(s(17), s(16))
	nop(AND)
	s(17) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(16) = and(s(17), s(16))
	nop(AND)
	s(17) = s(15)
	nop(DUP2)
	l(l2) = s(16)
	nop(MSTORE)
	s(16) = 32
	nop(PUSH1)
	s(15) = s(16)+s(15)
	nop(ADD)
	s(16) = s(13)
	nop(DUP3)
	s(17) = s(15)
	nop(DUP2)
	l(l3) = s(16)
	nop(MSTORE)
	s(16) = 32
	nop(PUSH1)
	s(15) = s(16)+s(15)
	nop(ADD)
	s(16) = s(10)
	s(10) = s(15)
	s(15) = s(16)
	nop(SWAP5)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = s(11)
	nop(DUP1)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	s(11) = s(12)-s(11)
	nop(SUB)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	nop(LOG1)
	s(9) = s(4)
	nop(DUP5)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 25
	nop(PUSH1)
	s(11) = 1
	nop(PUSH1)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(11) = g(supplier)
	nop(SLOAD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = 256
	nop(PUSH2)
	s(11) = s(12)^s(11)
	nop(EXP)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(10) = s(11)/s(10)
	nop(DIV)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 100389287136786176327247604509743168900146139575972864366142685224231313322991
	nop(PUSH32)
	s(12) = s(7)
	nop(DUP5)
	s(13) = 64
	nop(PUSH1)
	s(13) = l(l0)
	nop(MLOAD)
	s(14) = s(13)
	nop(DUP1)
	s(15) = s(12)
	nop(DUP3)
	s(16) = s(14)
	nop(DUP2)
	l(l1) = s(15)
	nop(MSTORE)
	s(15) = 32
	nop(PUSH1)
	s(14) = s(15)+s(14)
	nop(ADD)
	s(15) = s(12)
	s(12) = s(14)
	s(14) = s(15)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(13) = 64
	nop(PUSH1)
	s(13) = l(l0)
	nop(MLOAD)
	s(14) = s(13)
	nop(DUP1)
	s(15) = s(12)
	s(12) = s(14)
	s(14) = s(15)
	nop(SWAP2)
	s(13) = s(14)-s(13)
	nop(SUB)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	nop(LOG3)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	call(block11413(s(2),s(1),s(0)))
	nop(JUMP)

block21695_1(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(guidesStat), g(totalInvested), g(supplier), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(14) = s(13)
	nop(DUP1)
	s(15) = 26
	nop(PUSH1)
	s(16) = 0
	nop(PUSH1)
	s(17) = s(9)
	nop(DUP8)
	s(18) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(17) = and(s(18), s(17))
	nop(AND)
	s(18) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(17) = and(s(18), s(17))
	nop(AND)
	s(18) = s(16)
	nop(DUP2)
	l(l6) = s(17)
	nop(MSTORE)
	s(17) = 32
	nop(PUSH1)
	s(16) = s(17)+s(16)
	nop(ADD)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	s(17) = s(15)
	nop(DUP2)
	l(l7) = s(16)
	nop(MSTORE)
	s(16) = 32
	nop(PUSH1)
	s(15) = s(16)+s(15)
	nop(ADD)
	s(16) = 0
	nop(PUSH1)
	s(15) = sha3(s(16), s(15))
	nop(SHA3)
	s(16) = 3
	nop(PUSH1)
	s(15) = s(16)+s(15)
	nop(ADD)
	s(16) = 0
	nop(PUSH1)
	s(17) = s(14)
	nop(DUP3)
	s(18) = s(15)
	nop(DUP3)
	gl = s(18)
	s(18) = fresh(0)
	nop(SLOAD)
	s(17) = s(18)+s(17)
	nop(ADD)
	s(18) = s(14)
	s(14) = s(17)
	s(17) = s(18)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(16) = s(14)
	nop(DUP2)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	gs(1) = s(16)
	gs(2) = s(15)
	nop(SSTORE)
	nop(POP)
	s(14) = s(12)
	nop(DUP2)
	s(15) = 26
	nop(PUSH1)
	s(16) = 0
	nop(PUSH1)
	s(17) = s(9)
	nop(DUP8)
	s(18) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(17) = and(s(18), s(17))
	nop(AND)
	s(18) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(17) = and(s(18), s(17))
	nop(AND)
	s(18) = s(16)
	nop(DUP2)
	l(l6) = s(17)
	nop(MSTORE)
	s(17) = 32
	nop(PUSH1)
	s(16) = s(17)+s(16)
	nop(ADD)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	s(17) = s(15)
	nop(DUP2)
	l(l7) = s(16)
	nop(MSTORE)
	s(16) = 32
	nop(PUSH1)
	s(15) = s(16)+s(15)
	nop(ADD)
	s(16) = 0
	nop(PUSH1)
	s(15) = sha3(s(16), s(15))
	nop(SHA3)
	s(16) = 2
	nop(PUSH1)
	s(15) = s(16)+s(15)
	nop(ADD)
	s(16) = 0
	nop(PUSH1)
	s(17) = s(14)
	nop(DUP3)
	s(18) = s(15)
	nop(DUP3)
	gl = s(18)
	s(18) = fresh(1)
	nop(SLOAD)
	s(17) = s(18)+s(17)
	nop(ADD)
	s(18) = s(14)
	s(14) = s(17)
	s(17) = s(18)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(16) = s(14)
	nop(DUP2)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	gs(1) = s(16)
	gs(2) = s(15)
	nop(SSTORE)
	nop(POP)
	s(14) = s(12)
	nop(DUP2)
	s(15) = 2
	nop(PUSH1)
	s(16) = 0
	nop(PUSH1)
	s(17) = s(9)
	nop(DUP8)
	s(18) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(17) = and(s(18), s(17))
	nop(AND)
	s(18) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(17) = and(s(18), s(17))
	nop(AND)
	s(18) = s(16)
	nop(DUP2)
	l(l6) = s(17)
	nop(MSTORE)
	s(17) = 32
	nop(PUSH1)
	s(16) = s(17)+s(16)
	nop(ADD)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	s(17) = s(15)
	nop(DUP2)
	l(l7) = s(16)
	nop(MSTORE)
	s(16) = 32
	nop(PUSH1)
	s(15) = s(16)+s(15)
	nop(ADD)
	s(16) = 0
	nop(PUSH1)
	s(15) = sha3(s(16), s(15))
	nop(SHA3)
	s(16) = 0
	nop(PUSH1)
	s(17) = s(14)
	nop(DUP3)
	s(18) = s(15)
	nop(DUP3)
	gl = s(18)
	s(18) = fresh(2)
	nop(SLOAD)
	s(17) = s(18)+s(17)
	nop(ADD)
	s(18) = s(14)
	s(14) = s(17)
	s(17) = s(18)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(16) = s(14)
	nop(DUP2)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	gs(1) = s(16)
	gs(2) = s(15)
	nop(SSTORE)
	nop(POP)
	s(14) = s(12)
	nop(DUP2)
	s(15) = 39
	nop(PUSH1)
	s(16) = 0
	nop(PUSH1)
	s(17) = s(14)
	nop(DUP3)
	s(18) = s(15)
	nop(DUP3)
	s(18) = g(guidesStat)
	nop(SLOAD)
	s(17) = s(18)+s(17)
	nop(ADD)
	s(18) = s(14)
	s(14) = s(17)
	s(17) = s(18)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(16) = s(14)
	nop(DUP2)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	g(guidesStat) = s(15)
	nop(SSTORE)
	nop(POP)
	s(14) = s(12)
	nop(DUP2)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(15)
	nop(DUP1)
	s(17) = s(14)
	nop(DUP3)
	s(18) = s(15)
	nop(DUP3)
	s(18) = g(totalSupply)
	nop(SLOAD)
	s(17) = s(18)+s(17)
	nop(ADD)
	s(18) = s(14)
	s(14) = s(17)
	s(17) = s(18)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(16) = s(14)
	nop(DUP2)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	g(totalSupply) = s(15)
	nop(SSTORE)
	nop(POP)
	s(14) = 106190483984544320851992182089162347111658405430666556957074112094424747200476
	nop(PUSH32)
	s(15) = s(9)
	nop(DUP6)
	s(16) = s(12)
	nop(DUP4)
	s(17) = 26
	nop(PUSH1)
	s(18) = 0
	nop(PUSH1)
	s(19) = s(9)
	nop(DUP10)
	s(20) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(19) = and(s(20), s(19))
	nop(AND)
	s(20) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(19) = and(s(20), s(19))
	nop(AND)
	s(20) = s(18)
	nop(DUP2)
	l(l6) = s(19)
	nop(MSTORE)
	s(19) = 32
	nop(PUSH1)
	s(18) = s(19)+s(18)
	nop(ADD)
	s(19) = s(17)
	s(17) = s(18)
	s(18) = s(19)
	nop(SWAP1)
	s(19) = s(17)
	nop(DUP2)
	l(l7) = s(18)
	nop(MSTORE)
	s(18) = 32
	nop(PUSH1)
	s(17) = s(18)+s(17)
	nop(ADD)
	s(18) = 0
	nop(PUSH1)
	s(17) = sha3(s(18), s(17))
	nop(SHA3)
	s(18) = 4
	nop(PUSH1)
	s(17) = s(18)+s(17)
	nop(ADD)
	s(18) = 0
	nop(PUSH1)
	s(19) = s(17)
	s(17) = s(18)
	s(18) = s(19)
	nop(SWAP1)
	gl = s(18)
	s(18) = fresh(3)
	nop(SLOAD)
	s(19) = s(17)
	s(17) = s(18)
	s(18) = s(19)
	nop(SWAP1)
	s(19) = 256
	nop(PUSH2)
	s(18) = s(19)^s(18)
	nop(EXP)
	s(19) = s(17)
	s(17) = s(18)
	s(18) = s(19)
	nop(SWAP1)
	s(17) = s(18)/s(17)
	nop(DIV)
	s(18) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(17) = and(s(18), s(17))
	nop(AND)
	s(18) = s(13)
	nop(DUP5)
	s(19) = 64
	nop(PUSH1)
	s(19) = l(l0)
	nop(MLOAD)
	s(20) = s(19)
	nop(DUP1)
	s(21) = s(15)
	nop(DUP6)
	s(22) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(21) = and(s(22), s(21))
	nop(AND)
	s(22) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(21) = and(s(22), s(21))
	nop(AND)
	s(22) = s(20)
	nop(DUP2)
	l(l1) = s(21)
	nop(MSTORE)
	s(21) = 32
	nop(PUSH1)
	s(20) = s(21)+s(20)
	nop(ADD)
	s(21) = s(16)
	nop(DUP5)
	s(22) = s(20)
	nop(DUP2)
	l(l4) = s(21)
	nop(MSTORE)
	s(21) = 32
	nop(PUSH1)
	s(20) = s(21)+s(20)
	nop(ADD)
	s(21) = s(17)
	nop(DUP4)
	s(22) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(21) = and(s(22), s(21))
	nop(AND)
	s(22) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(21) = and(s(22), s(21))
	nop(AND)
	s(22) = s(20)
	nop(DUP2)
	l(l2) = s(21)
	nop(MSTORE)
	s(21) = 32
	nop(PUSH1)
	s(20) = s(21)+s(20)
	nop(ADD)
	s(21) = s(18)
	nop(DUP3)
	s(22) = s(20)
	nop(DUP2)
	l(l3) = s(21)
	nop(MSTORE)
	s(21) = 32
	nop(PUSH1)
	s(20) = s(21)+s(20)
	nop(ADD)
	s(21) = s(15)
	s(15) = s(20)
	s(20) = s(21)
	nop(SWAP5)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(16) = 64
	nop(PUSH1)
	s(16) = l(l0)
	nop(MLOAD)
	s(17) = s(16)
	nop(DUP1)
	s(18) = s(15)
	s(15) = s(17)
	s(17) = s(18)
	nop(SWAP2)
	s(16) = s(17)-s(16)
	nop(SUB)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	nop(LOG1)
	s(14) = s(9)
	nop(DUP5)
	s(15) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(14) = and(s(15), s(14))
	nop(AND)
	s(15) = 25
	nop(PUSH1)
	s(16) = 1
	nop(PUSH1)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	s(16) = g(supplier)
	nop(SLOAD)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	s(17) = 256
	nop(PUSH2)
	s(16) = s(17)^s(16)
	nop(EXP)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	s(15) = s(16)/s(15)
	nop(DIV)
	s(16) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(15) = and(s(16), s(15))
	nop(AND)
	s(16) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(15) = and(s(16), s(15))
	nop(AND)
	s(16) = 100389287136786176327247604509743168900146139575972864366142685224231313322991
	nop(PUSH32)
	s(17) = s(12)
	nop(DUP5)
	s(18) = 64
	nop(PUSH1)
	s(18) = l(l0)
	nop(MLOAD)
	s(19) = s(18)
	nop(DUP1)
	s(20) = s(17)
	nop(DUP3)
	s(21) = s(19)
	nop(DUP2)
	l(l1) = s(20)
	nop(MSTORE)
	s(20) = 32
	nop(PUSH1)
	s(19) = s(20)+s(19)
	nop(ADD)
	s(20) = s(17)
	s(17) = s(19)
	s(19) = s(20)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(18) = 64
	nop(PUSH1)
	s(18) = l(l0)
	nop(MLOAD)
	s(19) = s(18)
	nop(DUP1)
	s(20) = s(17)
	s(17) = s(19)
	s(19) = s(20)
	nop(SWAP2)
	s(18) = s(19)-s(18)
	nop(SUB)
	s(19) = s(17)
	s(17) = s(18)
	s(18) = s(19)
	nop(SWAP1)
	nop(LOG3)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	call(block6288_0(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(totalInvested), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

jump22370_0(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	leq(s(17), s(16))
	call(block22384_0(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22370_0(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	gt(s(17), s(16))
	call(block22383_1(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22370_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(13)
	nop(DUP3)
	s(17) = s(14)
	nop(DUP3)
	call(jump22370_0(s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22370_1(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	leq(s(15), s(14))
	call(block22384_1(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22370_1(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	gt(s(15), s(14))
	call(block22383_0(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22370_1(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(11)
	nop(DUP3)
	s(15) = s(12)
	nop(DUP3)
	call(jump22370_1(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block22370_10(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = s(10)
	nop(DUP3)
	call(jump22370_10(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22370_10(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	leq(s(13), s(12))
	call(block22384_10(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))

jump22370_10(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	gt(s(13), s(12))
	call(block22383_12(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22370_11(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = s(10)
	nop(DUP3)
	call(jump22370_11(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22370_11(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	leq(s(13), s(12))
	call(block22384_11(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))

jump22370_11(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	gt(s(13), s(12))
	call(block22383_11(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22370_12(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(13)
	nop(DUP3)
	s(17) = s(14)
	nop(DUP3)
	call(jump22370_12(s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22370_12(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	leq(s(17), s(16))
	call(block22384_12(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))

jump22370_12(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	gt(s(17), s(16))
	call(block22383_10(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22370_13(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(11)
	nop(DUP3)
	s(15) = s(12)
	nop(DUP3)
	call(jump22370_13(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22370_13(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	leq(s(15), s(14))
	call(block22384_13(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))

jump22370_13(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	gt(s(15), s(14))
	call(block22383_9(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22370_14(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = s(10)
	nop(DUP3)
	call(jump22370_14(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22370_14(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	leq(s(13), s(12))
	call(block22384_14(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))

jump22370_14(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	gt(s(13), s(12))
	call(block22383_8(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22370_15(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(13)
	nop(DUP3)
	s(17) = s(14)
	nop(DUP3)
	call(jump22370_15(s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22370_15(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	leq(s(17), s(16))
	call(block22384_15(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22370_15(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	gt(s(17), s(16))
	call(block22383_18(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22370_16(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(16) = 0
	nop(PUSH1)
	s(17) = s(14)
	nop(DUP3)
	s(18) = s(15)
	nop(DUP3)
	call(jump22370_16(s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22370_16(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	leq(s(18), s(17))
	call(block22384_16(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22370_16(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	gt(s(18), s(17))
	call(block22383_17(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22370_17(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(14) = 0
	nop(PUSH1)
	s(15) = s(12)
	nop(DUP3)
	s(16) = s(13)
	nop(DUP3)
	call(jump22370_17(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22370_17(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	leq(s(16), s(15))
	call(block22384_17(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22370_17(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	gt(s(16), s(15))
	call(block22383_16(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22370_18(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(12) = 0
	nop(PUSH1)
	s(13) = s(10)
	nop(DUP3)
	s(14) = s(11)
	nop(DUP3)
	call(jump22370_18(s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22370_18(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	leq(s(14), s(13))
	call(block22384_18(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22370_18(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	gt(s(14), s(13))
	call(block22383_15(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22370_2(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = s(10)
	nop(DUP3)
	call(jump22370_2(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22370_2(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	leq(s(13), s(12))
	call(block22384_2(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22370_2(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	gt(s(13), s(12))
	call(block22383(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

jump22370_3(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	leq(s(11), s(10))
	call(block22384_3(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller))

jump22370_3(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	gt(s(11), s(10))
	call(block22383_4(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22370_3(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(8)
	nop(DUP3)
	call(jump22370_3(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22370_4(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	leq(s(11), s(10))
	call(block22384_4(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller))

jump22370_4(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	gt(s(11), s(10))
	call(block22383_3(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22370_4(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(8)
	nop(DUP3)
	call(jump22370_4(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22370_5(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	leq(s(11), s(10))
	call(block22384_5(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller))

jump22370_5(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	gt(s(11), s(10))
	call(block22383_5(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22370_5(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(8)
	nop(DUP3)
	call(jump22370_5(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22370_6(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	leq(s(10), s(9))
	call(block22384_6(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller))

jump22370_6(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	gt(s(10), s(9))
	call(block22383_6(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22370_6(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(6)
	nop(DUP3)
	s(10) = s(7)
	nop(DUP3)
	call(jump22370_6(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22370_7(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	leq(s(8), s(7))
	call(block22384_7(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0)))

jump22370_7(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	gt(s(8), s(7))
	call(block22383_7(s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22370_7(s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(4)
	nop(DUP3)
	s(8) = s(5)
	nop(DUP3)
	call(jump22370_7(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l1), l(l0)))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22370_8(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(distributedTeamStakes), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	leq(s(13), s(12))
	call(block22384_8(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(distributedTeamStakes), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))

jump22370_8(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(distributedTeamStakes), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	gt(s(13), s(12))
	call(block22383_14(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22370_8(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(distributedTeamStakes), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = s(10)
	nop(DUP3)
	call(jump22370_8(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(distributedTeamStakes), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22370_9(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(distributedTeamStakes), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	leq(s(13), s(12))
	call(block22384_9(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(distributedTeamStakes), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))

jump22370_9(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(distributedTeamStakes), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	gt(s(13), s(12))
	call(block22383_13(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22370_9(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(distributedTeamStakes), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(9)
	nop(DUP3)
	s(13) = s(10)
	nop(DUP3)
	call(jump22370_9(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(distributedTeamStakes), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block22383_0(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22383_1(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22383_10(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22383_11(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22383_12(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22383_13(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22383_14(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22383_15(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22383_16(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22383_17(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22383_18(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22383_2(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22383_3(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22383_4(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22383_5(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22383_6(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22383_7(s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22383_8(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22383_9(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22384_0(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(16) = s(14)
	nop(DUP2)
	s(17) = s(13)
	nop(DUP4)
	s(16) = s(17)-s(16)
	nop(SUB)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	nop(POP)
	s(16) = s(12)
	s(12) = s(15)
	s(15) = s(16)
	nop(SWAP3)
	s(16) = s(13)
	s(13) = s(15)
	s(15) = s(16)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20545(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block22384_1(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(14) = s(12)
	nop(DUP2)
	s(15) = s(11)
	nop(DUP4)
	s(14) = s(15)-s(14)
	nop(SUB)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	nop(POP)
	s(14) = s(10)
	s(10) = s(13)
	s(13) = s(14)
	nop(SWAP3)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20559(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block22384_10(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(12) = s(10)
	nop(DUP2)
	s(13) = s(9)
	nop(DUP4)
	s(12) = s(13)-s(12)
	nop(SUB)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(POP)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block15257(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(JUMP)

block22384_11(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(12) = s(10)
	nop(DUP2)
	s(13) = s(9)
	nop(DUP4)
	s(12) = s(13)-s(12)
	nop(SUB)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(POP)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block15505(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(JUMP)

block22384_12(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(16) = s(14)
	nop(DUP2)
	s(17) = s(13)
	nop(DUP4)
	s(16) = s(17)-s(16)
	nop(SUB)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	nop(POP)
	s(16) = s(12)
	s(12) = s(15)
	s(15) = s(16)
	nop(SWAP3)
	s(16) = s(13)
	s(13) = s(15)
	s(15) = s(16)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block15540(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(JUMP)

block22384_13(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(14) = s(12)
	nop(DUP2)
	s(15) = s(11)
	nop(DUP4)
	s(14) = s(15)-s(14)
	nop(SUB)
	s(15) = s(13)
	s(13) = s(14)
	s(14) = s(15)
	nop(SWAP1)
	nop(POP)
	s(14) = s(10)
	s(10) = s(13)
	s(13) = s(14)
	nop(SWAP3)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block15554(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(JUMP)

block22384_14(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(12) = s(10)
	nop(DUP2)
	s(13) = s(9)
	nop(DUP4)
	s(12) = s(13)-s(12)
	nop(SUB)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(POP)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block15568(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(JUMP)

block22384_15(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(16) = s(14)
	nop(DUP2)
	s(17) = s(13)
	nop(DUP4)
	s(16) = s(17)-s(16)
	nop(SUB)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	nop(POP)
	s(16) = s(12)
	s(12) = s(15)
	s(15) = s(16)
	nop(SWAP3)
	s(16) = s(13)
	s(13) = s(15)
	s(15) = s(16)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block13507_1(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block22384_16(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(17) = s(15)
	nop(DUP2)
	s(18) = s(14)
	nop(DUP4)
	s(17) = s(18)-s(17)
	nop(SUB)
	s(18) = s(16)
	s(16) = s(17)
	s(17) = s(18)
	nop(SWAP1)
	nop(POP)
	s(17) = s(13)
	s(13) = s(16)
	s(16) = s(17)
	nop(SWAP3)
	s(17) = s(14)
	s(14) = s(16)
	s(16) = s(17)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20545_0(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block22384_17(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(15) = s(13)
	nop(DUP2)
	s(16) = s(12)
	nop(DUP4)
	s(15) = s(16)-s(15)
	nop(SUB)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	nop(POP)
	s(15) = s(11)
	s(11) = s(14)
	s(14) = s(15)
	nop(SWAP3)
	s(15) = s(12)
	s(12) = s(14)
	s(14) = s(15)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20559_0(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block22384_18(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(13) = s(11)
	nop(DUP2)
	s(14) = s(10)
	nop(DUP4)
	s(13) = s(14)-s(13)
	nop(SUB)
	s(14) = s(12)
	s(12) = s(13)
	s(13) = s(14)
	nop(SWAP1)
	nop(POP)
	s(13) = s(9)
	s(9) = s(12)
	s(12) = s(13)
	nop(SWAP3)
	s(13) = s(10)
	s(10) = s(12)
	s(12) = s(13)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20573_0(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block22384_2(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(12) = s(10)
	nop(DUP2)
	s(13) = s(9)
	nop(DUP4)
	s(12) = s(13)-s(12)
	nop(SUB)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(POP)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20573(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block22384_3(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(7)
	nop(DUP4)
	s(10) = s(11)-s(10)
	nop(SUB)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	nop(POP)
	s(10) = s(6)
	s(6) = s(9)
	s(9) = s(10)
	nop(SWAP3)
	s(10) = s(7)
	s(7) = s(9)
	s(9) = s(10)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block9183(s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMP)

block22384_4(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(7)
	nop(DUP4)
	s(10) = s(11)-s(10)
	nop(SUB)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	nop(POP)
	s(10) = s(6)
	s(6) = s(9)
	s(9) = s(10)
	nop(SWAP3)
	s(10) = s(7)
	s(7) = s(9)
	s(9) = s(10)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block9542(s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMP)

block22384_5(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(7)
	nop(DUP4)
	s(10) = s(11)-s(10)
	nop(SUB)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	nop(POP)
	s(10) = s(6)
	s(6) = s(9)
	s(9) = s(10)
	nop(SWAP3)
	s(10) = s(7)
	s(7) = s(9)
	s(9) = s(10)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block11715(s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMP)

block22384_6(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(9) = s(7)
	nop(DUP2)
	s(10) = s(6)
	nop(DUP4)
	s(9) = s(10)-s(9)
	nop(SUB)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	nop(POP)
	s(9) = s(5)
	s(5) = s(8)
	s(8) = s(9)
	nop(SWAP3)
	s(9) = s(6)
	s(6) = s(8)
	s(8) = s(9)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block13109(s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMP)

block22384_7(s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(7) = s(5)
	nop(DUP2)
	s(8) = s(4)
	nop(DUP4)
	s(7) = s(8)-s(7)
	nop(SUB)
	s(8) = s(6)
	s(6) = s(7)
	s(7) = s(8)
	nop(SWAP1)
	nop(POP)
	s(7) = s(3)
	s(3) = s(6)
	s(6) = s(7)
	nop(SWAP3)
	s(7) = s(4)
	s(4) = s(6)
	s(6) = s(7)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block13507_0(s(3),s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block22384_8(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(distributedTeamStakes), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(12) = s(10)
	nop(DUP2)
	s(13) = s(9)
	nop(DUP4)
	s(12) = s(13)-s(12)
	nop(SUB)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(POP)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block14601(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(distributedTeamStakes), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(JUMP)

block22384_9(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(distributedTeamStakes), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize)=>
	nop(JUMPDEST)
	s(12) = s(10)
	nop(DUP2)
	s(13) = s(9)
	nop(DUP4)
	s(12) = s(13)-s(12)
	nop(SUB)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(POP)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block14818(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(financePeriodsCount), g(guidesStat), g(distributedSaleStakes), g(saleStartTimestamp), g(distributedFundariaStakes), g(distributedTeamStakes), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, returndatasize))
	nop(JUMP)

jump22395_0(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	geq(s(17), s(16))
	call(block22415_0(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22395_0(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	lt(s(17), s(16))
	call(block22414(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22395_0(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(14) = 0
	nop(PUSH1)
	s(15) = s(14)
	nop(DUP1)
	s(16) = s(13)
	nop(DUP3)
	s(17) = s(12)
	nop(DUP5)
	s(16) = s(17)+s(16)
	nop(ADD)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	nop(POP)
	s(16) = s(12)
	nop(DUP4)
	s(17) = s(15)
	nop(DUP2)
	call(jump22395_0(s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22395_1(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	geq(s(12), s(11))
	call(block22415_1(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller))

jump22395_1(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	lt(s(12), s(11))
	call(block22414_1(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22395_1(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(9)
	nop(DUP1)
	s(11) = s(8)
	nop(DUP3)
	s(12) = s(7)
	nop(DUP5)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	nop(POP)
	s(11) = s(7)
	nop(DUP4)
	s(12) = s(10)
	nop(DUP2)
	call(jump22395_1(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22395_2(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	geq(s(11), s(10))
	call(block22415_2(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller))

jump22395_2(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	lt(s(11), s(10))
	call(block22414_2(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22395_2(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(8)
	nop(DUP1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(6)
	nop(DUP5)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	nop(POP)
	s(10) = s(6)
	nop(DUP4)
	s(11) = s(9)
	nop(DUP2)
	call(jump22395_2(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22395_3(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(supplier), g(distributedBountyStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0))=>
	geq(s(10), s(9))
	call(block22415_3(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(supplier), g(distributedBountyStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0)))

jump22395_3(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(supplier), g(distributedBountyStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0))=>
	lt(s(10), s(9))
	call(block22414_3(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22395_3(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(supplier), g(distributedBountyStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(7) = 0
	nop(PUSH1)
	s(8) = s(7)
	nop(DUP1)
	s(9) = s(6)
	nop(DUP3)
	s(10) = s(5)
	nop(DUP5)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	nop(POP)
	s(9) = s(5)
	nop(DUP4)
	s(10) = s(8)
	nop(DUP2)
	call(jump22395_3(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(supplier), g(distributedBountyStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0)))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22395_4(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	geq(s(11), s(10))
	call(block22415_4(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller))

jump22395_4(s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	lt(s(11), s(10))
	call(block22414_4(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22395_4(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(8)
	nop(DUP1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(6)
	nop(DUP5)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	nop(POP)
	s(10) = s(6)
	nop(DUP4)
	s(11) = s(9)
	nop(DUP2)
	call(jump22395_4(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22395_5(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	geq(s(18), s(17))
	call(block22415_5(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22395_5(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	lt(s(18), s(17))
	call(block22414_6(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22395_5(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(15)
	nop(DUP1)
	s(17) = s(14)
	nop(DUP3)
	s(18) = s(13)
	nop(DUP5)
	s(17) = s(18)+s(17)
	nop(ADD)
	s(18) = s(16)
	s(16) = s(17)
	s(17) = s(18)
	nop(SWAP1)
	nop(POP)
	s(17) = s(13)
	nop(DUP4)
	s(18) = s(16)
	nop(DUP2)
	call(jump22395_5(s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22395_6(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	geq(s(18), s(17))
	call(block22415_6(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22395_6(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	lt(s(18), s(17))
	call(block22414_5(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22395_6(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(15)
	nop(DUP1)
	s(17) = s(14)
	nop(DUP3)
	s(18) = s(13)
	nop(DUP5)
	s(17) = s(18)+s(17)
	nop(ADD)
	s(18) = s(16)
	s(16) = s(17)
	s(17) = s(18)
	nop(SWAP1)
	nop(POP)
	s(17) = s(13)
	nop(DUP4)
	s(18) = s(16)
	nop(DUP2)
	call(jump22395_6(s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block22414_0(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22414_1(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22414_2(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22414_3(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22414_4(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22414_5(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22414_6(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22415_0(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(16) = s(15)
	nop(DUP1)
	s(17) = s(14)
	s(14) = s(16)
	s(16) = s(17)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(15) = s(11)
	s(11) = s(14)
	s(14) = s(15)
	nop(SWAP3)
	s(15) = s(12)
	s(12) = s(14)
	s(14) = s(15)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20923(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block22415_1(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(11) = s(10)
	nop(DUP1)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(10) = s(6)
	s(6) = s(9)
	s(9) = s(10)
	nop(SWAP3)
	s(10) = s(7)
	s(7) = s(9)
	s(9) = s(10)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block9332(s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMP)

block22415_2(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(10) = s(9)
	nop(DUP1)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(9) = s(5)
	s(5) = s(8)
	s(8) = s(9)
	nop(SWAP3)
	s(9) = s(6)
	s(6) = s(8)
	s(8) = s(9)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block13258(s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMP)

block22415_3(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(supplier), g(distributedBountyStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(9) = s(8)
	nop(DUP1)
	s(10) = s(7)
	s(7) = s(9)
	s(9) = s(10)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(8) = s(4)
	s(4) = s(7)
	s(7) = s(8)
	nop(SWAP3)
	s(8) = s(5)
	s(5) = s(7)
	s(7) = s(8)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block16903(s(4),s(3),s(2),s(1),s(0),g(supplier), g(distributedBountyStakes), g(totalSupply), l(l7), l(l6), l(l4), l(l1), l(l0)))
	nop(JUMP)

block22415_4(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l7), l(l6), l(l1), l(l0), caller)=>
	nop(JUMPDEST)
	s(10) = s(9)
	nop(DUP1)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(9) = s(5)
	s(5) = s(8)
	s(8) = s(9)
	nop(SWAP3)
	s(9) = s(6)
	s(6) = s(8)
	s(8) = s(9)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block17965(s(5),s(4),s(3),s(2),s(1),s(0), l(l7), l(l6), l(l1), l(l0), caller))
	nop(JUMP)

block22415_5(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(17) = s(16)
	nop(DUP1)
	s(18) = s(15)
	s(15) = s(17)
	s(17) = s(18)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(16) = s(12)
	s(12) = s(15)
	s(15) = s(16)
	nop(SWAP3)
	s(16) = s(13)
	s(13) = s(15)
	s(15) = s(16)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20752_0(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block22415_6(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(17) = s(16)
	nop(DUP1)
	s(18) = s(15)
	s(15) = s(17)
	s(17) = s(18)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(16) = s(12)
	s(12) = s(15)
	s(15) = s(16)
	nop(SWAP3)
	s(16) = s(13)
	s(13) = s(15)
	s(15) = s(16)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20923_0(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block22425_0(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(13)
	nop(DUP1)
	s(15) = s(12)
	nop(DUP3)
	s(16) = s(11)
	nop(DUP5)
	s(15) = s(16)*s(15)
	nop(MUL)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	nop(POP)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(11)
	nop(DUP5)
	s(15)= eq(s(16), s(15))
	nop(EQ)
	s(16) = s(15)
	nop(DUP1)
	s(17) = 22458
	nop(PUSH2)
	call(jump22425_0(s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMPI)

jump22425_0(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(16), 1 )
	call(block22458_0(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22425_0(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(16), 1 )
	call(block22443_2(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block22425_1(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(13)
	nop(DUP1)
	s(15) = s(12)
	nop(DUP3)
	s(16) = s(11)
	nop(DUP5)
	s(15) = s(16)*s(15)
	nop(MUL)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	nop(POP)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(11)
	nop(DUP5)
	s(15)= eq(s(16), s(15))
	nop(EQ)
	s(16) = s(15)
	nop(DUP1)
	s(17) = 22458
	nop(PUSH2)
	call(jump22425_1(s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMPI)

jump22425_1(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(16), 1 )
	call(block22458_1(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22425_1(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(16), 1 )
	call(block22443_1(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block22425_2(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(13)
	nop(DUP1)
	s(15) = s(12)
	nop(DUP3)
	s(16) = s(11)
	nop(DUP5)
	s(15) = s(16)*s(15)
	nop(MUL)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	nop(POP)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(11)
	nop(DUP5)
	s(15)= eq(s(16), s(15))
	nop(EQ)
	s(16) = s(15)
	nop(DUP1)
	s(17) = 22458
	nop(PUSH2)
	call(jump22425_2(s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMPI)

jump22425_2(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(16), 1 )
	call(block22458_2(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22425_2(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(16), 1 )
	call(block22443_0(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block22425_3(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(13) = 0
	nop(PUSH1)
	s(14) = s(13)
	nop(DUP1)
	s(15) = s(12)
	nop(DUP3)
	s(16) = s(11)
	nop(DUP5)
	s(15) = s(16)*s(15)
	nop(MUL)
	s(16) = s(14)
	s(14) = s(15)
	s(15) = s(16)
	nop(SWAP1)
	nop(POP)
	s(15) = 0
	nop(PUSH1)
	s(16) = s(11)
	nop(DUP5)
	s(15)= eq(s(16), s(15))
	nop(EQ)
	s(16) = s(15)
	nop(DUP1)
	s(17) = 22458
	nop(PUSH2)
	call(jump22425_3(s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMPI)

jump22425_3(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(16), 1 )
	call(block22458_3(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22425_3(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(16), 1 )
	call(block22443(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block22425_4(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(8)
	nop(DUP1)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(6)
	nop(DUP5)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	nop(POP)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(6)
	nop(DUP5)
	s(10)= eq(s(11), s(10))
	nop(EQ)
	s(11) = s(10)
	nop(DUP1)
	s(12) = 22458
	nop(PUSH2)
	call(jump22425_4(s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMPI)

jump22425_4(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	eq(s(11), 1 )
	call(block22458_4(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0)))

jump22425_4(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	neq(s(11), 1 )
	call(block22443_4(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0)))

block22425_5(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(17) = 0
	nop(PUSH1)
	s(18) = s(17)
	nop(DUP1)
	s(19) = s(16)
	nop(DUP3)
	s(20) = s(15)
	nop(DUP5)
	s(19) = s(20)*s(19)
	nop(MUL)
	s(20) = s(18)
	s(18) = s(19)
	s(19) = s(20)
	nop(SWAP1)
	nop(POP)
	s(19) = 0
	nop(PUSH1)
	s(20) = s(15)
	nop(DUP5)
	s(19)= eq(s(20), s(19))
	nop(EQ)
	s(20) = s(19)
	nop(DUP1)
	s(21) = 22458
	nop(PUSH2)
	call(jump22425_5(s(21),s(20),s(19),s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMPI)

jump22425_5(s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(20), 1 )
	call(block22458_5(s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22425_5(s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(20), 1 )
	call(block22443_9(s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block22425_6(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(14) = 0
	nop(PUSH1)
	s(15) = s(14)
	nop(DUP1)
	s(16) = s(13)
	nop(DUP3)
	s(17) = s(12)
	nop(DUP5)
	s(16) = s(17)*s(16)
	nop(MUL)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	nop(POP)
	s(16) = 0
	nop(PUSH1)
	s(17) = s(12)
	nop(DUP5)
	s(16)= eq(s(17), s(16))
	nop(EQ)
	s(17) = s(16)
	nop(DUP1)
	s(18) = 22458
	nop(PUSH2)
	call(jump22425_6(s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMPI)

jump22425_6(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(17), 1 )
	call(block22458_6(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22425_6(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(17), 1 )
	call(block22443_8(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block22425_7(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(14) = 0
	nop(PUSH1)
	s(15) = s(14)
	nop(DUP1)
	s(16) = s(13)
	nop(DUP3)
	s(17) = s(12)
	nop(DUP5)
	s(16) = s(17)*s(16)
	nop(MUL)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	nop(POP)
	s(16) = 0
	nop(PUSH1)
	s(17) = s(12)
	nop(DUP5)
	s(16)= eq(s(17), s(16))
	nop(EQ)
	s(17) = s(16)
	nop(DUP1)
	s(18) = 22458
	nop(PUSH2)
	call(jump22425_7(s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMPI)

jump22425_7(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(17), 1 )
	call(block22458_7(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22425_7(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(17), 1 )
	call(block22443_7(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block22425_8(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(14) = 0
	nop(PUSH1)
	s(15) = s(14)
	nop(DUP1)
	s(16) = s(13)
	nop(DUP3)
	s(17) = s(12)
	nop(DUP5)
	s(16) = s(17)*s(16)
	nop(MUL)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	nop(POP)
	s(16) = 0
	nop(PUSH1)
	s(17) = s(12)
	nop(DUP5)
	s(16)= eq(s(17), s(16))
	nop(EQ)
	s(17) = s(16)
	nop(DUP1)
	s(18) = 22458
	nop(PUSH2)
	call(jump22425_8(s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMPI)

jump22425_8(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(17), 1 )
	call(block22458_8(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22425_8(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(17), 1 )
	call(block22443_6(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block22425_9(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(14) = 0
	nop(PUSH1)
	s(15) = s(14)
	nop(DUP1)
	s(16) = s(13)
	nop(DUP3)
	s(17) = s(12)
	nop(DUP5)
	s(16) = s(17)*s(16)
	nop(MUL)
	s(17) = s(15)
	s(15) = s(16)
	s(16) = s(17)
	nop(SWAP1)
	nop(POP)
	s(16) = 0
	nop(PUSH1)
	s(17) = s(12)
	nop(DUP5)
	s(16)= eq(s(17), s(16))
	nop(EQ)
	s(17) = s(16)
	nop(DUP1)
	s(18) = 22458
	nop(PUSH2)
	call(jump22425_9(s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMPI)

jump22425_9(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(17), 1 )
	call(block22458_9(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22425_9(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(17), 1 )
	call(block22443_5(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block22443_0(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(POP)
	s(15) = s(12)
	nop(DUP3)
	s(16) = s(11)
	nop(DUP5)
	s(17) = s(14)
	nop(DUP3)
	s(18) = s(16)
	nop(DUP2)
	call(jump22443_0(s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22443_0(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(18), 0)
	call(block22455_0(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22443_0(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(18), 0)
	call(block22454_0(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22443_1(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(POP)
	s(15) = s(12)
	nop(DUP3)
	s(16) = s(11)
	nop(DUP5)
	s(17) = s(14)
	nop(DUP3)
	s(18) = s(16)
	nop(DUP2)
	call(jump22443_1(s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22443_1(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(18), 0)
	call(block22455_1(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22443_1(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(18), 0)
	call(block22454_1(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22443_2(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(POP)
	s(15) = s(12)
	nop(DUP3)
	s(16) = s(11)
	nop(DUP5)
	s(17) = s(14)
	nop(DUP3)
	s(18) = s(16)
	nop(DUP2)
	call(jump22443_2(s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22443_2(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(18), 0)
	call(block22455_2(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22443_2(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(18), 0)
	call(block22454_2(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22443_3(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(POP)
	s(18) = s(15)
	nop(DUP3)
	s(19) = s(14)
	nop(DUP5)
	s(20) = s(17)
	nop(DUP3)
	s(21) = s(19)
	nop(DUP2)
	call(jump22443_3(s(21),s(20),s(19),s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22443_3(s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(21), 0)
	call(block22455_3(s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22443_3(s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(21), 0)
	call(block22454_3(s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22443_4(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	nop(POP)
	s(10) = s(7)
	nop(DUP3)
	s(11) = s(6)
	nop(DUP5)
	s(12) = s(9)
	nop(DUP3)
	s(13) = s(11)
	nop(DUP2)
	call(jump22443_4(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l1), l(l0)))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22443_4(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	neq(s(13), 0)
	call(block22455_4(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0)))

jump22443_4(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	eq(s(13), 0)
	call(block22454_4(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22443_5(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(POP)
	s(16) = s(13)
	nop(DUP3)
	s(17) = s(12)
	nop(DUP5)
	s(18) = s(15)
	nop(DUP3)
	s(19) = s(17)
	nop(DUP2)
	call(jump22443_5(s(19),s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22443_5(s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(19), 0)
	call(block22455_5(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22443_5(s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(19), 0)
	call(block22454_5(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22443_6(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(POP)
	s(16) = s(13)
	nop(DUP3)
	s(17) = s(12)
	nop(DUP5)
	s(18) = s(15)
	nop(DUP3)
	s(19) = s(17)
	nop(DUP2)
	call(jump22443_6(s(19),s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22443_6(s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(19), 0)
	call(block22455_6(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22443_6(s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(19), 0)
	call(block22454_6(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22443_7(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(POP)
	s(16) = s(13)
	nop(DUP3)
	s(17) = s(12)
	nop(DUP5)
	s(18) = s(15)
	nop(DUP3)
	s(19) = s(17)
	nop(DUP2)
	call(jump22443_7(s(19),s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22443_7(s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(19), 0)
	call(block22455_7(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22443_7(s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(19), 0)
	call(block22454_7(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22443_8(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(POP)
	s(16) = s(13)
	nop(DUP3)
	s(17) = s(12)
	nop(DUP5)
	s(18) = s(15)
	nop(DUP3)
	s(19) = s(17)
	nop(DUP2)
	call(jump22443_8(s(19),s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22443_8(s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(19), 0)
	call(block22455_8(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22443_8(s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(19), 0)
	call(block22454_8(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22443_9(s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(POP)
	s(19) = s(16)
	nop(DUP3)
	s(20) = s(15)
	nop(DUP5)
	s(21) = s(18)
	nop(DUP3)
	s(22) = s(20)
	nop(DUP2)
	call(jump22443_9(s(22),s(21),s(20),s(19),s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22443_9(s(22), s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(22), 0)
	call(block22455_9(s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22443_9(s(22), s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(22), 0)
	call(block22454_9(s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22454_0(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22454_1(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22454_2(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22454_3(s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22454_4(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22454_5(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22454_6(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22454_7(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22454_8(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22454_9(s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22455_0(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(16) = s(17)/s(16)
	nop(DIV)
	s(15)= eq(s(16), s(15))
	nop(EQ)
	call(block22458_2(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block22455_1(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(16) = s(17)/s(16)
	nop(DIV)
	s(15)= eq(s(16), s(15))
	nop(EQ)
	call(block22458_1(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block22455_2(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(16) = s(17)/s(16)
	nop(DIV)
	s(15)= eq(s(16), s(15))
	nop(EQ)
	call(block22458_0(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block22455_3(s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(19) = s(20)/s(19)
	nop(DIV)
	s(18)= eq(s(19), s(18))
	nop(EQ)
	call(block22458(s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block22455_4(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(11) = s(12)/s(11)
	nop(DIV)
	s(10)= eq(s(11), s(10))
	nop(EQ)
	call(block22458_4(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l1), l(l0)))

block22455_5(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(17) = s(18)/s(17)
	nop(DIV)
	s(16)= eq(s(17), s(16))
	nop(EQ)
	call(block22458_9(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block22455_6(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(17) = s(18)/s(17)
	nop(DIV)
	s(16)= eq(s(17), s(16))
	nop(EQ)
	call(block22458_8(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block22455_7(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(17) = s(18)/s(17)
	nop(DIV)
	s(16)= eq(s(17), s(16))
	nop(EQ)
	call(block22458_7(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block22455_8(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(17) = s(18)/s(17)
	nop(DIV)
	s(16)= eq(s(17), s(16))
	nop(EQ)
	call(block22458_6(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block22455_9(s(21), s(20), s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(20) = s(21)/s(20)
	nop(DIV)
	s(19)= eq(s(20), s(19))
	nop(EQ)
	call(block22458_5(s(19),s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block22458_0(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	call(jump22458_0(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22458_0(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(15), 0)
	call(block22466_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22458_0(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(15), 0)
	call(block22465_2(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22458_1(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	call(jump22458_1(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22458_1(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(15), 0)
	call(block22466_1(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22458_1(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(15), 0)
	call(block22465_1(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

jump22458_2(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(15), 0)
	call(block22466_2(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22458_2(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(15), 0)
	call(block22465_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22458_2(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	call(jump22458_2(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block22458_3(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	call(jump22458_3(s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22458_3(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(15), 0)
	call(block22466_3(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22458_3(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(15), 0)
	call(block22465(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22458_4(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	call(jump22458_4(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l1), l(l0)))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22458_4(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	neq(s(10), 0)
	call(block22466_4(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0)))

jump22458_4(s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	eq(s(10), 0)
	call(block22465_4(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22458_5(s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	call(jump22458_5(s(19),s(18),s(17),s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22458_5(s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(19), 0)
	call(block22466_5(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22458_5(s(19), s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(19), 0)
	call(block22465_9(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22458_6(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	call(jump22458_6(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22458_6(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(16), 0)
	call(block22466_6(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22458_6(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(16), 0)
	call(block22465_8(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22458_7(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	call(jump22458_7(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22458_7(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(16), 0)
	call(block22466_7(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22458_7(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(16), 0)
	call(block22465_7(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22458_8(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	call(jump22458_8(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22458_8(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(16), 0)
	call(block22466_8(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22458_8(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(16), 0)
	call(block22465_6(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22458_9(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	call(jump22458_9(s(16),s(15),s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump22458_9(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(16), 0)
	call(block22466_9(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump22458_9(s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(16), 0)
	call(block22465_5(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block22465_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22465_1(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22465_2(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22465_3(s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22465_4(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22465_5(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22465_6(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22465_7(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22465_8(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22465_9(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block22466_0(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(15) = s(14)
	nop(DUP1)
	s(16) = s(13)
	s(13) = s(15)
	s(15) = s(16)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(14) = s(10)
	s(10) = s(13)
	s(13) = s(14)
	nop(SWAP3)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20314(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block22466_1(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(15) = s(14)
	nop(DUP1)
	s(16) = s(13)
	s(13) = s(15)
	s(15) = s(16)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(14) = s(10)
	s(10) = s(13)
	s(13) = s(14)
	nop(SWAP3)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20378(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block22466_2(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(15) = s(14)
	nop(DUP1)
	s(16) = s(13)
	s(13) = s(15)
	s(15) = s(16)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(14) = s(10)
	s(10) = s(13)
	s(13) = s(14)
	nop(SWAP3)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20442(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block22466_3(s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(15) = s(14)
	nop(DUP1)
	s(16) = s(13)
	s(13) = s(15)
	s(15) = s(16)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(14) = s(10)
	s(10) = s(13)
	s(13) = s(14)
	nop(SWAP3)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20490(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block22466_4(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(10) = s(9)
	nop(DUP1)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(9) = s(5)
	s(5) = s(8)
	s(8) = s(9)
	nop(SWAP3)
	s(9) = s(6)
	s(6) = s(8)
	s(8) = s(9)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block13493_0(s(5),s(4),s(3),s(2),s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block22466_5(s(18), s(17), s(16), s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(19) = s(18)
	nop(DUP1)
	s(20) = s(17)
	s(17) = s(19)
	s(19) = s(20)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(18) = s(14)
	s(14) = s(17)
	s(17) = s(18)
	nop(SWAP3)
	s(18) = s(15)
	s(15) = s(17)
	s(17) = s(18)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block13493_1(s(14),s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block22466_6(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(16) = s(15)
	nop(DUP1)
	s(17) = s(14)
	s(14) = s(16)
	s(16) = s(17)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(15) = s(11)
	s(11) = s(14)
	s(14) = s(15)
	nop(SWAP3)
	s(15) = s(12)
	s(12) = s(14)
	s(14) = s(15)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20314_0(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block22466_7(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(16) = s(15)
	nop(DUP1)
	s(17) = s(14)
	s(14) = s(16)
	s(16) = s(17)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(15) = s(11)
	s(11) = s(14)
	s(14) = s(15)
	nop(SWAP3)
	s(15) = s(12)
	s(12) = s(14)
	s(14) = s(15)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20378_0(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block22466_8(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(16) = s(15)
	nop(DUP1)
	s(17) = s(14)
	s(14) = s(16)
	s(16) = s(17)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(15) = s(11)
	s(11) = s(14)
	s(14) = s(15)
	nop(SWAP3)
	s(15) = s(12)
	s(12) = s(14)
	s(14) = s(15)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20442_0(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block22466_9(s(15), s(14), s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(16) = s(15)
	nop(DUP1)
	s(17) = s(14)
	s(14) = s(16)
	s(16) = s(17)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(15) = s(11)
	s(11) = s(14)
	s(14) = s(15)
	nop(SWAP3)
	s(15) = s(12)
	s(12) = s(14)
	s(14) = s(15)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	call(block20490_0(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

jump5247_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	neq(s(8), 0)
	call(block5287_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump5247_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	eq(s(8), 0)
	call(block5279_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

block5247_0(s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(2) = 0
	nop(PUSH1)
	s(3) = s(2)
	nop(DUP1)
	s(4) = 0
	nop(PUSH1)
	s(5) = s(4)
	nop(DUP1)
	s(6) = 0
	nop(PUSH1)
	s(7) = s(6)
	nop(DUP1)
	s(8) = 36
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(9) = g(lastStakePriceUSCents)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 255
	nop(PUSH1)
	s(8) = and(s(9), s(8))
	nop(AND)
	call(jump5247_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block5279_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	s(8) = 5286
	nop(PUSH2)
	s(9) = 19929
	nop(PUSH2)
	call(block19929_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(JUMP)

block5286_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	call(block5287_0(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block5287_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(8) = 5295
	nop(PUSH2)
	s(9) = 20244
	nop(PUSH2)
	call(block20244_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(bountyCap), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block5295_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(8) = 5304
	nop(PUSH2)
	s(9) = callvalue
	nop(CALLVALUE)
	s(10) = 18328
	nop(PUSH2)
	call(block18328_3(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block5304_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(9) = s(6)
	s(6) = s(8)
	s(8) = s(9)
	nop(SWAP2)
	nop(POP)
	s(8) = 1
	nop(PUSH1)
	s(9) = s(6)
	nop(DUP3)
	call(jump5304_0(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump5304_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	leq(s(9), s(8))
	call(block6379_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0), caller, callvalue, returndatasize))

jump5304_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	gt(s(9), s(8))
	call(block5316_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block5316_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	s(8) = s(6)
	nop(DUP2)
	s(9) = 29
	nop(PUSH1)
	s(9) = g(saleStartTimestamp)
	nop(SLOAD)
	s(8) = s(9)+s(8)
	nop(ADD)
	s(9) = s(7)
	s(7) = s(8)
	s(8) = s(9)
	nop(SWAP1)
	nop(POP)
	s(8) = 32
	nop(PUSH1)
	s(8) = g(totalInvested)
	nop(SLOAD)
	s(9) = s(7)
	nop(DUP2)
	call(jump5316_0(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump5316_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	gt(s(9), s(8))
	call(block5344_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump5316_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	leq(s(9), s(8))
	call(block5334_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block5334_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	s(8) = s(6)
	nop(DUP2)
	s(9) = s(4)
	s(4) = s(8)
	s(8) = s(9)
	nop(SWAP4)
	nop(POP)
	s(8) = callvalue
	nop(CALLVALUE)
	s(9) = s(5)
	s(5) = s(8)
	s(8) = s(9)
	nop(SWAP3)
	nop(POP)
	s(8) = 5365
	nop(PUSH2)
	call(block5365_0(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block5344_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(8) = 29
	nop(PUSH1)
	s(8) = g(saleStartTimestamp)
	nop(SLOAD)
	s(9) = 32
	nop(PUSH1)
	s(9) = g(totalInvested)
	nop(SLOAD)
	s(8) = s(9)-s(8)
	nop(SUB)
	s(9) = s(4)
	s(4) = s(8)
	s(8) = s(9)
	nop(SWAP4)
	nop(POP)
	s(8) = 5362
	nop(PUSH2)
	s(9) = s(4)
	nop(DUP5)
	s(10) = 9782
	nop(PUSH2)
	call(block9782_1(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block5362_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(9) = s(5)
	s(5) = s(8)
	s(8) = s(9)
	nop(SWAP3)
	nop(POP)
	call(block5365_0(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block5365_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(8) = 5422
	nop(PUSH2)
	s(9) = 33
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(10) = g(totalWithdrawn)
	nop(SLOAD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 256
	nop(PUSH2)
	s(10) = s(11)^s(10)
	nop(EXP)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(9) = s(10)/s(9)
	nop(DIV)
	s(10) = 255
	nop(PUSH1)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 255
	nop(PUSH1)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 12
	nop(PUSH1)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(11) = g(teamShare)
	nop(SLOAD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = 256
	nop(PUSH2)
	s(11) = s(12)^s(11)
	nop(EXP)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(10) = s(11)/s(10)
	nop(DIV)
	s(11) = 255
	nop(PUSH1)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 255
	nop(PUSH1)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(4)
	nop(DUP7)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(11) = 20581
	nop(PUSH2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = 4294967295
	nop(PUSH4)
	s(11) = and(s(12), s(11))
	nop(AND)
	call(block20581_14(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block5422_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(9) = s(2)
	s(2) = s(8)
	s(8) = s(9)
	nop(SWAP6)
	nop(POP)
	s(8) = 5481
	nop(PUSH2)
	s(9) = 33
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(10) = g(totalWithdrawn)
	nop(SLOAD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 256
	nop(PUSH2)
	s(10) = s(11)^s(10)
	nop(EXP)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(9) = s(10)/s(9)
	nop(DIV)
	s(10) = 255
	nop(PUSH1)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 255
	nop(PUSH1)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 15
	nop(PUSH1)
	s(11) = 0
	nop(PUSH1)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(11) = g(fundariaShare)
	nop(SLOAD)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = 256
	nop(PUSH2)
	s(11) = s(12)^s(11)
	nop(EXP)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(10) = s(11)/s(10)
	nop(DIV)
	s(11) = 255
	nop(PUSH1)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = 255
	nop(PUSH1)
	s(10) = and(s(11), s(10))
	nop(AND)
	s(11) = s(4)
	nop(DUP7)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(11) = 20581
	nop(PUSH2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = s(9)
	s(9) = s(11)
	s(11) = s(12)
	nop(SWAP2)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	s(12) = 4294967295
	nop(PUSH4)
	s(11) = and(s(12), s(11))
	nop(AND)
	call(block20581_15(s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block5481_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(9) = s(3)
	s(3) = s(8)
	s(8) = s(9)
	nop(SWAP5)
	nop(POP)
	s(8) = 0
	nop(PUSH1)
	s(9) = s(4)
	nop(DUP5)
	call(jump5481_0(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump5481_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	leq(s(9), s(8))
	call(block6290_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(totalInvested), l(l0), caller, callvalue, returndatasize))

jump5481_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	gt(s(9), s(8))
	call(block5493_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block5493_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(distributedTeamStakes), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	s(8) = s(2)
	nop(DUP6)
	s(9) = 2
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = 3
	nop(PUSH1)
	s(12) = 0
	nop(PUSH1)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(12) = g(balances)
	nop(SLOAD)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(13) = 256
	nop(PUSH2)
	s(12) = s(13)^s(12)
	nop(EXP)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(11) = s(12)/s(11)
	nop(DIV)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l6) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	l(l7) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(8)
	nop(DUP3)
	s(12) = s(9)
	nop(DUP3)
	gl = s(12)
	s(12) = fresh(0)
	nop(SLOAD)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	gs(1) = s(10)
	gs(2) = s(9)
	nop(SSTORE)
	nop(POP)
	s(8) = s(2)
	nop(DUP6)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(9)
	nop(DUP1)
	s(11) = s(8)
	nop(DUP3)
	s(12) = s(9)
	nop(DUP3)
	s(12) = g(totalSupply)
	nop(SLOAD)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	g(totalSupply) = s(9)
	nop(SSTORE)
	nop(POP)
	s(8) = s(2)
	nop(DUP6)
	s(9) = 13
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(8)
	nop(DUP3)
	s(12) = s(9)
	nop(DUP3)
	s(12) = g(distributedTeamStakes)
	nop(SLOAD)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	g(distributedTeamStakes) = s(9)
	nop(SSTORE)
	nop(POP)
	s(8) = 3
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(9) = g(balances)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 25
	nop(PUSH1)
	s(10) = 1
	nop(PUSH1)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(10) = g(supplier)
	nop(SLOAD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 256
	nop(PUSH2)
	s(10) = s(11)^s(10)
	nop(EXP)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(9) = s(10)/s(9)
	nop(DIV)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 100389287136786176327247604509743168900146139575972864366142685224231313322991
	nop(PUSH32)
	s(11) = s(2)
	nop(DUP9)
	s(12) = 64
	nop(PUSH1)
	s(12) = l(l0)
	nop(MLOAD)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(11)
	nop(DUP3)
	s(15) = s(13)
	nop(DUP2)
	l(l1) = s(14)
	nop(MSTORE)
	s(14) = 32
	nop(PUSH1)
	s(13) = s(14)+s(13)
	nop(ADD)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(12) = 64
	nop(PUSH1)
	s(12) = l(l0)
	nop(MLOAD)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	s(12) = s(13)-s(12)
	nop(SUB)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(LOG3)
	s(8) = s(3)
	nop(DUP5)
	s(9) = 2
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = 4
	nop(PUSH1)
	s(12) = 0
	nop(PUSH1)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(12) = g(owner)
	nop(SLOAD)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(13) = 256
	nop(PUSH2)
	s(12) = s(13)^s(12)
	nop(EXP)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	s(11) = s(12)/s(11)
	nop(DIV)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l6) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	l(l7) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(8)
	nop(DUP3)
	s(12) = s(9)
	nop(DUP3)
	gl = s(12)
	s(12) = fresh(1)
	nop(SLOAD)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	gs(1) = s(10)
	gs(2) = s(9)
	nop(SSTORE)
	nop(POP)
	s(8) = s(3)
	nop(DUP5)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(9)
	nop(DUP1)
	s(11) = s(8)
	nop(DUP3)
	s(12) = s(9)
	nop(DUP3)
	s(12) = g(totalSupply)
	nop(SLOAD)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	g(totalSupply) = s(9)
	nop(SSTORE)
	nop(POP)
	s(8) = s(3)
	nop(DUP5)
	s(9) = 16
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(8)
	nop(DUP3)
	s(12) = s(9)
	nop(DUP3)
	s(12) = g(distributedFundariaStakes)
	nop(SLOAD)
	s(11) = s(12)+s(11)
	nop(ADD)
	s(12) = s(8)
	s(8) = s(11)
	s(11) = s(12)
	nop(SWAP3)
	nop(POP)
	nop(POP)
	s(10) = s(8)
	nop(DUP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	g(distributedFundariaStakes) = s(9)
	nop(SSTORE)
	nop(POP)
	s(8) = 4
	nop(PUSH1)
	s(9) = 0
	nop(PUSH1)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(9) = g(owner)
	nop(SLOAD)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(10) = 256
	nop(PUSH2)
	s(9) = s(10)^s(9)
	nop(EXP)
	s(10) = s(8)
	s(8) = s(9)
	s(9) = s(10)
	nop(SWAP1)
	s(8) = s(9)/s(8)
	nop(DIV)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 25
	nop(PUSH1)
	s(10) = 1
	nop(PUSH1)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(10) = g(supplier)
	nop(SLOAD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 256
	nop(PUSH2)
	s(10) = s(11)^s(10)
	nop(EXP)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(9) = s(10)/s(9)
	nop(DIV)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 100389287136786176327247604509743168900146139575972864366142685224231313322991
	nop(PUSH32)
	s(11) = s(3)
	nop(DUP8)
	s(12) = 64
	nop(PUSH1)
	s(12) = l(l0)
	nop(MLOAD)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(11)
	nop(DUP3)
	s(15) = s(13)
	nop(DUP2)
	l(l1) = s(14)
	nop(MSTORE)
	s(14) = 32
	nop(PUSH1)
	s(13) = s(14)+s(13)
	nop(ADD)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	nop(POP)
	nop(POP)
	s(12) = 64
	nop(PUSH1)
	s(12) = l(l0)
	nop(MLOAD)
	s(13) = s(12)
	nop(DUP1)
	s(14) = s(11)
	s(11) = s(13)
	s(13) = s(14)
	nop(SWAP2)
	s(12) = s(13)-s(12)
	nop(SUB)
	s(13) = s(11)
	s(11) = s(12)
	s(12) = s(13)
	nop(SWAP1)
	nop(LOG3)
	s(8) = 6125
	nop(PUSH2)
	s(9) = caller
	nop(CALLER)
	s(10) = s(4)
	nop(DUP6)
	s(11) = s(5)
	nop(DUP6)
	s(12) = 20608
	nop(PUSH2)
	call(block20608_0(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(fundaria), g(owner), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

jump6125_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(9), s(8))
	call(block6289_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(totalInvested), l(l0), caller, callvalue, returndatasize))

jump6125_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(9), s(8))
	call(block6278_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

block6125_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(8) = 0
	nop(PUSH1)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 26
	nop(PUSH1)
	s(10) = 0
	nop(PUSH1)
	s(11) = caller
	nop(CALLER)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(11) = and(s(12), s(11))
	nop(AND)
	s(12) = s(10)
	nop(DUP2)
	l(l6) = s(11)
	nop(MSTORE)
	s(11) = 32
	nop(PUSH1)
	s(10) = s(11)+s(10)
	nop(ADD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	l(l7) = s(10)
	nop(MSTORE)
	s(10) = 32
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(9) = sha3(s(10), s(9))
	nop(SHA3)
	s(10) = 4
	nop(PUSH1)
	s(9) = s(10)+s(9)
	nop(ADD)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	gl = s(10)
	s(10) = fresh(0)
	nop(SLOAD)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 256
	nop(PUSH2)
	s(10) = s(11)^s(10)
	nop(EXP)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(9) = s(10)/s(9)
	nop(DIV)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	s(10) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(9) = and(s(10), s(9))
	nop(AND)
	call(jump6125_0(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block6278_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	s(8) = 6288
	nop(PUSH2)
	s(9) = caller
	nop(CALLER)
	s(10) = s(4)
	nop(DUP6)
	s(11) = s(5)
	nop(DUP6)
	s(12) = 21133
	nop(PUSH2)
	call(block21133_1(s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(supplier), g(fundaria), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

block6288_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(totalInvested), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	call(block6289_0(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(totalInvested), l(l0), caller, callvalue, returndatasize))

block6289_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(totalInvested), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	call(block6290_0(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(totalInvested), l(l0), caller, callvalue, returndatasize))

jump6290_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(totalInvested), l(l0), caller, callvalue, returndatasize)=>
	leq(s(9), s(8))
	call(block6374_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

jump6290_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(totalInvested), l(l0), caller, callvalue, returndatasize)=>
	gt(s(9), s(8))
	call(block6301_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0), caller, callvalue, returndatasize))

block6290_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(totalInvested), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(8) = 32
	nop(PUSH1)
	s(8) = g(totalInvested)
	nop(SLOAD)
	s(9) = s(7)
	nop(DUP2)
	call(jump6290_0(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(totalInvested), l(l0), caller, callvalue, returndatasize))
	nop(GT)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block6301_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0), caller, callvalue, returndatasize)=>
	s(8) = caller
	nop(CALLER)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 2300
	nop(PUSH2)
	s(10) = s(5)
	nop(DUP5)
	s(11) = callvalue
	nop(CALLVALUE)
	s(10) = s(11)-s(10)
	nop(SUB)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	s(11)= eq(s(11), 0)
	nop(ISZERO)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = 0
	nop(PUSH1)
	s(13) = 64
	nop(PUSH1)
	s(13) = l(l0)
	nop(MLOAD)
	s(14) = s(13)
	nop(DUP1)
	s(15) = s(11)
	nop(DUP4)
	s(14) = s(15)-s(14)
	nop(SUB)
	s(15) = s(13)
	nop(DUP2)
	s(16) = s(10)
	nop(DUP6)
	s(17) = s(8)
	nop(DUP9)
	s(18) = s(9)
	nop(DUP9)
	s(12) = 1
	nop(CALL)
	s(13) = s(8)
	s(8) = s(12)
	s(12) = s(13)
	nop(SWAP4)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(8)= eq(s(8), 0)
	nop(ISZERO)
	s(9) = s(8)
	nop(DUP1)
	call(jump6301_0(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump6301_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0), caller, callvalue, returndatasize)=>
	eq(s(9), 0)
	call(block6372_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

jump6301_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0), caller, callvalue, returndatasize)=>
	neq(s(9), 0)
	call(block6363_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize))

block6363_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize)=>
	s(9) = returndatasize
	nop(RETURNDATASIZE)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(10)
	nop(DUP1)
	nop(RETURNDATACOPY)
	s(10) = returndatasize
	nop(RETURNDATASIZE)
	s(11) = 0
	nop(PUSH1)
	nop(REVERT)

block6372_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(JUMPDEST)
	nop(POP)
	call(block6374_0(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0)))

block6374_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(JUMPDEST)
	s(8) = 6451
	nop(PUSH2)
	call(block6451_0(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0)))
	nop(JUMP)

jump6379_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0), caller, callvalue, returndatasize)=>
	eq(s(9), 0)
	call(block6449_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

jump6379_0(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0), caller, callvalue, returndatasize)=>
	neq(s(9), 0)
	call(block6440_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize))

block6379_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(8) = caller
	nop(CALLER)
	s(9) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(8) = and(s(9), s(8))
	nop(AND)
	s(9) = 2300
	nop(PUSH2)
	s(10) = callvalue
	nop(CALLVALUE)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = s(9)
	nop(DUP2)
	s(11)= eq(s(11), 0)
	nop(ISZERO)
	s(10) = s(11)*s(10)
	nop(MUL)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	s(11) = 64
	nop(PUSH1)
	s(11) = l(l0)
	nop(MLOAD)
	s(12) = 0
	nop(PUSH1)
	s(13) = 64
	nop(PUSH1)
	s(13) = l(l0)
	nop(MLOAD)
	s(14) = s(13)
	nop(DUP1)
	s(15) = s(11)
	nop(DUP4)
	s(14) = s(15)-s(14)
	nop(SUB)
	s(15) = s(13)
	nop(DUP2)
	s(16) = s(10)
	nop(DUP6)
	s(17) = s(8)
	nop(DUP9)
	s(18) = s(9)
	nop(DUP9)
	s(12) = 1
	nop(CALL)
	s(13) = s(8)
	s(8) = s(12)
	s(12) = s(13)
	nop(SWAP4)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	s(8)= eq(s(8), 0)
	nop(ISZERO)
	s(9) = s(8)
	nop(DUP1)
	call(jump6379_0(s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block6440_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), returndatasize)=>
	s(9) = returndatasize
	nop(RETURNDATASIZE)
	s(10) = 0
	nop(PUSH1)
	s(11) = s(10)
	nop(DUP1)
	nop(RETURNDATACOPY)
	s(10) = returndatasize
	nop(RETURNDATASIZE)
	s(11) = 0
	nop(PUSH1)
	nop(REVERT)

block6449_0(s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(JUMPDEST)
	nop(POP)
	call(block6451_0(s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0)))

block6451_0(s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(JUMPDEST)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	nop(POP)
	call(block945_0(s(0)))
	nop(JUMP)

block846_0(s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(1) = 0
	nop(PUSH1)
	s(2) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(1) = and(s(2), s(1))
	nop(AND)
	s(2) = caller
	nop(CALLER)
	s(3) = 1461501637330902918203684832716283019655932542975
	nop(PUSH20)
	s(2) = and(s(3), s(2))
	nop(AND)
	call(jump846_0(s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(EQ)
	nop(ISZERO)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump846_0(s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	neq(s(2), s(1))
	call(block906_0(s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump846_0(s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	eq(s(2), s(1))
	call(block902_0(s(0)))

block902_0(s(0))=>
	s(1) = 0
	nop(PUSH1)
	s(2) = s(1)
	nop(DUP1)
	nop(REVERT)

jump906_0(s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	gt(s(2), s(1))
	call(block921_0(s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump906_0(s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	leq(s(2), s(1))
	call(block917_0(s(0)))

block906_0(s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(1) = 0
	nop(PUSH1)
	s(2) = callvalue
	nop(CALLVALUE)
	call(jump906_0(s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(GT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

block917_0(s(0))=>
	s(1) = 0
	nop(PUSH1)
	s(2) = s(1)
	nop(DUP1)
	nop(REVERT)

block921_0(s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(1) = 10
	nop(PUSH1)
	s(1) = g(businessPlannedPeriodEndTimestamp)
	nop(SLOAD)
	s(2) = timestamp
	nop(TIMESTAMP)
	call(jump921_0(s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(LT)
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump921_0(s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	lt(s(2), s(1))
	call(block937_0(s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))

jump921_0(s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	geq(s(2), s(1))
	call(block933_0(s(0)))

block933_0(s(0))=>
	s(1) = 0
	nop(PUSH1)
	s(2) = s(1)
	nop(DUP1)
	nop(REVERT)

block937_0(s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp)=>
	nop(JUMPDEST)
	s(1) = 945
	nop(PUSH2)
	s(2) = 5247
	nop(PUSH2)
	call(block5247_0(s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(lastStakePriceUSCents), g(saleShare), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(saleStat), g(supplier), g(bountyCap), g(contractCreatedTimestamp), g(distributedFundariaStakes), g(fundariaShare), g(fundariaCap), g(distributedTeamStakes), g(teamShare), g(teamCap), g(businessPlannedPeriodEndTimestamp), g(supplyCap), g(usdPerEther), g(poolCapUSD), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize, timestamp))
	nop(JUMP)

block945_0(s(0))=>
	nop(JUMPDEST)
	skip
	nop(STOP)

block9782_0(s(2), s(1), s(0), g(saleCap), g(usdPerEther), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(3) = 0
	nop(PUSH1)
	s(4) = 100
	nop(PUSH1)
	s(5) = 7
	nop(PUSH1)
	s(5) = g(usdPerEther)
	nop(SLOAD)
	s(4) = s(5)*s(4)
	nop(MUL)
	s(5) = 1000000000000000000
	nop(PUSH8)
	s(6) = 34
	nop(PUSH1)
	s(6) = g(saleCap)
	nop(SLOAD)
	s(7) = s(2)
	nop(DUP5)
	s(6) = s(7)*s(6)
	nop(MUL)
	s(5) = s(6)*s(5)
	nop(MUL)
	s(6) = s(4)
	nop(DUP2)
	call(jump9782_0(s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(saleCap), g(usdPerEther), l(l1), l(l0)))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump9782_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(saleCap), g(usdPerEther), l(l1), l(l0))=>
	neq(s(6), 0)
	call(block9814_0(s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0)))

jump9782_0(s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(saleCap), g(usdPerEther), l(l1), l(l0))=>
	eq(s(6), 0)
	call(block9813_0(s(5), s(4), s(3), s(2), s(1), s(0)))

block9782_1(s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(10) = 0
	nop(PUSH1)
	s(11) = 100
	nop(PUSH1)
	s(12) = 7
	nop(PUSH1)
	s(12) = g(usdPerEther)
	nop(SLOAD)
	s(11) = s(12)*s(11)
	nop(MUL)
	s(12) = 1000000000000000000
	nop(PUSH8)
	s(13) = 34
	nop(PUSH1)
	s(13) = g(saleCap)
	nop(SLOAD)
	s(14) = s(9)
	nop(DUP5)
	s(13) = s(14)*s(13)
	nop(MUL)
	s(12) = s(13)*s(12)
	nop(MUL)
	s(13) = s(11)
	nop(DUP2)
	call(jump9782_1(s(13),s(12),s(11),s(10),s(9),s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(ISZERO)
	nop(ISZERO)
	nop(PUSH2)
	nop(JUMPI)

jump9782_1(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	neq(s(13), 0)
	call(block9814_1(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))

jump9782_1(s(13), s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(saleCap), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(usdPerEther), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	eq(s(13), 0)
	call(block9813_1(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0)))

block9813_0(s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block9813_1(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0))=>
	nop(ASSERTFAIL)

block9814_0(s(5), s(4), s(3), s(2), s(1), s(0), l(l1), l(l0))=>
	nop(JUMPDEST)
	s(4) = s(5)/s(4)
	nop(DIV)
	s(5) = s(3)
	s(3) = s(4)
	s(4) = s(5)
	nop(SWAP1)
	nop(POP)
	s(4) = s(1)
	s(1) = s(3)
	s(3) = s(4)
	nop(SWAP2)
	s(4) = s(2)
	s(2) = s(3)
	s(3) = s(4)
	nop(SWAP1)
	nop(POP)
	call(block1698(s(1),s(0), l(l1), l(l0)))
	nop(JUMP)

block9814_1(s(12), s(11), s(10), s(9), s(8), s(7), s(6), s(5), s(4), s(3), s(2), s(1), s(0), g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize)=>
	nop(JUMPDEST)
	s(11) = s(12)/s(11)
	nop(DIV)
	s(12) = s(10)
	s(10) = s(11)
	s(11) = s(12)
	nop(SWAP1)
	nop(POP)
	s(11) = s(8)
	s(8) = s(10)
	s(10) = s(11)
	nop(SWAP2)
	s(11) = s(9)
	s(9) = s(10)
	s(10) = s(11)
	nop(SWAP1)
	nop(POP)
	call(block5362_0(s(8),s(7),s(6),s(5),s(4),s(3),s(2),s(1),s(0),g(distributedBonusStakes), g(guidesStat), g(priceIsFrozen), g(totalWithdrawn), g(totalInvested), g(saleStartTimestamp), g(supplier), g(distributedFundariaStakes), g(fundariaShare), g(distributedTeamStakes), g(teamShare), g(fundaria), g(owner), g(balances), g(totalSupply), l(l7), l(l6), l(l4), l(l3), l(l2), l(l1), l(l0), caller, callvalue, returndatasize))
	nop(JUMP)

