{
    "usingOraclize": {
        "function_list": [
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)",
            "matchBytes32Prefix(bytes32,bytes)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "matchBytes32Prefix(bytes32,bytes)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            }
        },
        "function_block_mapping": {
            "__callback(bytes32,string,bytes)": [
                200,
                97
            ],
            "__callback(bytes32,string)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "BananaGame": {
        "function_list": [
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)",
            "matchBytes32Prefix(bytes32,bytes)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "BananaGame()",
            "fallback()",
            "bet()",
            "__callback(bytes32,string,bytes)",
            "safeSend(address,uint256,uint256)",
            "safeSend(address,uint256)",
            "setStopped()",
            "setStarted()",
            "getBetNum()",
            "getBet(uint256)",
            "changeOwnerAddress(address)",
            "changeGasLimitOfSafeSend(uint256)",
            "changePercent(uint256)",
            "watchPercent()",
            "changeOraclizeProofType(bytes1)",
            "changeOraclizeConfig(bytes32)",
            "getMinBetAmount()",
            "getMaxBetAmount()",
            "getPlayerBetResult(uint256)",
            "getLossesShare(address)",
            "getProfitShare(address)",
            "getBalance(address)",
            "profitDistribution()",
            "divest()",
            "divest(address)",
            "addInvest()",
            "addInvestorAtID(uint256)",
            "getMinInvestment()",
            "searchSmallestInvestor()",
            "forceDivestOfAllInvestors()",
            "changeInvestNum(uint256)",
            "changeDivestFee(uint256)",
            "getBankroll()",
            "getStatus()",
            "getInvestStatus(uint256)",
            "changeMinBet(uint256)",
            "changeORACLIZE_GAS_LIMIT(uint256)",
            "getOraFee()",
            "getBetKey(uint256)",
            "changeHouseAddress(address)",
            "destroy()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "matchBytes32Prefix(bytes32,bytes)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "BananaGame()": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "bet()": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "safeSend(address,uint256,uint256)": {
                "argument": {
                    "amount": "uint256",
                    "value": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "safeSend(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "setStopped()": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "setStarted()": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "getBetNum()": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "getBet(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "changeOwnerAddress(address)": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "changeGasLimitOfSafeSend(uint256)": {
                "argument": {
                    "newGasLimit": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "changePercent(uint256)": {
                "argument": {
                    "_percent": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "watchPercent()": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "changeOraclizeProofType(bytes1)": {
                "argument": {
                    "_proofType": "bytes1"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "changeOraclizeConfig(bytes32)": {
                "argument": {
                    "_config": "bytes32"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "getMinBetAmount()": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "getMaxBetAmount()": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "getPlayerBetResult(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "getLossesShare(address)": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "getProfitShare(address)": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "getBalance(address)": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "profitDistribution()": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "divest()": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "divest(address)": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "addInvest()": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "addInvestorAtID(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "getMinInvestment()": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "searchSmallestInvestor()": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "forceDivestOfAllInvestors()": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "changeInvestNum(uint256)": {
                "argument": {
                    "num": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "changeDivestFee(uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "getBankroll()": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "getStatus()": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "getInvestStatus(uint256)": {
                "argument": {
                    "n": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "changeMinBet(uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "changeORACLIZE_GAS_LIMIT(uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "getOraFee()": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "getBetKey(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "changeHouseAddress(address)": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "destroy()": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "times": "uint256",
                    "safeGas": "uint256",
                    "ORACLIZE_GAS_LIMIT": "uint256",
                    "percent": "uint256",
                    "minBet": "uint256",
                    "maxInvestors": "uint256",
                    "divestFee": "uint256",
                    "betsKeys": "bytes32[]",
                    "investorsNum": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256",
                    "invest": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "getBetNum()": [
                3551,
                1021
            ],
            "setStopped()": [
                2396,
                647
            ],
            "getOraFee()": [
                2014,
                515
            ],
            "getMinInvestment()": [
                2492,
                691
            ],
            "changeHouseAddress(address)": [
                1089,
                229
            ],
            "destroy()": [
                2666,
                779
            ],
            "changeOraclizeConfig(bytes32)": [
                3336,
                977
            ],
            "getBet(uint256)": [
                615,
                97
            ],
            "getBalance(address)": [
                3725,
                1109
            ],
            "changeDivestFee(uint256)": [
                1783,
                427
            ],
            "changeOraclizeProofType(bytes1)": [
                1935,
                493
            ],
            "getLossesShare(address)": [
                979,
                185
            ],
            "addInvest()": [
                1298,
                295
            ],
            "getMaxBetAmount()": [
                2057,
                537
            ],
            "getBetKey(uint256)": [
                1308,
                317
            ],
            "bet()": [
                882,
                141
            ],
            "__callback(bytes32,string,bytes)": [
                1381,
                339
            ],
            "changeInvestNum(uint256)": [
                2888,
                867
            ],
            "changeORACLIZE_GAS_LIMIT(uint256)": [
                2843,
                845
            ],
            "changePercent(uint256)": [
                2578,
                735
            ],
            "getProfitShare(address)": [
                892,
                163
            ],
            "watchPercent()": [
                3682,
                1087
            ],
            "getStatus()": [
                1871,
                471
            ],
            "setStarted()": [
                1066,
                207
            ],
            "getBankroll()": [
                839,
                119
            ],
            "forceDivestOfAllInvestors()": [
                1156,
                251
            ],
            "searchSmallestInvestor()": [
                1740,
                405
            ],
            "getInvestStatus(uint256)": [
                2143,
                581
            ],
            "divest()": [
                592,
                75
            ],
            "__callback(bytes32,string)": [
                1179,
                273
            ],
            "getPlayerBetResult(uint256)": [
                3385,
                999
            ],
            "changeGasLimitOfSafeSend(uint256)": [
                3204,
                933
            ],
            "getMinBetAmount()": [
                2623,
                757
            ],
            "changeMinBet(uint256)": [
                3594,
                1043
            ],
            "changeOwnerAddress(address)": [
                2689,
                801
            ]
        },
        "block_CALL_mapping": {
            "jump8974": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump18712": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump13420": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block9638_1": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "block9638_0": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "block9638_3": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "block9638_2": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "jump10502": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block4246_1": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "block4246_0": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "jump17212": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block20612_1": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block20612_0": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block20612_3": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block20612_2": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block20612_5": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block20612_4": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump18424": [
                "oraclize.setProofType(proofP)",
                "oraclize.setProofType(proofP)"
            ],
            "block20612_6": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block13798": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block17809": [
                "OAR.getAddress()"
            ],
            "jump14263_0": [
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)",
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)"
            ],
            "jump14263_1": [
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)",
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)"
            ],
            "jump16752": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump19267": [
                "oraclize.setConfig(config)",
                "oraclize.setConfig(config)"
            ],
            "block9206": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "jump13798_0": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump13798_1": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block17212": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump4246": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "jump20612_6": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump20612_5": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump20612_4": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump20612_3": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump20612_2": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump20612_1": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump20612_0": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump10502_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump13142_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump17809": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block14263": [
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)"
            ],
            "jump10734_1": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "jump10734_0": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "jump10734_3": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "block17212_0": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block9406_3": [
                "OAR.getAddress()"
            ],
            "block9406_0": [
                "OAR.getAddress()"
            ],
            "block9406_1": [
                "OAR.getAddress()"
            ],
            "block9406_2": [
                "OAR.getAddress()"
            ],
            "jump16474": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block13142": [
                "OAR.getAddress()"
            ],
            "block16474": [
                "OAR.getAddress()"
            ],
            "block9406": [
                "OAR.getAddress()"
            ],
            "block10502": [
                "OAR.getAddress()"
            ],
            "jump4014": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block13142_1": [
                "OAR.getAddress()"
            ],
            "block13142_0": [
                "OAR.getAddress()"
            ],
            "block16752_0": [
                "OAR.getAddress()"
            ],
            "block4014_0": [
                "OAR.getAddress()"
            ],
            "block4014_1": [
                "OAR.getAddress()"
            ],
            "jump13142_1": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump10502_1": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump10502_2": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump10502_3": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block20612": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block17010_0": [
                "oraclize.cbAddress()"
            ],
            "jump10734": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "jump17010_0": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "jump9406_2": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump9406_3": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump9406_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump9406_1": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump9406": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block10502_2": [
                "OAR.getAddress()"
            ],
            "block10502_3": [
                "OAR.getAddress()"
            ],
            "block10502_0": [
                "OAR.getAddress()"
            ],
            "block10502_1": [
                "OAR.getAddress()"
            ],
            "jump4014_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump4014_1": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block17010": [
                "oraclize.cbAddress()"
            ],
            "jump13420_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump13420_1": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump17010": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "jump16474_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump18990": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block8974": [
                "OAR.getAddress()"
            ],
            "block9638": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "block18990": [
                "OAR.getAddress()"
            ],
            "block16474_0": [
                "OAR.getAddress()"
            ],
            "block18087": [
                "OAR.getAddress()"
            ],
            "jump10734_2": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "jump9638": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "jump14263": [
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)",
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)"
            ],
            "block19267": [
                "oraclize.setConfig(config)"
            ],
            "block18424": [
                "oraclize.setProofType(proofP)"
            ],
            "block4014": [
                "OAR.getAddress()"
            ],
            "block14263_0": [
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)"
            ],
            "block14263_1": [
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)"
            ],
            "jump9638_0": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "block10734": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "jump17212_1": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump17212_0": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump17212_2": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block18712": [
                "OAR.getAddress()"
            ],
            "block17212_2": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump13142": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump18087": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block13798_0": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block13798_1": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block13420_0": [
                "OAR.getAddress()"
            ],
            "block13420_1": [
                "OAR.getAddress()"
            ],
            "jump4246_1": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "jump4246_0": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "block17212_1": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump9638_3": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "jump9638_2": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "jump9638_1": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "jump13798": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump16752_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block13420": [
                "OAR.getAddress()"
            ],
            "block16752": [
                "OAR.getAddress()"
            ],
            "jump9206": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "jump20612": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block4246": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "block10734_3": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "block10734_2": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "block10734_1": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ],
            "block10734_0": [
                "OraclizeI(OAR.getAddress()).getPrice(\"URL\", ORACLIZE_GAS_LIMIT + safeGas)"
            ]
        }
    }
}