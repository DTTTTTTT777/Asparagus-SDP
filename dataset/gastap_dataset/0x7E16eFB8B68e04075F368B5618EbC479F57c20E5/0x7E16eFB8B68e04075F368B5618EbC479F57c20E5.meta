{
    "strings": {
        "function_list": [
            "memcpy(uint256,uint256,uint256)",
            "toSlice(string)",
            "len(bytes32)",
            "toSliceB32(bytes32)",
            "copy(strings.slice)",
            "toString(strings.slice)",
            "len(strings.slice)",
            "empty(strings.slice)",
            "compare(strings.slice,strings.slice)",
            "equals(strings.slice,strings.slice)",
            "nextRune(strings.slice,strings.slice)",
            "nextRune(strings.slice)",
            "ord(strings.slice)",
            "keccak(strings.slice)",
            "startsWith(strings.slice,strings.slice)",
            "beyond(strings.slice,strings.slice)",
            "endsWith(strings.slice,strings.slice)",
            "until(strings.slice,strings.slice)",
            "findPtr(uint256,uint256,uint256,uint256)",
            "rfindPtr(uint256,uint256,uint256,uint256)",
            "find(strings.slice,strings.slice)",
            "rfind(strings.slice,strings.slice)",
            "split(strings.slice,strings.slice,strings.slice)",
            "split(strings.slice,strings.slice)",
            "rsplit(strings.slice,strings.slice,strings.slice)",
            "rsplit(strings.slice,strings.slice)",
            "count(strings.slice,strings.slice)",
            "contains(strings.slice,strings.slice)",
            "concat(strings.slice,strings.slice)",
            "join(strings.slice,strings.slice[])"
        ],
        "initial_state": {
            "memcpy(uint256,uint256,uint256)": {
                "argument": {
                    "dest": "uint256",
                    "src": "uint256",
                    "len": "uint256"
                },
                "contract": {}
            },
            "toSlice(string)": {
                "argument": {
                    "self": "string"
                },
                "contract": {}
            },
            "len(bytes32)": {
                "argument": {
                    "self": "bytes32"
                },
                "contract": {}
            },
            "toSliceB32(bytes32)": {
                "argument": {
                    "self": "bytes32"
                },
                "contract": {}
            },
            "copy(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "toString(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "len(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "empty(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "compare(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "other": "strings.slice"
                },
                "contract": {}
            },
            "equals(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "other": "strings.slice"
                },
                "contract": {}
            },
            "nextRune(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "rune": "strings.slice"
                },
                "contract": {}
            },
            "nextRune(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "ord(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "keccak(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "startsWith(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "beyond(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "endsWith(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "until(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "findPtr(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "selflen": "uint256",
                    "selfptr": "uint256",
                    "needlelen": "uint256",
                    "needleptr": "uint256"
                },
                "contract": {}
            },
            "rfindPtr(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "selflen": "uint256",
                    "selfptr": "uint256",
                    "needlelen": "uint256",
                    "needleptr": "uint256"
                },
                "contract": {}
            },
            "find(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "rfind(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "split(strings.slice,strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice",
                    "token": "strings.slice"
                },
                "contract": {}
            },
            "split(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "rsplit(strings.slice,strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice",
                    "token": "strings.slice"
                },
                "contract": {}
            },
            "rsplit(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "count(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "contains(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "concat(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "other": "strings.slice"
                },
                "contract": {}
            },
            "join(strings.slice,strings.slice[])": {
                "argument": {
                    "self": "strings.slice",
                    "parts": "strings.slice[]"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Manager": {
        "function_list": [],
        "initial_state": {},
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Token": {
        "function_list": [
            "balanceOf(address)",
            "totalSupply()",
            "getAccountCount()",
            "getAddress(uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "getAccountCount()": {
                "argument": {},
                "contract": {}
            },
            "getAddress(uint256)": {
                "argument": {
                    "slot": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "getAddress(uint256)": [
                276,
                141
            ],
            "getAccountCount()": [
                233,
                119
            ],
            "balanceOf(address)": [
                146,
                97
            ],
            "totalSupply()": [
                103,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "tokenRecipient": {
        "function_list": [
            "receiveApproval(address,uint256,address,bytes)"
        ],
        "initial_state": {
            "receiveApproval(address,uint256,address,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "receiveApproval(address,uint256,address,bytes)": [
                174,
                75
            ]
        },
        "block_CALL_mapping": {
            "jump573": [
                "t.transferFrom(_from, this, _value)",
                "t.transferFrom(_from, this, _value)"
            ],
            "block573": [
                "t.transferFrom(_from, this, _value)"
            ]
        }
    },
    "StringUtils": {
        "function_list": [
            "compare(string,string)",
            "equal(string,string)",
            "indexOf(string,string)"
        ],
        "initial_state": {
            "compare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {}
            },
            "equal(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {}
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "compare(string,string)": [
                115,
                83
            ],
            "indexOf(string,string)": [
                509,
                127
            ],
            "equal(string,string)": [
                310,
                105
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                169,
                75
            ],
            "balanceOf(address)": [
                491,
                163
            ],
            "totalSupply()": [
                270,
                97
            ],
            "allowance(address,address)": [
                878,
                273
            ],
            "transferFrom(address,address,uint256)": [
                313,
                119
            ],
            "transfer(address,uint256)": [
                777,
                251
            ]
        },
        "block_CALL_mapping": {}
    },
    "SubToken": {
        "function_list": [
            "SubTokenCreate(uint256,uint8,string,string,address)",
            "transfer(address,uint256)",
            "share()",
            "totalSupply()",
            "initialSupply()"
        ],
        "initial_state": {
            "SubTokenCreate(uint256,uint8,string,string,address)": {
                "argument": {
                    "_initialSupply": "uint256",
                    "decimalUnits": "uint8",
                    "_name": "string",
                    "_symbol": "string"
                },
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {}
            },
            "share()": {
                "argument": {},
                "contract": {}
            },
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "initialSupply()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "SubTokenCreate(uint256,uint8,string,string,address)": [
                157,
                97
            ],
            "initialSupply()": [
                451,
                119
            ],
            "share()": [
                494,
                141
            ],
            "transfer(address,uint256)": [
                537,
                163
            ],
            "totalSupply()": [
                114,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "Cents": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "Cents()",
            "setCentsPoolAddress(address)",
            "distributionSync(address,bool)",
            "setZeroMarker(address)",
            "balanceOf(address)",
            "totalSupply()",
            "getAccountCount()",
            "getAddress(uint256)",
            "appendTokenHolders(address)",
            "transfer(address,uint256)",
            "approve(address,uint256)",
            "approveAndCall(address,uint256,bytes)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "burn(uint256)",
            "burnFrom(address,uint256)",
            "transferOwnership(address)",
            "assignManagement(address)",
            "freezeAccount(address)",
            "unfreezeAccount(address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256",
                    "initialSupply": "uint256",
                    "accountCount": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256",
                    "initialSupply": "uint256",
                    "accountCount": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256",
                    "initialSupply": "uint256",
                    "accountCount": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256",
                    "initialSupply": "uint256",
                    "accountCount": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256",
                    "initialSupply": "uint256",
                    "accountCount": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256",
                    "initialSupply": "uint256",
                    "accountCount": "uint256"
                }
            },
            "Cents()": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256",
                    "initialSupply": "uint256",
                    "accountCount": "uint256"
                }
            },
            "setCentsPoolAddress(address)": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256",
                    "initialSupply": "uint256",
                    "accountCount": "uint256"
                }
            },
            "distributionSync(address,bool)": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256",
                    "initialSupply": "uint256",
                    "accountCount": "uint256"
                }
            },
            "setZeroMarker(address)": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256",
                    "initialSupply": "uint256",
                    "accountCount": "uint256"
                }
            },
            "getAccountCount()": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256",
                    "initialSupply": "uint256",
                    "accountCount": "uint256"
                }
            },
            "getAddress(uint256)": {
                "argument": {
                    "slot": "uint256"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256",
                    "initialSupply": "uint256",
                    "accountCount": "uint256"
                }
            },
            "appendTokenHolders(address)": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256",
                    "initialSupply": "uint256",
                    "accountCount": "uint256"
                }
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256",
                    "initialSupply": "uint256",
                    "accountCount": "uint256"
                }
            },
            "burn(uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256",
                    "initialSupply": "uint256",
                    "accountCount": "uint256"
                }
            },
            "burnFrom(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256",
                    "initialSupply": "uint256",
                    "accountCount": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256",
                    "initialSupply": "uint256",
                    "accountCount": "uint256"
                }
            },
            "assignManagement(address)": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256",
                    "initialSupply": "uint256",
                    "accountCount": "uint256"
                }
            },
            "freezeAccount(address)": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256",
                    "initialSupply": "uint256",
                    "accountCount": "uint256"
                }
            },
            "unfreezeAccount(address)": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256",
                    "initialSupply": "uint256",
                    "accountCount": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "getAddress(uint256)": [
                2173,
                515
            ],
            "freezeAccount(address)": [
                2572,
                581
            ],
            "totalSupply()": [
                601,
                119
            ],
            "allowance(address,address)": [
                2453,
                559
            ],
            "transferFrom(address,address,uint256)": [
                644,
                141
            ],
            "approve(address,uint256)": [
                500,
                97
            ],
            "getAccountCount()": [
                1956,
                449
            ],
            "burnFrom(address,uint256)": [
                1432,
                339
            ],
            "burn(uint256)": [
                978,
                229
            ],
            "unfreezeAccount(address)": [
                1365,
                317
            ],
            "setCentsPoolAddress(address)": [
                2773,
                647
            ],
            "balanceOf(address)": [
                1278,
                295
            ],
            "approveAndCall(address,uint256,bytes)": [
                2282,
                537
            ],
            "transferOwnership(address)": [
                2639,
                603
            ],
            "assignManagement(address)": [
                2706,
                625
            ],
            "transfer(address,uint256)": [
                1855,
                427
            ]
        },
        "block_CALL_mapping": {
            "block6903": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "block8211": [
                "Centspool.setZeroMarker ( _tokenholder )"
            ],
            "jump8447": [
                "Centspool.syncsync ( _tokenholder, false )",
                "Centspool.syncsync ( _tokenholder, false )"
            ],
            "block8211_1": [
                "Centspool.setZeroMarker ( _tokenholder )"
            ],
            "block8211_0": [
                "Centspool.setZeroMarker ( _tokenholder )"
            ],
            "jump8447_0": [
                "Centspool.syncsync ( _tokenholder, false )",
                "Centspool.syncsync ( _tokenholder, false )"
            ],
            "block8447_2": [
                "Centspool.syncsync ( _tokenholder, false )"
            ],
            "jump6903": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "block8447": [
                "Centspool.syncsync ( _tokenholder, false )"
            ],
            "jump8211_1": [
                "Centspool.setZeroMarker ( _tokenholder )",
                "Centspool.setZeroMarker ( _tokenholder )"
            ],
            "jump8211_0": [
                "Centspool.setZeroMarker ( _tokenholder )",
                "Centspool.setZeroMarker ( _tokenholder )"
            ],
            "jump8211": [
                "Centspool.setZeroMarker ( _tokenholder )",
                "Centspool.setZeroMarker ( _tokenholder )"
            ],
            "jump8447_1": [
                "Centspool.syncsync ( _tokenholder, false )",
                "Centspool.syncsync ( _tokenholder, false )"
            ],
            "block8447_0": [
                "Centspool.syncsync ( _tokenholder, false )"
            ],
            "block8447_1": [
                "Centspool.syncsync ( _tokenholder, false )"
            ],
            "jump8447_2": [
                "Centspool.syncsync ( _tokenholder, false )",
                "Centspool.syncsync ( _tokenholder, false )"
            ]
        }
    },
    "CentsPool": {
        "function_list": [
            "CentsPool(address,address)",
            "transferOwnership(address)",
            "setSlowSync(uint256)",
            "setZeroMarker(address)",
            "syncsync(address,bool)",
            "withdrawTokens(bool)"
        ],
        "initial_state": {
            "CentsPool(address,address)": {
                "argument": {},
                "contract": {
                    "slowsyncamount": "uint256",
                    "thBalances": "mapping(address => CentsPool.tokenHolderBalances[])"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "slowsyncamount": "uint256",
                    "thBalances": "mapping(address => CentsPool.tokenHolderBalances[])"
                }
            },
            "setSlowSync(uint256)": {
                "argument": {
                    "_slowsyncamount": "uint256"
                },
                "contract": {
                    "slowsyncamount": "uint256",
                    "thBalances": "mapping(address => CentsPool.tokenHolderBalances[])"
                }
            },
            "setZeroMarker(address)": {
                "argument": {},
                "contract": {
                    "slowsyncamount": "uint256",
                    "thBalances": "mapping(address => CentsPool.tokenHolderBalances[])"
                }
            },
            "syncsync(address,bool)": {
                "argument": {},
                "contract": {
                    "slowsyncamount": "uint256",
                    "thBalances": "mapping(address => CentsPool.tokenHolderBalances[])"
                }
            },
            "withdrawTokens(bool)": {
                "argument": {},
                "contract": {
                    "slowsyncamount": "uint256",
                    "thBalances": "mapping(address => CentsPool.tokenHolderBalances[])"
                }
            }
        },
        "function_block_mapping": {
            "syncsync(address,bool)": [
                459,
                119
            ],
            "withdrawTokens(bool)": [
                412,
                97
            ],
            "transferOwnership(address)": [
                1389,
                361
            ],
            "setSlowSync(uint256)": [
                783,
                207
            ],
            "setZeroMarker(address)": [
                716,
                185
            ]
        },
        "block_CALL_mapping": {
            "block1868": [
                "PEG.TokenCreationContract()"
            ],
            "block3519": [
                "subtoken.share()"
            ],
            "jump5963": [
                "CentsToken.initialSupply()",
                "CentsToken.initialSupply()"
            ],
            "block4794": [
                "PEGC.tokenCount()"
            ],
            "block3358": [
                "PEGC.getTokenAddress ( i )"
            ],
            "jump2125": [
                "PEGC.tokenCount()",
                "PEGC.tokenCount()"
            ],
            "block2715": [
                "CentsToken.initialSupply()"
            ],
            "jump5059": [
                "CentsToken.balanceOf( _tokenholder )",
                "CentsToken.balanceOf( _tokenholder )"
            ],
            "jump3858": [
                "subtoken.transfer ( msg.sender, sendamount  )",
                "subtoken.transfer ( msg.sender, sendamount  )"
            ],
            "jump1868": [
                "PEG.TokenCreationContract()",
                "PEG.TokenCreationContract()"
            ],
            "block2125": [
                "PEGC.tokenCount()"
            ],
            "jump7018": [
                "PEGC.getTokenAddress ( i )",
                "PEGC.getTokenAddress ( i )"
            ],
            "block4438": [
                "PEGC.tokenCount()"
            ],
            "block7018": [
                "PEGC.getTokenAddress ( i )"
            ],
            "block5963": [
                "CentsToken.initialSupply()"
            ],
            "jump2715": [
                "CentsToken.initialSupply()",
                "CentsToken.initialSupply()"
            ],
            "block5254": [
                "PEGC.tokenCount()"
            ],
            "jump4438": [
                "PEGC.tokenCount()",
                "PEGC.tokenCount()"
            ],
            "jump5254": [
                "PEGC.tokenCount()",
                "PEGC.tokenCount()"
            ],
            "jump3519": [
                "subtoken.share()",
                "subtoken.share()"
            ],
            "block3858": [
                "subtoken.transfer ( msg.sender, sendamount  )"
            ],
            "jump4794": [
                "PEGC.tokenCount()",
                "PEGC.tokenCount()"
            ],
            "jump6609": [
                "subtoken.share()",
                "subtoken.share()"
            ],
            "block2520": [
                "CentsToken.balanceOf( msg.sender )"
            ],
            "jump6448": [
                "PEGC.getTokenAddress ( i )",
                "PEGC.getTokenAddress ( i )"
            ],
            "jump4181": [
                "PEG.TokenCreationContract()",
                "PEG.TokenCreationContract()"
            ],
            "block5059": [
                "CentsToken.balanceOf( _tokenholder )"
            ],
            "block6448": [
                "PEGC.getTokenAddress ( i )"
            ],
            "jump2520": [
                "CentsToken.balanceOf( msg.sender )",
                "CentsToken.balanceOf( msg.sender )"
            ],
            "block6609": [
                "subtoken.share()"
            ],
            "jump3358": [
                "PEGC.getTokenAddress ( i )",
                "PEGC.getTokenAddress ( i )"
            ],
            "block4181": [
                "PEG.TokenCreationContract()"
            ]
        }
    }
}