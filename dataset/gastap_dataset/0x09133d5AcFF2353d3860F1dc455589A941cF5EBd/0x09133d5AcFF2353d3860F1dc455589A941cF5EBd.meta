{
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "tokenRecipient": {
        "function_list": [
            "receiveApproval(address,uint256,address,bytes)"
        ],
        "initial_state": {
            "receiveApproval(address,uint256,address,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "receiveApproval(address,uint256,address,bytes)": [
                174,
                75
            ]
        },
        "block_CALL_mapping": {
            "jump573": [
                "t.transferFrom(_from, this, _value)",
                "t.transferFrom(_from, this, _value)"
            ],
            "block573": [
                "t.transferFrom(_from, this, _value)"
            ]
        }
    },
    "LoggedERC20": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "LoggedERC20(uint256,string,uint8,string,bool,bool)",
            "valueAt(LoggedERC20.LogValueBlock[],uint256)",
            "setBalance(address,uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "transferInternal(address,address,uint256)",
            "transfer(address,uint256)",
            "approve(address,uint256)",
            "approveAndCall(address,uint256,bytes)",
            "transferFrom(address,address,uint256)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "loggedTotalSupply": "LoggedERC20.LogValueBlock[]",
                    "creationBlock": "uint256",
                    "loggedBalances": "mapping(address => LoggedERC20.LogValueBlock[])"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "loggedTotalSupply": "LoggedERC20.LogValueBlock[]",
                    "creationBlock": "uint256",
                    "loggedBalances": "mapping(address => LoggedERC20.LogValueBlock[])"
                }
            },
            "LoggedERC20(uint256,string,uint8,string,bool,bool)": {
                "argument": {
                    "initialSupply": "uint256",
                    "tokenName": "string",
                    "decimalUnits": "uint8",
                    "tokenSymbol": "string"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "loggedTotalSupply": "LoggedERC20.LogValueBlock[]",
                    "creationBlock": "uint256",
                    "loggedBalances": "mapping(address => LoggedERC20.LogValueBlock[])"
                }
            },
            "valueAt(LoggedERC20.LogValueBlock[],uint256)": {
                "argument": {
                    "checkpoints": "LoggedERC20.LogValueBlock[]",
                    "block": "uint256"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "loggedTotalSupply": "LoggedERC20.LogValueBlock[]",
                    "creationBlock": "uint256",
                    "loggedBalances": "mapping(address => LoggedERC20.LogValueBlock[])"
                }
            },
            "setBalance(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "loggedTotalSupply": "LoggedERC20.LogValueBlock[]",
                    "creationBlock": "uint256",
                    "loggedBalances": "mapping(address => LoggedERC20.LogValueBlock[])"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "loggedTotalSupply": "LoggedERC20.LogValueBlock[]",
                    "creationBlock": "uint256",
                    "loggedBalances": "mapping(address => LoggedERC20.LogValueBlock[])"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "loggedTotalSupply": "LoggedERC20.LogValueBlock[]",
                    "creationBlock": "uint256",
                    "loggedBalances": "mapping(address => LoggedERC20.LogValueBlock[])"
                }
            },
            "transferInternal(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "loggedTotalSupply": "LoggedERC20.LogValueBlock[]",
                    "creationBlock": "uint256",
                    "loggedBalances": "mapping(address => LoggedERC20.LogValueBlock[])"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "loggedTotalSupply": "LoggedERC20.LogValueBlock[]",
                    "creationBlock": "uint256",
                    "loggedBalances": "mapping(address => LoggedERC20.LogValueBlock[])"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "loggedTotalSupply": "LoggedERC20.LogValueBlock[]",
                    "creationBlock": "uint256",
                    "loggedBalances": "mapping(address => LoggedERC20.LogValueBlock[])"
                }
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "loggedTotalSupply": "LoggedERC20.LogValueBlock[]",
                    "creationBlock": "uint256",
                    "loggedBalances": "mapping(address => LoggedERC20.LogValueBlock[])"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "loggedTotalSupply": "LoggedERC20.LogValueBlock[]",
                    "creationBlock": "uint256",
                    "loggedBalances": "mapping(address => LoggedERC20.LogValueBlock[])"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                401,
                97
            ],
            "totalSupply()": [
                545,
                141
            ],
            "balanceOf(address)": [
                1018,
                251
            ],
            "transferFrom(address,address,uint256)": [
                588,
                163
            ],
            "transferOwnership(address)": [
                1913,
                449
            ],
            "approveAndCall(address,uint256,bytes)": [
                1576,
                383
            ],
            "transfer(address,uint256)": [
                1408,
                339
            ]
        },
        "block_CALL_mapping": {
            "jump3725": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "block3725": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "LoggedReward": {
        "function_list": [
            "LoggedERC20(uint256,string,uint8,string,bool,bool)",
            "valueAt(LoggedERC20.LogValueBlock[],uint256)",
            "setBalance(address,uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "transferInternal(address,address,uint256)",
            "transfer(address,uint256)",
            "approve(address,uint256)",
            "approveAndCall(address,uint256,bytes)",
            "transferFrom(address,address,uint256)",
            "Ownable()",
            "transferOwnership(address)",
            "LoggedReward(uint256,string,uint8,string,bool,bool)",
            "addReward(uint256)",
            "claimedRewardHook(uint256,address,uint256)",
            "claimReward(uint256)",
            "claimRewards()",
            "recycleReward(uint256)",
            "refundUnclaimedEthers(uint256)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "LoggedERC20(uint256,string,uint8,string,bool,bool)": {
                "argument": {
                    "initialSupply": "uint256",
                    "tokenName": "string",
                    "decimalUnits": "uint8",
                    "tokenSymbol": "string"
                },
                "contract": {
                    "rewards": "LoggedReward.Reward[]"
                }
            },
            "valueAt(LoggedERC20.LogValueBlock[],uint256)": {
                "argument": {
                    "checkpoints": "LoggedERC20.LogValueBlock[]",
                    "block": "uint256"
                },
                "contract": {
                    "rewards": "LoggedReward.Reward[]"
                }
            },
            "setBalance(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "rewards": "LoggedReward.Reward[]"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "rewards": "LoggedReward.Reward[]"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "rewards": "LoggedReward.Reward[]"
                }
            },
            "transferInternal(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "rewards": "LoggedReward.Reward[]"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "rewards": "LoggedReward.Reward[]"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "rewards": "LoggedReward.Reward[]"
                }
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {
                    "rewards": "LoggedReward.Reward[]"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "rewards": "LoggedReward.Reward[]"
                }
            },
            "Ownable()": {
                "argument": {},
                "contract": {
                    "rewards": "LoggedReward.Reward[]"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "rewards": "LoggedReward.Reward[]"
                }
            },
            "LoggedReward(uint256,string,uint8,string,bool,bool)": {
                "argument": {
                    "initialSupply": "uint256",
                    "tokenName": "string",
                    "decimalUnits": "uint8",
                    "tokenSymbol": "string"
                },
                "contract": {
                    "rewards": "LoggedReward.Reward[]"
                }
            },
            "addReward(uint256)": {
                "argument": {
                    "recycleTime": "uint256"
                },
                "contract": {
                    "rewards": "LoggedReward.Reward[]"
                }
            },
            "claimedRewardHook(uint256,address,uint256)": {
                "argument": {
                    "rewardId": "uint256",
                    "claimed": "uint256"
                },
                "contract": {
                    "rewards": "LoggedReward.Reward[]"
                }
            },
            "claimReward(uint256)": {
                "argument": {
                    "rewardId": "uint256"
                },
                "contract": {
                    "rewards": "LoggedReward.Reward[]"
                }
            },
            "claimRewards()": {
                "argument": {},
                "contract": {
                    "rewards": "LoggedReward.Reward[]"
                }
            },
            "recycleReward(uint256)": {
                "argument": {
                    "rewardId": "uint256"
                },
                "contract": {
                    "rewards": "LoggedReward.Reward[]"
                }
            },
            "refundUnclaimedEthers(uint256)": {
                "argument": {
                    "rewardId": "uint256"
                },
                "contract": {
                    "rewards": "LoggedReward.Reward[]"
                }
            }
        },
        "function_block_mapping": {
            "totalSupply()": [
                680,
                163
            ],
            "transferFrom(address,address,uint256)": [
                723,
                185
            ],
            "refundUnclaimedEthers(uint256)": [
                467,
                97
            ],
            "approve(address,uint256)": [
                536,
                119
            ],
            "addReward(uint256)": [
                1263,
                317
            ],
            "claimRewards()": [
                905,
                229
            ],
            "balanceOf(address)": [
                1176,
                295
            ],
            "claimReward(uint256)": [
                1675,
                427
            ],
            "approveAndCall(address,uint256,bytes)": [
                1904,
                493
            ],
            "transferOwnership(address)": [
                2241,
                559
            ],
            "recycleReward(uint256)": [
                1835,
                471
            ],
            "transfer(address,uint256)": [
                1598,
                405
            ]
        },
        "block_CALL_mapping": {
            "jump6397": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "jump5675_0": [
                "msg.sender.transfer(claim)",
                "msg.sender.transfer(claim)"
            ],
            "jump5675": [
                "msg.sender.transfer(claim)",
                "msg.sender.transfer(claim)"
            ],
            "jump2833": [
                "owner.transfer(claimedBackAmount)",
                "owner.transfer(claimedBackAmount)"
            ],
            "block5675": [
                "msg.sender.transfer(claim)"
            ],
            "block5675_0": [
                "msg.sender.transfer(claim)"
            ],
            "block2833": [
                "owner.transfer(claimedBackAmount)"
            ],
            "block6397": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "Inonit": {
        "function_list": [
            "LoggedReward(uint256,string,uint8,string,bool,bool)",
            "addReward(uint256)",
            "claimedRewardHook(uint256,address,uint256)",
            "claimReward(uint256)",
            "claimRewards()",
            "recycleReward(uint256)",
            "refundUnclaimedEthers(uint256)",
            "LoggedERC20(uint256,string,uint8,string,bool,bool)",
            "valueAt(LoggedERC20.LogValueBlock[],uint256)",
            "setBalance(address,uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "transferInternal(address,address,uint256)",
            "transfer(address,uint256)",
            "approve(address,uint256)",
            "approveAndCall(address,uint256,bytes)",
            "transferFrom(address,address,uint256)",
            "Ownable()",
            "transferOwnership(address)",
            "Inonit(uint256,string,string,string)",
            "balanceOf(address)",
            "claimedRewardHook(uint256,address,uint256)",
            "recover(address,address)",
            "setLocked(bool)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "LoggedReward(uint256,string,uint8,string,bool,bool)": {
                "argument": {
                    "initialSupply": "uint256",
                    "tokenName": "string",
                    "decimalUnits": "uint8",
                    "tokenSymbol": "string"
                },
                "contract": {}
            },
            "addReward(uint256)": {
                "argument": {
                    "recycleTime": "uint256"
                },
                "contract": {}
            },
            "claimedRewardHook(uint256,address,uint256)": {
                "argument": {
                    "rewardId": "uint256",
                    "claimed": "uint256"
                },
                "contract": {}
            },
            "claimReward(uint256)": {
                "argument": {
                    "rewardId": "uint256"
                },
                "contract": {}
            },
            "claimRewards()": {
                "argument": {},
                "contract": {}
            },
            "recycleReward(uint256)": {
                "argument": {
                    "rewardId": "uint256"
                },
                "contract": {}
            },
            "refundUnclaimedEthers(uint256)": {
                "argument": {
                    "rewardId": "uint256"
                },
                "contract": {}
            },
            "LoggedERC20(uint256,string,uint8,string,bool,bool)": {
                "argument": {
                    "initialSupply": "uint256",
                    "tokenName": "string",
                    "decimalUnits": "uint8",
                    "tokenSymbol": "string"
                },
                "contract": {}
            },
            "valueAt(LoggedERC20.LogValueBlock[],uint256)": {
                "argument": {
                    "checkpoints": "LoggedERC20.LogValueBlock[]",
                    "block": "uint256"
                },
                "contract": {}
            },
            "setBalance(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transferInternal(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "Inonit(uint256,string,string,string)": {
                "argument": {
                    "initialSupply": "uint256",
                    "standardName": "string",
                    "tokenName": "string",
                    "tokenSymbol": "string"
                },
                "contract": {}
            },
            "recover(address,address)": {
                "argument": {},
                "contract": {}
            },
            "setLocked(bool)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "claimRewards()": [
                974,
                251
            ],
            "totalSupply()": [
                702,
                163
            ],
            "transferFrom(address,address,uint256)": [
                792,
                207
            ],
            "refundUnclaimedEthers(uint256)": [
                489,
                97
            ],
            "approve(address,uint256)": [
                558,
                119
            ],
            "recover(address,address)": [
                1245,
                317
            ],
            "addReward(uint256)": [
                1431,
                361
            ],
            "setLocked(bool)": [
                745,
                185
            ],
            "balanceOf(address)": [
                1344,
                339
            ],
            "claimReward(uint256)": [
                1843,
                471
            ],
            "approveAndCall(address,uint256,bytes)": [
                2072,
                537
            ],
            "transferOwnership(address)": [
                2409,
                603
            ],
            "recycleReward(uint256)": [
                2003,
                515
            ],
            "transfer(address,uint256)": [
                1766,
                449
            ]
        },
        "block_CALL_mapping": {
            "block7020": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "jump6298": [
                "msg.sender.transfer(claim)",
                "msg.sender.transfer(claim)"
            ],
            "jump6298_0": [
                "msg.sender.transfer(claim)",
                "msg.sender.transfer(claim)"
            ],
            "jump3001": [
                "owner.transfer(claimedBackAmount)",
                "owner.transfer(claimedBackAmount)"
            ],
            "block3001": [
                "owner.transfer(claimedBackAmount)"
            ],
            "block6298": [
                "msg.sender.transfer(claim)"
            ],
            "block6298_0": [
                "msg.sender.transfer(claim)"
            ],
            "jump7020": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    }
}