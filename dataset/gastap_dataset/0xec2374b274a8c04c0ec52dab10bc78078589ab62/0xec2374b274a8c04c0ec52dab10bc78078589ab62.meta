{
    "FlightDelayDatabaseModel": {
        "function_list": [],
        "initial_state": {},
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "FlightDelayControlledContract": {
        "function_list": [
            "setController(address)",
            "destruct()",
            "setContracts()",
            "getContract(bytes32)"
        ],
        "initial_state": {
            "setController(address)": {
                "argument": {},
                "contract": {}
            },
            "destruct()": {
                "argument": {},
                "contract": {}
            },
            "setContracts()": {
                "argument": {},
                "contract": {}
            },
            "getContract(bytes32)": {
                "argument": {
                    "_id": "bytes32"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "destruct()": [
                92,
                75
            ],
            "setContracts()": [
                115,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "FlightDelayConstants": {
        "function_list": [
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "MIN_OBSERVATIONS": "uint256",
                    "MIN_PREMIUM": "uint256",
                    "MAX_PREMIUM": "uint256",
                    "MAX_PAYOUT": "uint256",
                    "MIN_PREMIUM_EUR": "uint256",
                    "MAX_PREMIUM_EUR": "uint256",
                    "MAX_PAYOUT_EUR": "uint256",
                    "MIN_PREMIUM_USD": "uint256",
                    "MAX_PREMIUM_USD": "uint256",
                    "MAX_PAYOUT_USD": "uint256",
                    "MIN_PREMIUM_GBP": "uint256",
                    "MAX_PREMIUM_GBP": "uint256",
                    "MAX_PAYOUT_GBP": "uint256",
                    "MAX_CUMULATED_WEIGHTED_PREMIUM": "uint256",
                    "REWARD_PERCENT": "uint8",
                    "RESERVE_PERCENT": "uint8",
                    "WEIGHT_PATTERN": "uint8[6]",
                    "MIN_TIME_BEFORE_DEPARTURE": "uint256",
                    "CHECK_PAYOUT_OFFSET": "uint256",
                    "MAX_FLIGHT_DURATION": "uint256",
                    "CONTRACT_DEAD_LINE": "uint256",
                    "MIN_DEPARTURE_LIM": "uint256",
                    "MAX_DEPARTURE_LIM": "uint256",
                    "ORACLIZE_GAS": "uint256",
                    "ORACLIZE_RATINGS_BASE_URL": "string",
                    "ORACLIZE_RATINGS_QUERY": "string",
                    "ORACLIZE_STATUS_BASE_URL": "string",
                    "ORACLIZE_STATUS_QUERY": "string"
                }
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "usingOraclize": {
        "function_list": [
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)",
            "matchBytes32Prefix(bytes32,bytes)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "matchBytes32Prefix(bytes32,bytes)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            }
        },
        "function_block_mapping": {
            "__callback(bytes32,string,bytes)": [
                200,
                97
            ],
            "__callback(bytes32,string)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "FlightDelayOraclizeInterface": {
        "function_list": [
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)",
            "matchBytes32Prefix(bytes32,bytes)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {}
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {}
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {}
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {}
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {}
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {}
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {}
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {}
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {}
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {}
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {}
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {}
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {}
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {}
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {}
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {}
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {}
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {}
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {}
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {}
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {}
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {}
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {}
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {}
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {}
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {}
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {}
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {}
            },
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {}
            },
            "matchBytes32Prefix(bytes32,bytes)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes"
                },
                "contract": {}
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {}
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {}
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {}
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {}
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "__callback(bytes32,string,bytes)": [
                200,
                97
            ],
            "__callback(bytes32,string)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "ConvertLib": {
        "function_list": [
            "b32toString(bytes32)",
            "b32toHexString(bytes32)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "toUnixtime(bytes32)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "b32toString(bytes32)": {
                "argument": {
                    "x": "bytes32"
                },
                "contract": {
                    "days_since": "uint16[12]"
                }
            },
            "b32toHexString(bytes32)": {
                "argument": {
                    "x": "bytes32"
                },
                "contract": {
                    "days_since": "uint16[12]"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "days_since": "uint16[12]"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "days_since": "uint16[12]"
                }
            },
            "toUnixtime(bytes32)": {
                "argument": {
                    "_dayMonthYear": "bytes32"
                },
                "contract": {
                    "days_since": "uint16[12]"
                }
            }
        },
        "function_block_mapping": {
            "b32toHexString(bytes32)": [
                81,
                75
            ],
            "toUnixtime(bytes32)": [
                251,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "strings": {
        "function_list": [
            "memcpy(uint256,uint256,uint256)",
            "toSlice(string)",
            "len(bytes32)",
            "toSliceB32(bytes32)",
            "copy(strings.slice)",
            "toString(strings.slice)",
            "len(strings.slice)",
            "empty(strings.slice)",
            "compare(strings.slice,strings.slice)",
            "equals(strings.slice,strings.slice)",
            "nextRune(strings.slice,strings.slice)",
            "nextRune(strings.slice)",
            "ord(strings.slice)",
            "keccak(strings.slice)",
            "startsWith(strings.slice,strings.slice)",
            "beyond(strings.slice,strings.slice)",
            "endsWith(strings.slice,strings.slice)",
            "until(strings.slice,strings.slice)",
            "findPtr(uint256,uint256,uint256,uint256)",
            "rfindPtr(uint256,uint256,uint256,uint256)",
            "find(strings.slice,strings.slice)",
            "rfind(strings.slice,strings.slice)",
            "split(strings.slice,strings.slice,strings.slice)",
            "split(strings.slice,strings.slice)",
            "rsplit(strings.slice,strings.slice,strings.slice)",
            "rsplit(strings.slice,strings.slice)",
            "count(strings.slice,strings.slice)",
            "contains(strings.slice,strings.slice)",
            "concat(strings.slice,strings.slice)",
            "join(strings.slice,strings.slice[])"
        ],
        "initial_state": {
            "memcpy(uint256,uint256,uint256)": {
                "argument": {
                    "dest": "uint256",
                    "src": "uint256",
                    "len": "uint256"
                },
                "contract": {}
            },
            "toSlice(string)": {
                "argument": {
                    "self": "string"
                },
                "contract": {}
            },
            "len(bytes32)": {
                "argument": {
                    "self": "bytes32"
                },
                "contract": {}
            },
            "toSliceB32(bytes32)": {
                "argument": {
                    "self": "bytes32"
                },
                "contract": {}
            },
            "copy(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "toString(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "len(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "empty(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "compare(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "other": "strings.slice"
                },
                "contract": {}
            },
            "equals(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "other": "strings.slice"
                },
                "contract": {}
            },
            "nextRune(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "rune": "strings.slice"
                },
                "contract": {}
            },
            "nextRune(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "ord(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "keccak(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "startsWith(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "beyond(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "endsWith(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "until(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "findPtr(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "selflen": "uint256",
                    "selfptr": "uint256",
                    "needlelen": "uint256",
                    "needleptr": "uint256"
                },
                "contract": {}
            },
            "rfindPtr(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "selflen": "uint256",
                    "selfptr": "uint256",
                    "needlelen": "uint256",
                    "needleptr": "uint256"
                },
                "contract": {}
            },
            "find(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "rfind(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "split(strings.slice,strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice",
                    "token": "strings.slice"
                },
                "contract": {}
            },
            "split(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "rsplit(strings.slice,strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice",
                    "token": "strings.slice"
                },
                "contract": {}
            },
            "rsplit(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "count(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "contains(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "concat(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "other": "strings.slice"
                },
                "contract": {}
            },
            "join(strings.slice,strings.slice[])": {
                "argument": {
                    "self": "strings.slice",
                    "parts": "strings.slice[]"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "FlightDelayPayout": {
        "function_list": [
            "b32toString(bytes32)",
            "b32toHexString(bytes32)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "toUnixtime(bytes32)",
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)",
            "matchBytes32Prefix(bytes32,bytes)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "setController(address)",
            "destruct()",
            "setContracts()",
            "getContract(bytes32)",
            "FlightDelayPayout(address)",
            "setContracts()",
            "fund()",
            "schedulePayoutOraclizeCall(uint256,bytes32,uint256)",
            "__callback(bytes32,string,bytes)",
            "payOut(uint256,uint8,uint256)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "b32toString(bytes32)": {
                "argument": {
                    "x": "bytes32"
                },
                "contract": {}
            },
            "b32toHexString(bytes32)": {
                "argument": {
                    "x": "bytes32"
                },
                "contract": {}
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {}
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {}
            },
            "toUnixtime(bytes32)": {
                "argument": {
                    "_dayMonthYear": "bytes32"
                },
                "contract": {}
            },
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {}
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {}
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {}
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {}
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {}
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {}
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {}
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {}
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {}
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {}
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {}
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {}
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {}
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {}
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {}
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {}
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {}
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {}
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {}
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {}
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {}
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {}
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {}
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {}
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {}
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {}
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {}
            },
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {}
            },
            "matchBytes32Prefix(bytes32,bytes)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes"
                },
                "contract": {}
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {}
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {}
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {}
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {}
            },
            "setController(address)": {
                "argument": {},
                "contract": {}
            },
            "destruct()": {
                "argument": {},
                "contract": {}
            },
            "setContracts()": {
                "argument": {},
                "contract": {}
            },
            "getContract(bytes32)": {
                "argument": {
                    "_id": "bytes32"
                },
                "contract": {}
            },
            "FlightDelayPayout(address)": {
                "argument": {},
                "contract": {}
            },
            "fund()": {
                "argument": {},
                "contract": {}
            },
            "schedulePayoutOraclizeCall(uint256,bytes32,uint256)": {
                "argument": {
                    "_policyId": "uint256",
                    "_riskId": "bytes32",
                    "_oraclizeTime": "uint256"
                },
                "contract": {}
            },
            "payOut(uint256,uint8,uint256)": {
                "argument": {
                    "_policyId": "uint256",
                    "_delay": "uint8",
                    "_delayInMinutes": "uint256"
                },
                "contract": {}
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "b32toHexString(bytes32)": [
                558,
                163
            ],
            "setContracts()": [
                807,
                229
            ],
            "schedulePayoutOraclizeCall(uint256,bytes32,uint256)": [
                489,
                141
            ],
            "fund()": [
                728,
                185
            ],
            "destruct()": [
                277,
                97
            ],
            "__callback(bytes32,string,bytes)": [
                300,
                119
            ],
            "toUnixtime(bytes32)": [
                738,
                207
            ],
            "__callback(bytes32,string)": [
                158,
                75
            ]
        },
        "block_CALL_mapping": {
            "jump11329_8": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "jump11329_9": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "jump1472_0": [
                "FD_DB.getOraclizeCallback(_queryId)",
                "FD_DB.getOraclizeCallback(_queryId)"
            ],
            "jump11503": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "jump11329_0": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "jump11329_1": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "jump11329_2": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "jump11329_3": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "jump11329_4": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "jump11329_5": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "jump11329_6": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "jump13730": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block12382_2": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block12382_3": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block12382_0": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block12382_1": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block11077_12": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block12382_7": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump12813": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block11077_11": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "jump12813_11": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump12813_10": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block12382_8": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block12382_9": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump11077_8": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block12382_10": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block12382_11": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block12382_12": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block1979": [
                "FD_DB.getPolicyState(policyId)"
            ],
            "block6109_2": [
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )"
            ],
            "jump6109_1": [
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )",
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )"
            ],
            "jump5435_0": [
                "FD_DB.getRiskParameters(_riskId)",
                "FD_DB.getRiskParameters(_riskId)"
            ],
            "block5435": [
                "FD_DB.getRiskParameters(_riskId)"
            ],
            "block12101_5": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "jump11857": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump11503_2": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block9713_3": [
                "FD_CI.getContract(_id)"
            ],
            "jump11503_3": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "jump2476": [
                "FD_DB.checkTime(_queryId, riskId, 180 minutes)",
                "FD_DB.checkTime(_queryId, riskId, 180 minutes)"
            ],
            "block12568_11": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block11857_10": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump11503_0": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block11857_12": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block11503": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block5435_2": [
                "FD_DB.getRiskParameters(_riskId)"
            ],
            "block5212_2": [
                "FD_AC.checkPermission(101, msg.sender)"
            ],
            "jump12101_5": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block5435_3": [
                "FD_DB.getRiskParameters(_riskId)"
            ],
            "block2476_0": [
                "FD_DB.checkTime(_queryId, riskId, 180 minutes)"
            ],
            "jump14107_3": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block5435_0": [
                "FD_DB.getRiskParameters(_riskId)"
            ],
            "jump9069": [
                "FD_AC.setPermissionById(101, \"FD.Underwrite\")",
                "FD_AC.setPermissionById(101, \"FD.Underwrite\")"
            ],
            "jump11077_3": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "jump11077_0": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "jump11077_1": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "jump11077_6": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "jump11077_7": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "jump11077_4": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "jump11077_5": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block9713_1": [
                "FD_CI.getContract(_id)"
            ],
            "block12568_8": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block5212": [
                "FD_AC.checkPermission(101, msg.sender)"
            ],
            "jump11077_9": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block12568_12": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block11503_6": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block12568_10": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block12101_12": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block11857_6": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block11857_7": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block11857_4": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block11503_7": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block11857_2": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block11857_3": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block11857_0": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block11857_1": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block9282": [
                "FD_AC.setPermissionById(101, \"FD.Payout\")"
            ],
            "block9713_2": [
                "FD_CI.getContract(_id)"
            ],
            "block11503_12": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block12813_11": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block11503_10": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block11503_11": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block12813_10": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump11857_8": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump11857_9": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block12568_5": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump11077": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "jump11857_5": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block1472": [
                "FD_DB.getOraclizeCallback(_queryId)"
            ],
            "block11503_3": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "jump11857_0": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump11857_1": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump11857_2": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump11857_3": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block11077_10": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "jump6109": [
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )",
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )"
            ],
            "jump5435": [
                "FD_DB.getRiskParameters(_riskId)",
                "FD_DB.getRiskParameters(_riskId)"
            ],
            "jump14107_1": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block12382_5": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump14107_0": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump1472": [
                "FD_DB.getOraclizeCallback(_queryId)",
                "FD_DB.getOraclizeCallback(_queryId)"
            ],
            "block12101_2": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block12101_1": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block12101_0": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block12101_7": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block11857_8": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump2215": [
                "FD_DB.getRiskId(policyId)",
                "FD_DB.getRiskId(policyId)"
            ],
            "block12101_4": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block14107": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block12101_9": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block11857_9": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump12382_12": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump13730_1": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump12382_10": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump12382_11": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump12568_6": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump12568_7": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump12568_4": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block4052": [
                "FD_DB.checkTime(_queryId, riskId, 180 minutes)"
            ],
            "jump12568_2": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump9495": [
                "FD_AC.setPermissionById(102, \"FD.Funder\")",
                "FD_AC.setPermissionById(102, \"FD.Funder\")"
            ],
            "jump12568_0": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump12568_1": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump5212_3": [
                "FD_AC.checkPermission(101, msg.sender)",
                "FD_AC.checkPermission(101, msg.sender)"
            ],
            "jump5212_2": [
                "FD_AC.checkPermission(101, msg.sender)",
                "FD_AC.checkPermission(101, msg.sender)"
            ],
            "jump5212_1": [
                "FD_AC.checkPermission(101, msg.sender)",
                "FD_AC.checkPermission(101, msg.sender)"
            ],
            "jump5212_0": [
                "FD_AC.checkPermission(101, msg.sender)",
                "FD_AC.checkPermission(101, msg.sender)"
            ],
            "block4052_0": [
                "FD_DB.checkTime(_queryId, riskId, 180 minutes)"
            ],
            "jump12568_8": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump12568_9": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block11857_5": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block11503_8": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block11503_9": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "jump11329_12": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block11503_5": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "jump11329_10": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "jump11329_11": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block11503_0": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block11503_1": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block11503_2": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block2476": [
                "FD_DB.checkTime(_queryId, riskId, 180 minutes)"
            ],
            "jump14571": [
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)",
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)"
            ],
            "block11503_4": [
                "FD_DB.getPolicyData(_policyId)"
            ],
            "jump4052_0": [
                "FD_DB.checkTime(_queryId, riskId, 180 minutes)",
                "FD_DB.checkTime(_queryId, riskId, 180 minutes)"
            ],
            "block9495": [
                "FD_AC.setPermissionById(102, \"FD.Funder\")"
            ],
            "block9713": [
                "FD_CI.getContract(_id)"
            ],
            "jump11857_4": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump11329": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block13730_2": [
                "OAR.getAddress()"
            ],
            "jump10301": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "block13730_0": [
                "OAR.getAddress()"
            ],
            "block13730_1": [
                "OAR.getAddress()"
            ],
            "jump12101_6": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block9069": [
                "FD_AC.setPermissionById(101, \"FD.Underwrite\")"
            ],
            "jump11857_12": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump11857_6": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump11857_10": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump11857_11": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump1979_0": [
                "FD_DB.getPolicyState(policyId)",
                "FD_DB.getPolicyState(policyId)"
            ],
            "jump11857_7": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block12382_6": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block5212_3": [
                "FD_AC.checkPermission(101, msg.sender)"
            ],
            "block10044_0": [
                "OAR.getAddress()"
            ],
            "jump5435_2": [
                "FD_DB.getRiskParameters(_riskId)",
                "FD_DB.getRiskParameters(_riskId)"
            ],
            "jump9713": [
                "FD_CI.getContract(_id)",
                "FD_CI.getContract(_id)"
            ],
            "jump2215_0": [
                "FD_DB.getRiskId(policyId)",
                "FD_DB.getRiskId(policyId)"
            ],
            "block1979_0": [
                "FD_DB.getPolicyState(policyId)"
            ],
            "jump12101": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "jump12382_5": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump10044_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump10044": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block14571_2": [
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)"
            ],
            "block13730_3": [
                "OAR.getAddress()"
            ],
            "jump14107_2": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump11503_8": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "jump11503_9": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block11329_10": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block11329_11": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block11329_12": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "jump11503_1": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "jump11503_6": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "jump11503_7": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "jump11503_4": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "jump11503_5": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block12568_3": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump12101_9": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "jump12101_8": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block5435_1": [
                "FD_DB.getRiskParameters(_riskId)"
            ],
            "block6934": [
                "FD_AC.checkPermission(102, msg.sender)"
            ],
            "jump12101_4": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "jump12101_7": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block10301_0": [
                "oraclize.cbAddress()"
            ],
            "jump12101_1": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "jump12101_0": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "jump12101_3": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "jump12101_2": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block14571_0": [
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)"
            ],
            "block11329_8": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block11329_9": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block11077": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block11329_2": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block11329_3": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block11329_0": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block11329_1": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block11329_6": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block11329_7": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block11329_4": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block11329_5": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "block12813_7": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block12813_6": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block12813_5": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block12813_4": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump11077_10": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "jump11077_11": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "jump11077_12": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block12813_0": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump12101_11": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "jump12101_10": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "jump12568_12": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump12101_12": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)",
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block2215": [
                "FD_DB.getRiskId(policyId)"
            ],
            "block12382": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump11503_12": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block12813_2": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block12813_8": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block6109_3": [
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )"
            ],
            "block14107_3": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block12813_1": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump14107": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block14107_0": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump12568": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block5212_0": [
                "FD_AC.checkPermission(101, msg.sender)"
            ],
            "jump12568_10": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump9713_0": [
                "FD_CI.getContract(_id)",
                "FD_CI.getContract(_id)"
            ],
            "jump12568_11": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block12382_4": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block12101_3": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block6109": [
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )"
            ],
            "jump10301_0": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "block12101_11": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block12101_10": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block12568_4": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump11503_10": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "block12568_6": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block12568_7": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block12568_0": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block12568_1": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block12568_2": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump11503_11": [
                "FD_DB.getPolicyData(_policyId)",
                "FD_DB.getPolicyData(_policyId)"
            ],
            "jump12813_9": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump12813_8": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump12813_5": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump12813_4": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump12813_7": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump12813_6": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump12813_1": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump12813_0": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump12813_3": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block12101_6": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block11329": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "jump6109_0": [
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )",
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )"
            ],
            "block9713_0": [
                "FD_CI.getContract(_id)"
            ],
            "jump11329_7": [
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )",
                "FD_DB.setState(\n                _policyId,\n                policyState.Expired,\n                now,\n                \"Expired - no delay!\"\n            )"
            ],
            "jump5435_1": [
                "FD_DB.getRiskParameters(_riskId)",
                "FD_DB.getRiskParameters(_riskId)"
            ],
            "jump14571_3": [
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)",
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)"
            ],
            "jump12813_12": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block13730": [
                "OAR.getAddress()"
            ],
            "block14571_1": [
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)"
            ],
            "jump12813_2": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block5212_1": [
                "FD_AC.checkPermission(101, msg.sender)"
            ],
            "jump14571_1": [
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)",
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)"
            ],
            "jump4052": [
                "FD_DB.checkTime(_queryId, riskId, 180 minutes)",
                "FD_DB.checkTime(_queryId, riskId, 180 minutes)"
            ],
            "block14571": [
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)"
            ],
            "block11857": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "block12101_8": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "block12813_12": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block14107_1": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump6109_3": [
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )",
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )"
            ],
            "jump6109_2": [
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )",
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )"
            ],
            "jump13730_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block12813_3": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block14107_2": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump6934": [
                "FD_AC.checkPermission(102, msg.sender)",
                "FD_AC.checkPermission(102, msg.sender)"
            ],
            "block12568": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block10301": [
                "oraclize.cbAddress()"
            ],
            "jump13730_3": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block6109_1": [
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )"
            ],
            "block6109_0": [
                "FD_DB.createOraclizeCallback(\n            queryId,\n            _policyId,\n            oraclizeState.ForPayout,\n            _oraclizeTime\n        )"
            ],
            "jump12382_8": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump12382_9": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block1472_0": [
                "FD_DB.getOraclizeCallback(_queryId)"
            ],
            "jump12382_4": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block12101": [
                "FD_LG.sendFunds(customer, Acc.Payout, payout)"
            ],
            "jump12382_6": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump12382_7": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump12382_0": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump12382_1": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump12382_2": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "jump12382_3": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block10044": [
                "OAR.getAddress()"
            ],
            "jump1979": [
                "FD_DB.getPolicyState(policyId)",
                "FD_DB.getPolicyState(policyId)"
            ],
            "jump2476_0": [
                "FD_DB.checkTime(_queryId, riskId, 180 minutes)",
                "FD_DB.checkTime(_queryId, riskId, 180 minutes)"
            ],
            "block12813": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "block2215_0": [
                "FD_DB.getRiskId(policyId)"
            ],
            "block12813_9": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.PaidOut,\n                    now,\n                    \"Payout successful!\"\n                )"
            ],
            "jump12568_5": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump13730_2": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump9282": [
                "FD_AC.setPermissionById(101, \"FD.Payout\")",
                "FD_AC.setPermissionById(101, \"FD.Payout\")"
            ],
            "jump5435_3": [
                "FD_DB.getRiskParameters(_riskId)",
                "FD_DB.getRiskParameters(_riskId)"
            ],
            "jump9713_3": [
                "FD_CI.getContract(_id)",
                "FD_CI.getContract(_id)"
            ],
            "jump9713_2": [
                "FD_CI.getContract(_id)",
                "FD_CI.getContract(_id)"
            ],
            "jump9713_1": [
                "FD_CI.getContract(_id)",
                "FD_CI.getContract(_id)"
            ],
            "jump12568_3": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)",
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "jump11077_2": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)",
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "jump5212": [
                "FD_AC.checkPermission(101, msg.sender)",
                "FD_AC.checkPermission(101, msg.sender)"
            ],
            "block12568_9": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, 0)"
            ],
            "block14571_3": [
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)"
            ],
            "jump14571_2": [
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)",
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)"
            ],
            "block11857_11": [
                "FD_DB.setPayouts(_policyId, calculatedPayout, payout)"
            ],
            "jump14571_0": [
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)",
                "oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit)"
            ],
            "jump12382": [
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )",
                "FD_DB.setState(\n                    _policyId,\n                    policyState.SendFailed,\n                    now,\n                    \"Payout, send failed!\"\n                )"
            ],
            "block11077_4": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block11077_5": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block11077_6": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block11077_7": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block11077_0": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block11077_1": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block11077_2": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block11077_3": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block11077_8": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ],
            "block11077_9": [
                "FD_DB.setDelay(_policyId, _delay, _delayInMinutes)"
            ]
        }
    }
}