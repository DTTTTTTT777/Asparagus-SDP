{
    "ArithLib": {
        "function_list": [
            "jdouble(uint256,uint256,uint256)",
            "jadd(uint256,uint256,uint256,uint256,uint256,uint256)",
            "jsub(uint256,uint256,uint256,uint256,uint256,uint256)",
            "jmul(uint256,uint256,uint256,uint256)",
            "jexp(uint256,uint256,uint256)",
            "jrecover_y(uint256,uint256)",
            "jdecompose(uint256,uint256,uint256)",
            "isbit(uint256,uint256)",
            "hash_pubkey_to_pubkey(uint256,uint256)"
        ],
        "initial_state": {
            "jdouble(uint256,uint256,uint256)": {
                "argument": {
                    "_ax": "uint256",
                    "_ay": "uint256",
                    "_az": "uint256"
                },
                "contract": {}
            },
            "jadd(uint256,uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_ax": "uint256",
                    "_ay": "uint256",
                    "_az": "uint256",
                    "_bx": "uint256",
                    "_by": "uint256",
                    "_bz": "uint256"
                },
                "contract": {}
            },
            "jsub(uint256,uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_ax": "uint256",
                    "_ay": "uint256",
                    "_az": "uint256",
                    "_bx": "uint256",
                    "_by": "uint256",
                    "_bz": "uint256"
                },
                "contract": {}
            },
            "jmul(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_bx": "uint256",
                    "_by": "uint256",
                    "_bz": "uint256",
                    "_n": "uint256"
                },
                "contract": {}
            },
            "jexp(uint256,uint256,uint256)": {
                "argument": {
                    "_b": "uint256",
                    "_e": "uint256",
                    "_m": "uint256"
                },
                "contract": {}
            },
            "jrecover_y(uint256,uint256)": {
                "argument": {
                    "_x": "uint256",
                    "_y_bit": "uint256"
                },
                "contract": {}
            },
            "jdecompose(uint256,uint256,uint256)": {
                "argument": {
                    "_q0": "uint256",
                    "_q1": "uint256",
                    "_q2": "uint256"
                },
                "contract": {}
            },
            "isbit(uint256,uint256)": {
                "argument": {
                    "_data": "uint256",
                    "_bit": "uint256"
                },
                "contract": {}
            },
            "hash_pubkey_to_pubkey(uint256,uint256)": {
                "argument": {
                    "_pub1": "uint256",
                    "_pub2": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "jmul(uint256,uint256,uint256,uint256)": [
                797,
                229
            ],
            "jdecompose(uint256,uint256,uint256)": [
                446,
                141
            ],
            "hash_pubkey_to_pubkey(uint256,uint256)": [
                289,
                97
            ],
            "jdouble(uint256,uint256,uint256)": [
                538,
                163
            ],
            "jexp(uint256,uint256,uint256)": [
                712,
                207
            ],
            "jrecover_y(uint256,uint256)": [
                371,
                119
            ],
            "isbit(uint256,uint256)": [
                637,
                185
            ],
            "jadd(uint256,uint256,uint256,uint256,uint256,uint256)": [
                160,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "Laundromat": {
        "function_list": [
            "Laundromat(uint256,uint256)",
            "safeSend(address,uint256)",
            "deposit(uint256,uint256)",
            "withdrawStart(uint256[],uint256,uint256,uint256)",
            "withdrawStep()",
            "withdrawFinal()",
            "fallback()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Laundromat(uint256,uint256)": {
                "argument": {
                    "_participants": "uint256",
                    "_payment": "uint256"
                },
                "contract": {
                    "safeGas": "uint256",
                    "P": "uint256",
                    "Gx": "uint256",
                    "Gy": "uint256",
                    "participants": "uint256",
                    "payment": "uint256",
                    "gotParticipants": "uint256",
                    "pubkeys1": "uint256[]",
                    "pubkeys2": "uint256[]"
                }
            },
            "safeSend(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "safeGas": "uint256",
                    "P": "uint256",
                    "Gx": "uint256",
                    "Gy": "uint256",
                    "participants": "uint256",
                    "payment": "uint256",
                    "gotParticipants": "uint256",
                    "pubkeys1": "uint256[]",
                    "pubkeys2": "uint256[]"
                }
            },
            "deposit(uint256,uint256)": {
                "argument": {
                    "_pubkey1": "uint256",
                    "_pubkey2": "uint256"
                },
                "contract": {
                    "safeGas": "uint256",
                    "P": "uint256",
                    "Gx": "uint256",
                    "Gy": "uint256",
                    "participants": "uint256",
                    "payment": "uint256",
                    "gotParticipants": "uint256",
                    "pubkeys1": "uint256[]",
                    "pubkeys2": "uint256[]"
                }
            },
            "withdrawStart(uint256[],uint256,uint256,uint256)": {
                "argument": {
                    "_signature": "uint256[]",
                    "_x0": "uint256",
                    "_Ix": "uint256",
                    "_Iy": "uint256"
                },
                "contract": {
                    "safeGas": "uint256",
                    "P": "uint256",
                    "Gx": "uint256",
                    "Gy": "uint256",
                    "participants": "uint256",
                    "payment": "uint256",
                    "gotParticipants": "uint256",
                    "pubkeys1": "uint256[]",
                    "pubkeys2": "uint256[]"
                }
            },
            "withdrawStep()": {
                "argument": {},
                "contract": {
                    "safeGas": "uint256",
                    "P": "uint256",
                    "Gx": "uint256",
                    "Gy": "uint256",
                    "participants": "uint256",
                    "payment": "uint256",
                    "gotParticipants": "uint256",
                    "pubkeys1": "uint256[]",
                    "pubkeys2": "uint256[]"
                }
            },
            "withdrawFinal()": {
                "argument": {},
                "contract": {
                    "safeGas": "uint256",
                    "P": "uint256",
                    "Gx": "uint256",
                    "Gy": "uint256",
                    "participants": "uint256",
                    "payment": "uint256",
                    "gotParticipants": "uint256",
                    "pubkeys1": "uint256[]",
                    "pubkeys2": "uint256[]"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "safeGas": "uint256",
                    "P": "uint256",
                    "Gx": "uint256",
                    "Gy": "uint256",
                    "participants": "uint256",
                    "payment": "uint256",
                    "gotParticipants": "uint256",
                    "pubkeys1": "uint256[]",
                    "pubkeys2": "uint256[]"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "safeGas": "uint256",
                    "P": "uint256",
                    "Gx": "uint256",
                    "Gy": "uint256",
                    "participants": "uint256",
                    "payment": "uint256",
                    "gotParticipants": "uint256",
                    "pubkeys1": "uint256[]",
                    "pubkeys2": "uint256[]"
                }
            }
        },
        "function_block_mapping": {
            "deposit(uint256,uint256)": [
                632,
                251
            ],
            "withdrawStep()": [
                562,
                207
            ],
            "withdrawStart(uint256[],uint256,uint256,uint256)": [
                214,
                97
            ],
            "withdrawFinal()": [
                585,
                229
            ]
        },
        "block_CALL_mapping": {
            "block2139": [
                "arithContract.jmul(\n            pubkeys1[withdraw.step % participants],\n            pubkeys2[withdraw.step % participants], 1,\n            withdraw.ring2[withdraw.prevStep % participants])"
            ],
            "jump3583": [
                "arithContract.jmul(withdraw.Ix, withdraw.Iy, 1,\n            withdraw.ring2[withdraw.prevStep % participants])",
                "arithContract.jmul(withdraw.Ix, withdraw.Iy, 1,\n            withdraw.ring2[withdraw.prevStep % participants])"
            ],
            "block5610": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block2979": [
                "arithContract.hash_pubkey_to_pubkey(\n            pubkeys1[withdraw.step % participants],\n            pubkeys2[withdraw.step % participants])"
            ],
            "jump3270": [
                "arithContract.jmul(k1x, k1y, 1,\n            withdraw.signature[withdraw.prevStep % participants])",
                "arithContract.jmul(k1x, k1y, 1,\n            withdraw.signature[withdraw.prevStep % participants])"
            ],
            "jump4110": [
                "arithContract.jdecompose(k1x, k1y, k1z)",
                "arithContract.jdecompose(k1x, k1y, k1z)"
            ],
            "block1750": [
                "arithContract.jmul(Gx, Gy, 1,\n            withdraw.signature[withdraw.prevStep % participants])"
            ],
            "block4110": [
                "arithContract.jdecompose(k1x, k1y, k1z)"
            ],
            "jump1750": [
                "arithContract.jmul(Gx, Gy, 1,\n            withdraw.signature[withdraw.prevStep % participants])",
                "arithContract.jmul(Gx, Gy, 1,\n            withdraw.signature[withdraw.prevStep % participants])"
            ],
            "block2415": [
                "arithContract.jsub(k1x, k1y, k1z, k2x, k2y, k2z)"
            ],
            "jump3859": [
                "arithContract.jsub(k1x, k1y, k1z, k2x, k2y, k2z)",
                "arithContract.jsub(k1x, k1y, k1z, k2x, k2y, k2z)"
            ],
            "block3270": [
                "arithContract.jmul(k1x, k1y, 1,\n            withdraw.signature[withdraw.prevStep % participants])"
            ],
            "jump2139": [
                "arithContract.jmul(\n            pubkeys1[withdraw.step % participants],\n            pubkeys2[withdraw.step % participants], 1,\n            withdraw.ring2[withdraw.prevStep % participants])",
                "arithContract.jmul(\n            pubkeys1[withdraw.step % participants],\n            pubkeys2[withdraw.step % participants], 1,\n            withdraw.ring2[withdraw.prevStep % participants])"
            ],
            "jump2666": [
                "arithContract.jdecompose(k1x, k1y, k1z)",
                "arithContract.jdecompose(k1x, k1y, k1z)"
            ],
            "block3583": [
                "arithContract.jmul(withdraw.Ix, withdraw.Iy, 1,\n            withdraw.ring2[withdraw.prevStep % participants])"
            ],
            "jump5610": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump2979": [
                "arithContract.hash_pubkey_to_pubkey(\n            pubkeys1[withdraw.step % participants],\n            pubkeys2[withdraw.step % participants])",
                "arithContract.hash_pubkey_to_pubkey(\n            pubkeys1[withdraw.step % participants],\n            pubkeys2[withdraw.step % participants])"
            ],
            "jump2415": [
                "arithContract.jsub(k1x, k1y, k1z, k2x, k2y, k2z)",
                "arithContract.jsub(k1x, k1y, k1z, k2x, k2y, k2z)"
            ],
            "block3859": [
                "arithContract.jsub(k1x, k1y, k1z, k2x, k2y, k2z)"
            ],
            "block2666": [
                "arithContract.jdecompose(k1x, k1y, k1z)"
            ]
        }
    }
}