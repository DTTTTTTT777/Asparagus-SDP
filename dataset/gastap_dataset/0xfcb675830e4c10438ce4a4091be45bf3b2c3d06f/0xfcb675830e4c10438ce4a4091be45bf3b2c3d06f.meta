{
    "DSSafeAddSub": {
        "function_list": [
            "safeToAdd(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "safeToSubtract(uint256,uint256)",
            "safeSub(uint256,uint256)"
        ],
        "initial_state": {
            "safeToAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeToSubtract(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "MyDice": {
        "function_list": [
            "safeToAdd(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "safeToSubtract(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "MyDice()",
            "GetRandomNumber(uint32)",
            "StartRollDice(uint32)",
            "playerRollDice()",
            "playerWithdrawPendingTransactions()",
            "playerGetPendingTxByAddress(address)",
            "setMaxProfit()",
            "fallback()",
            "ownerAddBankroll()",
            "getcontractBalance()",
            "ownerSetHouseEdge(uint256)",
            "getHouseEdge()",
            "ownerSetMaxProfitAsPercentOfHouse(uint256)",
            "getMaxProfitAsPercentOfHouse()",
            "ownerSetMinBet(uint256)",
            "getMinBet()",
            "ownerTransferEther(address,uint256)",
            "ownerPauseGame(bool)",
            "ownerPausePayouts(bool)",
            "ownerChangeOwner(address)",
            "ownerkill()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "safeToAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            },
            "safeToSubtract(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            },
            "MyDice()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            },
            "GetRandomNumber(uint32)": {
                "argument": {
                    "seed": "uint32"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            },
            "StartRollDice(uint32)": {
                "argument": {
                    "seed": "uint32"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            },
            "playerRollDice()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            },
            "playerWithdrawPendingTransactions()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            },
            "playerGetPendingTxByAddress(address)": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            },
            "setMaxProfit()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            },
            "ownerAddBankroll()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            },
            "getcontractBalance()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            },
            "ownerSetHouseEdge(uint256)": {
                "argument": {
                    "newHouseEdge": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            },
            "getHouseEdge()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            },
            "ownerSetMaxProfitAsPercentOfHouse(uint256)": {
                "argument": {
                    "newMaxProfitAsPercent": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            },
            "getMaxProfitAsPercentOfHouse()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            },
            "ownerSetMinBet(uint256)": {
                "argument": {
                    "newMinimumBet": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            },
            "getMinBet()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            },
            "ownerTransferEther(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            },
            "ownerPauseGame(bool)": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            },
            "ownerPausePayouts(bool)": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            },
            "ownerChangeOwner(address)": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            },
            "ownerkill()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "maxBetDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "totalBets": "uint256",
                    "totalUserProfit": "uint256",
                    "randomNumber": "uint256",
                    "maxNumber": "uint256",
                    "underNumber": "uint256",
                    "numElements": "uint256",
                    "pendingBets": "MyDice.Bet[]"
                }
            }
        },
        "function_block_mapping": {
            "ownerTransferEther(address,uint256)": [
                1143,
                427
            ],
            "ownerSetHouseEdge(uint256)": [
                617,
                185
            ],
            "ownerkill()": [
                1659,
                647
            ],
            "getcontractBalance()": [
                1350,
                493
            ],
            "playerGetPendingTxByAddress(address)": [
                762,
                273
            ],
            "getMinBet()": [
                574,
                163
            ],
            "getHouseEdge()": [
                896,
                317
            ],
            "ownerAddBankroll()": [
                709,
                229
            ],
            "ownerPausePayouts(bool)": [
                849,
                295
            ],
            "StartRollDice(uint32)": [
                394,
                75
            ],
            "ownerChangeOwner(address)": [
                939,
                339
            ],
            "playerRollDice()": [
                1725,
                691
            ],
            "ownerSetMaxProfitAsPercentOfHouse(uint256)": [
                1006,
                361
            ],
            "ownerPauseGame(bool)": [
                1096,
                405
            ],
            "getMaxProfitAsPercentOfHouse()": [
                488,
                119
            ],
            "ownerSetMinBet(uint256)": [
                1051,
                383
            ],
            "playerWithdrawPendingTransactions()": [
                1436,
                537
            ]
        },
        "block_CALL_mapping": {
            "jump5715": [
                "sendTo.send(amount)",
                "sendTo.send(amount)"
            ],
            "jump2914": [
                "pendingBets[i].bettorAddress.send(reward)",
                "pendingBets[i].bettorAddress.send(reward)"
            ],
            "jump3922": [
                "pendingBets[i].bettorAddress.send(1)",
                "pendingBets[i].bettorAddress.send(1)"
            ],
            "block3922": [
                "pendingBets[i].bettorAddress.send(1)"
            ],
            "block6039": [
                "msg.sender.call.value(withdrawAmount)()"
            ],
            "jump6039": [
                "msg.sender.call.value(withdrawAmount)()",
                "msg.sender.call.value(withdrawAmount)()"
            ],
            "block5715": [
                "sendTo.send(amount)"
            ],
            "block2914": [
                "pendingBets[i].bettorAddress.send(reward)"
            ]
        }
    }
}