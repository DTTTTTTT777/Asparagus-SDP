{
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)",
            "assert(bool)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "assert(bool)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "PreICO": {
        "function_list": [
            "balanceOf(address)",
            "burnTokens(address)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "burnTokens(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {
            "block4362": [
                "recipient.send(amount)"
            ],
            "jump4362": [
                "recipient.send(amount)",
                "recipient.send(amount)"
            ]
        }
    },
    "ERC20Basic": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "balanceOf(address)": [
                124,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                401,
                97
            ],
            "transfer(address,uint256)": [
                1385,
                361
            ],
            "allowance(address,address)": [
                1704,
                427
            ],
            "balanceOf(address)": [
                1044,
                273
            ],
            "transferFrom(address,address,uint256)": [
                588,
                163
            ]
        },
        "block_CALL_mapping": {
            "block3721": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "jump3721": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "BasicToken": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transfer(address,uint256)": [
                222,
                119
            ],
            "balanceOf(address)": [
                135,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "StandardToken": {
        "function_list": [
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                354,
                141
            ],
            "allowance(address,address)": [
                518,
                185
            ],
            "transferFrom(address,address,uint256)": [
                245,
                119
            ],
            "transfer(address,uint256)": [
                441,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "ATL": {
        "function_list": [
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)",
            "ATL(address)",
            "mint(address,uint256)",
            "unfreeze()",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOKEN_LIMIT": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOKEN_LIMIT": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOKEN_LIMIT": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOKEN_LIMIT": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOKEN_LIMIT": "uint256"
                }
            },
            "ATL(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOKEN_LIMIT": "uint256"
                }
            },
            "mint(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOKEN_LIMIT": "uint256"
                }
            },
            "unfreeze()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOKEN_LIMIT": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOKEN_LIMIT": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                346,
                97
            ],
            "mint(address,uint256)": [
                618,
                185
            ],
            "balanceOf(address)": [
                805,
                251
            ],
            "unfreeze()": [
                782,
                229
            ],
            "transferFrom(address,address,uint256)": [
                466,
                141
            ],
            "allowance(address,address)": [
                1160,
                339
            ],
            "transfer(address,uint256)": [
                1036,
                295
            ]
        },
        "block_CALL_mapping": {}
    },
    "ICO": {
        "function_list": [
            "ICO(address,address,address)",
            "fallback()",
            "buyFor(address)",
            "getBonus(uint256,uint256)",
            "foreignBuy(address,uint256,string)",
            "setRobot(address)",
            "migrateSome(address[])",
            "startIco()",
            "pauseIco()",
            "finishIco(address,address)",
            "withdrawEther(uint256)",
            "withdrawToken(address,uint256)",
            "min(uint256,uint256)",
            "buy(address,uint256)",
            "doMigration(address)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "ICO(address,address,address)": {
                "argument": {},
                "contract": {
                    "MIN_TOKEN_PRICE": "uint256",
                    "TOKENS_FOR_SALE": "uint256",
                    "ATL_PER_ATP": "uint256",
                    "tokensSold": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "MIN_TOKEN_PRICE": "uint256",
                    "TOKENS_FOR_SALE": "uint256",
                    "ATL_PER_ATP": "uint256",
                    "tokensSold": "uint256"
                }
            },
            "buyFor(address)": {
                "argument": {},
                "contract": {
                    "MIN_TOKEN_PRICE": "uint256",
                    "TOKENS_FOR_SALE": "uint256",
                    "ATL_PER_ATP": "uint256",
                    "tokensSold": "uint256"
                }
            },
            "getBonus(uint256,uint256)": {
                "argument": {
                    "_value": "uint256",
                    "_sold": "uint256"
                },
                "contract": {
                    "MIN_TOKEN_PRICE": "uint256",
                    "TOKENS_FOR_SALE": "uint256",
                    "ATL_PER_ATP": "uint256",
                    "tokensSold": "uint256"
                }
            },
            "foreignBuy(address,uint256,string)": {
                "argument": {
                    "_atlValue": "uint256",
                    "_txHash": "string"
                },
                "contract": {
                    "MIN_TOKEN_PRICE": "uint256",
                    "TOKENS_FOR_SALE": "uint256",
                    "ATL_PER_ATP": "uint256",
                    "tokensSold": "uint256"
                }
            },
            "setRobot(address)": {
                "argument": {},
                "contract": {
                    "MIN_TOKEN_PRICE": "uint256",
                    "TOKENS_FOR_SALE": "uint256",
                    "ATL_PER_ATP": "uint256",
                    "tokensSold": "uint256"
                }
            },
            "migrateSome(address[])": {
                "argument": {
                    "_investors": "address[]"
                },
                "contract": {
                    "MIN_TOKEN_PRICE": "uint256",
                    "TOKENS_FOR_SALE": "uint256",
                    "ATL_PER_ATP": "uint256",
                    "tokensSold": "uint256"
                }
            },
            "startIco()": {
                "argument": {},
                "contract": {
                    "MIN_TOKEN_PRICE": "uint256",
                    "TOKENS_FOR_SALE": "uint256",
                    "ATL_PER_ATP": "uint256",
                    "tokensSold": "uint256"
                }
            },
            "pauseIco()": {
                "argument": {},
                "contract": {
                    "MIN_TOKEN_PRICE": "uint256",
                    "TOKENS_FOR_SALE": "uint256",
                    "ATL_PER_ATP": "uint256",
                    "tokensSold": "uint256"
                }
            },
            "finishIco(address,address)": {
                "argument": {},
                "contract": {
                    "MIN_TOKEN_PRICE": "uint256",
                    "TOKENS_FOR_SALE": "uint256",
                    "ATL_PER_ATP": "uint256",
                    "tokensSold": "uint256"
                }
            },
            "withdrawEther(uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "MIN_TOKEN_PRICE": "uint256",
                    "TOKENS_FOR_SALE": "uint256",
                    "ATL_PER_ATP": "uint256",
                    "tokensSold": "uint256"
                }
            },
            "withdrawToken(address,uint256)": {
                "argument": {
                    "_val": "uint256"
                },
                "contract": {
                    "MIN_TOKEN_PRICE": "uint256",
                    "TOKENS_FOR_SALE": "uint256",
                    "ATL_PER_ATP": "uint256",
                    "tokensSold": "uint256"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "MIN_TOKEN_PRICE": "uint256",
                    "TOKENS_FOR_SALE": "uint256",
                    "ATL_PER_ATP": "uint256",
                    "tokensSold": "uint256"
                }
            },
            "buy(address,uint256)": {
                "argument": {
                    "_atlValue": "uint256"
                },
                "contract": {
                    "MIN_TOKEN_PRICE": "uint256",
                    "TOKENS_FOR_SALE": "uint256",
                    "ATL_PER_ATP": "uint256",
                    "tokensSold": "uint256"
                }
            },
            "doMigration(address)": {
                "argument": {},
                "contract": {
                    "MIN_TOKEN_PRICE": "uint256",
                    "TOKENS_FOR_SALE": "uint256",
                    "ATL_PER_ATP": "uint256",
                    "tokensSold": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "MIN_TOKEN_PRICE": "uint256",
                    "TOKENS_FOR_SALE": "uint256",
                    "ATL_PER_ATP": "uint256",
                    "tokensSold": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "withdrawEther(uint256)": [
                554,
                163
            ],
            "buyFor(address)": [
                796,
                251
            ],
            "migrateSome(address[])": [
                495,
                141
            ],
            "getBonus(uint256,uint256)": [
                1047,
                339
            ],
            "startIco()": [
                937,
                295
            ],
            "pauseIco()": [
                1199,
                383
            ],
            "finishIco(address,address)": [
                252,
                75
            ],
            "withdrawToken(address,uint256)": [
                1122,
                361
            ],
            "setRobot(address)": [
                599,
                185
            ],
            "foreignBuy(address,uint256,string)": [
                394,
                119
            ]
        },
        "block_CALL_mapping": {
            "jump4878_2": [
                "atl.mint(_investor, _total)",
                "atl.mint(_investor, _total)"
            ],
            "block3107": [
                "team.transfer(_value)"
            ],
            "jump4878_0": [
                "atl.mint(_investor, _total)",
                "atl.mint(_investor, _total)"
            ],
            "jump4878_1": [
                "atl.mint(_investor, _total)",
                "atl.mint(_investor, _total)"
            ],
            "block4878": [
                "atl.mint(_investor, _total)"
            ],
            "jump5611": [
                "atl.mint(_investor, _atlValue)",
                "atl.mint(_investor, _atlValue)"
            ],
            "jump5120": [
                "preICO.balanceOf(_investor)",
                "preICO.balanceOf(_investor)"
            ],
            "block4878_0": [
                "atl.mint(_investor, _total)"
            ],
            "block2294": [
                "atl.unfreeze()"
            ],
            "block4878_2": [
                "atl.mint(_investor, _total)"
            ],
            "jump2294": [
                "atl.unfreeze()",
                "atl.unfreeze()"
            ],
            "block5384": [
                "preICO.burnTokens(_investor)"
            ],
            "block5120": [
                "preICO.balanceOf(_investor)"
            ],
            "block4352": [
                "_tok.transfer(team, _val)"
            ],
            "jump5384": [
                "preICO.burnTokens(_investor)",
                "preICO.burnTokens(_investor)"
            ],
            "jump1904": [
                "atl.mint(_teamFund, 22500000 * 1e18)",
                "atl.mint(_teamFund, 22500000 * 1e18)"
            ],
            "jump3107": [
                "team.transfer(_value)",
                "team.transfer(_value)"
            ],
            "jump2136": [
                "atl.mint(_bountyFund, 18750000 * 1e18)",
                "atl.mint(_bountyFund, 18750000 * 1e18)"
            ],
            "block4878_1": [
                "atl.mint(_investor, _total)"
            ],
            "block5611": [
                "atl.mint(_investor, _atlValue)"
            ],
            "jump4352": [
                "_tok.transfer(team, _val)",
                "_tok.transfer(team, _val)"
            ],
            "block1904": [
                "atl.mint(_teamFund, 22500000 * 1e18)"
            ],
            "block2136": [
                "atl.mint(_bountyFund, 18750000 * 1e18)"
            ],
            "jump4878": [
                "atl.mint(_investor, _total)",
                "atl.mint(_investor, _total)"
            ]
        }
    }
}