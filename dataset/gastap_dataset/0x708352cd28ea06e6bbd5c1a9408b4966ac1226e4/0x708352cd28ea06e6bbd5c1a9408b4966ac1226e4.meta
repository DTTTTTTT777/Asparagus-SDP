{
    "Referral": {
        "function_list": [
            "getReferrer(Referral.Tree,address)",
            "getTreeSize(Referral.Tree)",
            "addInvitee(Referral.Tree,address,address,uint256)"
        ],
        "initial_state": {
            "getReferrer(Referral.Tree,address)": {
                "argument": {},
                "contract": {}
            },
            "getTreeSize(Referral.Tree)": {
                "argument": {},
                "contract": {}
            },
            "addInvitee(Referral.Tree,address,address,uint256)": {
                "argument": {
                    "_shares": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "TieredPayoff": {
        "function_list": [
            "payoff(Referral.Tree,address)",
            "getBonusPercentage(uint256)"
        ],
        "initial_state": {
            "payoff(Referral.Tree,address)": {
                "argument": {},
                "contract": {}
            },
            "getBonusPercentage(uint256)": {
                "argument": {
                    "_referrals": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "getBonusPercentage(uint256)": [
                104,
                83
            ]
        },
        "block_CALL_mapping": {}
    },
    "DateTime": {
        "function_list": [
            "isLeapYear(uint16)",
            "leapYearsBefore(uint256)",
            "getDaysInMonth(uint8,uint16)",
            "parseTimestamp(uint256)",
            "getYear(uint256)",
            "getMonth(uint256)",
            "getDay(uint256)",
            "getHour(uint256)",
            "getMinute(uint256)",
            "getSecond(uint256)",
            "getWeekday(uint256)",
            "toTimestamp(uint16,uint8,uint8)",
            "toTimestamp(uint16,uint8,uint8,uint8)",
            "toTimestamp(uint16,uint8,uint8,uint8,uint8)",
            "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "isLeapYear(uint16)": {
                "argument": {
                    "year": "uint16"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "leapYearsBefore(uint256)": {
                "argument": {
                    "year": "uint256"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "getDaysInMonth(uint8,uint16)": {
                "argument": {
                    "month": "uint8",
                    "year": "uint16"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "parseTimestamp(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "getYear(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "getMonth(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "getDay(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "getHour(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "getMinute(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "getSecond(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "getWeekday(uint256)": {
                "argument": {
                    "timestamp": "uint256"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "toTimestamp(uint16,uint8,uint8)": {
                "argument": {
                    "year": "uint16",
                    "month": "uint8",
                    "day": "uint8"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "toTimestamp(uint16,uint8,uint8,uint8)": {
                "argument": {
                    "year": "uint16",
                    "month": "uint8",
                    "day": "uint8",
                    "hour": "uint8"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "toTimestamp(uint16,uint8,uint8,uint8,uint8)": {
                "argument": {
                    "year": "uint16",
                    "month": "uint8",
                    "day": "uint8",
                    "hour": "uint8",
                    "minute": "uint8"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)": {
                "argument": {
                    "year": "uint16",
                    "month": "uint8",
                    "day": "uint8",
                    "hour": "uint8",
                    "minute": "uint8",
                    "second": "uint8"
                },
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "DAY_IN_SECONDS": "uint256",
                    "YEAR_IN_SECONDS": "uint256",
                    "LEAP_YEAR_IN_SECONDS": "uint256",
                    "HOUR_IN_SECONDS": "uint256",
                    "MINUTE_IN_SECONDS": "uint256",
                    "ORIGIN_YEAR": "uint16"
                }
            }
        },
        "function_block_mapping": {
            "getHour(uint256)": [
                213,
                75
            ],
            "getDaysInMonth(uint8,uint16)": [
                1237,
                339
            ],
            "getSecond(uint256)": [
                655,
                185
            ],
            "isLeapYear(uint16)": [
                1099,
                295
            ],
            "getWeekday(uint256)": [
                284,
                97
            ],
            "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)": [
                821,
                229
            ],
            "toTimestamp(uint16,uint8,uint8,uint8)": [
                547,
                163
            ],
            "getDay(uint256)": [
                476,
                141
            ],
            "getMinute(uint256)": [
                1325,
                361
            ],
            "getMonth(uint256)": [
                1028,
                273
            ],
            "leapYearsBefore(uint256)": [
                1172,
                317
            ],
            "toTimestamp(uint16,uint8,uint8,uint8,uint8)": [
                355,
                119
            ],
            "getYear(uint256)": [
                955,
                251
            ],
            "toTimestamp(uint16,uint8,uint8)": [
                726,
                207
            ]
        },
        "block_CALL_mapping": {}
    },
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "PresaleBonuses": {
        "function_list": [
            "presaleBonusApplicator(uint256,address)",
            "applyPercentage(uint256,uint256)"
        ],
        "initial_state": {
            "presaleBonusApplicator(uint256,address)": {
                "argument": {
                    "_purchased": "uint256"
                },
                "contract": {}
            },
            "applyPercentage(uint256,uint256)": {
                "argument": {
                    "_base": "uint256",
                    "_percentage": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "Token": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                313,
                97
            ],
            "balanceOf(address)": [
                639,
                185
            ],
            "transferFrom(address,address,uint256)": [
                457,
                141
            ],
            "allowance(address,address)": [
                1156,
                273
            ],
            "transfer(address,uint256)": [
                870,
                229
            ]
        },
        "block_CALL_mapping": {}
    },
    "StandardToken": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "HumanStandardToken": {
        "function_list": [
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "HumanStandardToken(uint256,string,uint8,string)",
            "approveAndCall(address,uint256,bytes)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string"
                }
            },
            "HumanStandardToken(uint256,string,uint8,string)": {
                "argument": {
                    "_initialAmount": "uint256",
                    "_tokenName": "string",
                    "_decimalUnits": "uint8",
                    "_tokenSymbol": "string"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string"
                }
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                324,
                97
            ],
            "approveAndCall(address,uint256,bytes)": [
                1126,
                273
            ],
            "allowance(address,address)": [
                1297,
                295
            ],
            "balanceOf(address)": [
                794,
                207
            ],
            "transferFrom(address,address,uint256)": [
                468,
                141
            ],
            "transfer(address,uint256)": [
                1025,
                251
            ]
        },
        "block_CALL_mapping": {
            "jump3817": [
                "_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)",
                "_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)"
            ],
            "block3817": [
                "_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "Share": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "HumanStandardToken(uint256,string,uint8,string)",
            "approveAndCall(address,uint256,bytes)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "Share()",
            "transferReward(address,uint256)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "lockedBalanceOf(address)",
            "enableTransfers()",
            "addTransferrer(address)",
            "releaseBonus()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {
                    "TOKEN_NAME": "string",
                    "TOKEN_SYMBOL": "string",
                    "TOKEN_DECIMALS": "uint8",
                    "TOTAL_SUPPLY": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "TOKEN_NAME": "string",
                    "TOKEN_SYMBOL": "string",
                    "TOKEN_DECIMALS": "uint8",
                    "TOTAL_SUPPLY": "uint256"
                }
            },
            "HumanStandardToken(uint256,string,uint8,string)": {
                "argument": {
                    "_initialAmount": "uint256",
                    "_tokenName": "string",
                    "_decimalUnits": "uint8",
                    "_tokenSymbol": "string"
                },
                "contract": {
                    "TOKEN_NAME": "string",
                    "TOKEN_SYMBOL": "string",
                    "TOKEN_DECIMALS": "uint8",
                    "TOTAL_SUPPLY": "uint256"
                }
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {
                    "TOKEN_NAME": "string",
                    "TOKEN_SYMBOL": "string",
                    "TOKEN_DECIMALS": "uint8",
                    "TOTAL_SUPPLY": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "TOKEN_NAME": "string",
                    "TOKEN_SYMBOL": "string",
                    "TOKEN_DECIMALS": "uint8",
                    "TOTAL_SUPPLY": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "TOKEN_NAME": "string",
                    "TOKEN_SYMBOL": "string",
                    "TOKEN_DECIMALS": "uint8",
                    "TOTAL_SUPPLY": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "TOKEN_NAME": "string",
                    "TOKEN_SYMBOL": "string",
                    "TOKEN_DECIMALS": "uint8",
                    "TOTAL_SUPPLY": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "TOKEN_NAME": "string",
                    "TOKEN_SYMBOL": "string",
                    "TOKEN_DECIMALS": "uint8",
                    "TOTAL_SUPPLY": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "TOKEN_NAME": "string",
                    "TOKEN_SYMBOL": "string",
                    "TOKEN_DECIMALS": "uint8",
                    "TOTAL_SUPPLY": "uint256"
                }
            },
            "Share()": {
                "argument": {},
                "contract": {
                    "TOKEN_NAME": "string",
                    "TOKEN_SYMBOL": "string",
                    "TOKEN_DECIMALS": "uint8",
                    "TOTAL_SUPPLY": "uint256"
                }
            },
            "transferReward(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "TOKEN_NAME": "string",
                    "TOKEN_SYMBOL": "string",
                    "TOKEN_DECIMALS": "uint8",
                    "TOTAL_SUPPLY": "uint256"
                }
            },
            "lockedBalanceOf(address)": {
                "argument": {},
                "contract": {
                    "TOKEN_NAME": "string",
                    "TOKEN_SYMBOL": "string",
                    "TOKEN_DECIMALS": "uint8",
                    "TOTAL_SUPPLY": "uint256"
                }
            },
            "enableTransfers()": {
                "argument": {},
                "contract": {
                    "TOKEN_NAME": "string",
                    "TOKEN_SYMBOL": "string",
                    "TOKEN_DECIMALS": "uint8",
                    "TOTAL_SUPPLY": "uint256"
                }
            },
            "addTransferrer(address)": {
                "argument": {},
                "contract": {
                    "TOKEN_NAME": "string",
                    "TOKEN_SYMBOL": "string",
                    "TOKEN_DECIMALS": "uint8",
                    "TOTAL_SUPPLY": "uint256"
                }
            },
            "releaseBonus()": {
                "argument": {},
                "contract": {
                    "TOKEN_NAME": "string",
                    "TOKEN_SYMBOL": "string",
                    "TOKEN_DECIMALS": "uint8",
                    "TOTAL_SUPPLY": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "TOKEN_NAME": "string",
                    "TOKEN_SYMBOL": "string",
                    "TOKEN_DECIMALS": "uint8",
                    "TOTAL_SUPPLY": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "transferReward(address,uint256)": [
                557,
                119
            ],
            "allowance(address,address)": [
                2312,
                537
            ],
            "transferFrom(address,address,uint256)": [
                845,
                185
            ],
            "approve(address,uint256)": [
                456,
                97
            ],
            "transferOwnership(address)": [
                2431,
                559
            ],
            "lockedBalanceOf(address)": [
                1406,
                295
            ],
            "releaseBonus()": [
                1542,
                339
            ],
            "addTransferrer(address)": [
                2027,
                471
            ],
            "balanceOf(address)": [
                1565,
                361
            ],
            "enableTransfers()": [
                2094,
                493
            ],
            "approveAndCall(address,uint256,bytes)": [
                2141,
                515
            ],
            "transfer(address,uint256)": [
                1926,
                449
            ]
        },
        "block_CALL_mapping": {
            "block7381": [
                "_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)"
            ],
            "jump7381": [
                "_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)",
                "_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "Campaign": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "Campaign(address,uint256)",
            "join(address,address,uint256)",
            "sendReward(address,uint256)",
            "getReferrer(address)",
            "getTreeSize()",
            "getBudget()",
            "getAvailableBalance()",
            "fallback()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {
                    "budget": "uint256",
                    "cost": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "budget": "uint256",
                    "cost": "uint256"
                }
            },
            "Campaign(address,uint256)": {
                "argument": {
                    "_budgetAmount": "uint256"
                },
                "contract": {
                    "budget": "uint256",
                    "cost": "uint256"
                }
            },
            "join(address,address,uint256)": {
                "argument": {
                    "_shares": "uint256"
                },
                "contract": {
                    "budget": "uint256",
                    "cost": "uint256"
                }
            },
            "sendReward(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "budget": "uint256",
                    "cost": "uint256"
                }
            },
            "getReferrer(address)": {
                "argument": {},
                "contract": {
                    "budget": "uint256",
                    "cost": "uint256"
                }
            },
            "getTreeSize()": {
                "argument": {},
                "contract": {
                    "budget": "uint256",
                    "cost": "uint256"
                }
            },
            "getBudget()": {
                "argument": {},
                "contract": {
                    "budget": "uint256",
                    "cost": "uint256"
                }
            },
            "getAvailableBalance()": {
                "argument": {},
                "contract": {
                    "budget": "uint256",
                    "cost": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "budget": "uint256",
                    "cost": "uint256"
                }
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {
            "jump1937": [
                "tokenContract.generateTokens(_owner, msg.value)",
                "tokenContract.generateTokens(_owner, msg.value)"
            ],
            "jump1937_1": [
                "tokenContract.generateTokens(_owner, msg.value)",
                "tokenContract.generateTokens(_owner, msg.value)"
            ],
            "jump1937_0": [
                "tokenContract.generateTokens(_owner, msg.value)",
                "tokenContract.generateTokens(_owner, msg.value)"
            ],
            "jump2701": [
                "tokenContract.generateTokens(dth, amount)",
                "tokenContract.generateTokens(dth, amount)"
            ],
            "block1626": [
                "vaultAddress.send(msg.value)"
            ],
            "block1626_0": [
                "vaultAddress.send(msg.value)"
            ],
            "block1626_1": [
                "vaultAddress.send(msg.value)"
            ],
            "jump1506_1": [
                "tokenContract.controller()",
                "tokenContract.controller()"
            ],
            "jump1506_0": [
                "tokenContract.controller()",
                "tokenContract.controller()"
            ],
            "block1506_1": [
                "tokenContract.controller()"
            ],
            "block1506_0": [
                "tokenContract.controller()"
            ],
            "block1506": [
                "tokenContract.controller()"
            ],
            "block1937": [
                "tokenContract.generateTokens(_owner, msg.value)"
            ],
            "jump3047": [
                "tokenContract.changeController(0)",
                "tokenContract.changeController(0)"
            ],
            "block1937_1": [
                "tokenContract.generateTokens(_owner, msg.value)"
            ],
            "block1937_0": [
                "tokenContract.generateTokens(_owner, msg.value)"
            ],
            "block2701": [
                "tokenContract.generateTokens(dth, amount)"
            ],
            "jump1506": [
                "tokenContract.controller()",
                "tokenContract.controller()"
            ],
            "jump1626_0": [
                "vaultAddress.send(msg.value)",
                "vaultAddress.send(msg.value)"
            ],
            "jump1626_1": [
                "vaultAddress.send(msg.value)",
                "vaultAddress.send(msg.value)"
            ],
            "block3047": [
                "tokenContract.changeController(0)"
            ],
            "jump1626": [
                "vaultAddress.send(msg.value)",
                "vaultAddress.send(msg.value)"
            ]
        }
    },
    "Vesting": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "Vesting(address)",
            "registerVestingSchedule(address,address,uint256,uint256,uint256,uint256,uint256)",
            "confirmVestingSchedule(uint256,uint256,uint256,uint256,uint256)",
            "withdrawVestedTokens()",
            "calculateTotalAmountVested(Vesting.VestingSchedule)",
            "canWithdraw(Vesting.VestingSchedule,uint256)",
            "revokeSchedule(address,address)",
            "changeVestingAddress(address,address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "Vesting(address)": {
                "argument": {},
                "contract": {}
            },
            "registerVestingSchedule(address,address,uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_startTimestamp": "uint256",
                    "_cliffTimestamp": "uint256",
                    "_lockPeriod": "uint256",
                    "_endTimestamp": "uint256",
                    "_totalAmount": "uint256"
                },
                "contract": {}
            },
            "confirmVestingSchedule(uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_startTimestamp": "uint256",
                    "_cliffTimestamp": "uint256",
                    "_lockPeriod": "uint256",
                    "_endTimestamp": "uint256",
                    "_totalAmount": "uint256"
                },
                "contract": {}
            },
            "withdrawVestedTokens()": {
                "argument": {},
                "contract": {}
            },
            "calculateTotalAmountVested(Vesting.VestingSchedule)": {
                "argument": {},
                "contract": {}
            },
            "canWithdraw(Vesting.VestingSchedule,uint256)": {
                "argument": {
                    "_amountWithdrawable": "uint256"
                },
                "contract": {}
            },
            "revokeSchedule(address,address)": {
                "argument": {},
                "contract": {}
            },
            "changeVestingAddress(address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "revokeSchedule(address,address)": [
                528,
                185
            ],
            "withdrawVestedTokens()": [
                234,
                97
            ],
            "registerVestingSchedule(address,address,uint256,uint256,uint256,uint256,uint256)": [
                694,
                229
            ],
            "changeVestingAddress(address,address)": [
                429,
                163
            ],
            "confirmVestingSchedule(uint256,uint256,uint256,uint256,uint256)": [
                257,
                119
            ],
            "transferOwnership(address)": [
                627,
                207
            ]
        },
        "block_CALL_mapping": {
            "block4514": [
                "vestingToken.transfer(_addressToRefund, amountRefundable)"
            ],
            "block5206": [
                "vestingToken.transfer(_addressToRevoke, amountWithdrawable)"
            ],
            "block1639": [
                "vestingToken.transfer(msg.sender, amountWithdrawable)"
            ],
            "jump2403": [
                "vestingToken.transferFrom(vestingSchedule.depositor, address(this), _totalAmount)",
                "vestingToken.transferFrom(vestingSchedule.depositor, address(this), _totalAmount)"
            ],
            "block5473": [
                "vestingToken.transfer(_addressToRefund, amountRefundable)"
            ],
            "block2403": [
                "vestingToken.transferFrom(vestingSchedule.depositor, address(this), _totalAmount)"
            ],
            "jump1639": [
                "vestingToken.transfer(msg.sender, amountWithdrawable)",
                "vestingToken.transfer(msg.sender, amountWithdrawable)"
            ],
            "jump5473": [
                "vestingToken.transfer(_addressToRefund, amountRefundable)",
                "vestingToken.transfer(_addressToRefund, amountRefundable)"
            ],
            "jump4514": [
                "vestingToken.transfer(_addressToRefund, amountRefundable)",
                "vestingToken.transfer(_addressToRefund, amountRefundable)"
            ],
            "jump5206": [
                "vestingToken.transfer(_addressToRevoke, amountWithdrawable)",
                "vestingToken.transfer(_addressToRevoke, amountWithdrawable)"
            ]
        }
    },
    "VyralSale": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "VyralSale(address,address)",
            "initPresale(address,uint256,uint256,uint256,uint256)",
            "startPresale()",
            "endPresale()",
            "initSale(uint256,uint256,uint256)",
            "startSale()",
            "finalizeSale()",
            "decomission()",
            "fallback()",
            "buyPresale(address)",
            "buySale(address)",
            "setPresaleParams(uint256,uint256,uint256,uint256)",
            "setCrowdsaleParams(uint256,uint256,uint256)",
            "rewardBeneficiary(address,uint256)",
            "distributeTimelockedTokens(address,uint256)",
            "replaceDecomissioned(address)",
            "setCampaign(address)",
            "setVesting(address)",
            "toggleHALT(bool)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {
                    "MIN_CONTRIBUTION": "uint256",
                    "presaleStartTimestamp": "uint256",
                    "presaleEndTimestamp": "uint256",
                    "presaleRate": "uint256",
                    "presaleCap": "uint256",
                    "soldPresale": "uint256",
                    "saleStartTimestamp": "uint256",
                    "saleEndTimestamp": "uint256",
                    "saleRate": "uint256",
                    "saleCap": "uint256",
                    "soldSale": "uint256",
                    "TOTAL_SUPPLY": "uint256",
                    "TEAM": "uint256",
                    "PARTNERS": "uint256",
                    "VYRAL_REWARDS": "uint256",
                    "SALE_ALLOCATION": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "MIN_CONTRIBUTION": "uint256",
                    "presaleStartTimestamp": "uint256",
                    "presaleEndTimestamp": "uint256",
                    "presaleRate": "uint256",
                    "presaleCap": "uint256",
                    "soldPresale": "uint256",
                    "saleStartTimestamp": "uint256",
                    "saleEndTimestamp": "uint256",
                    "saleRate": "uint256",
                    "saleCap": "uint256",
                    "soldSale": "uint256",
                    "TOTAL_SUPPLY": "uint256",
                    "TEAM": "uint256",
                    "PARTNERS": "uint256",
                    "VYRAL_REWARDS": "uint256",
                    "SALE_ALLOCATION": "uint256"
                }
            },
            "VyralSale(address,address)": {
                "argument": {},
                "contract": {
                    "MIN_CONTRIBUTION": "uint256",
                    "presaleStartTimestamp": "uint256",
                    "presaleEndTimestamp": "uint256",
                    "presaleRate": "uint256",
                    "presaleCap": "uint256",
                    "soldPresale": "uint256",
                    "saleStartTimestamp": "uint256",
                    "saleEndTimestamp": "uint256",
                    "saleRate": "uint256",
                    "saleCap": "uint256",
                    "soldSale": "uint256",
                    "TOTAL_SUPPLY": "uint256",
                    "TEAM": "uint256",
                    "PARTNERS": "uint256",
                    "VYRAL_REWARDS": "uint256",
                    "SALE_ALLOCATION": "uint256"
                }
            },
            "initPresale(address,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_presaleStartTimestamp": "uint256",
                    "_presaleEndTimestamp": "uint256",
                    "_presaleCap": "uint256",
                    "_presaleRate": "uint256"
                },
                "contract": {
                    "MIN_CONTRIBUTION": "uint256",
                    "presaleStartTimestamp": "uint256",
                    "presaleEndTimestamp": "uint256",
                    "presaleRate": "uint256",
                    "presaleCap": "uint256",
                    "soldPresale": "uint256",
                    "saleStartTimestamp": "uint256",
                    "saleEndTimestamp": "uint256",
                    "saleRate": "uint256",
                    "saleCap": "uint256",
                    "soldSale": "uint256",
                    "TOTAL_SUPPLY": "uint256",
                    "TEAM": "uint256",
                    "PARTNERS": "uint256",
                    "VYRAL_REWARDS": "uint256",
                    "SALE_ALLOCATION": "uint256"
                }
            },
            "startPresale()": {
                "argument": {},
                "contract": {
                    "MIN_CONTRIBUTION": "uint256",
                    "presaleStartTimestamp": "uint256",
                    "presaleEndTimestamp": "uint256",
                    "presaleRate": "uint256",
                    "presaleCap": "uint256",
                    "soldPresale": "uint256",
                    "saleStartTimestamp": "uint256",
                    "saleEndTimestamp": "uint256",
                    "saleRate": "uint256",
                    "saleCap": "uint256",
                    "soldSale": "uint256",
                    "TOTAL_SUPPLY": "uint256",
                    "TEAM": "uint256",
                    "PARTNERS": "uint256",
                    "VYRAL_REWARDS": "uint256",
                    "SALE_ALLOCATION": "uint256"
                }
            },
            "endPresale()": {
                "argument": {},
                "contract": {
                    "MIN_CONTRIBUTION": "uint256",
                    "presaleStartTimestamp": "uint256",
                    "presaleEndTimestamp": "uint256",
                    "presaleRate": "uint256",
                    "presaleCap": "uint256",
                    "soldPresale": "uint256",
                    "saleStartTimestamp": "uint256",
                    "saleEndTimestamp": "uint256",
                    "saleRate": "uint256",
                    "saleCap": "uint256",
                    "soldSale": "uint256",
                    "TOTAL_SUPPLY": "uint256",
                    "TEAM": "uint256",
                    "PARTNERS": "uint256",
                    "VYRAL_REWARDS": "uint256",
                    "SALE_ALLOCATION": "uint256"
                }
            },
            "initSale(uint256,uint256,uint256)": {
                "argument": {
                    "_saleStartTimestamp": "uint256",
                    "_saleEndTimestamp": "uint256",
                    "_saleRate": "uint256"
                },
                "contract": {
                    "MIN_CONTRIBUTION": "uint256",
                    "presaleStartTimestamp": "uint256",
                    "presaleEndTimestamp": "uint256",
                    "presaleRate": "uint256",
                    "presaleCap": "uint256",
                    "soldPresale": "uint256",
                    "saleStartTimestamp": "uint256",
                    "saleEndTimestamp": "uint256",
                    "saleRate": "uint256",
                    "saleCap": "uint256",
                    "soldSale": "uint256",
                    "TOTAL_SUPPLY": "uint256",
                    "TEAM": "uint256",
                    "PARTNERS": "uint256",
                    "VYRAL_REWARDS": "uint256",
                    "SALE_ALLOCATION": "uint256"
                }
            },
            "startSale()": {
                "argument": {},
                "contract": {
                    "MIN_CONTRIBUTION": "uint256",
                    "presaleStartTimestamp": "uint256",
                    "presaleEndTimestamp": "uint256",
                    "presaleRate": "uint256",
                    "presaleCap": "uint256",
                    "soldPresale": "uint256",
                    "saleStartTimestamp": "uint256",
                    "saleEndTimestamp": "uint256",
                    "saleRate": "uint256",
                    "saleCap": "uint256",
                    "soldSale": "uint256",
                    "TOTAL_SUPPLY": "uint256",
                    "TEAM": "uint256",
                    "PARTNERS": "uint256",
                    "VYRAL_REWARDS": "uint256",
                    "SALE_ALLOCATION": "uint256"
                }
            },
            "finalizeSale()": {
                "argument": {},
                "contract": {
                    "MIN_CONTRIBUTION": "uint256",
                    "presaleStartTimestamp": "uint256",
                    "presaleEndTimestamp": "uint256",
                    "presaleRate": "uint256",
                    "presaleCap": "uint256",
                    "soldPresale": "uint256",
                    "saleStartTimestamp": "uint256",
                    "saleEndTimestamp": "uint256",
                    "saleRate": "uint256",
                    "saleCap": "uint256",
                    "soldSale": "uint256",
                    "TOTAL_SUPPLY": "uint256",
                    "TEAM": "uint256",
                    "PARTNERS": "uint256",
                    "VYRAL_REWARDS": "uint256",
                    "SALE_ALLOCATION": "uint256"
                }
            },
            "decomission()": {
                "argument": {},
                "contract": {
                    "MIN_CONTRIBUTION": "uint256",
                    "presaleStartTimestamp": "uint256",
                    "presaleEndTimestamp": "uint256",
                    "presaleRate": "uint256",
                    "presaleCap": "uint256",
                    "soldPresale": "uint256",
                    "saleStartTimestamp": "uint256",
                    "saleEndTimestamp": "uint256",
                    "saleRate": "uint256",
                    "saleCap": "uint256",
                    "soldSale": "uint256",
                    "TOTAL_SUPPLY": "uint256",
                    "TEAM": "uint256",
                    "PARTNERS": "uint256",
                    "VYRAL_REWARDS": "uint256",
                    "SALE_ALLOCATION": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "MIN_CONTRIBUTION": "uint256",
                    "presaleStartTimestamp": "uint256",
                    "presaleEndTimestamp": "uint256",
                    "presaleRate": "uint256",
                    "presaleCap": "uint256",
                    "soldPresale": "uint256",
                    "saleStartTimestamp": "uint256",
                    "saleEndTimestamp": "uint256",
                    "saleRate": "uint256",
                    "saleCap": "uint256",
                    "soldSale": "uint256",
                    "TOTAL_SUPPLY": "uint256",
                    "TEAM": "uint256",
                    "PARTNERS": "uint256",
                    "VYRAL_REWARDS": "uint256",
                    "SALE_ALLOCATION": "uint256"
                }
            },
            "buyPresale(address)": {
                "argument": {},
                "contract": {
                    "MIN_CONTRIBUTION": "uint256",
                    "presaleStartTimestamp": "uint256",
                    "presaleEndTimestamp": "uint256",
                    "presaleRate": "uint256",
                    "presaleCap": "uint256",
                    "soldPresale": "uint256",
                    "saleStartTimestamp": "uint256",
                    "saleEndTimestamp": "uint256",
                    "saleRate": "uint256",
                    "saleCap": "uint256",
                    "soldSale": "uint256",
                    "TOTAL_SUPPLY": "uint256",
                    "TEAM": "uint256",
                    "PARTNERS": "uint256",
                    "VYRAL_REWARDS": "uint256",
                    "SALE_ALLOCATION": "uint256"
                }
            },
            "buySale(address)": {
                "argument": {},
                "contract": {
                    "MIN_CONTRIBUTION": "uint256",
                    "presaleStartTimestamp": "uint256",
                    "presaleEndTimestamp": "uint256",
                    "presaleRate": "uint256",
                    "presaleCap": "uint256",
                    "soldPresale": "uint256",
                    "saleStartTimestamp": "uint256",
                    "saleEndTimestamp": "uint256",
                    "saleRate": "uint256",
                    "saleCap": "uint256",
                    "soldSale": "uint256",
                    "TOTAL_SUPPLY": "uint256",
                    "TEAM": "uint256",
                    "PARTNERS": "uint256",
                    "VYRAL_REWARDS": "uint256",
                    "SALE_ALLOCATION": "uint256"
                }
            },
            "setPresaleParams(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_presaleStartTimestamp": "uint256",
                    "_presaleEndTimestamp": "uint256",
                    "_presaleRate": "uint256",
                    "_presaleCap": "uint256"
                },
                "contract": {
                    "MIN_CONTRIBUTION": "uint256",
                    "presaleStartTimestamp": "uint256",
                    "presaleEndTimestamp": "uint256",
                    "presaleRate": "uint256",
                    "presaleCap": "uint256",
                    "soldPresale": "uint256",
                    "saleStartTimestamp": "uint256",
                    "saleEndTimestamp": "uint256",
                    "saleRate": "uint256",
                    "saleCap": "uint256",
                    "soldSale": "uint256",
                    "TOTAL_SUPPLY": "uint256",
                    "TEAM": "uint256",
                    "PARTNERS": "uint256",
                    "VYRAL_REWARDS": "uint256",
                    "SALE_ALLOCATION": "uint256"
                }
            },
            "setCrowdsaleParams(uint256,uint256,uint256)": {
                "argument": {
                    "_saleStartTimestamp": "uint256",
                    "_saleEndTimestamp": "uint256",
                    "_saleRate": "uint256"
                },
                "contract": {
                    "MIN_CONTRIBUTION": "uint256",
                    "presaleStartTimestamp": "uint256",
                    "presaleEndTimestamp": "uint256",
                    "presaleRate": "uint256",
                    "presaleCap": "uint256",
                    "soldPresale": "uint256",
                    "saleStartTimestamp": "uint256",
                    "saleEndTimestamp": "uint256",
                    "saleRate": "uint256",
                    "saleCap": "uint256",
                    "soldSale": "uint256",
                    "TOTAL_SUPPLY": "uint256",
                    "TEAM": "uint256",
                    "PARTNERS": "uint256",
                    "VYRAL_REWARDS": "uint256",
                    "SALE_ALLOCATION": "uint256"
                }
            },
            "rewardBeneficiary(address,uint256)": {
                "argument": {
                    "_tokens": "uint256"
                },
                "contract": {
                    "MIN_CONTRIBUTION": "uint256",
                    "presaleStartTimestamp": "uint256",
                    "presaleEndTimestamp": "uint256",
                    "presaleRate": "uint256",
                    "presaleCap": "uint256",
                    "soldPresale": "uint256",
                    "saleStartTimestamp": "uint256",
                    "saleEndTimestamp": "uint256",
                    "saleRate": "uint256",
                    "saleCap": "uint256",
                    "soldSale": "uint256",
                    "TOTAL_SUPPLY": "uint256",
                    "TEAM": "uint256",
                    "PARTNERS": "uint256",
                    "VYRAL_REWARDS": "uint256",
                    "SALE_ALLOCATION": "uint256"
                }
            },
            "distributeTimelockedTokens(address,uint256)": {
                "argument": {
                    "_tokens": "uint256"
                },
                "contract": {
                    "MIN_CONTRIBUTION": "uint256",
                    "presaleStartTimestamp": "uint256",
                    "presaleEndTimestamp": "uint256",
                    "presaleRate": "uint256",
                    "presaleCap": "uint256",
                    "soldPresale": "uint256",
                    "saleStartTimestamp": "uint256",
                    "saleEndTimestamp": "uint256",
                    "saleRate": "uint256",
                    "saleCap": "uint256",
                    "soldSale": "uint256",
                    "TOTAL_SUPPLY": "uint256",
                    "TEAM": "uint256",
                    "PARTNERS": "uint256",
                    "VYRAL_REWARDS": "uint256",
                    "SALE_ALLOCATION": "uint256"
                }
            },
            "replaceDecomissioned(address)": {
                "argument": {},
                "contract": {
                    "MIN_CONTRIBUTION": "uint256",
                    "presaleStartTimestamp": "uint256",
                    "presaleEndTimestamp": "uint256",
                    "presaleRate": "uint256",
                    "presaleCap": "uint256",
                    "soldPresale": "uint256",
                    "saleStartTimestamp": "uint256",
                    "saleEndTimestamp": "uint256",
                    "saleRate": "uint256",
                    "saleCap": "uint256",
                    "soldSale": "uint256",
                    "TOTAL_SUPPLY": "uint256",
                    "TEAM": "uint256",
                    "PARTNERS": "uint256",
                    "VYRAL_REWARDS": "uint256",
                    "SALE_ALLOCATION": "uint256"
                }
            },
            "setCampaign(address)": {
                "argument": {},
                "contract": {
                    "MIN_CONTRIBUTION": "uint256",
                    "presaleStartTimestamp": "uint256",
                    "presaleEndTimestamp": "uint256",
                    "presaleRate": "uint256",
                    "presaleCap": "uint256",
                    "soldPresale": "uint256",
                    "saleStartTimestamp": "uint256",
                    "saleEndTimestamp": "uint256",
                    "saleRate": "uint256",
                    "saleCap": "uint256",
                    "soldSale": "uint256",
                    "TOTAL_SUPPLY": "uint256",
                    "TEAM": "uint256",
                    "PARTNERS": "uint256",
                    "VYRAL_REWARDS": "uint256",
                    "SALE_ALLOCATION": "uint256"
                }
            },
            "setVesting(address)": {
                "argument": {},
                "contract": {
                    "MIN_CONTRIBUTION": "uint256",
                    "presaleStartTimestamp": "uint256",
                    "presaleEndTimestamp": "uint256",
                    "presaleRate": "uint256",
                    "presaleCap": "uint256",
                    "soldPresale": "uint256",
                    "saleStartTimestamp": "uint256",
                    "saleEndTimestamp": "uint256",
                    "saleRate": "uint256",
                    "saleCap": "uint256",
                    "soldSale": "uint256",
                    "TOTAL_SUPPLY": "uint256",
                    "TEAM": "uint256",
                    "PARTNERS": "uint256",
                    "VYRAL_REWARDS": "uint256",
                    "SALE_ALLOCATION": "uint256"
                }
            },
            "toggleHALT(bool)": {
                "argument": {},
                "contract": {
                    "MIN_CONTRIBUTION": "uint256",
                    "presaleStartTimestamp": "uint256",
                    "presaleEndTimestamp": "uint256",
                    "presaleRate": "uint256",
                    "presaleCap": "uint256",
                    "soldPresale": "uint256",
                    "saleStartTimestamp": "uint256",
                    "saleEndTimestamp": "uint256",
                    "saleRate": "uint256",
                    "saleCap": "uint256",
                    "soldSale": "uint256",
                    "TOTAL_SUPPLY": "uint256",
                    "TEAM": "uint256",
                    "PARTNERS": "uint256",
                    "VYRAL_REWARDS": "uint256",
                    "SALE_ALLOCATION": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "MIN_CONTRIBUTION": "uint256",
                    "presaleStartTimestamp": "uint256",
                    "presaleEndTimestamp": "uint256",
                    "presaleRate": "uint256",
                    "presaleCap": "uint256",
                    "soldPresale": "uint256",
                    "saleStartTimestamp": "uint256",
                    "saleEndTimestamp": "uint256",
                    "saleRate": "uint256",
                    "saleCap": "uint256",
                    "soldSale": "uint256",
                    "TOTAL_SUPPLY": "uint256",
                    "TEAM": "uint256",
                    "PARTNERS": "uint256",
                    "VYRAL_REWARDS": "uint256",
                    "SALE_ALLOCATION": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "setCrowdsaleParams(uint256,uint256,uint256)": [
                3394,
                1021
            ],
            "setCampaign(address)": [
                1949,
                515
            ],
            "replaceDecomissioned(address)": [
                3236,
                977
            ],
            "buyPresale(address)": [
                2405,
                669
            ],
            "finalizeSale()": [
                1772,
                449
            ],
            "startPresale()": [
                707,
                75
            ],
            "buySale(address)": [
                2131,
                559
            ],
            "transferOwnership(address)": [
                3327,
                999
            ],
            "startSale()": [
                2914,
                845
            ],
            "endPresale()": [
                2810,
                801
            ],
            "setPresaleParams(uint256,uint256,uint256,uint256)": [
                3094,
                933
            ],
            "initPresale(address,uint256,uint256,uint256,uint256)": [
                2589,
                735
            ],
            "toggleHALT(bool)": [
                1351,
                295
            ],
            "decomission()": [
                3047,
                911
            ],
            "rewardBeneficiary(address,uint256)": [
                1075,
                207
            ],
            "initSale(uint256,uint256,uint256)": [
                1262,
                273
            ],
            "setVesting(address)": [
                2040,
                537
            ],
            "distributeTimelockedTokens(address,uint256)": [
                884,
                141
            ]
        },
        "block_CALL_mapping": {
            "block7252": [
                "campaign.sendReward(_referrer, referralReward)"
            ],
            "jump12718": [
                "shareToken.balanceOf(address(this))",
                "shareToken.balanceOf(address(this))"
            ],
            "jump4429": [
                "shareToken.transfer(msg.sender, purchased)",
                "shareToken.transfer(msg.sender, purchased)"
            ],
            "jump5095": [
                "campaign.join(_referrer, msg.sender, purchased)",
                "campaign.join(_referrer, msg.sender, purchased)"
            ],
            "block5095": [
                "campaign.join(_referrer, msg.sender, purchased)"
            ],
            "block6220": [
                "msg.sender.transfer(excess)"
            ],
            "jump13225": [
                "campaign.transferOwnership(_newAddress)",
                "campaign.transferOwnership(_newAddress)"
            ],
            "block6631": [
                "shareToken.transfer(msg.sender, purchased)"
            ],
            "jump6994_0": [
                "campaign.join(_referrer, msg.sender, purchased)",
                "campaign.join(_referrer, msg.sender, purchased)"
            ],
            "jump4732": [
                "campaign.sendReward(msg.sender, reward)",
                "campaign.sendReward(msg.sender, reward)"
            ],
            "block14132_1": [
                "dateTime.getHour(block.timestamp)"
            ],
            "block14132_0": [
                "dateTime.getHour(block.timestamp)"
            ],
            "block12976": [
                "shareToken.transfer(_newAddress, allTokens)"
            ],
            "jump4120": [
                "wallet.transfer(contribution)",
                "wallet.transfer(contribution)"
            ],
            "jump4018_0": [
                "msg.sender.transfer(excess)",
                "msg.sender.transfer(excess)"
            ],
            "jump4018_1": [
                "msg.sender.transfer(excess)",
                "msg.sender.transfer(excess)"
            ],
            "block14307_1": [
                "dateTime.getDay(block.timestamp)"
            ],
            "block14307_0": [
                "dateTime.getDay(block.timestamp)"
            ],
            "block5353": [
                "campaign.sendReward(_referrer, referralReward)"
            ],
            "jump14132_1": [
                "dateTime.getHour(block.timestamp)",
                "dateTime.getHour(block.timestamp)"
            ],
            "jump14132_0": [
                "dateTime.getHour(block.timestamp)",
                "dateTime.getHour(block.timestamp)"
            ],
            "block4732": [
                "campaign.sendReward(msg.sender, reward)"
            ],
            "block4429": [
                "shareToken.transfer(msg.sender, purchased)"
            ],
            "jump14132": [
                "dateTime.getHour(block.timestamp)",
                "dateTime.getHour(block.timestamp)"
            ],
            "jump8150": [
                "shareToken.transfer(_beneficiary, _tokens)",
                "shareToken.transfer(_beneficiary, _tokens)"
            ],
            "block5095_0": [
                "campaign.join(_referrer, msg.sender, purchased)"
            ],
            "block5095_1": [
                "campaign.join(_referrer, msg.sender, purchased)"
            ],
            "block12718": [
                "shareToken.balanceOf(address(this))"
            ],
            "block6994": [
                "campaign.join(_referrer, msg.sender, purchased)"
            ],
            "jump10331": [
                "shareToken.approve(address(vestingWallet), TEAM.add(PARTNERS))",
                "shareToken.approve(address(vestingWallet), TEAM.add(PARTNERS))"
            ],
            "block4732_1": [
                "campaign.sendReward(msg.sender, reward)"
            ],
            "block4732_0": [
                "campaign.sendReward(msg.sender, reward)"
            ],
            "jump6220": [
                "msg.sender.transfer(excess)",
                "msg.sender.transfer(excess)"
            ],
            "block5353_1": [
                "campaign.sendReward(_referrer, referralReward)"
            ],
            "block5353_0": [
                "campaign.sendReward(_referrer, referralReward)"
            ],
            "jump4018": [
                "msg.sender.transfer(excess)",
                "msg.sender.transfer(excess)"
            ],
            "jump14307": [
                "dateTime.getDay(block.timestamp)",
                "dateTime.getDay(block.timestamp)"
            ],
            "jump6631_1": [
                "shareToken.transfer(msg.sender, purchased)",
                "shareToken.transfer(msg.sender, purchased)"
            ],
            "jump6631_0": [
                "shareToken.transfer(msg.sender, purchased)",
                "shareToken.transfer(msg.sender, purchased)"
            ],
            "block4429_0": [
                "shareToken.transfer(msg.sender, purchased)"
            ],
            "block4429_1": [
                "shareToken.transfer(msg.sender, purchased)"
            ],
            "block6631_1": [
                "shareToken.transfer(msg.sender, purchased)"
            ],
            "block6631_0": [
                "shareToken.transfer(msg.sender, purchased)"
            ],
            "block11302": [
                "shareToken.transfer(address(campaign), VYRAL_REWARDS)"
            ],
            "jump5353_1": [
                "campaign.sendReward(_referrer, referralReward)",
                "campaign.sendReward(_referrer, referralReward)"
            ],
            "jump5353_0": [
                "campaign.sendReward(_referrer, referralReward)",
                "campaign.sendReward(_referrer, referralReward)"
            ],
            "jump6994": [
                "campaign.join(_referrer, msg.sender, purchased)",
                "campaign.join(_referrer, msg.sender, purchased)"
            ],
            "jump6322": [
                "wallet.transfer(contribution)",
                "wallet.transfer(contribution)"
            ],
            "jump8532": [
                "campaign.sendReward(_beneficiary, _tokens)",
                "campaign.sendReward(_beneficiary, _tokens)"
            ],
            "jump6220_1": [
                "msg.sender.transfer(excess)",
                "msg.sender.transfer(excess)"
            ],
            "jump6220_0": [
                "msg.sender.transfer(excess)",
                "msg.sender.transfer(excess)"
            ],
            "jump14307_1": [
                "dateTime.getDay(block.timestamp)",
                "dateTime.getDay(block.timestamp)"
            ],
            "jump14307_0": [
                "dateTime.getDay(block.timestamp)",
                "dateTime.getDay(block.timestamp)"
            ],
            "jump6994_1": [
                "campaign.join(_referrer, msg.sender, purchased)",
                "campaign.join(_referrer, msg.sender, purchased)"
            ],
            "block4120_0": [
                "wallet.transfer(contribution)"
            ],
            "block4120_1": [
                "wallet.transfer(contribution)"
            ],
            "jump4429_0": [
                "shareToken.transfer(msg.sender, purchased)",
                "shareToken.transfer(msg.sender, purchased)"
            ],
            "jump4429_1": [
                "shareToken.transfer(msg.sender, purchased)",
                "shareToken.transfer(msg.sender, purchased)"
            ],
            "jump11302": [
                "shareToken.transfer(address(campaign), VYRAL_REWARDS)",
                "shareToken.transfer(address(campaign), VYRAL_REWARDS)"
            ],
            "block4018_0": [
                "msg.sender.transfer(excess)"
            ],
            "block4018_1": [
                "msg.sender.transfer(excess)"
            ],
            "jump12976": [
                "shareToken.transfer(_newAddress, allTokens)",
                "shareToken.transfer(_newAddress, allTokens)"
            ],
            "jump5095_0": [
                "campaign.join(_referrer, msg.sender, purchased)",
                "campaign.join(_referrer, msg.sender, purchased)"
            ],
            "jump5095_1": [
                "campaign.join(_referrer, msg.sender, purchased)",
                "campaign.join(_referrer, msg.sender, purchased)"
            ],
            "jump4732_1": [
                "campaign.sendReward(msg.sender, reward)",
                "campaign.sendReward(msg.sender, reward)"
            ],
            "jump4732_0": [
                "campaign.sendReward(msg.sender, reward)",
                "campaign.sendReward(msg.sender, reward)"
            ],
            "block14307": [
                "dateTime.getDay(block.timestamp)"
            ],
            "block8532": [
                "campaign.sendReward(_beneficiary, _tokens)"
            ],
            "block7252_1": [
                "campaign.sendReward(_referrer, referralReward)"
            ],
            "block7252_0": [
                "campaign.sendReward(_referrer, referralReward)"
            ],
            "block4018": [
                "msg.sender.transfer(excess)"
            ],
            "jump6631": [
                "shareToken.transfer(msg.sender, purchased)",
                "shareToken.transfer(msg.sender, purchased)"
            ],
            "jump7252": [
                "campaign.sendReward(_referrer, referralReward)",
                "campaign.sendReward(_referrer, referralReward)"
            ],
            "jump4120_0": [
                "wallet.transfer(contribution)",
                "wallet.transfer(contribution)"
            ],
            "jump4120_1": [
                "wallet.transfer(contribution)",
                "wallet.transfer(contribution)"
            ],
            "jump7252_1": [
                "campaign.sendReward(_referrer, referralReward)",
                "campaign.sendReward(_referrer, referralReward)"
            ],
            "jump7252_0": [
                "campaign.sendReward(_referrer, referralReward)",
                "campaign.sendReward(_referrer, referralReward)"
            ],
            "block6322": [
                "wallet.transfer(contribution)"
            ],
            "block6322_0": [
                "wallet.transfer(contribution)"
            ],
            "block6322_1": [
                "wallet.transfer(contribution)"
            ],
            "block8150": [
                "shareToken.transfer(_beneficiary, _tokens)"
            ],
            "jump5353": [
                "campaign.sendReward(_referrer, referralReward)",
                "campaign.sendReward(_referrer, referralReward)"
            ],
            "block4120": [
                "wallet.transfer(contribution)"
            ],
            "block14132": [
                "dateTime.getHour(block.timestamp)"
            ],
            "block13225": [
                "campaign.transferOwnership(_newAddress)"
            ],
            "block6220_1": [
                "msg.sender.transfer(excess)"
            ],
            "block6220_0": [
                "msg.sender.transfer(excess)"
            ],
            "jump6322_0": [
                "wallet.transfer(contribution)",
                "wallet.transfer(contribution)"
            ],
            "jump6322_1": [
                "wallet.transfer(contribution)",
                "wallet.transfer(contribution)"
            ],
            "block10331": [
                "shareToken.approve(address(vestingWallet), TEAM.add(PARTNERS))"
            ],
            "block6994_1": [
                "campaign.join(_referrer, msg.sender, purchased)"
            ],
            "block6994_0": [
                "campaign.join(_referrer, msg.sender, purchased)"
            ]
        }
    }
}