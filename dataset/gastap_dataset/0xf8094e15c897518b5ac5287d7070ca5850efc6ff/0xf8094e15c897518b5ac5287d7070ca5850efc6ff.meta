{
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)",
            "assert(bool)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "assert(bool)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Ownable": {
        "function_list": [
            "Ownable()",
            "changeOwner(address)",
            "acceptOwnership()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "acceptOwnership()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "changeOwner(address)": [
                213,
                119
            ],
            "acceptOwnership()": [
                103,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "Pausable": {
        "function_list": [
            "Ownable()",
            "changeOwner(address)",
            "acceptOwnership()",
            "emergencyStop()",
            "release()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "acceptOwnership()": {
                "argument": {},
                "contract": {}
            },
            "emergencyStop()": {
                "argument": {},
                "contract": {}
            },
            "release()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "emergencyStop()": [
                136,
                75
            ],
            "acceptOwnership()": [
                206,
                119
            ],
            "changeOwner(address)": [
                339,
                185
            ],
            "release()": [
                229,
                141
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20Basic": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "balanceOf(address)": [
                124,
                97
            ],
            "totalSupply()": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "approveAndCall(address,uint256,bytes)",
            "doTransfer(address,address,uint256)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "value": "uint256",
                    "extraData": "bytes"
                },
                "contract": {}
            },
            "doTransfer(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "totalSupply()": [
                226,
                97
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "GrantsControlled": {
        "function_list": [
            "GrantsControlled()",
            "changeGrantsController(address)"
        ],
        "initial_state": {
            "GrantsControlled()": {
                "argument": {},
                "contract": {}
            },
            "changeGrantsController(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "changeGrantsController(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "Controlled": {
        "function_list": [
            "Controlled()",
            "changeController(address)"
        ],
        "initial_state": {
            "Controlled()": {
                "argument": {},
                "contract": {}
            },
            "changeController(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "changeController(address)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "MiniMeToken": {
        "function_list": [
            "Controlled()",
            "changeController(address)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "approveAndCall(address,uint256,bytes)",
            "doTransfer(address,address,uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "MiniMeToken(address,address,uint256,string,uint8,string,bool)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "doTransfer(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "approveAndCall(address,uint256,bytes)",
            "totalSupply()",
            "balanceOfAt(address,uint256)",
            "totalSupplyAt(uint256)",
            "createCloneToken(string,uint8,string,uint256,bool)",
            "generateTokens(address,uint256)",
            "destroyTokens(address,uint256)",
            "enableTransfers(bool)",
            "getValueAt(MiniMeToken.Checkpoint[],uint256)",
            "updateValueAtNow(MiniMeToken.Checkpoint[],uint256)",
            "isContract(address)",
            "min(uint256,uint256)",
            "fallback()",
            "claimTokens(address,address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Controlled()": {
                "argument": {},
                "contract": {
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "changeController(address)": {
                "argument": {},
                "contract": {
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_amount": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "doTransfer(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "MiniMeToken(address,address,uint256,string,uint8,string,bool)": {
                "argument": {
                    "_parentSnapShotBlock": "uint256",
                    "_tokenName": "string",
                    "_decimalUnits": "uint8",
                    "_tokenSymbol": "string"
                },
                "contract": {
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "balanceOfAt(address,uint256)": {
                "argument": {
                    "_blockNumber": "uint256"
                },
                "contract": {
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "totalSupplyAt(uint256)": {
                "argument": {
                    "_blockNumber": "uint256"
                },
                "contract": {
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "createCloneToken(string,uint8,string,uint256,bool)": {
                "argument": {
                    "_cloneTokenName": "string",
                    "_cloneDecimalUnits": "uint8",
                    "_cloneTokenSymbol": "string",
                    "_snapshotBlock": "uint256"
                },
                "contract": {
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "generateTokens(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "destroyTokens(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "enableTransfers(bool)": {
                "argument": {},
                "contract": {
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "getValueAt(MiniMeToken.Checkpoint[],uint256)": {
                "argument": {
                    "checkpoints": "MiniMeToken.Checkpoint[]",
                    "_block": "uint256"
                },
                "contract": {
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "updateValueAtNow(MiniMeToken.Checkpoint[],uint256)": {
                "argument": {
                    "checkpoints": "MiniMeToken.Checkpoint[]",
                    "_value": "uint256"
                },
                "contract": {
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "isContract(address)": {
                "argument": {},
                "contract": {
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "claimTokens(address,address)": {
                "argument": {},
                "contract": {
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            }
        },
        "function_block_mapping": {
            "balanceOfAt(address,uint256)": [
                10241,
                26
            ],
            "totalSupply()": [
                937,
                141
            ],
            "allowance(address,address)": [
                2790,
                537
            ],
            "transferFrom(address,address,uint256)": [
                980,
                163
            ],
            "approve(address,uint256)": [
                793,
                97
            ],
            "totalSupplyAt(uint256)": [
                10241,
                26
            ],
            "enableTransfers(bool)": [
                2996,
                581
            ],
            "createCloneToken(string,uint8,string,uint256,bool)": [
                1470,
                273
            ],
            "changeController(address)": [
                6371,
                889
            ],
            "balanceOf(address)": [
                1843,
                317
            ],
            "generateTokens(address,uint256)": [
                2017,
                361
            ],
            "approveAndCall(address,uint256,bytes)": [
                2518,
                493
            ],
            "claimTokens(address,address)": [
                1744,
                295
            ],
            "destroyTokens(address,uint256)": [
                2689,
                515
            ],
            "transfer(address,uint256)": [
                2327,
                427
            ]
        },
        "block_CALL_mapping": {
            "block3826_0": [
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)"
            ],
            "block5384_6": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump8130_0": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))",
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "block566": [
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "jump566_0": [
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)",
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "jump6613": [
                "_claimer.transfer(this.balance)",
                "_claimer.transfer(this.balance)"
            ],
            "jump5384_3": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7093": [
                "token.transfer(_claimer, balance)",
                "token.transfer(_claimer, balance)"
            ],
            "block3826": [
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)"
            ],
            "block5384": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5384_1": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5384_0": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6613": [
                "_claimer.transfer(this.balance)"
            ],
            "jump5384_0": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5384_5": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5384_4": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump566": [
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)",
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "block6155": [
                "tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            )"
            ],
            "jump5384_1": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5384": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5384_6": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump9848_0": [
                "TokenController(controller).onTransfer(_from, _to, _amount)",
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "block9848_0": [
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "jump9848": [
                "TokenController(controller).onTransfer(_from, _to, _amount)",
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "jump5384_5": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5384_2": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5384_3": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5384_4": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block9848": [
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "jump6155": [
                "tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            )",
                "tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            )"
            ],
            "jump3826": [
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)",
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)"
            ],
            "block8130": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5384_2": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6869": [
                "token.balanceOf(this)"
            ],
            "block8644": [
                "ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        )"
            ],
            "block7093": [
                "token.transfer(_claimer, balance)"
            ],
            "jump6371": [
                "cloneToken.changeController(msg.sender)",
                "cloneToken.changeController(msg.sender)"
            ],
            "jump8644": [
                "ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        )",
                "ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        )"
            ],
            "jump8130": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))",
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "block8130_0": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6371": [
                "cloneToken.changeController(msg.sender)"
            ],
            "block566_0": [
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "jump6869": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "jump3826_0": [
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)",
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)"
            ]
        }
    },
    "VestedToken": {
        "function_list": [
            "GrantsControlled()",
            "changeGrantsController(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "transferableTokens(address,uint64)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "approveAndCall(address,uint256,bytes)",
            "doTransfer(address,address,uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "grantVestedTokens(address,uint256,uint64,uint64,uint64,bool,bool)",
            "revokeTokenGrant(address,uint256)",
            "revokeAllTokenGrants(address)",
            "transferableTokens(address,uint64)",
            "tokenGrantsCount(address)",
            "calculateVestedTokens(uint256,uint256,uint256,uint256,uint256)",
            "tokenGrant(address,uint256)",
            "vestedTokens(VestedToken.TokenGrant,uint64)",
            "nonVestedTokens(VestedToken.TokenGrant,uint64)",
            "lastTokenIsTransferableDate(address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "GrantsControlled()": {
                "argument": {},
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => VestedToken.TokenGrant[])"
                }
            },
            "changeGrantsController(address)": {
                "argument": {},
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => VestedToken.TokenGrant[])"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => VestedToken.TokenGrant[])"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => VestedToken.TokenGrant[])"
                }
            },
            "transferableTokens(address,uint64)": {
                "argument": {
                    "time": "uint64"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => VestedToken.TokenGrant[])"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => VestedToken.TokenGrant[])"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => VestedToken.TokenGrant[])"
                }
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "value": "uint256",
                    "extraData": "bytes"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => VestedToken.TokenGrant[])"
                }
            },
            "doTransfer(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => VestedToken.TokenGrant[])"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => VestedToken.TokenGrant[])"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => VestedToken.TokenGrant[])"
                }
            },
            "grantVestedTokens(address,uint256,uint64,uint64,uint64,bool,bool)": {
                "argument": {
                    "_value": "uint256",
                    "_start": "uint64",
                    "_cliff": "uint64",
                    "_vesting": "uint64"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => VestedToken.TokenGrant[])"
                }
            },
            "revokeTokenGrant(address,uint256)": {
                "argument": {
                    "_grantId": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => VestedToken.TokenGrant[])"
                }
            },
            "revokeAllTokenGrants(address)": {
                "argument": {},
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => VestedToken.TokenGrant[])"
                }
            },
            "tokenGrantsCount(address)": {
                "argument": {},
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => VestedToken.TokenGrant[])"
                }
            },
            "calculateVestedTokens(uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "tokens": "uint256",
                    "time": "uint256",
                    "start": "uint256",
                    "cliff": "uint256",
                    "vesting": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => VestedToken.TokenGrant[])"
                }
            },
            "tokenGrant(address,uint256)": {
                "argument": {
                    "_grantId": "uint256"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => VestedToken.TokenGrant[])"
                }
            },
            "vestedTokens(VestedToken.TokenGrant,uint64)": {
                "argument": {
                    "time": "uint64"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => VestedToken.TokenGrant[])"
                }
            },
            "nonVestedTokens(VestedToken.TokenGrant,uint64)": {
                "argument": {
                    "time": "uint64"
                },
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => VestedToken.TokenGrant[])"
                }
            },
            "lastTokenIsTransferableDate(address)": {
                "argument": {},
                "contract": {
                    "MAX_GRANTS_PER_ADDRESS": "uint256",
                    "grants": "mapping(address => VestedToken.TokenGrant[])"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                300,
                97
            ],
            "tokenGrant(address,uint256)": [
                780,
                185
            ],
            "grantVestedTokens(address,uint256,uint64,uint64,uint64,bool,bool)": [
                1232,
                251
            ],
            "tokenGrantsCount(address)": [
                213,
                75
            ],
            "revokeTokenGrant(address,uint256)": [
                1801,
                361
            ],
            "balanceOf(address)": [
                1145,
                229
            ],
            "totalSupply()": [
                377,
                119
            ],
            "allowance(address,address)": [
                1577,
                317
            ],
            "transferableTokens(address,uint64)": [
                1470,
                295
            ],
            "lastTokenIsTransferableDate(address)": [
                1038,
                207
            ],
            "transferFrom(address,address,uint256)": [
                420,
                141
            ],
            "calculateVestedTokens(uint256,uint256,uint256,uint256,uint256)": [
                1696,
                339
            ],
            "transfer(address,uint256)": [
                1393,
                273
            ]
        },
        "block_CALL_mapping": {}
    },
    "District0xNetworkToken": {
        "function_list": [
            "grantVestedTokens(address,uint256,uint64,uint64,uint64,bool,bool)",
            "revokeTokenGrant(address,uint256)",
            "revokeAllTokenGrants(address)",
            "transferableTokens(address,uint64)",
            "tokenGrantsCount(address)",
            "calculateVestedTokens(uint256,uint256,uint256,uint256,uint256)",
            "tokenGrant(address,uint256)",
            "vestedTokens(VestedToken.TokenGrant,uint64)",
            "nonVestedTokens(VestedToken.TokenGrant,uint64)",
            "lastTokenIsTransferableDate(address)",
            "GrantsControlled()",
            "changeGrantsController(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "transferableTokens(address,uint64)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "approveAndCall(address,uint256,bytes)",
            "doTransfer(address,address,uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "MiniMeToken(address,address,uint256,string,uint8,string,bool)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "doTransfer(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "approveAndCall(address,uint256,bytes)",
            "totalSupply()",
            "balanceOfAt(address,uint256)",
            "totalSupplyAt(uint256)",
            "createCloneToken(string,uint8,string,uint256,bool)",
            "generateTokens(address,uint256)",
            "destroyTokens(address,uint256)",
            "enableTransfers(bool)",
            "getValueAt(MiniMeToken.Checkpoint[],uint256)",
            "updateValueAtNow(MiniMeToken.Checkpoint[],uint256)",
            "isContract(address)",
            "min(uint256,uint256)",
            "fallback()",
            "claimTokens(address,address)",
            "Controlled()",
            "changeController(address)",
            "District0xNetworkToken(address,address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "grantVestedTokens(address,uint256,uint64,uint64,uint64,bool,bool)": {
                "argument": {
                    "_value": "uint256",
                    "_start": "uint64",
                    "_cliff": "uint64",
                    "_vesting": "uint64"
                },
                "contract": {}
            },
            "revokeTokenGrant(address,uint256)": {
                "argument": {
                    "_grantId": "uint256"
                },
                "contract": {}
            },
            "revokeAllTokenGrants(address)": {
                "argument": {},
                "contract": {}
            },
            "transferableTokens(address,uint64)": {
                "argument": {
                    "time": "uint64"
                },
                "contract": {}
            },
            "tokenGrantsCount(address)": {
                "argument": {},
                "contract": {}
            },
            "calculateVestedTokens(uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "tokens": "uint256",
                    "time": "uint256",
                    "start": "uint256",
                    "cliff": "uint256",
                    "vesting": "uint256"
                },
                "contract": {}
            },
            "tokenGrant(address,uint256)": {
                "argument": {
                    "_grantId": "uint256"
                },
                "contract": {}
            },
            "vestedTokens(VestedToken.TokenGrant,uint64)": {
                "argument": {
                    "time": "uint64"
                },
                "contract": {}
            },
            "nonVestedTokens(VestedToken.TokenGrant,uint64)": {
                "argument": {
                    "time": "uint64"
                },
                "contract": {}
            },
            "lastTokenIsTransferableDate(address)": {
                "argument": {},
                "contract": {}
            },
            "GrantsControlled()": {
                "argument": {},
                "contract": {}
            },
            "changeGrantsController(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_amount": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {}
            },
            "doTransfer(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "MiniMeToken(address,address,uint256,string,uint8,string,bool)": {
                "argument": {
                    "_parentSnapShotBlock": "uint256",
                    "_tokenName": "string",
                    "_decimalUnits": "uint8",
                    "_tokenSymbol": "string"
                },
                "contract": {}
            },
            "balanceOfAt(address,uint256)": {
                "argument": {
                    "_blockNumber": "uint256"
                },
                "contract": {}
            },
            "totalSupplyAt(uint256)": {
                "argument": {
                    "_blockNumber": "uint256"
                },
                "contract": {}
            },
            "createCloneToken(string,uint8,string,uint256,bool)": {
                "argument": {
                    "_cloneTokenName": "string",
                    "_cloneDecimalUnits": "uint8",
                    "_cloneTokenSymbol": "string",
                    "_snapshotBlock": "uint256"
                },
                "contract": {}
            },
            "generateTokens(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "destroyTokens(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "enableTransfers(bool)": {
                "argument": {},
                "contract": {}
            },
            "getValueAt(MiniMeToken.Checkpoint[],uint256)": {
                "argument": {
                    "checkpoints": "MiniMeToken.Checkpoint[]",
                    "_block": "uint256"
                },
                "contract": {}
            },
            "updateValueAtNow(MiniMeToken.Checkpoint[],uint256)": {
                "argument": {
                    "checkpoints": "MiniMeToken.Checkpoint[]",
                    "_value": "uint256"
                },
                "contract": {}
            },
            "isContract(address)": {
                "argument": {},
                "contract": {}
            },
            "min(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "fallback()": {
                "argument": {},
                "contract": {}
            },
            "claimTokens(address,address)": {
                "argument": {},
                "contract": {}
            },
            "Controlled()": {
                "argument": {},
                "contract": {}
            },
            "changeController(address)": {
                "argument": {},
                "contract": {}
            },
            "District0xNetworkToken(address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "changeGrantsController(address)": [
                4260,
                757
            ],
            "balanceOfAt(address,uint256)": [
                15498,
                26
            ],
            "tokenGrantsCount(address)": [
                770,
                75
            ],
            "totalSupply()": [
                1145,
                163
            ],
            "allowance(address,address)": [
                4036,
                713
            ],
            "enableTransfers(bool)": [
                4491,
                823
            ],
            "transferFrom(address,address,uint256)": [
                1188,
                185
            ],
            "approve(address,uint256)": [
                1001,
                119
            ],
            "revokeAllTokenGrants(address)": [
                3761,
                647
            ],
            "totalSupplyAt(uint256)": [
                15498,
                26
            ],
            "calculateVestedTokens(uint256,uint256,uint256,uint256,uint256)": [
                4155,
                735
            ],
            "grantVestedTokens(address,uint256,uint64,uint64,uint64,bool,bool)": [
                3173,
                515
            ],
            "transferableTokens(address,uint64)": [
                3828,
                669
            ],
            "createCloneToken(string,uint8,string,uint256,bool)": [
                2187,
                339
            ],
            "tokenGrant(address,uint256)": [
                1929,
                317
            ],
            "changeController(address)": [
                8263,
                889
            ],
            "revokeTokenGrant(address,uint256)": [
                4414,
                801
            ],
            "balanceOf(address)": [
                2667,
                405
            ],
            "generateTokens(address,uint256)": [
                2841,
                449
            ],
            "approveAndCall(address,uint256,bytes)": [
                3590,
                625
            ],
            "claimTokens(address,address)": [
                2461,
                361
            ],
            "destroyTokens(address,uint256)": [
                3935,
                691
            ],
            "lastTokenIsTransferableDate(address)": [
                2560,
                383
            ],
            "transfer(address,uint256)": [
                3399,
                559
            ]
        },
        "block_CALL_mapping": {
            "jump6665": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6665_21": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6665_20": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6665_23": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6665_22": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump8761": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "block6665_24": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6665_8": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6665_9": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6665_4": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6665_5": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6665_6": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6665_7": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6665_0": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6665_1": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6665_2": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6665_3": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump687_0": [
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)",
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "jump6665_18": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6665_19": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6665_16": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6665_17": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6665_14": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6665_15": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6665_12": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6665_13": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6665_10": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6665_11": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block8047": [
                "tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            )"
            ],
            "block17253": [
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "block8761": [
                "token.balanceOf(this)"
            ],
            "block687_0": [
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "block17253_2": [
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "block17253_3": [
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "block17253_0": [
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "block17253_1": [
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "block5397": [
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)"
            ],
            "block11125_0": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5397_0": [
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)",
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)"
            ],
            "block687": [
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "block6665_8": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6665_9": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6665_6": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6665_7": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6665_4": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6665_5": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6665_2": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6665_3": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6665_0": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6665_1": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block8985": [
                "token.transfer(_claimer, balance)"
            ],
            "jump11637": [
                "ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        )",
                "ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        )"
            ],
            "block11637": [
                "ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        )"
            ],
            "jump5397": [
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)",
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)"
            ],
            "jump17253_0": [
                "TokenController(controller).onTransfer(_from, _to, _amount)",
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "jump17253_1": [
                "TokenController(controller).onTransfer(_from, _to, _amount)",
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "jump17253_2": [
                "TokenController(controller).onTransfer(_from, _to, _amount)",
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "jump17253_3": [
                "TokenController(controller).onTransfer(_from, _to, _amount)",
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "jump17253": [
                "TokenController(controller).onTransfer(_from, _to, _amount)",
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "jump11125_0": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))",
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump11125": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))",
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump8047": [
                "tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            )",
                "tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            )"
            ],
            "block6665": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6665_10": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6665_11": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6665_12": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6665_13": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6665_14": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6665_15": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6665_16": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6665_17": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6665_18": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6665_19": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block11125": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "block8263": [
                "cloneToken.changeController(msg.sender)"
            ],
            "jump8263": [
                "cloneToken.changeController(msg.sender)",
                "cloneToken.changeController(msg.sender)"
            ],
            "jump6665_24": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6665_23": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6665_22": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6665_21": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6665_20": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump687": [
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)",
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "jump8985": [
                "token.transfer(_claimer, balance)",
                "token.transfer(_claimer, balance)"
            ],
            "block8505": [
                "_claimer.transfer(this.balance)"
            ],
            "jump8505": [
                "_claimer.transfer(this.balance)",
                "_claimer.transfer(this.balance)"
            ],
            "block5397_0": [
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)"
            ]
        }
    },
    "HasNoTokens": {
        "function_list": [
            "Ownable()",
            "changeOwner(address)",
            "acceptOwnership()",
            "tokenFallback(address,uint256,bytes)",
            "isTokenSaleToken(address)",
            "reclaimToken(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "acceptOwnership()": {
                "argument": {},
                "contract": {}
            },
            "tokenFallback(address,uint256,bytes)": {
                "argument": {
                    "value_": "uint256",
                    "data_": "bytes"
                },
                "contract": {}
            },
            "isTokenSaleToken(address)": {
                "argument": {},
                "contract": {}
            },
            "reclaimToken(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "tokenFallback(address,uint256,bytes)": [
                257,
                119
            ],
            "reclaimToken(address)": [
                103,
                75
            ]
        },
        "block_CALL_mapping": {
            "block1360": [
                "token.transfer(to, value)"
            ],
            "block673": [
                "token.balanceOf(this)"
            ],
            "jump1360": [
                "token.transfer(to, value)",
                "token.transfer(to, value)"
            ],
            "jump673": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ]
        }
    },
    "District0xContribution": {
        "function_list": [
            "proxyPayment(address)",
            "onTransfer(address,address,uint256)",
            "onApprove(address,address,uint256)",
            "tokenFallback(address,uint256,bytes)",
            "isTokenSaleToken(address)",
            "reclaimToken(address)",
            "Ownable()",
            "changeOwner(address)",
            "acceptOwnership()",
            "emergencyStop()",
            "release()",
            "District0xContribution(address,address,address,address,address[])",
            "isContribPeriodRunning()",
            "contribute()",
            "contributeWithAddress(address)",
            "compensateContributors(uint256,uint256)",
            "setContribPeriod(uint256,uint256,uint256,uint256,uint256)",
            "enableContribPeriod()",
            "setMinContribAmount(uint256)",
            "setMaxGasPrice(uint256)",
            "setDistrict0xNetworkToken(address)",
            "enableDistrict0xNetworkTokenTransfers()",
            "claimTokensFromTokenDistrict0xNetworkToken(address)",
            "kill(address)",
            "fallback()",
            "proxyPayment(address)",
            "onTransfer(address,address,uint256)",
            "onApprove(address,address,uint256)",
            "isTokenSaleToken(address)",
            "getContribPeriod()",
            "getConfiguration()",
            "getContributor(address)",
            "getUncompensatedContributors(uint256,uint256)",
            "getNow()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "proxyPayment(address)": {
                "argument": {},
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "onTransfer(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "onApprove(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "tokenFallback(address,uint256,bytes)": {
                "argument": {
                    "value_": "uint256",
                    "data_": "bytes"
                },
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "isTokenSaleToken(address)": {
                "argument": {},
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "reclaimToken(address)": {
                "argument": {},
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "Ownable()": {
                "argument": {},
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "acceptOwnership()": {
                "argument": {},
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "emergencyStop()": {
                "argument": {},
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "release()": {
                "argument": {},
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "District0xContribution(address,address,address,address,address[])": {
                "argument": {
                    "_advisers": "address[]"
                },
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "isContribPeriodRunning()": {
                "argument": {},
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "contribute()": {
                "argument": {},
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "contributeWithAddress(address)": {
                "argument": {},
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "compensateContributors(uint256,uint256)": {
                "argument": {
                    "offset": "uint256",
                    "limit": "uint256"
                },
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "setContribPeriod(uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_softCapAmount": "uint256",
                    "_afterSoftCapDuration": "uint256",
                    "_hardCapAmount": "uint256",
                    "_startTime": "uint256",
                    "_endTime": "uint256"
                },
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "enableContribPeriod()": {
                "argument": {},
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "setMinContribAmount(uint256)": {
                "argument": {
                    "_minContribAmount": "uint256"
                },
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "setMaxGasPrice(uint256)": {
                "argument": {
                    "_maxGasPrice": "uint256"
                },
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "setDistrict0xNetworkToken(address)": {
                "argument": {},
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "enableDistrict0xNetworkTokenTransfers()": {
                "argument": {},
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "claimTokensFromTokenDistrict0xNetworkToken(address)": {
                "argument": {},
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "kill(address)": {
                "argument": {},
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "getContribPeriod()": {
                "argument": {},
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "getConfiguration()": {
                "argument": {},
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "getContributor(address)": {
                "argument": {},
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "getUncompensatedContributors(uint256,uint256)": {
                "argument": {
                    "offset": "uint256",
                    "limit": "uint256"
                },
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "getNow()": {
                "argument": {},
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "advisers": "address[]",
                    "FOUNDER1_STAKE": "uint256",
                    "FOUNDER2_STAKE": "uint256",
                    "EARLY_CONTRIBUTOR_STAKE": "uint256",
                    "ADVISER_STAKE": "uint256",
                    "ADVISER_STAKE2": "uint256",
                    "COMMUNITY_ADVISERS_STAKE": "uint256",
                    "CONTRIB_PERIOD1_STAKE": "uint256",
                    "CONTRIB_PERIOD2_STAKE": "uint256",
                    "CONTRIB_PERIOD3_STAKE": "uint256",
                    "minContribAmount": "uint256",
                    "maxGasPrice": "uint256",
                    "TEAM_VESTING_CLIFF": "uint256",
                    "TEAM_VESTING_PERIOD": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_CLIFF": "uint256",
                    "EARLY_CONTRIBUTOR_VESTING_PERIOD": "uint256",
                    "softCapAmount": "uint256",
                    "afterSoftCapDuration": "uint256",
                    "hardCapAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "totalContributed": "uint256",
                    "contributorsKeys": "address[]"
                }
            }
        },
        "function_block_mapping": {
            "getNow()": [
                3641,
                1021
            ],
            "kill(address)": [
                3785,
                1065
            ],
            "setMinContribAmount(uint256)": [
                827,
                97
            ],
            "isTokenSaleToken(address)": [
                4544,
                1307
            ],
            "getContributor(address)": [
                1611,
                361
            ],
            "contributeWithAddress(address)": [
                2849,
                757
            ],
            "emergencyStop()": [
                2239,
                581
            ],
            "setDistrict0xNetworkToken(address)": [
                4217,
                1219
            ],
            "isContribPeriodRunning()": [
                3895,
                1109
            ],
            "getConfiguration()": [
                2309,
                625
            ],
            "tokenFallback(address,uint256,bytes)": [
                3684,
                1043
            ],
            "proxyPayment(address)": [
                4721,
                1373
            ],
            "acceptOwnership()": [
                2826,
                735
            ],
            "enableContribPeriod()": [
                2130,
                515
            ],
            "changeOwner(address)": [
                3364,
                933
            ],
            "getContribPeriod()": [
                4414,
                1285
            ],
            "claimTokensFromTokenDistrict0xNetworkToken(address)": [
                1544,
                339
            ],
            "setMaxGasPrice(uint256)": [
                3942,
                1131
            ],
            "onTransfer(address,address,uint256)": [
                1911,
                449
            ],
            "reclaimToken(address)": [
                1111,
                185
            ],
            "contribute()": [
                4074,
                1175
            ],
            "release()": [
                3120,
                845
            ],
            "compensateContributors(uint256,uint256)": [
                4885,
                1439
            ],
            "setContribPeriod(uint256,uint256,uint256,uint256,uint256)": [
                1326,
                251
            ],
            "onApprove(address,address,uint256)": [
                4084,
                1197
            ],
            "enableDistrict0xNetworkTokenTransfers()": [
                3431,
                955
            ],
            "getUncompensatedContributors(uint256,uint256)": [
                3501,
                999
            ]
        },
        "block_CALL_mapping": {
            "block10173": [
                "district0xNetworkToken.grantVestedTokens(advisers[1], ADVISER_STAKE, startDate, cliffDate, vestingDate, true, false)"
            ],
            "block6747": [
                "tokenInst.transfer(msg.sender, balance)"
            ],
            "jump5635_1": [
                "multisigWallet.transfer(contribValue)",
                "multisigWallet.transfer(contribValue)"
            ],
            "block6523": [
                "tokenInst.balanceOf(this)"
            ],
            "jump8997": [
                "district0xNetworkToken.grantVestedTokens(founder2, FOUNDER2_STAKE, startDate, cliffDate, vestingDate, true, false)",
                "district0xNetworkToken.grantVestedTokens(founder2, FOUNDER2_STAKE, startDate, cliffDate, vestingDate, true, false)"
            ],
            "jump5820_0": [
                "msg.sender.transfer(excessContribValue)",
                "msg.sender.transfer(excessContribValue)"
            ],
            "jump5820_1": [
                "msg.sender.transfer(excessContribValue)",
                "msg.sender.transfer(excessContribValue)"
            ],
            "jump17573": [
                "district0xNetworkToken.transfer(contributorAddress, contributors[contributorAddress].amountCompensated)",
                "district0xNetworkToken.transfer(contributorAddress, contributors[contributorAddress].amountCompensated)"
            ],
            "jump11371": [
                "district0xNetworkToken.grantVestedTokens(advisers[4], COMMUNITY_ADVISERS_STAKE, startDate, startDate, startDate, true, false)",
                "district0xNetworkToken.grantVestedTokens(advisers[4], COMMUNITY_ADVISERS_STAKE, startDate, startDate, startDate, true, false)"
            ],
            "jump5635_0": [
                "multisigWallet.transfer(contribValue)",
                "multisigWallet.transfer(contribValue)"
            ],
            "jump15675": [
                "district0xNetworkToken.generateTokens(this, FOUNDER1_STAKE\n                .add(FOUNDER2_STAKE)\n                .add(EARLY_CONTRIBUTOR_STAKE)\n                .add(ADVISER_STAKE.mul(2))\n                .add(ADVISER_STAKE2.mul(2))\n                .add(COMMUNITY_ADVISERS_STAKE)\n                .add(CONTRIB_PERIOD1_STAKE))",
                "district0xNetworkToken.generateTokens(this, FOUNDER1_STAKE\n                .add(FOUNDER2_STAKE)\n                .add(EARLY_CONTRIBUTOR_STAKE)\n                .add(ADVISER_STAKE.mul(2))\n                .add(ADVISER_STAKE2.mul(2))\n                .add(COMMUNITY_ADVISERS_STAKE)\n                .add(CONTRIB_PERIOD1_STAKE))"
            ],
            "block10971": [
                "district0xNetworkToken.grantVestedTokens(advisers[3], ADVISER_STAKE2, startDate, cliffDate, vestingDate, true, false)"
            ],
            "block7834": [
                "district0xNetworkToken.revokeAllTokenGrants(earlySponsor)"
            ],
            "jump5635_2": [
                "multisigWallet.transfer(contribValue)",
                "multisigWallet.transfer(contribValue)"
            ],
            "block8122": [
                "district0xNetworkToken.revokeAllTokenGrants(advisers[j])"
            ],
            "jump5635": [
                "multisigWallet.transfer(contribValue)",
                "multisigWallet.transfer(contribValue)"
            ],
            "jump6523": [
                "tokenInst.balanceOf(this)",
                "tokenInst.balanceOf(this)"
            ],
            "block8997": [
                "district0xNetworkToken.grantVestedTokens(founder2, FOUNDER2_STAKE, startDate, cliffDate, vestingDate, true, false)"
            ],
            "block5820_0": [
                "msg.sender.transfer(excessContribValue)"
            ],
            "block5820_1": [
                "msg.sender.transfer(excessContribValue)"
            ],
            "block5820_2": [
                "msg.sender.transfer(excessContribValue)"
            ],
            "block5635": [
                "multisigWallet.transfer(contribValue)"
            ],
            "block17573": [
                "district0xNetworkToken.transfer(contributorAddress, contributors[contributorAddress].amountCompensated)"
            ],
            "block16006": [
                "district0xNetworkToken.generateTokens(multisigWallet, CONTRIB_PERIOD2_STAKE\n                .add(CONTRIB_PERIOD3_STAKE))"
            ],
            "block11815": [
                "district0xNetworkToken.claimTokens(_token, multisigWallet)"
            ],
            "jump10971": [
                "district0xNetworkToken.grantVestedTokens(advisers[3], ADVISER_STAKE2, startDate, cliffDate, vestingDate, true, false)",
                "district0xNetworkToken.grantVestedTokens(advisers[3], ADVISER_STAKE2, startDate, cliffDate, vestingDate, true, false)"
            ],
            "jump9373": [
                "district0xNetworkToken.grantVestedTokens(earlySponsor, EARLY_CONTRIBUTOR_STAKE, startDate, earlyContribCliffDate, earlyContribVestingDate, true, false)",
                "district0xNetworkToken.grantVestedTokens(earlySponsor, EARLY_CONTRIBUTOR_STAKE, startDate, earlyContribCliffDate, earlyContribVestingDate, true, false)"
            ],
            "block5820": [
                "msg.sender.transfer(excessContribValue)"
            ],
            "block5635_2": [
                "multisigWallet.transfer(contribValue)"
            ],
            "jump8122": [
                "district0xNetworkToken.revokeAllTokenGrants(advisers[j])",
                "district0xNetworkToken.revokeAllTokenGrants(advisers[j])"
            ],
            "jump10173": [
                "district0xNetworkToken.grantVestedTokens(advisers[1], ADVISER_STAKE, startDate, cliffDate, vestingDate, true, false)",
                "district0xNetworkToken.grantVestedTokens(advisers[1], ADVISER_STAKE, startDate, cliffDate, vestingDate, true, false)"
            ],
            "block7340": [
                "district0xNetworkToken.revokeAllTokenGrants(founder1)"
            ],
            "jump15190": [
                "district0xNetworkToken.totalSupply()",
                "district0xNetworkToken.totalSupply()"
            ],
            "block11371": [
                "district0xNetworkToken.grantVestedTokens(advisers[4], COMMUNITY_ADVISERS_STAKE, startDate, startDate, startDate, true, false)"
            ],
            "jump11815": [
                "district0xNetworkToken.claimTokens(_token, multisigWallet)",
                "district0xNetworkToken.claimTokens(_token, multisigWallet)"
            ],
            "jump5820_2": [
                "msg.sender.transfer(excessContribValue)",
                "msg.sender.transfer(excessContribValue)"
            ],
            "jump10572": [
                "district0xNetworkToken.grantVestedTokens(advisers[2], ADVISER_STAKE2, startDate, cliffDate, vestingDate, true, false)",
                "district0xNetworkToken.grantVestedTokens(advisers[2], ADVISER_STAKE2, startDate, cliffDate, vestingDate, true, false)"
            ],
            "block5635_0": [
                "multisigWallet.transfer(contribValue)"
            ],
            "block5635_1": [
                "multisigWallet.transfer(contribValue)"
            ],
            "jump6747": [
                "tokenInst.transfer(msg.sender, balance)",
                "tokenInst.transfer(msg.sender, balance)"
            ],
            "block15190": [
                "district0xNetworkToken.totalSupply()"
            ],
            "jump7834": [
                "district0xNetworkToken.revokeAllTokenGrants(earlySponsor)",
                "district0xNetworkToken.revokeAllTokenGrants(earlySponsor)"
            ],
            "block9373": [
                "district0xNetworkToken.grantVestedTokens(earlySponsor, EARLY_CONTRIBUTOR_STAKE, startDate, earlyContribCliffDate, earlyContribVestingDate, true, false)"
            ],
            "block7587": [
                "district0xNetworkToken.revokeAllTokenGrants(founder2)"
            ],
            "block15675": [
                "district0xNetworkToken.generateTokens(this, FOUNDER1_STAKE\n                .add(FOUNDER2_STAKE)\n                .add(EARLY_CONTRIBUTOR_STAKE)\n                .add(ADVISER_STAKE.mul(2))\n                .add(ADVISER_STAKE2.mul(2))\n                .add(COMMUNITY_ADVISERS_STAKE)\n                .add(CONTRIB_PERIOD1_STAKE))"
            ],
            "jump9773": [
                "district0xNetworkToken.grantVestedTokens(advisers[0], ADVISER_STAKE, startDate, cliffDate, vestingDate, true, false)",
                "district0xNetworkToken.grantVestedTokens(advisers[0], ADVISER_STAKE, startDate, cliffDate, vestingDate, true, false)"
            ],
            "block8621": [
                "district0xNetworkToken.grantVestedTokens(founder1, FOUNDER1_STAKE, startDate, cliffDate, vestingDate, true, false)"
            ],
            "jump5820": [
                "msg.sender.transfer(excessContribValue)",
                "msg.sender.transfer(excessContribValue)"
            ],
            "jump16006": [
                "district0xNetworkToken.generateTokens(multisigWallet, CONTRIB_PERIOD2_STAKE\n                .add(CONTRIB_PERIOD3_STAKE))",
                "district0xNetworkToken.generateTokens(multisigWallet, CONTRIB_PERIOD2_STAKE\n                .add(CONTRIB_PERIOD3_STAKE))"
            ],
            "jump8621": [
                "district0xNetworkToken.grantVestedTokens(founder1, FOUNDER1_STAKE, startDate, cliffDate, vestingDate, true, false)",
                "district0xNetworkToken.grantVestedTokens(founder1, FOUNDER1_STAKE, startDate, cliffDate, vestingDate, true, false)"
            ],
            "block10572": [
                "district0xNetworkToken.grantVestedTokens(advisers[2], ADVISER_STAKE2, startDate, cliffDate, vestingDate, true, false)"
            ],
            "jump7587": [
                "district0xNetworkToken.revokeAllTokenGrants(founder2)",
                "district0xNetworkToken.revokeAllTokenGrants(founder2)"
            ],
            "block9773": [
                "district0xNetworkToken.grantVestedTokens(advisers[0], ADVISER_STAKE, startDate, cliffDate, vestingDate, true, false)"
            ],
            "jump7340": [
                "district0xNetworkToken.revokeAllTokenGrants(founder1)",
                "district0xNetworkToken.revokeAllTokenGrants(founder1)"
            ]
        }
    }
}