{
    "ECVerify": {
        "function_list": [
            "ecverify(bytes32,bytes)"
        ],
        "initial_state": {
            "ecverify(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "signature": "bytes"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Token": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256,bytes)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string"
                }
            },
            "transfer(address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_data": "bytes"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "RaidenMicroTransferChannels": {
        "function_list": [
            "RaidenMicroTransferChannels(address,uint32)",
            "getKey(address,address,uint32)",
            "verifyBalanceProof(address,uint32,uint192,bytes)",
            "tokenFallback(address,uint256,bytes)",
            "createChannelERC20(address,uint192)",
            "topUpERC20(address,uint32,uint192)",
            "uncooperativeClose(address,uint32,uint192,bytes)",
            "cooperativeClose(address,uint32,uint192,bytes,bytes)",
            "getChannelInfo(address,address,uint32)",
            "settle(address,uint32)",
            "createChannelPrivate(address,address,uint192)",
            "updateInternalBalanceStructs(address,address,uint32,uint192)",
            "initChallengePeriod(address,uint32,uint192)",
            "settleChannel(address,address,uint32,uint192)",
            "addressFromData(bytes)",
            "blockNumberFromData(bytes)",
            "addressHasCode(address)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "RaidenMicroTransferChannels(address,uint32)": {
                "argument": {
                    "_challenge_period": "uint32"
                },
                "contract": {
                    "challenge_period": "uint32",
                    "version": "string",
                    "channel_deposit_bugbounty_limit": "uint256"
                }
            },
            "getKey(address,address,uint32)": {
                "argument": {
                    "_open_block_number": "uint32"
                },
                "contract": {
                    "challenge_period": "uint32",
                    "version": "string",
                    "channel_deposit_bugbounty_limit": "uint256"
                }
            },
            "verifyBalanceProof(address,uint32,uint192,bytes)": {
                "argument": {
                    "_open_block_number": "uint32",
                    "_balance": "uint192",
                    "_balance_msg_sig": "bytes"
                },
                "contract": {
                    "challenge_period": "uint32",
                    "version": "string",
                    "channel_deposit_bugbounty_limit": "uint256"
                }
            },
            "tokenFallback(address,uint256,bytes)": {
                "argument": {
                    "_deposit": "uint256",
                    "_data": "bytes"
                },
                "contract": {
                    "challenge_period": "uint32",
                    "version": "string",
                    "channel_deposit_bugbounty_limit": "uint256"
                }
            },
            "createChannelERC20(address,uint192)": {
                "argument": {
                    "_deposit": "uint192"
                },
                "contract": {
                    "challenge_period": "uint32",
                    "version": "string",
                    "channel_deposit_bugbounty_limit": "uint256"
                }
            },
            "topUpERC20(address,uint32,uint192)": {
                "argument": {
                    "_open_block_number": "uint32",
                    "_added_deposit": "uint192"
                },
                "contract": {
                    "challenge_period": "uint32",
                    "version": "string",
                    "channel_deposit_bugbounty_limit": "uint256"
                }
            },
            "uncooperativeClose(address,uint32,uint192,bytes)": {
                "argument": {
                    "_open_block_number": "uint32",
                    "_balance": "uint192",
                    "_balance_msg_sig": "bytes"
                },
                "contract": {
                    "challenge_period": "uint32",
                    "version": "string",
                    "channel_deposit_bugbounty_limit": "uint256"
                }
            },
            "cooperativeClose(address,uint32,uint192,bytes,bytes)": {
                "argument": {
                    "_open_block_number": "uint32",
                    "_balance": "uint192",
                    "_balance_msg_sig": "bytes",
                    "_closing_sig": "bytes"
                },
                "contract": {
                    "challenge_period": "uint32",
                    "version": "string",
                    "channel_deposit_bugbounty_limit": "uint256"
                }
            },
            "getChannelInfo(address,address,uint32)": {
                "argument": {
                    "_open_block_number": "uint32"
                },
                "contract": {
                    "challenge_period": "uint32",
                    "version": "string",
                    "channel_deposit_bugbounty_limit": "uint256"
                }
            },
            "settle(address,uint32)": {
                "argument": {
                    "_open_block_number": "uint32"
                },
                "contract": {
                    "challenge_period": "uint32",
                    "version": "string",
                    "channel_deposit_bugbounty_limit": "uint256"
                }
            },
            "createChannelPrivate(address,address,uint192)": {
                "argument": {
                    "_deposit": "uint192"
                },
                "contract": {
                    "challenge_period": "uint32",
                    "version": "string",
                    "channel_deposit_bugbounty_limit": "uint256"
                }
            },
            "updateInternalBalanceStructs(address,address,uint32,uint192)": {
                "argument": {
                    "_open_block_number": "uint32",
                    "_added_deposit": "uint192"
                },
                "contract": {
                    "challenge_period": "uint32",
                    "version": "string",
                    "channel_deposit_bugbounty_limit": "uint256"
                }
            },
            "initChallengePeriod(address,uint32,uint192)": {
                "argument": {
                    "_open_block_number": "uint32",
                    "_balance": "uint192"
                },
                "contract": {
                    "challenge_period": "uint32",
                    "version": "string",
                    "channel_deposit_bugbounty_limit": "uint256"
                }
            },
            "settleChannel(address,address,uint32,uint192)": {
                "argument": {
                    "_open_block_number": "uint32",
                    "_balance": "uint192"
                },
                "contract": {
                    "challenge_period": "uint32",
                    "version": "string",
                    "channel_deposit_bugbounty_limit": "uint256"
                }
            },
            "addressFromData(bytes)": {
                "argument": {
                    "b": "bytes"
                },
                "contract": {
                    "challenge_period": "uint32",
                    "version": "string",
                    "channel_deposit_bugbounty_limit": "uint256"
                }
            },
            "blockNumberFromData(bytes)": {
                "argument": {
                    "b": "bytes"
                },
                "contract": {
                    "challenge_period": "uint32",
                    "version": "string",
                    "channel_deposit_bugbounty_limit": "uint256"
                }
            },
            "addressHasCode(address)": {
                "argument": {},
                "contract": {
                    "challenge_period": "uint32",
                    "version": "string",
                    "channel_deposit_bugbounty_limit": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "challenge_period": "uint32",
                    "version": "string",
                    "channel_deposit_bugbounty_limit": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "settle(address,uint32)": [
                973,
                185
            ],
            "tokenFallback(address,uint256,bytes)": [
                1918,
                339
            ],
            "getChannelInfo(address,address,uint32)": [
                279,
                97
            ],
            "cooperativeClose(address,uint32,uint192,bytes,bytes)": [
                559,
                119
            ],
            "uncooperativeClose(address,uint32,uint192,bytes)": [
                1775,
                317
            ],
            "getKey(address,address,uint32)": [
                1632,
                295
            ],
            "createChannelERC20(address,uint192)": [
                870,
                163
            ],
            "topUpERC20(address,uint32,uint192)": [
                2019,
                361
            ],
            "verifyBalanceProof(address,uint32,uint192,bytes)": [
                1099,
                229
            ]
        },
        "block_CALL_mapping": {
            "block5450_1": [
                "ecrecover(hash, v, r, s)"
            ],
            "block5450_0": [
                "ecrecover(hash, v, r, s)"
            ],
            "block5450_2": [
                "ecrecover(hash, v, r, s)"
            ],
            "jump6341_1": [
                "token.transfer(_receiver_address, _balance)",
                "token.transfer(_receiver_address, _balance)"
            ],
            "jump6341_0": [
                "token.transfer(_receiver_address, _balance)",
                "token.transfer(_receiver_address, _balance)"
            ],
            "jump5450": [
                "ecrecover(hash, v, r, s)",
                "ecrecover(hash, v, r, s)"
            ],
            "jump3173": [
                "token.transferFrom(msg.sender, address(this), _deposit)",
                "token.transferFrom(msg.sender, address(this), _deposit)"
            ],
            "jump6640_0": [
                "token.transfer(_sender_address, channel.deposit - _balance)",
                "token.transfer(_sender_address, channel.deposit - _balance)"
            ],
            "jump5240": [
                "token.transferFrom(msg.sender, address(this), _added_deposit)",
                "token.transferFrom(msg.sender, address(this), _added_deposit)"
            ],
            "jump6341": [
                "token.transfer(_receiver_address, _balance)",
                "token.transfer(_receiver_address, _balance)"
            ],
            "block6341": [
                "token.transfer(_receiver_address, _balance)"
            ],
            "block5450": [
                "ecrecover(hash, v, r, s)"
            ],
            "jump5450_2": [
                "ecrecover(hash, v, r, s)",
                "ecrecover(hash, v, r, s)"
            ],
            "jump5450_1": [
                "ecrecover(hash, v, r, s)",
                "ecrecover(hash, v, r, s)"
            ],
            "jump5450_0": [
                "ecrecover(hash, v, r, s)",
                "ecrecover(hash, v, r, s)"
            ],
            "block6640_1": [
                "token.transfer(_sender_address, channel.deposit - _balance)"
            ],
            "block6640_0": [
                "token.transfer(_sender_address, channel.deposit - _balance)"
            ],
            "block3173": [
                "token.transferFrom(msg.sender, address(this), _deposit)"
            ],
            "block6341_1": [
                "token.transfer(_receiver_address, _balance)"
            ],
            "block6341_0": [
                "token.transfer(_receiver_address, _balance)"
            ],
            "jump6640": [
                "token.transfer(_sender_address, channel.deposit - _balance)",
                "token.transfer(_sender_address, channel.deposit - _balance)"
            ],
            "jump6640_1": [
                "token.transfer(_sender_address, channel.deposit - _balance)",
                "token.transfer(_sender_address, channel.deposit - _balance)"
            ],
            "block6640": [
                "token.transfer(_sender_address, channel.deposit - _balance)"
            ],
            "block5240": [
                "token.transferFrom(msg.sender, address(this), _added_deposit)"
            ]
        }
    }
}