{
    "token": {
        "function_list": [
            "transfer(address,uint256)"
        ],
        "initial_state": {
            "transfer(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transfer(address,uint256)": [
                68,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "FazBitsCrowdsale": {
        "function_list": [
            "fallback()",
            "devWithdrawal(uint256,uint256)",
            "devResWithdrawal()",
            "closeCrowdsale(bool)",
            "checkTargetReached()",
            "returnTokens(uint256)",
            "safeWithdrawal()",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "fallback()": {
                "argument": {},
                "contract": {
                    "amountRaised": "uint256",
                    "resAmount": "uint256",
                    "soldTokens": "uint256",
                    "price": "uint256",
                    "minimumTarget": "uint256",
                    "maximumTarget": "uint256",
                    "deadline": "uint256"
                }
            },
            "devWithdrawal(uint256,uint256)": {
                "argument": {
                    "num": "uint256",
                    "den": "uint256"
                },
                "contract": {
                    "amountRaised": "uint256",
                    "resAmount": "uint256",
                    "soldTokens": "uint256",
                    "price": "uint256",
                    "minimumTarget": "uint256",
                    "maximumTarget": "uint256",
                    "deadline": "uint256"
                }
            },
            "devResWithdrawal()": {
                "argument": {},
                "contract": {
                    "amountRaised": "uint256",
                    "resAmount": "uint256",
                    "soldTokens": "uint256",
                    "price": "uint256",
                    "minimumTarget": "uint256",
                    "maximumTarget": "uint256",
                    "deadline": "uint256"
                }
            },
            "closeCrowdsale(bool)": {
                "argument": {},
                "contract": {
                    "amountRaised": "uint256",
                    "resAmount": "uint256",
                    "soldTokens": "uint256",
                    "price": "uint256",
                    "minimumTarget": "uint256",
                    "maximumTarget": "uint256",
                    "deadline": "uint256"
                }
            },
            "checkTargetReached()": {
                "argument": {},
                "contract": {
                    "amountRaised": "uint256",
                    "resAmount": "uint256",
                    "soldTokens": "uint256",
                    "price": "uint256",
                    "minimumTarget": "uint256",
                    "maximumTarget": "uint256",
                    "deadline": "uint256"
                }
            },
            "returnTokens(uint256)": {
                "argument": {
                    "tokensAmount": "uint256"
                },
                "contract": {
                    "amountRaised": "uint256",
                    "resAmount": "uint256",
                    "soldTokens": "uint256",
                    "price": "uint256",
                    "minimumTarget": "uint256",
                    "maximumTarget": "uint256",
                    "deadline": "uint256"
                }
            },
            "safeWithdrawal()": {
                "argument": {},
                "contract": {
                    "amountRaised": "uint256",
                    "resAmount": "uint256",
                    "soldTokens": "uint256",
                    "price": "uint256",
                    "minimumTarget": "uint256",
                    "maximumTarget": "uint256",
                    "deadline": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "devWithdrawal(uint256,uint256)": [
                1944,
                361
            ],
            "closeCrowdsale(bool)": [
                2046,
                405
            ],
            "checkTargetReached()": [
                1571,
                207
            ],
            "safeWithdrawal()": [
                2136,
                449
            ],
            "returnTokens(uint256)": [
                1483,
                163
            ],
            "devResWithdrawal()": [
                1287,
                75
            ]
        },
        "block_CALL_mapping": {
            "jump2275": [
                "beneficiary.send(resAmount)",
                "beneficiary.send(resAmount)"
            ],
            "block3859": [
                "msg.sender.send(amount)"
            ],
            "jump3259": [
                "beneficiary.send(wAmount)",
                "beneficiary.send(wAmount)"
            ],
            "block3259": [
                "beneficiary.send(wAmount)"
            ],
            "jump646_0": [
                "tokenReward.transfer(msg.sender, amount / price)",
                "tokenReward.transfer(msg.sender, amount / price)"
            ],
            "block2275": [
                "beneficiary.send(resAmount)"
            ],
            "jump646": [
                "tokenReward.transfer(msg.sender, amount / price)",
                "tokenReward.transfer(msg.sender, amount / price)"
            ],
            "jump1021_0": [
                "beneficiary.send(amount)",
                "beneficiary.send(amount)"
            ],
            "block2941": [
                "tokenReward.transfer(beneficiary, tokensAmount)"
            ],
            "jump2941": [
                "tokenReward.transfer(beneficiary, tokensAmount)",
                "tokenReward.transfer(beneficiary, tokensAmount)"
            ],
            "block646_0": [
                "tokenReward.transfer(msg.sender, amount / price)"
            ],
            "jump3859": [
                "msg.sender.send(amount)",
                "msg.sender.send(amount)"
            ],
            "jump1021": [
                "beneficiary.send(amount)",
                "beneficiary.send(amount)"
            ],
            "block646": [
                "tokenReward.transfer(msg.sender, amount / price)"
            ],
            "block1021": [
                "beneficiary.send(amount)"
            ],
            "block1021_0": [
                "beneficiary.send(amount)"
            ]
        }
    }
}