{
    "Owned": {
        "function_list": [
            "Owned()",
            "setOwner(address)"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {}
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "setOwner(address)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)",
            "toUINT112(uint256)",
            "toUINT120(uint256)",
            "toUINT128(uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "toUINT112(uint256)": {
                "argument": {
                    "a": "uint256"
                },
                "contract": {}
            },
            "toUINT120(uint256)": {
                "argument": {
                    "a": "uint256"
                },
                "contract": {}
            },
            "toUINT128(uint256)": {
                "argument": {
                    "a": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Token": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                357,
                97
            ],
            "totalSupply()": [
                458,
                119
            ],
            "balanceOf(address)": [
                756,
                207
            ],
            "transferFrom(address,address,uint256)": [
                501,
                141
            ],
            "transfer(address,uint256)": [
                1225,
                317
            ],
            "allowance(address,address)": [
                1326,
                339
            ]
        },
        "block_CALL_mapping": {}
    },
    "VEN": {
        "function_list": [
            "Owned()",
            "setOwner(address)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "VEN()",
            "totalSupply()",
            "fallback()",
            "isSealed()",
            "lastMintedTimestamp(address)",
            "claimBonus(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "approveAndCall(address,uint256,bytes)",
            "allowance(address,address)",
            "mint(address,uint256,bool,uint32)",
            "offerBonus(uint256)",
            "seal()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "VEN()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "isSealed()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "lastMintedTimestamp(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "claimBonus(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "mint(address,uint256,bool,uint32)": {
                "argument": {
                    "_amount": "uint256",
                    "timestamp": "uint32"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "offerBonus(uint256)": {
                "argument": {
                    "_bonus": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "seal()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                403,
                97
            ],
            "balanceOf(address)": [
                911,
                273
            ],
            "setOwner(address)": [
                504,
                119
            ],
            "mint(address,uint256,bool,uint32)": [
                1429,
                383
            ],
            "approveAndCall(address,uint256,bytes)": [
                1534,
                405
            ],
            "totalSupply()": [
                571,
                141
            ],
            "allowance(address,address)": [
                1705,
                427
            ],
            "isSealed()": [
                864,
                251
            ],
            "offerBonus(uint256)": [
                819,
                229
            ],
            "transferFrom(address,address,uint256)": [
                614,
                163
            ],
            "seal()": [
                796,
                207
            ],
            "transfer(address,uint256)": [
                1328,
                361
            ],
            "lastMintedTimestamp(address)": [
                998,
                295
            ]
        },
        "block_CALL_mapping": {
            "block7257": [
                "ApprovalReceiver(_spender).receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "jump7257": [
                "ApprovalReceiver(_spender).receiveApproval(msg.sender, _value, this, _extraData)",
                "ApprovalReceiver(_spender).receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "VENSale": {
        "function_list": [
            "Owned()",
            "setOwner(address)",
            "VENSale()",
            "exchangeRate()",
            "blockTime()",
            "stage()",
            "isContract(address)",
            "fallback()",
            "buy()",
            "officialSold()",
            "channelsSold()",
            "offerToChannel(address,uint256)",
            "initialize(VEN,address,address)",
            "finalize()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "minBuyInterval": "uint256",
                    "maxBuyEthAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "minBuyInterval": "uint256",
                    "maxBuyEthAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "VENSale()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "minBuyInterval": "uint256",
                    "maxBuyEthAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "exchangeRate()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "minBuyInterval": "uint256",
                    "maxBuyEthAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "blockTime()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "minBuyInterval": "uint256",
                    "maxBuyEthAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "stage()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "minBuyInterval": "uint256",
                    "maxBuyEthAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "isContract(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "minBuyInterval": "uint256",
                    "maxBuyEthAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "minBuyInterval": "uint256",
                    "maxBuyEthAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "buy()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "minBuyInterval": "uint256",
                    "maxBuyEthAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "officialSold()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "minBuyInterval": "uint256",
                    "maxBuyEthAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "channelsSold()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "minBuyInterval": "uint256",
                    "maxBuyEthAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "offerToChannel(address,uint256)": {
                "argument": {
                    "_venAmount": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "minBuyInterval": "uint256",
                    "maxBuyEthAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "initialize(VEN,address,address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "minBuyInterval": "uint256",
                    "maxBuyEthAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "finalize()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "minBuyInterval": "uint256",
                    "maxBuyEthAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "minBuyInterval": "uint256",
                    "maxBuyEthAmount": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "blockTime()": [
                512,
                185
            ],
            "setOwner(address)": [
                273,
                75
            ],
            "finalize()": [
                567,
                207
            ],
            "channelsSold()": [
                719,
                295
            ],
            "offerToChannel(address,uint256)": [
                1133,
                449
            ],
            "exchangeRate()": [
                469,
                163
            ],
            "buy()": [
                892,
                361
            ],
            "stage()": [
                945,
                405
            ],
            "officialSold()": [
                633,
                251
            ]
        },
        "block_CALL_mapping": {
            "block4806": [
                "_ven.owner()"
            ],
            "jump1521_0": [
                "ven.lastMintedTimestamp(msg.sender)",
                "ven.lastMintedTimestamp(msg.sender)"
            ],
            "jump1521_1": [
                "ven.lastMintedTimestamp(msg.sender)",
                "ven.lastMintedTimestamp(msg.sender)"
            ],
            "jump2428": [
                "msg.sender.transfer(toReturn)",
                "msg.sender.transfer(toReturn)"
            ],
            "jump5513": [
                "ven.mint(\n            venVault,\n            reservedForTeam.add(reservedForOperations),\n            false, // team and operations reserved portion can't share unsold tokens\n            blockTime()\n        )",
                "ven.mint(\n            venVault,\n            reservedForTeam.add(reservedForOperations),\n            false, // team and operations reserved portion can't share unsold tokens\n            blockTime()\n        )"
            ],
            "jump5880": [
                "ven.mint(\n            venVault,\n            privateSupply.add(commercialPlan),\n            true, // private ICO and commercial plan can share unsold tokens\n            blockTime()\n        )",
                "ven.mint(\n            venVault,\n            privateSupply.add(commercialPlan),\n            true, // private ICO and commercial plan can share unsold tokens\n            blockTime()\n        )"
            ],
            "block1521_0": [
                "ven.lastMintedTimestamp(msg.sender)"
            ],
            "block1521_1": [
                "ven.lastMintedTimestamp(msg.sender)"
            ],
            "jump3522": [
                "ven.offerBonus(unsold)",
                "ven.offerBonus(unsold)"
            ],
            "block2068": [
                "ethVault.transfer(ethCost)"
            ],
            "block2048": [
                "ven.mint(msg.sender, requested, true, blockTime())"
            ],
            "block6761": [
                "ven.mint(\n            _channelAccount,\n            _venAmount,\n            true,  // unsold tokens can be claimed by channels portion\n            blockTime()\n            )"
            ],
            "block5513": [
                "ven.mint(\n            venVault,\n            reservedForTeam.add(reservedForOperations),\n            false, // team and operations reserved portion can't share unsold tokens\n            blockTime()\n        )"
            ],
            "jump2048": [
                "ven.mint(msg.sender, requested, true, blockTime())",
                "ven.mint(msg.sender, requested, true, blockTime())"
            ],
            "block3522": [
                "ven.offerBonus(unsold)"
            ],
            "block1521": [
                "ven.lastMintedTimestamp(msg.sender)"
            ],
            "block3681": [
                "ven.seal()"
            ],
            "jump3681": [
                "ven.seal()",
                "ven.seal()"
            ],
            "block2068_1": [
                "ethVault.transfer(ethCost)"
            ],
            "jump4806": [
                "_ven.owner()",
                "_ven.owner()"
            ],
            "block2068_0": [
                "ethVault.transfer(ethCost)"
            ],
            "block2428_1": [
                "msg.sender.transfer(toReturn)"
            ],
            "block5880": [
                "ven.mint(\n            venVault,\n            privateSupply.add(commercialPlan),\n            true, // private ICO and commercial plan can share unsold tokens\n            blockTime()\n        )"
            ],
            "jump2068": [
                "ethVault.transfer(ethCost)",
                "ethVault.transfer(ethCost)"
            ],
            "jump6761": [
                "ven.mint(\n            _channelAccount,\n            _venAmount,\n            true,  // unsold tokens can be claimed by channels portion\n            blockTime()\n            )",
                "ven.mint(\n            _channelAccount,\n            _venAmount,\n            true,  // unsold tokens can be claimed by channels portion\n            blockTime()\n            )"
            ],
            "jump2428_1": [
                "msg.sender.transfer(toReturn)",
                "msg.sender.transfer(toReturn)"
            ],
            "jump2428_0": [
                "msg.sender.transfer(toReturn)",
                "msg.sender.transfer(toReturn)"
            ],
            "block2048_1": [
                "ven.mint(msg.sender, requested, true, blockTime())"
            ],
            "block2048_0": [
                "ven.mint(msg.sender, requested, true, blockTime())"
            ],
            "jump2048_1": [
                "ven.mint(msg.sender, requested, true, blockTime())",
                "ven.mint(msg.sender, requested, true, blockTime())"
            ],
            "jump2048_0": [
                "ven.mint(msg.sender, requested, true, blockTime())",
                "ven.mint(msg.sender, requested, true, blockTime())"
            ],
            "jump1521": [
                "ven.lastMintedTimestamp(msg.sender)",
                "ven.lastMintedTimestamp(msg.sender)"
            ],
            "jump2068_1": [
                "ethVault.transfer(ethCost)",
                "ethVault.transfer(ethCost)"
            ],
            "jump2068_0": [
                "ethVault.transfer(ethCost)",
                "ethVault.transfer(ethCost)"
            ],
            "block2428": [
                "msg.sender.transfer(toReturn)"
            ],
            "block2428_0": [
                "msg.sender.transfer(toReturn)"
            ]
        }
    }
}