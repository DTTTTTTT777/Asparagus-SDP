{
    "tokenRecipient": {
        "function_list": [
            "receiveApproval(address,uint256,address,bytes)"
        ],
        "initial_state": {
            "receiveApproval(address,uint256,address,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "receiveApproval(address,uint256,address,bytes)": [
                174,
                75
            ]
        },
        "block_CALL_mapping": {
            "jump573": [
                "t.transferFrom(_from, this, _value)",
                "t.transferFrom(_from, this, _value)"
            ],
            "block573": [
                "t.transferFrom(_from, this, _value)"
            ]
        }
    },
    "DailyCoinToken": {
        "function_list": [
            "DailyCoinToken()",
            "_transfer(address,address,uint256)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "approveAndCall(address,uint256,bytes)",
            "burn(uint256)",
            "burnFrom(address,uint256)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "DailyCoinToken()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256"
                }
            },
            "_transfer(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256"
                }
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256"
                }
            },
            "burn(uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256"
                }
            },
            "burnFrom(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                335,
                97
            ],
            "burn(uint256)": [
                661,
                185
            ],
            "burnFrom(address,uint256)": [
                817,
                229
            ],
            "transferFrom(address,address,uint256)": [
                479,
                141
            ],
            "approveAndCall(address,uint256,bytes)": [
                1139,
                295
            ],
            "transfer(address,uint256)": [
                1062,
                273
            ]
        },
        "block_CALL_mapping": {
            "jump3394": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "block3394": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "DailycoinCrowdsale": {
        "function_list": [
            "DailycoinCrowdsale()",
            "fallback()",
            "getNumTokens(uint256)",
            "endFunding()",
            "withdraw(uint256)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "DailycoinCrowdsale()": {
                "argument": {},
                "contract": {
                    "amountRaised": "uint256",
                    "tokensSold": "uint256",
                    "totalToSale": "uint256",
                    "deadline": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "amountRaised": "uint256",
                    "tokensSold": "uint256",
                    "totalToSale": "uint256",
                    "deadline": "uint256"
                }
            },
            "getNumTokens(uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "amountRaised": "uint256",
                    "tokensSold": "uint256",
                    "totalToSale": "uint256",
                    "deadline": "uint256"
                }
            },
            "endFunding()": {
                "argument": {},
                "contract": {
                    "amountRaised": "uint256",
                    "tokensSold": "uint256",
                    "totalToSale": "uint256",
                    "deadline": "uint256"
                }
            },
            "withdraw(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "amountRaised": "uint256",
                    "tokensSold": "uint256",
                    "totalToSale": "uint256",
                    "deadline": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "withdraw(uint256)": [
                624,
                119
            ],
            "endFunding()": [
                558,
                75
            ]
        },
        "block_CALL_mapping": {
            "jump1366": [
                "beneficiary.send(amountRaised)",
                "beneficiary.send(amountRaised)"
            ],
            "jump415_0": [
                "tokenReward.transfer(msg.sender, numOfTokens)",
                "tokenReward.transfer(msg.sender, numOfTokens)"
            ],
            "block415": [
                "tokenReward.transfer(msg.sender, numOfTokens)"
            ],
            "jump415": [
                "tokenReward.transfer(msg.sender, numOfTokens)",
                "tokenReward.transfer(msg.sender, numOfTokens)"
            ],
            "block1623": [
                "tokenReward.burn(totalToSale - tokensSold)"
            ],
            "block415_0": [
                "tokenReward.transfer(msg.sender, numOfTokens)"
            ],
            "block1366": [
                "beneficiary.send(amountRaised)"
            ],
            "block1967": [
                "beneficiary.transfer(amount)"
            ],
            "jump1623": [
                "tokenReward.burn(totalToSale - tokensSold)",
                "tokenReward.burn(totalToSale - tokensSold)"
            ],
            "jump1967": [
                "beneficiary.transfer(amount)",
                "beneficiary.transfer(amount)"
            ]
        }
    }
}