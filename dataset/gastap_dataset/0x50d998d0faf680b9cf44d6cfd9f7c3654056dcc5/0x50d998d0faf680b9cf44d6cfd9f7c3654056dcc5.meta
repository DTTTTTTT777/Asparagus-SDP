{
    "CSCLib": {
        "function_list": [
            "init(CSCLib.CSCStorage,address[],uint256[],address)",
            "addSplit(CSCLib.CSCStorage,CSCLib.Split)",
            "payAll(CSCLib.CSCStorage)",
            "getSplit(CSCLib.CSCStorage,uint256)",
            "getSplitCount(CSCLib.CSCStorage)",
            "claimFor(CSCLib.CSCStorage,address)",
            "claim(CSCLib.CSCStorage)",
            "getClaimableBalanceFor(CSCLib.CSCStorage,address)",
            "getClaimableBalance(CSCLib.CSCStorage)",
            "transfer(CSCLib.CSCStorage,address,uint256)",
            "pay(CSCLib.CSCStorage)"
        ],
        "initial_state": {
            "init(CSCLib.CSCStorage,address[],uint256[],address)": {
                "argument": {
                    "members": "address[]",
                    "ppms": "uint256[]"
                },
                "contract": {}
            },
            "addSplit(CSCLib.CSCStorage,CSCLib.Split)": {
                "argument": {},
                "contract": {}
            },
            "payAll(CSCLib.CSCStorage)": {
                "argument": {},
                "contract": {}
            },
            "getSplit(CSCLib.CSCStorage,uint256)": {
                "argument": {
                    "index": "uint256"
                },
                "contract": {}
            },
            "getSplitCount(CSCLib.CSCStorage)": {
                "argument": {},
                "contract": {}
            },
            "claimFor(CSCLib.CSCStorage,address)": {
                "argument": {},
                "contract": {}
            },
            "claim(CSCLib.CSCStorage)": {
                "argument": {},
                "contract": {}
            },
            "getClaimableBalanceFor(CSCLib.CSCStorage,address)": {
                "argument": {},
                "contract": {}
            },
            "getClaimableBalance(CSCLib.CSCStorage)": {
                "argument": {},
                "contract": {}
            },
            "transfer(CSCLib.CSCStorage,address,uint256)": {
                "argument": {
                    "ppm": "uint256"
                },
                "contract": {}
            },
            "pay(CSCLib.CSCStorage)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "ClaimableSplitCoin": {
        "function_list": [
            "ClaimableSplitCoin(address[],uint256[],address,bool)",
            "fallback()",
            "developer()",
            "getSplitCount()",
            "splits(uint256)",
            "isClaimable()",
            "claimFor(address)",
            "claim()",
            "getClaimableBalanceFor(address)",
            "getClaimableBalance()",
            "transfer(address,uint256)"
        ],
        "initial_state": {
            "ClaimableSplitCoin(address[],uint256[],address,bool)": {
                "argument": {
                    "members": "address[]",
                    "ppms": "uint256[]"
                },
                "contract": {}
            },
            "fallback()": {
                "argument": {},
                "contract": {}
            },
            "developer()": {
                "argument": {},
                "contract": {}
            },
            "getSplitCount()": {
                "argument": {},
                "contract": {}
            },
            "splits(uint256)": {
                "argument": {
                    "index": "uint256"
                },
                "contract": {}
            },
            "isClaimable()": {
                "argument": {},
                "contract": {}
            },
            "claimFor(address)": {
                "argument": {},
                "contract": {}
            },
            "claim()": {
                "argument": {},
                "contract": {}
            },
            "getClaimableBalanceFor(address)": {
                "argument": {},
                "contract": {}
            },
            "getClaimableBalance()": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "ppm": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "getClaimableBalance()": [
                712,
                251
            ],
            "claim()": [
                252,
                97
            ],
            "claimFor(address)": [
                645,
                229
            ],
            "isClaimable()": [
                275,
                119
            ],
            "splits(uint256)": [
                322,
                141
            ],
            "getClaimableBalanceFor(address)": [
                165,
                75
            ],
            "transfer(address,uint256)": [
                438,
                163
            ],
            "developer()": [
                515,
                185
            ],
            "getSplitCount()": [
                602,
                207
            ]
        },
        "block_CALL_mapping": {
            "jump1273_0": [
                "self.splits[index].to.call.gas(60000).value(value)()",
                "self.splits[index].to.call.gas(60000).value(value)()"
            ],
            "jump1273": [
                "self.splits[index].to.call.gas(60000).value(value)()",
                "self.splits[index].to.call.gas(60000).value(value)()"
            ],
            "jump2218_0": [
                "self.splits[splitIndex].to.call.gas(60000).value(sum)()",
                "self.splits[splitIndex].to.call.gas(60000).value(sum)()"
            ],
            "block2218": [
                "self.splits[splitIndex].to.call.gas(60000).value(sum)()"
            ],
            "block1273_0": [
                "self.splits[index].to.call.gas(60000).value(value)()"
            ],
            "block1273": [
                "self.splits[index].to.call.gas(60000).value(value)()"
            ],
            "jump2218": [
                "self.splits[splitIndex].to.call.gas(60000).value(sum)()",
                "self.splits[splitIndex].to.call.gas(60000).value(sum)()"
            ],
            "block2218_0": [
                "self.splits[splitIndex].to.call.gas(60000).value(sum)()"
            ]
        }
    }
}