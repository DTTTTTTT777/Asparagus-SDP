{
    "Owned": {
        "function_list": [
            "Owned()",
            "setOwner(address)"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {}
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "setOwner(address)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "Prealloc": {
        "function_list": [
            "set(Prealloc.UINT256,uint256)",
            "get(Prealloc.UINT256)"
        ],
        "initial_state": {
            "set(Prealloc.UINT256,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "get(Prealloc.UINT256)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Token": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "VEN": {
        "function_list": [
            "Owned()",
            "setOwner(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "VEN()",
            "fallback()",
            "isSealed()",
            "claimBonus(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "approveAndCall(address,uint256,bytes)",
            "allowance(address,address)",
            "mint(address,uint256,bool)",
            "offerBonus(uint256)",
            "seal()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "VEN()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "isSealed()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "claimBonus(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "mint(address,uint256,bool)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "offerBonus(uint256)": {
                "argument": {
                    "_bonus": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "seal()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "bonusOffered": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "mint(address,uint256,bool)": [
                1490,
                383
            ],
            "approve(address,uint256)": [
                392,
                97
            ],
            "balanceOf(address)": [
                900,
                273
            ],
            "setOwner(address)": [
                493,
                119
            ],
            "approveAndCall(address,uint256,bytes)": [
                1319,
                361
            ],
            "allowance(address,address)": [
                1579,
                405
            ],
            "isSealed()": [
                853,
                251
            ],
            "offerBonus(uint256)": [
                808,
                229
            ],
            "transferFrom(address,address,uint256)": [
                603,
                163
            ],
            "seal()": [
                785,
                207
            ],
            "transfer(address,uint256)": [
                1218,
                339
            ]
        },
        "block_CALL_mapping": {
            "jump5250": [
                "ApprovalReceiver(_spender).receiveApproval(msg.sender, _value, this, _extraData)",
                "ApprovalReceiver(_spender).receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "block5250": [
                "ApprovalReceiver(_spender).receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "VENSale": {
        "function_list": [
            "Owned()",
            "setOwner(address)",
            "VENSale()",
            "exchangeRate()",
            "blockTime()",
            "stage()",
            "fallback()",
            "buy()",
            "officialSold()",
            "offerToChannels(uint256)",
            "initialize(VEN,address,address,uint256,uint256,uint256,uint256)",
            "finalize()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "channelsSold": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "channelsSold": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "VENSale()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "channelsSold": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "exchangeRate()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "channelsSold": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "blockTime()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "channelsSold": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "stage()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "channelsSold": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "channelsSold": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "buy()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "channelsSold": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "officialSold()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "channelsSold": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "offerToChannels(uint256)": {
                "argument": {
                    "_venAmount": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "channelsSold": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "initialize(VEN,address,address,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_channelsLimit": "uint256",
                    "_startTime": "uint256",
                    "_endTime": "uint256",
                    "_earlyStageLasts": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "channelsSold": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "finalize()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "channelsSold": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "privateSupply": "uint256",
                    "commercialPlan": "uint256",
                    "reservedForTeam": "uint256",
                    "reservedForOperations": "uint256",
                    "nonPublicSupply": "uint256",
                    "publicSupply": "uint256",
                    "officialLimit": "uint256",
                    "channelsLimit": "uint256",
                    "channelsSold": "uint256",
                    "venPerEth": "uint256",
                    "venPerEthEarlyStage": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "earlyStageLasts": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "blockTime()": [
                683,
                207
            ],
            "setOwner(address)": [
                273,
                75
            ],
            "finalize()": [
                726,
                229
            ],
            "offerToChannels(uint256)": [
                1104,
                427
            ],
            "exchangeRate()": [
                640,
                185
            ],
            "buy()": [
                1051,
                383
            ],
            "stage()": [
                1149,
                449
            ],
            "officialSold()": [
                792,
                273
            ]
        },
        "block_CALL_mapping": {
            "block1629": [
                "ethVault.transfer(ethCost)"
            ],
            "jump3333": [
                "ven.mint(\n            venVault,\n            reservedForTeam.add(reservedForOperations),\n            false // team and operations reserved portion can't share unsold tokens\n        )",
                "ven.mint(\n            venVault,\n            reservedForTeam.add(reservedForOperations),\n            false // team and operations reserved portion can't share unsold tokens\n        )"
            ],
            "block1609": [
                "ven.mint(msg.sender, requested, true)"
            ],
            "jump3673": [
                "ven.mint(\n            venVault,\n            privateSupply.add(commercialPlan),\n            true // private ICO and commercial plan can share unsold tokens\n        )",
                "ven.mint(\n            venVault,\n            privateSupply.add(commercialPlan),\n            true // private ICO and commercial plan can share unsold tokens\n        )"
            ],
            "block3673": [
                "ven.mint(\n            venVault,\n            privateSupply.add(commercialPlan),\n            true // private ICO and commercial plan can share unsold tokens\n        )"
            ],
            "block1903_0": [
                "msg.sender.transfer(toReturn)"
            ],
            "block1903_1": [
                "msg.sender.transfer(toReturn)"
            ],
            "jump5348": [
                "ven.mint(\n            venVault,\n            _venAmount,\n            true  // unsold tokens can be claimed by channels portion\n            )",
                "ven.mint(\n            venVault,\n            _venAmount,\n            true  // unsold tokens can be claimed by channels portion\n            )"
            ],
            "jump4385": [
                "ven.offerBonus(unsold)",
                "ven.offerBonus(unsold)"
            ],
            "block2419": [
                "_ven.owner()"
            ],
            "jump4544": [
                "ven.seal()",
                "ven.seal()"
            ],
            "block5348": [
                "ven.mint(\n            venVault,\n            _venAmount,\n            true  // unsold tokens can be claimed by channels portion\n            )"
            ],
            "block1609_1": [
                "ven.mint(msg.sender, requested, true)"
            ],
            "block1609_0": [
                "ven.mint(msg.sender, requested, true)"
            ],
            "jump2419": [
                "_ven.owner()",
                "_ven.owner()"
            ],
            "block4544": [
                "ven.seal()"
            ],
            "block1629_1": [
                "ethVault.transfer(ethCost)"
            ],
            "block1629_0": [
                "ethVault.transfer(ethCost)"
            ],
            "jump1903": [
                "msg.sender.transfer(toReturn)",
                "msg.sender.transfer(toReturn)"
            ],
            "jump1903_0": [
                "msg.sender.transfer(toReturn)",
                "msg.sender.transfer(toReturn)"
            ],
            "jump1903_1": [
                "msg.sender.transfer(toReturn)",
                "msg.sender.transfer(toReturn)"
            ],
            "jump1609_1": [
                "ven.mint(msg.sender, requested, true)",
                "ven.mint(msg.sender, requested, true)"
            ],
            "jump1609_0": [
                "ven.mint(msg.sender, requested, true)",
                "ven.mint(msg.sender, requested, true)"
            ],
            "block4385": [
                "ven.offerBonus(unsold)"
            ],
            "jump1629_1": [
                "ethVault.transfer(ethCost)",
                "ethVault.transfer(ethCost)"
            ],
            "jump1629_0": [
                "ethVault.transfer(ethCost)",
                "ethVault.transfer(ethCost)"
            ],
            "block1903": [
                "msg.sender.transfer(toReturn)"
            ],
            "jump1629": [
                "ethVault.transfer(ethCost)",
                "ethVault.transfer(ethCost)"
            ],
            "jump1609": [
                "ven.mint(msg.sender, requested, true)",
                "ven.mint(msg.sender, requested, true)"
            ],
            "block3333": [
                "ven.mint(\n            venVault,\n            reservedForTeam.add(reservedForOperations),\n            false // team and operations reserved portion can't share unsold tokens\n        )"
            ]
        }
    }
}