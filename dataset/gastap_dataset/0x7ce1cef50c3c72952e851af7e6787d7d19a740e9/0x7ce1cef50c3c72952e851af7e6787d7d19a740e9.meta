{
    "Token": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "totalSupply()": [
                226,
                97
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "NettingChannelLibrary": {
        "function_list": [
            "deposit(NettingChannelLibrary.Data,uint256)",
            "close(NettingChannelLibrary.Data,uint64,uint256,bytes32,bytes32,bytes)",
            "updateTransfer(NettingChannelLibrary.Data,uint64,uint256,bytes32,bytes32,bytes)",
            "recoverAddressFromSignature(uint64,uint256,bytes32,bytes32,bytes)",
            "withdraw(NettingChannelLibrary.Data,bytes,bytes,bytes32)",
            "computeMerkleRoot(bytes,bytes)",
            "settle(NettingChannelLibrary.Data)",
            "decodeLock(bytes)",
            "signatureSplit(bytes)",
            "index_or_throw(NettingChannelLibrary.Data,address)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "kill(NettingChannelLibrary.Data)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "deposit(NettingChannelLibrary.Data,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "contract_version": "string"
                }
            },
            "close(NettingChannelLibrary.Data,uint64,uint256,bytes32,bytes32,bytes)": {
                "argument": {
                    "nonce": "uint64",
                    "transferred_amount": "uint256",
                    "locksroot": "bytes32",
                    "extra_hash": "bytes32",
                    "signature": "bytes"
                },
                "contract": {
                    "contract_version": "string"
                }
            },
            "updateTransfer(NettingChannelLibrary.Data,uint64,uint256,bytes32,bytes32,bytes)": {
                "argument": {
                    "nonce": "uint64",
                    "transferred_amount": "uint256",
                    "locksroot": "bytes32",
                    "extra_hash": "bytes32",
                    "signature": "bytes"
                },
                "contract": {
                    "contract_version": "string"
                }
            },
            "recoverAddressFromSignature(uint64,uint256,bytes32,bytes32,bytes)": {
                "argument": {
                    "nonce": "uint64",
                    "transferred_amount": "uint256",
                    "locksroot": "bytes32",
                    "extra_hash": "bytes32",
                    "signature": "bytes"
                },
                "contract": {
                    "contract_version": "string"
                }
            },
            "withdraw(NettingChannelLibrary.Data,bytes,bytes,bytes32)": {
                "argument": {
                    "locked_encoded": "bytes",
                    "merkle_proof": "bytes",
                    "secret": "bytes32"
                },
                "contract": {
                    "contract_version": "string"
                }
            },
            "computeMerkleRoot(bytes,bytes)": {
                "argument": {
                    "lock": "bytes",
                    "merkle_proof": "bytes"
                },
                "contract": {
                    "contract_version": "string"
                }
            },
            "settle(NettingChannelLibrary.Data)": {
                "argument": {},
                "contract": {
                    "contract_version": "string"
                }
            },
            "decodeLock(bytes)": {
                "argument": {
                    "lock": "bytes"
                },
                "contract": {
                    "contract_version": "string"
                }
            },
            "signatureSplit(bytes)": {
                "argument": {
                    "signature": "bytes"
                },
                "contract": {
                    "contract_version": "string"
                }
            },
            "index_or_throw(NettingChannelLibrary.Data,address)": {
                "argument": {},
                "contract": {
                    "contract_version": "string"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "contract_version": "string"
                }
            },
            "max(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "contract_version": "string"
                }
            },
            "kill(NettingChannelLibrary.Data)": {
                "argument": {},
                "contract": {
                    "contract_version": "string"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "contract_version": "string"
                }
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {
            "block1608": [
                "self.token.transferFrom(msg.sender, this, amount)"
            ],
            "block2974": [
                "self.token.transfer(counter_party.node_address, counter_amount)"
            ],
            "jump4548": [
                "ecrecover(signed_hash, v, r, s)",
                "ecrecover(signed_hash, v, r, s)"
            ],
            "block4548_0": [
                "ecrecover(signed_hash, v, r, s)"
            ],
            "jump4548_0": [
                "ecrecover(signed_hash, v, r, s)",
                "ecrecover(signed_hash, v, r, s)"
            ],
            "jump3289": [
                "self.token.transfer(closing_party.node_address, closer_amount)",
                "self.token.transfer(closing_party.node_address, closer_amount)"
            ],
            "jump2974": [
                "self.token.transfer(counter_party.node_address, counter_amount)",
                "self.token.transfer(counter_party.node_address, counter_amount)"
            ],
            "block1247": [
                "self.token.balanceOf(msg.sender)"
            ],
            "jump1608": [
                "self.token.transferFrom(msg.sender, this, amount)",
                "self.token.transferFrom(msg.sender, this, amount)"
            ],
            "block3289": [
                "self.token.transfer(closing_party.node_address, closer_amount)"
            ],
            "jump1247": [
                "self.token.balanceOf(msg.sender)",
                "self.token.balanceOf(msg.sender)"
            ],
            "block4548": [
                "ecrecover(signed_hash, v, r, s)"
            ]
        }
    }
}