{
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "tokenRecipient": {
        "function_list": [
            "receiveApproval(address,uint256,address,bytes)"
        ],
        "initial_state": {
            "receiveApproval(address,uint256,address,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "receiveApproval(address,uint256,address,bytes)": [
                174,
                75
            ]
        },
        "block_CALL_mapping": {
            "jump573": [
                "t.transferFrom(_from, this, _value)",
                "t.transferFrom(_from, this, _value)"
            ],
            "block573": [
                "t.transferFrom(_from, this, _value)"
            ]
        }
    },
    "LoggedERC20": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "LoggedERC20(uint256,string,uint8,string,bool,bool)",
            "valueAt(LoggedERC20.LogValueBlock[],uint256)",
            "setBalance(address,uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "transferInternal(address,address,uint256)",
            "transfer(address,uint256)",
            "approve(address,uint256)",
            "approveAndCall(address,uint256,bytes)",
            "transferFrom(address,address,uint256)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "loggedTotalSupply": "LoggedERC20.LogValueBlock[]",
                    "creationBlock": "uint256",
                    "loggedBalances": "mapping(address => LoggedERC20.LogValueBlock[])"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "loggedTotalSupply": "LoggedERC20.LogValueBlock[]",
                    "creationBlock": "uint256",
                    "loggedBalances": "mapping(address => LoggedERC20.LogValueBlock[])"
                }
            },
            "LoggedERC20(uint256,string,uint8,string,bool,bool)": {
                "argument": {
                    "initialSupply": "uint256",
                    "tokenName": "string",
                    "decimalUnits": "uint8",
                    "tokenSymbol": "string"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "loggedTotalSupply": "LoggedERC20.LogValueBlock[]",
                    "creationBlock": "uint256",
                    "loggedBalances": "mapping(address => LoggedERC20.LogValueBlock[])"
                }
            },
            "valueAt(LoggedERC20.LogValueBlock[],uint256)": {
                "argument": {
                    "valueBlocks": "LoggedERC20.LogValueBlock[]",
                    "block": "uint256"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "loggedTotalSupply": "LoggedERC20.LogValueBlock[]",
                    "creationBlock": "uint256",
                    "loggedBalances": "mapping(address => LoggedERC20.LogValueBlock[])"
                }
            },
            "setBalance(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "loggedTotalSupply": "LoggedERC20.LogValueBlock[]",
                    "creationBlock": "uint256",
                    "loggedBalances": "mapping(address => LoggedERC20.LogValueBlock[])"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "loggedTotalSupply": "LoggedERC20.LogValueBlock[]",
                    "creationBlock": "uint256",
                    "loggedBalances": "mapping(address => LoggedERC20.LogValueBlock[])"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "loggedTotalSupply": "LoggedERC20.LogValueBlock[]",
                    "creationBlock": "uint256",
                    "loggedBalances": "mapping(address => LoggedERC20.LogValueBlock[])"
                }
            },
            "transferInternal(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "loggedTotalSupply": "LoggedERC20.LogValueBlock[]",
                    "creationBlock": "uint256",
                    "loggedBalances": "mapping(address => LoggedERC20.LogValueBlock[])"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "loggedTotalSupply": "LoggedERC20.LogValueBlock[]",
                    "creationBlock": "uint256",
                    "loggedBalances": "mapping(address => LoggedERC20.LogValueBlock[])"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "loggedTotalSupply": "LoggedERC20.LogValueBlock[]",
                    "creationBlock": "uint256",
                    "loggedBalances": "mapping(address => LoggedERC20.LogValueBlock[])"
                }
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "loggedTotalSupply": "LoggedERC20.LogValueBlock[]",
                    "creationBlock": "uint256",
                    "loggedBalances": "mapping(address => LoggedERC20.LogValueBlock[])"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "loggedTotalSupply": "LoggedERC20.LogValueBlock[]",
                    "creationBlock": "uint256",
                    "loggedBalances": "mapping(address => LoggedERC20.LogValueBlock[])"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                401,
                97
            ],
            "totalSupply()": [
                545,
                141
            ],
            "balanceOf(address)": [
                1018,
                251
            ],
            "transferFrom(address,address,uint256)": [
                588,
                163
            ],
            "transferOwnership(address)": [
                1913,
                449
            ],
            "approveAndCall(address,uint256,bytes)": [
                1576,
                383
            ],
            "transfer(address,uint256)": [
                1408,
                339
            ]
        },
        "block_CALL_mapping": {
            "jump3584": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "block3584": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "LoggedDividend": {
        "function_list": [
            "LoggedERC20(uint256,string,uint8,string,bool,bool)",
            "valueAt(LoggedERC20.LogValueBlock[],uint256)",
            "setBalance(address,uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "transferInternal(address,address,uint256)",
            "transfer(address,uint256)",
            "approve(address,uint256)",
            "approveAndCall(address,uint256,bytes)",
            "transferFrom(address,address,uint256)",
            "Ownable()",
            "transferOwnership(address)",
            "LoggedDividend(uint256,string,uint8,string,bool,bool)",
            "addDividend(uint256)",
            "claimDividend(uint256)",
            "claimDividends()",
            "recycleDividend(uint256)",
            "refundUnclaimedEthers(uint256)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "LoggedERC20(uint256,string,uint8,string,bool,bool)": {
                "argument": {
                    "initialSupply": "uint256",
                    "tokenName": "string",
                    "decimalUnits": "uint8",
                    "tokenSymbol": "string"
                },
                "contract": {
                    "dividends": "LoggedDividend.Dividend[]"
                }
            },
            "valueAt(LoggedERC20.LogValueBlock[],uint256)": {
                "argument": {
                    "valueBlocks": "LoggedERC20.LogValueBlock[]",
                    "block": "uint256"
                },
                "contract": {
                    "dividends": "LoggedDividend.Dividend[]"
                }
            },
            "setBalance(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "dividends": "LoggedDividend.Dividend[]"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "dividends": "LoggedDividend.Dividend[]"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "dividends": "LoggedDividend.Dividend[]"
                }
            },
            "transferInternal(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "dividends": "LoggedDividend.Dividend[]"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "dividends": "LoggedDividend.Dividend[]"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "dividends": "LoggedDividend.Dividend[]"
                }
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {
                    "dividends": "LoggedDividend.Dividend[]"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "dividends": "LoggedDividend.Dividend[]"
                }
            },
            "Ownable()": {
                "argument": {},
                "contract": {
                    "dividends": "LoggedDividend.Dividend[]"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "dividends": "LoggedDividend.Dividend[]"
                }
            },
            "LoggedDividend(uint256,string,uint8,string,bool,bool)": {
                "argument": {
                    "initialSupply": "uint256",
                    "tokenName": "string",
                    "decimalUnits": "uint8",
                    "tokenSymbol": "string"
                },
                "contract": {
                    "dividends": "LoggedDividend.Dividend[]"
                }
            },
            "addDividend(uint256)": {
                "argument": {
                    "recycleTime": "uint256"
                },
                "contract": {
                    "dividends": "LoggedDividend.Dividend[]"
                }
            },
            "claimDividend(uint256)": {
                "argument": {
                    "dividendId": "uint256"
                },
                "contract": {
                    "dividends": "LoggedDividend.Dividend[]"
                }
            },
            "claimDividends()": {
                "argument": {},
                "contract": {
                    "dividends": "LoggedDividend.Dividend[]"
                }
            },
            "recycleDividend(uint256)": {
                "argument": {
                    "dividendId": "uint256"
                },
                "contract": {
                    "dividends": "LoggedDividend.Dividend[]"
                }
            },
            "refundUnclaimedEthers(uint256)": {
                "argument": {
                    "dividendId": "uint256"
                },
                "contract": {
                    "dividends": "LoggedDividend.Dividend[]"
                }
            }
        },
        "function_block_mapping": {
            "recycleDividend(uint256)": [
                723,
                185
            ],
            "totalSupply()": [
                680,
                163
            ],
            "transferFrom(address,address,uint256)": [
                792,
                207
            ],
            "refundUnclaimedEthers(uint256)": [
                467,
                97
            ],
            "approve(address,uint256)": [
                536,
                119
            ],
            "claimDividend(uint256)": [
                1720,
                427
            ],
            "balanceOf(address)": [
                1245,
                317
            ],
            "approveAndCall(address,uint256,bytes)": [
                2029,
                515
            ],
            "claimDividends()": [
                1222,
                295
            ],
            "transferOwnership(address)": [
                2366,
                581
            ],
            "addDividend(uint256)": [
                1332,
                339
            ],
            "transfer(address,uint256)": [
                1861,
                471
            ]
        },
        "block_CALL_mapping": {
            "jump5638_0": [
                "msg.sender.transfer(claim)",
                "msg.sender.transfer(claim)"
            ],
            "block5638": [
                "msg.sender.transfer(claim)"
            ],
            "jump6346": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "jump5638": [
                "msg.sender.transfer(claim)",
                "msg.sender.transfer(claim)"
            ],
            "block6346": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "block5638_0": [
                "msg.sender.transfer(claim)"
            ],
            "jump2833": [
                "owner.transfer(claimedBackAmount)",
                "owner.transfer(claimedBackAmount)"
            ],
            "block2833": [
                "owner.transfer(claimedBackAmount)"
            ]
        }
    },
    "LoggedPhaseICO": {
        "function_list": [
            "LoggedDividend(uint256,string,uint8,string,bool,bool)",
            "addDividend(uint256)",
            "claimDividend(uint256)",
            "claimDividends()",
            "recycleDividend(uint256)",
            "refundUnclaimedEthers(uint256)",
            "LoggedERC20(uint256,string,uint8,string,bool,bool)",
            "valueAt(LoggedERC20.LogValueBlock[],uint256)",
            "setBalance(address,uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "transferInternal(address,address,uint256)",
            "transfer(address,uint256)",
            "approve(address,uint256)",
            "approveAndCall(address,uint256,bytes)",
            "transferFrom(address,address,uint256)",
            "Ownable()",
            "transferOwnership(address)",
            "LoggedPhaseICO(uint256,uint256,uint256,string,string,uint8,bool,bool)",
            "getIcoTokensAmount(uint256,uint256)",
            "buy(address,uint256,uint256)",
            "fallback()",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "LoggedDividend(uint256,string,uint8,string,bool,bool)": {
                "argument": {
                    "initialSupply": "uint256",
                    "tokenName": "string",
                    "decimalUnits": "uint8",
                    "tokenSymbol": "string"
                },
                "contract": {
                    "icoSince": "uint256",
                    "icoTill": "uint256",
                    "collectedEthers": "uint256",
                    "phases": "LoggedPhaseICO.Phase[]"
                }
            },
            "addDividend(uint256)": {
                "argument": {
                    "recycleTime": "uint256"
                },
                "contract": {
                    "icoSince": "uint256",
                    "icoTill": "uint256",
                    "collectedEthers": "uint256",
                    "phases": "LoggedPhaseICO.Phase[]"
                }
            },
            "claimDividend(uint256)": {
                "argument": {
                    "dividendId": "uint256"
                },
                "contract": {
                    "icoSince": "uint256",
                    "icoTill": "uint256",
                    "collectedEthers": "uint256",
                    "phases": "LoggedPhaseICO.Phase[]"
                }
            },
            "claimDividends()": {
                "argument": {},
                "contract": {
                    "icoSince": "uint256",
                    "icoTill": "uint256",
                    "collectedEthers": "uint256",
                    "phases": "LoggedPhaseICO.Phase[]"
                }
            },
            "recycleDividend(uint256)": {
                "argument": {
                    "dividendId": "uint256"
                },
                "contract": {
                    "icoSince": "uint256",
                    "icoTill": "uint256",
                    "collectedEthers": "uint256",
                    "phases": "LoggedPhaseICO.Phase[]"
                }
            },
            "refundUnclaimedEthers(uint256)": {
                "argument": {
                    "dividendId": "uint256"
                },
                "contract": {
                    "icoSince": "uint256",
                    "icoTill": "uint256",
                    "collectedEthers": "uint256",
                    "phases": "LoggedPhaseICO.Phase[]"
                }
            },
            "LoggedERC20(uint256,string,uint8,string,bool,bool)": {
                "argument": {
                    "initialSupply": "uint256",
                    "tokenName": "string",
                    "decimalUnits": "uint8",
                    "tokenSymbol": "string"
                },
                "contract": {
                    "icoSince": "uint256",
                    "icoTill": "uint256",
                    "collectedEthers": "uint256",
                    "phases": "LoggedPhaseICO.Phase[]"
                }
            },
            "valueAt(LoggedERC20.LogValueBlock[],uint256)": {
                "argument": {
                    "valueBlocks": "LoggedERC20.LogValueBlock[]",
                    "block": "uint256"
                },
                "contract": {
                    "icoSince": "uint256",
                    "icoTill": "uint256",
                    "collectedEthers": "uint256",
                    "phases": "LoggedPhaseICO.Phase[]"
                }
            },
            "setBalance(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "icoSince": "uint256",
                    "icoTill": "uint256",
                    "collectedEthers": "uint256",
                    "phases": "LoggedPhaseICO.Phase[]"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "icoSince": "uint256",
                    "icoTill": "uint256",
                    "collectedEthers": "uint256",
                    "phases": "LoggedPhaseICO.Phase[]"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "icoSince": "uint256",
                    "icoTill": "uint256",
                    "collectedEthers": "uint256",
                    "phases": "LoggedPhaseICO.Phase[]"
                }
            },
            "transferInternal(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "icoSince": "uint256",
                    "icoTill": "uint256",
                    "collectedEthers": "uint256",
                    "phases": "LoggedPhaseICO.Phase[]"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "icoSince": "uint256",
                    "icoTill": "uint256",
                    "collectedEthers": "uint256",
                    "phases": "LoggedPhaseICO.Phase[]"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "icoSince": "uint256",
                    "icoTill": "uint256",
                    "collectedEthers": "uint256",
                    "phases": "LoggedPhaseICO.Phase[]"
                }
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {
                    "icoSince": "uint256",
                    "icoTill": "uint256",
                    "collectedEthers": "uint256",
                    "phases": "LoggedPhaseICO.Phase[]"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "icoSince": "uint256",
                    "icoTill": "uint256",
                    "collectedEthers": "uint256",
                    "phases": "LoggedPhaseICO.Phase[]"
                }
            },
            "Ownable()": {
                "argument": {},
                "contract": {
                    "icoSince": "uint256",
                    "icoTill": "uint256",
                    "collectedEthers": "uint256",
                    "phases": "LoggedPhaseICO.Phase[]"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "icoSince": "uint256",
                    "icoTill": "uint256",
                    "collectedEthers": "uint256",
                    "phases": "LoggedPhaseICO.Phase[]"
                }
            },
            "LoggedPhaseICO(uint256,uint256,uint256,string,string,uint8,bool,bool)": {
                "argument": {
                    "_icoSince": "uint256",
                    "_icoTill": "uint256",
                    "initialSupply": "uint256",
                    "tokenName": "string",
                    "tokenSymbol": "string",
                    "precision": "uint8"
                },
                "contract": {
                    "icoSince": "uint256",
                    "icoTill": "uint256",
                    "collectedEthers": "uint256",
                    "phases": "LoggedPhaseICO.Phase[]"
                }
            },
            "getIcoTokensAmount(uint256,uint256)": {
                "argument": {
                    "collectedEthers": "uint256",
                    "value": "uint256"
                },
                "contract": {
                    "icoSince": "uint256",
                    "icoTill": "uint256",
                    "collectedEthers": "uint256",
                    "phases": "LoggedPhaseICO.Phase[]"
                }
            },
            "buy(address,uint256,uint256)": {
                "argument": {
                    "time": "uint256",
                    "value": "uint256"
                },
                "contract": {
                    "icoSince": "uint256",
                    "icoTill": "uint256",
                    "collectedEthers": "uint256",
                    "phases": "LoggedPhaseICO.Phase[]"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "icoSince": "uint256",
                    "icoTill": "uint256",
                    "collectedEthers": "uint256",
                    "phases": "LoggedPhaseICO.Phase[]"
                }
            }
        },
        "function_block_mapping": {
            "recycleDividend(uint256)": [
                971,
                251
            ],
            "totalSupply()": [
                885,
                207
            ],
            "transferFrom(address,address,uint256)": [
                1040,
                273
            ],
            "refundUnclaimedEthers(uint256)": [
                672,
                141
            ],
            "approve(address,uint256)": [
                741,
                163
            ],
            "claimDividend(uint256)": [
                2083,
                537
            ],
            "balanceOf(address)": [
                1608,
                427
            ],
            "approveAndCall(address,uint256,bytes)": [
                2392,
                625
            ],
            "claimDividends()": [
                1585,
                405
            ],
            "transferOwnership(address)": [
                2729,
                691
            ],
            "addDividend(uint256)": [
                1695,
                449
            ],
            "getIcoTokensAmount(uint256,uint256)": [
                453,
                97
            ],
            "transfer(address,uint256)": [
                2224,
                581
            ]
        },
        "block_CALL_mapping": {
            "block6789": [
                "msg.sender.transfer(claim)"
            ],
            "jump7497": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "jump3921": [
                "owner.transfer(claimedBackAmount)",
                "owner.transfer(claimedBackAmount)"
            ],
            "block3921": [
                "owner.transfer(claimedBackAmount)"
            ],
            "jump6789_0": [
                "msg.sender.transfer(claim)",
                "msg.sender.transfer(claim)"
            ],
            "jump6789": [
                "msg.sender.transfer(claim)",
                "msg.sender.transfer(claim)"
            ],
            "block6789_0": [
                "msg.sender.transfer(claim)"
            ],
            "block7497": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "Cajutel": {
        "function_list": [
            "LoggedPhaseICO(uint256,uint256,uint256,string,string,uint8,bool,bool)",
            "getIcoTokensAmount(uint256,uint256)",
            "buy(address,uint256,uint256)",
            "fallback()",
            "LoggedDividend(uint256,string,uint8,string,bool,bool)",
            "addDividend(uint256)",
            "claimDividend(uint256)",
            "claimDividends()",
            "recycleDividend(uint256)",
            "refundUnclaimedEthers(uint256)",
            "LoggedERC20(uint256,string,uint8,string,bool,bool)",
            "valueAt(LoggedERC20.LogValueBlock[],uint256)",
            "setBalance(address,uint256)",
            "totalSupply()",
            "balanceOf(address)",
            "transferInternal(address,address,uint256)",
            "transfer(address,uint256)",
            "approve(address,uint256)",
            "approveAndCall(address,uint256,bytes)",
            "transferFrom(address,address,uint256)",
            "Ownable()",
            "transferOwnership(address)",
            "Cajutel(uint256,string,string,address,address,address,uint256,uint256)",
            "transferEthers()",
            "setLocked(bool)",
            "setIcoDates(uint256,uint256)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "LoggedPhaseICO(uint256,uint256,uint256,string,string,uint8,bool,bool)": {
                "argument": {
                    "_icoSince": "uint256",
                    "_icoTill": "uint256",
                    "initialSupply": "uint256",
                    "tokenName": "string",
                    "tokenSymbol": "string",
                    "precision": "uint8"
                },
                "contract": {}
            },
            "getIcoTokensAmount(uint256,uint256)": {
                "argument": {
                    "collectedEthers": "uint256",
                    "value": "uint256"
                },
                "contract": {}
            },
            "buy(address,uint256,uint256)": {
                "argument": {
                    "time": "uint256",
                    "value": "uint256"
                },
                "contract": {}
            },
            "fallback()": {
                "argument": {},
                "contract": {}
            },
            "LoggedDividend(uint256,string,uint8,string,bool,bool)": {
                "argument": {
                    "initialSupply": "uint256",
                    "tokenName": "string",
                    "decimalUnits": "uint8",
                    "tokenSymbol": "string"
                },
                "contract": {}
            },
            "addDividend(uint256)": {
                "argument": {
                    "recycleTime": "uint256"
                },
                "contract": {}
            },
            "claimDividend(uint256)": {
                "argument": {
                    "dividendId": "uint256"
                },
                "contract": {}
            },
            "claimDividends()": {
                "argument": {},
                "contract": {}
            },
            "recycleDividend(uint256)": {
                "argument": {
                    "dividendId": "uint256"
                },
                "contract": {}
            },
            "refundUnclaimedEthers(uint256)": {
                "argument": {
                    "dividendId": "uint256"
                },
                "contract": {}
            },
            "LoggedERC20(uint256,string,uint8,string,bool,bool)": {
                "argument": {
                    "initialSupply": "uint256",
                    "tokenName": "string",
                    "decimalUnits": "uint8",
                    "tokenSymbol": "string"
                },
                "contract": {}
            },
            "valueAt(LoggedERC20.LogValueBlock[],uint256)": {
                "argument": {
                    "valueBlocks": "LoggedERC20.LogValueBlock[]",
                    "block": "uint256"
                },
                "contract": {}
            },
            "setBalance(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transferInternal(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "Cajutel(uint256,string,string,address,address,address,uint256,uint256)": {
                "argument": {
                    "initialSupply": "uint256",
                    "tokenName": "string",
                    "tokenSymbol": "string",
                    "icoSince": "uint256",
                    "icoTill": "uint256"
                },
                "contract": {}
            },
            "transferEthers()": {
                "argument": {},
                "contract": {}
            },
            "setLocked(bool)": {
                "argument": {},
                "contract": {}
            },
            "setIcoDates(uint256,uint256)": {
                "argument": {
                    "_icoSince": "uint256",
                    "_icoTill": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "recycleDividend(uint256)": [
                1051,
                273
            ],
            "totalSupply()": [
                918,
                207
            ],
            "transferFrom(address,address,uint256)": [
                1120,
                295
            ],
            "refundUnclaimedEthers(uint256)": [
                705,
                141
            ],
            "approve(address,uint256)": [
                774,
                163
            ],
            "claimDividend(uint256)": [
                2218,
                581
            ],
            "setIcoDates(uint256,uint256)": [
                1807,
                493
            ],
            "setLocked(bool)": [
                1004,
                251
            ],
            "balanceOf(address)": [
                1688,
                449
            ],
            "transferEthers()": [
                2745,
                713
            ],
            "approveAndCall(address,uint256,bytes)": [
                2527,
                669
            ],
            "claimDividends()": [
                1665,
                427
            ],
            "transferOwnership(address)": [
                2887,
                757
            ],
            "addDividend(uint256)": [
                1775,
                471
            ],
            "getIcoTokensAmount(uint256,uint256)": [
                486,
                97
            ],
            "transfer(address,uint256)": [
                2359,
                625
            ]
        },
        "block_CALL_mapping": {
            "jump8036": [
                "owner.transfer(this.balance)",
                "owner.transfer(this.balance)"
            ],
            "block7176": [
                "msg.sender.transfer(claim)"
            ],
            "block8036": [
                "owner.transfer(this.balance)"
            ],
            "block7176_0": [
                "msg.sender.transfer(claim)"
            ],
            "jump7176": [
                "msg.sender.transfer(claim)",
                "msg.sender.transfer(claim)"
            ],
            "block4079": [
                "owner.transfer(claimedBackAmount)"
            ],
            "block7884": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "jump7176_0": [
                "msg.sender.transfer(claim)",
                "msg.sender.transfer(claim)"
            ],
            "jump4079": [
                "owner.transfer(claimedBackAmount)",
                "owner.transfer(claimedBackAmount)"
            ],
            "jump7884": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    }
}