{
    "usingOraclize": {
        "function_list": [
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "matchBytes32Prefix(bytes32,bytes)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "matchBytes32Prefix(bytes32,bytes)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            }
        },
        "function_block_mapping": {
            "__callback(bytes32,string,bytes)": [
                200,
                97
            ],
            "__callback(bytes32,string)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "DSMath": {
        "function_list": [
            "add(uint256,uint256)",
            "sub(uint256,uint256)",
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "hadd(uint128,uint128)",
            "hsub(uint128,uint128)",
            "hmul(uint128,uint128)",
            "hdiv(uint128,uint128)",
            "hmin(uint128,uint128)",
            "hmax(uint128,uint128)",
            "imin(int256,int256)",
            "imax(int256,int256)",
            "wadd(uint128,uint128)",
            "wsub(uint128,uint128)",
            "wmul(uint128,uint128)",
            "wdiv(uint128,uint128)",
            "wmin(uint128,uint128)",
            "wmax(uint128,uint128)",
            "radd(uint128,uint128)",
            "rsub(uint128,uint128)",
            "rmul(uint128,uint128)",
            "rdiv(uint128,uint128)",
            "rpow(uint128,uint64)",
            "rmin(uint128,uint128)",
            "rmax(uint128,uint128)",
            "cast(uint256)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "div(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "hadd(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "hsub(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "hmul(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "hdiv(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "hmin(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "hmax(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "imin(int256,int256)": {
                "argument": {},
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "imax(int256,int256)": {
                "argument": {},
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "wadd(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "wsub(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "wmul(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "wdiv(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "wmin(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "wmax(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "radd(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "rsub(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "rmul(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "rdiv(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "rpow(uint128,uint64)": {
                "argument": {
                    "x": "uint128",
                    "n": "uint64"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "rmin(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "rmax(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "cast(uint256)": {
                "argument": {
                    "x": "uint256"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Owned": {
        "function_list": [
            "Owned()"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "oraclizeSettings": {
        "function_list": [
            "Owned()",
            "setSafeGas(uint256)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {
                    "ORACLIZE_PER_SPIN_GAS_LIMIT": "uint256",
                    "ORACLIZE_BASE_GAS_LIMIT": "uint256",
                    "safeGas": "uint256"
                }
            },
            "setSafeGas(uint256)": {
                "argument": {
                    "_gas": "uint256"
                },
                "contract": {
                    "ORACLIZE_PER_SPIN_GAS_LIMIT": "uint256",
                    "ORACLIZE_BASE_GAS_LIMIT": "uint256",
                    "safeGas": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "ORACLIZE_PER_SPIN_GAS_LIMIT": "uint256",
                    "ORACLIZE_BASE_GAS_LIMIT": "uint256",
                    "safeGas": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "setSafeGas(uint256)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "HouseManaged": {
        "function_list": [
            "Owned()",
            "HouseManaged()",
            "stop_or_resume_Contract(bool)",
            "changeHouse_and_Owner_Addresses(address,address)"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {}
            },
            "HouseManaged()": {
                "argument": {},
                "contract": {}
            },
            "stop_or_resume_Contract(bool)": {
                "argument": {},
                "contract": {}
            },
            "changeHouse_and_Owner_Addresses(address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "changeHouse_and_Owner_Addresses(address,address)": [
                161,
                97
            ],
            "stop_or_resume_Contract(bool)": [
                114,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "usingInvestorsModule": {
        "function_list": [
            "setSafeGas(uint256)",
            "Owned()",
            "HouseManaged()",
            "stop_or_resume_Contract(bool)",
            "changeHouse_and_Owner_Addresses(address,address)",
            "getBankroll()",
            "getMinInvestment()",
            "getLossesShare(address)",
            "getProfitShare(address)",
            "getBalance(address)",
            "searchSmallestInvestor()",
            "addInvestorAtID(uint256)",
            "profitDistribution()",
            "increaseInvestment()",
            "newInvestor()",
            "divest()",
            "divest(address)",
            "forceDivestOfAllInvestors()",
            "safeSend(address,uint256)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "setSafeGas(uint256)": {
                "argument": {
                    "_gas": "uint256"
                },
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "Owned()": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "HouseManaged()": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "stop_or_resume_Contract(bool)": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "changeHouse_and_Owner_Addresses(address,address)": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "getBankroll()": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "getMinInvestment()": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "getLossesShare(address)": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "getProfitShare(address)": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "getBalance(address)": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "searchSmallestInvestor()": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "addInvestorAtID(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "profitDistribution()": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "increaseInvestment()": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "newInvestor()": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "divest()": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "divest(address)": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "forceDivestOfAllInvestors()": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "safeSend(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "getMinInvestment()": [
                1143,
                383
            ],
            "getBalance(address)": [
                1458,
                515
            ],
            "forceDivestOfAllInvestors()": [
                631,
                207
            ],
            "stop_or_resume_Contract(bool)": [
                584,
                185
            ],
            "getLossesShare(address)": [
                497,
                163
            ],
            "increaseInvestment()": [
                1273,
                427
            ],
            "getProfitShare(address)": [
                367,
                119
            ],
            "changeHouse_and_Owner_Addresses(address,address)": [
                654,
                229
            ],
            "getBankroll()": [
                324,
                97
            ],
            "searchSmallestInvestor()": [
                927,
                295
            ],
            "divest()": [
                301,
                75
            ],
            "newInvestor()": [
                1545,
                537
            ],
            "setSafeGas(uint256)": [
                1413,
                493
            ]
        },
        "block_CALL_mapping": {
            "jump6384": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block6633_2": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump6633_3": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump6633_2": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block6384_0": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block6384_1": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump6633": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block6384_3": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block6384_4": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block6384_2": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block6384": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump6384_4": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump6384_2": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump6384_3": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump6384_0": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump6384_1": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block6633": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump6633_1": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump6633_0": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block6633_1": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block6633_0": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump6633_4": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block6633_4": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block6633_3": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ]
        }
    },
    "EmergencyWithdrawalModule": {
        "function_list": [
            "getBankroll()",
            "getMinInvestment()",
            "getLossesShare(address)",
            "getProfitShare(address)",
            "getBalance(address)",
            "searchSmallestInvestor()",
            "addInvestorAtID(uint256)",
            "profitDistribution()",
            "increaseInvestment()",
            "newInvestor()",
            "divest()",
            "divest(address)",
            "forceDivestOfAllInvestors()",
            "safeSend(address,uint256)",
            "setSafeGas(uint256)",
            "Owned()",
            "HouseManaged()",
            "stop_or_resume_Contract(bool)",
            "changeHouse_and_Owner_Addresses(address,address)",
            "voteEmergencyWithdrawal(bool)",
            "proposeEmergencyWithdrawal(address)",
            "executeEmergencyWithdrawal()",
            "forceDivestOfOneInvestor(address)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "getBankroll()": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "getMinInvestment()": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "getLossesShare(address)": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "getProfitShare(address)": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "getBalance(address)": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "searchSmallestInvestor()": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "addInvestorAtID(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "profitDistribution()": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "increaseInvestment()": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "newInvestor()": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "divest()": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "divest(address)": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "forceDivestOfAllInvestors()": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "safeSend(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "setSafeGas(uint256)": {
                "argument": {
                    "_gas": "uint256"
                },
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "Owned()": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "HouseManaged()": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "stop_or_resume_Contract(bool)": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "changeHouse_and_Owner_Addresses(address,address)": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "voteEmergencyWithdrawal(bool)": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "proposeEmergencyWithdrawal(address)": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "executeEmergencyWithdrawal()": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "forceDivestOfOneInvestor(address)": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "getMinInvestment()": [
                1473,
                471
            ],
            "executeEmergencyWithdrawal()": [
                1788,
                603
            ],
            "getBalance(address)": [
                1811,
                625
            ],
            "forceDivestOfAllInvestors()": [
                733,
                229
            ],
            "stop_or_resume_Contract(bool)": [
                686,
                207
            ],
            "getLossesShare(address)": [
                552,
                163
            ],
            "voteEmergencyWithdrawal(bool)": [
                639,
                185
            ],
            "getProfitShare(address)": [
                422,
                119
            ],
            "forceDivestOfOneInvestor(address)": [
                1139,
                361
            ],
            "changeHouse_and_Owner_Addresses(address,address)": [
                756,
                251
            ],
            "getBankroll()": [
                379,
                97
            ],
            "searchSmallestInvestor()": [
                1029,
                317
            ],
            "divest()": [
                356,
                75
            ],
            "proposeEmergencyWithdrawal(address)": [
                1072,
                339
            ],
            "newInvestor()": [
                1898,
                647
            ],
            "setSafeGas(uint256)": [
                1743,
                581
            ],
            "increaseInvestment()": [
                1603,
                515
            ]
        },
        "block_CALL_mapping": {
            "jump8500_6": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump8749_4": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump8500_4": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump8500_5": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump8500_2": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump8500_3": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump8500_0": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump8500_1": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump5617": [
                "proposedWithdrawal.toAddress.send(amountToWithdraw)",
                "proposedWithdrawal.toAddress.send(amountToWithdraw)"
            ],
            "block5617": [
                "proposedWithdrawal.toAddress.send(amountToWithdraw)"
            ],
            "jump8749_3": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block8500_4": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block8500_5": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block8500_6": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block8500_0": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block8500_1": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block8500_2": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block8500_3": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump8749": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump8749_6": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block8500": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump8749_1": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump8749_0": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block8749_6": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block8749_5": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block8749_4": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block8749_3": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block8749_2": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block8749_1": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block8749_0": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump8749_2": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block8749": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump8500": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump8749_5": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ]
        }
    },
    "Slot": {
        "function_list": [
            "add(uint256,uint256)",
            "sub(uint256,uint256)",
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "hadd(uint128,uint128)",
            "hsub(uint128,uint128)",
            "hmul(uint128,uint128)",
            "hdiv(uint128,uint128)",
            "hmin(uint128,uint128)",
            "hmax(uint128,uint128)",
            "imin(int256,int256)",
            "imax(int256,int256)",
            "wadd(uint128,uint128)",
            "wsub(uint128,uint128)",
            "wmul(uint128,uint128)",
            "wdiv(uint128,uint128)",
            "wmin(uint128,uint128)",
            "wmax(uint128,uint128)",
            "radd(uint128,uint128)",
            "rsub(uint128,uint128)",
            "rmul(uint128,uint128)",
            "rdiv(uint128,uint128)",
            "rpow(uint128,uint64)",
            "rmin(uint128,uint128)",
            "rmax(uint128,uint128)",
            "cast(uint256)",
            "voteEmergencyWithdrawal(bool)",
            "proposeEmergencyWithdrawal(address)",
            "executeEmergencyWithdrawal()",
            "forceDivestOfOneInvestor(address)",
            "getBankroll()",
            "getMinInvestment()",
            "getLossesShare(address)",
            "getProfitShare(address)",
            "getBalance(address)",
            "searchSmallestInvestor()",
            "addInvestorAtID(uint256)",
            "profitDistribution()",
            "increaseInvestment()",
            "newInvestor()",
            "divest()",
            "divest(address)",
            "forceDivestOfAllInvestors()",
            "safeSend(address,uint256)",
            "setSafeGas(uint256)",
            "Owned()",
            "HouseManaged()",
            "stop_or_resume_Contract(bool)",
            "changeHouse_and_Owner_Addresses(address,address)",
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "matchBytes32Prefix(bytes32,bytes)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "Slot(address)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "isValidSize(uint256)",
            "fallback()",
            "buySpins(uint256)",
            "executeSpins(bytes32,bytes)",
            "sendPayout(bytes32,uint256)",
            "__callback(bytes32,string,bytes)",
            "setConfiguration(uint256[],uint256[])",
            "setMinBet(uint256)",
            "getSpinsContainer(bytes32)",
            "getMinAmountToWager(uint256)",
            "getMaxAmountToWager(uint256)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "div(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "hadd(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "hsub(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "hmul(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "hdiv(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "hmin(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "hmax(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "imin(int256,int256)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "imax(int256,int256)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "wadd(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "wsub(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "wmul(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "wdiv(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "wmin(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "wmax(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "radd(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "rsub(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "rmul(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "rdiv(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "rpow(uint128,uint64)": {
                "argument": {
                    "x": "uint128",
                    "n": "uint64"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "rmin(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "rmax(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "cast(uint256)": {
                "argument": {
                    "x": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "voteEmergencyWithdrawal(bool)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "proposeEmergencyWithdrawal(address)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "executeEmergencyWithdrawal()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "forceDivestOfOneInvestor(address)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "getBankroll()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "getMinInvestment()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "getLossesShare(address)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "getProfitShare(address)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "getBalance(address)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "searchSmallestInvestor()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "addInvestorAtID(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "profitDistribution()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "increaseInvestment()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "newInvestor()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "divest()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "divest(address)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "forceDivestOfAllInvestors()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "safeSend(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "setSafeGas(uint256)": {
                "argument": {
                    "_gas": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "Owned()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "HouseManaged()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "stop_or_resume_Contract(bool)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "changeHouse_and_Owner_Addresses(address,address)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "_proof": "bytes"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "matchBytes32Prefix(bytes32,bytes)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "Slot(address)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "isValidSize(uint256)": {
                "argument": {
                    "_amountWagered": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "buySpins(uint256)": {
                "argument": {
                    "_nSpins": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "executeSpins(bytes32,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "randomBytes": "bytes"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "sendPayout(bytes32,uint256)": {
                "argument": {
                    "myid": "bytes32",
                    "payout": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "setConfiguration(uint256[],uint256[])": {
                "argument": {
                    "_probabilities": "uint256[]",
                    "_multipliers": "uint256[]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "setMinBet(uint256)": {
                "argument": {
                    "_minBet": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "getSpinsContainer(bytes32)": {
                "argument": {
                    "myid": "bytes32"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "getMinAmountToWager(uint256)": {
                "argument": {
                    "_nSpins": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "getMaxAmountToWager(uint256)": {
                "argument": {
                    "_nSpins": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "getMaxAmountToWager(uint256)": [
                1373,
                383
            ],
            "buySpins(uint256)": [
                604,
                141
            ],
            "changeHouse_and_Owner_Addresses(address,address)": [
                1274,
                361
            ],
            "getSpinsContainer(bytes32)": [
                636,
                163
            ],
            "executeEmergencyWithdrawal()": [
                2908,
                845
            ],
            "getBalance(address)": [
                2996,
                889
            ],
            "forceDivestOfAllInvestors()": [
                1132,
                317
            ],
            "stop_or_resume_Contract(bool)": [
                1085,
                295
            ],
            "getLossesShare(address)": [
                951,
                251
            ],
            "setConfiguration(uint256[],uint256[])": [
                2564,
                757
            ],
            "isValidSize(uint256)": [
                2430,
                713
            ],
            "__callback(bytes32,string,bytes)": [
                1438,
                405
            ],
            "setMinBet(uint256)": [
                2288,
                647
            ],
            "getBankroll()": [
                561,
                119
            ],
            "forceDivestOfOneInvestor(address)": [
                1911,
                515
            ],
            "getMinInvestment()": [
                2245,
                625
            ],
            "getProfitShare(address)": [
                821,
                207
            ],
            "searchSmallestInvestor()": [
                1801,
                471
            ],
            "getMinAmountToWager(uint256)": [
                756,
                185
            ],
            "divest()": [
                495,
                75
            ],
            "__callback(bytes32,string)": [
                1155,
                339
            ],
            "proposeEmergencyWithdrawal(address)": [
                1844,
                493
            ],
            "voteEmergencyWithdrawal(bool)": [
                1038,
                273
            ],
            "newInvestor()": [
                3083,
                911
            ],
            "setSafeGas(uint256)": [
                2863,
                823
            ],
            "increaseInvestment()": [
                2420,
                691
            ]
        },
        "block_CALL_mapping": {
            "block16105_3": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block16105_2": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block16105_1": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block16105_0": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block16105_7": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block16105_6": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block16105_5": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block16105_4": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block16105_9": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block16105_8": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump14185_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block19043_1": [
                "OAR.getAddress()"
            ],
            "block19043_0": [
                "OAR.getAddress()"
            ],
            "jump16105": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block6974": [
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", _nSpins*ORACLIZE_PER_SPIN_GAS_LIMIT + ORACLIZE_BASE_GAS_LIMIT + safeGas)"
            ],
            "jump18714_1": [
                "oraclize.randomDS_getSessionPubKeyHash()",
                "oraclize.randomDS_getSessionPubKeyHash()"
            ],
            "jump21934_0": [
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)",
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)"
            ],
            "jump18714_0": [
                "oraclize.randomDS_getSessionPubKeyHash()",
                "oraclize.randomDS_getSessionPubKeyHash()"
            ],
            "block16354_9": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block16354_8": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block11039": [
                "proposedWithdrawal.toAddress.send(amountToWithdraw)"
            ],
            "block21459_1": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block21459_0": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump18714": [
                "oraclize.randomDS_getSessionPubKeyHash()",
                "oraclize.randomDS_getSessionPubKeyHash()"
            ],
            "jump7832": [
                "externalContract.external_oraclize_randomDS_proofVerify(_proof, _queryId, bytes(_result), oraclize_getNetworkName())",
                "externalContract.external_oraclize_randomDS_proofVerify(_proof, _queryId, bytes(_result), oraclize_getNetworkName())"
            ],
            "jump21082_1": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump21082_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump3290_1": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump3290_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block16354_1": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block18457": [
                "OAR.getAddress()"
            ],
            "jump16354": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump4533": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block16354_7": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block14442_0": [
                "oraclize.cbAddress()"
            ],
            "block4533": [
                "OAR.getAddress()"
            ],
            "block16354_6": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump17862": [
                "oraclize.setProofType(proofP)",
                "oraclize.setProofType(proofP)"
            ],
            "jump12486": [
                "sha256(args[0])",
                "sha256(args[0])"
            ],
            "block17526": [
                "OAR.getAddress()"
            ],
            "block3290_1": [
                "OAR.getAddress()"
            ],
            "block3290_0": [
                "OAR.getAddress()"
            ],
            "block14185": [
                "OAR.getAddress()"
            ],
            "jump12486_0": [
                "sha256(args[0])",
                "sha256(args[0])"
            ],
            "block21459": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump3290": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block16354_12": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block16354_11": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump11039": [
                "proposedWithdrawal.toAddress.send(amountToWithdraw)",
                "proposedWithdrawal.toAddress.send(amountToWithdraw)"
            ],
            "jump16354_1": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump16354_0": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump16354_3": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump16354_2": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump16354_5": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump16354_4": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block12486": [
                "sha256(args[0])"
            ],
            "jump16354_6": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump16354_9": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump16354_8": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump21082": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump6974": [
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", _nSpins*ORACLIZE_PER_SPIN_GAS_LIMIT + ORACLIZE_BASE_GAS_LIMIT + safeGas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", _nSpins*ORACLIZE_PER_SPIN_GAS_LIMIT + ORACLIZE_BASE_GAS_LIMIT + safeGas)"
            ],
            "jump16105_11": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump16105_10": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump16105_12": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump3516": [
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", gas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", gas)"
            ],
            "block19043": [
                "OAR.getAddress()"
            ],
            "block16105": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump21934_1": [
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)",
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)"
            ],
            "block17862": [
                "oraclize.setProofType(proofP)"
            ],
            "block14442": [
                "oraclize.cbAddress()"
            ],
            "block3516_1": [
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", gas)"
            ],
            "jump19043": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block4759": [
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", gas)"
            ],
            "block12486_1": [
                "sha256(args[0])"
            ],
            "block12486_0": [
                "sha256(args[0])"
            ],
            "jump19558_0": [
                "externalContract.external_oraclize_randomDS_setCommitment(queryId, commitment)",
                "externalContract.external_oraclize_randomDS_setCommitment(queryId, commitment)"
            ],
            "jump19558_1": [
                "externalContract.external_oraclize_randomDS_setCommitment(queryId, commitment)",
                "externalContract.external_oraclize_randomDS_setCommitment(queryId, commitment)"
            ],
            "jump16354_11": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump16354_10": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump16354_12": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump14442_0": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "block3516": [
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", gas)"
            ],
            "jump12486_1": [
                "sha256(args[0])",
                "sha256(args[0])"
            ],
            "block3290": [
                "OAR.getAddress()"
            ],
            "jump4759": [
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", gas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", gas)"
            ],
            "block16354_10": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump18457_1": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump18457_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block14185_0": [
                "OAR.getAddress()"
            ],
            "jump19043_1": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump19043_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block21934_1": [
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)"
            ],
            "block21934_0": [
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)"
            ],
            "block21934": [
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)"
            ],
            "jump18457": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump19558": [
                "externalContract.external_oraclize_randomDS_setCommitment(queryId, commitment)",
                "externalContract.external_oraclize_randomDS_setCommitment(queryId, commitment)"
            ],
            "jump14185": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block7832_0": [
                "externalContract.external_oraclize_randomDS_proofVerify(_proof, _queryId, bytes(_result), oraclize_getNetworkName())"
            ],
            "jump21459": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block18457_0": [
                "OAR.getAddress()"
            ],
            "jump14442": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "jump7832_0": [
                "externalContract.external_oraclize_randomDS_proofVerify(_proof, _queryId, bytes(_result), oraclize_getNetworkName())",
                "externalContract.external_oraclize_randomDS_proofVerify(_proof, _queryId, bytes(_result), oraclize_getNetworkName())"
            ],
            "block18714_1": [
                "oraclize.randomDS_getSessionPubKeyHash()"
            ],
            "block18714_0": [
                "oraclize.randomDS_getSessionPubKeyHash()"
            ],
            "block18457_1": [
                "OAR.getAddress()"
            ],
            "block16105_12": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block16105_11": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block16105_10": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block7832": [
                "externalContract.external_oraclize_randomDS_proofVerify(_proof, _queryId, bytes(_result), oraclize_getNetworkName())"
            ],
            "block3516_0": [
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", gas)"
            ],
            "jump6735": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block21082": [
                "OAR.getAddress()"
            ],
            "jump21934": [
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)",
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)"
            ],
            "jump16105_5": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump16105_4": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump16105_7": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump16105_6": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump16105_1": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump16105_0": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump16105_3": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump16105_2": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block16354_3": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block16354_2": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block18714": [
                "oraclize.randomDS_getSessionPubKeyHash()"
            ],
            "block16354_0": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump16105_9": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump16105_8": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block16354_5": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block16354_4": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block6735": [
                "OAR.getAddress()"
            ],
            "jump17526": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump3516_0": [
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", gas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", gas)"
            ],
            "jump3516_1": [
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", gas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", gas)"
            ],
            "jump21459_1": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump21459_0": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block21082_1": [
                "OAR.getAddress()"
            ],
            "block21082_0": [
                "OAR.getAddress()"
            ],
            "jump16354_7": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block16354": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block19558_0": [
                "externalContract.external_oraclize_randomDS_setCommitment(queryId, commitment)"
            ],
            "block19558_1": [
                "externalContract.external_oraclize_randomDS_setCommitment(queryId, commitment)"
            ],
            "block19558": [
                "externalContract.external_oraclize_randomDS_setCommitment(queryId, commitment)"
            ]
        }
    }
}