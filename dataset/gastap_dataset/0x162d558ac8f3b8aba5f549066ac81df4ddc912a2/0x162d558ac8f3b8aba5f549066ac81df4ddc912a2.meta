{
    "usingOraclize": {
        "function_list": [
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)",
            "matchBytes32Prefix(bytes32,bytes)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "matchBytes32Prefix(bytes32,bytes)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            }
        },
        "function_block_mapping": {
            "__callback(bytes32,string,bytes)": [
                200,
                97
            ],
            "__callback(bytes32,string)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "Lottesy10eth": {
        "function_list": [
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)",
            "matchBytes32Prefix(bytes32,bytes)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "fallback()",
            "__callback(bytes32,string,bytes)",
            "emergencyWithdrawal()",
            "addSomeGas()",
            "closeIt()",
            "emergencyDrawingReset()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "matchBytes32Prefix(bytes32,bytes)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "emergencyWithdrawal()": {
                "argument": {},
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "addSomeGas()": {
                "argument": {},
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "closeIt()": {
                "argument": {},
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "emergencyDrawingReset()": {
                "argument": {},
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "drawingNo": "uint256",
                    "chanceNo": "uint256",
                    "winningChance": "uint256",
                    "globalChanceNo": "uint256",
                    "newGlobalChanceNo": "uint256",
                    "lottesyCom": "uint256",
                    "chancesBought": "uint256",
                    "theWinnernumber": "uint256",
                    "oraclizeGas": "uint256",
                    "maxRange": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "emergencyWithdrawal()": [
                1123,
                185
            ],
            "closeIt()": [
                1189,
                229
            ],
            "addSomeGas()": [
                1408,
                295
            ],
            "__callback(bytes32,string,bytes)": [
                934,
                163
            ],
            "emergencyDrawingReset()": [
                792,
                119
            ],
            "__callback(bytes32,string)": [
                815,
                141
            ]
        },
        "block_CALL_mapping": {
            "jump7038_1": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump3441_1": [
                "sha256(args[0])",
                "sha256(args[0])"
            ],
            "jump3441_0": [
                "sha256(args[0])",
                "sha256(args[0])"
            ],
            "block9452_1": [
                "OAR.getAddress()"
            ],
            "block9452_0": [
                "OAR.getAddress()"
            ],
            "jump4372": [
                "theWinner.transfer (10 ether)",
                "theWinner.transfer (10 ether)"
            ],
            "block7295_0": [
                "oraclize.randomDS_getSessionPubKeyHash()"
            ],
            "block7295_1": [
                "oraclize.randomDS_getSessionPubKeyHash()"
            ],
            "jump2222_0": [
                "oraclize.setCustomGasPrice(gasPrice)",
                "oraclize.setCustomGasPrice(gasPrice)"
            ],
            "jump5088": [
                "owner.transfer (this.balance)",
                "owner.transfer (this.balance)"
            ],
            "jump12159": [
                "sha256(tosign1)",
                "sha256(tosign1)"
            ],
            "jump10304_0": [
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)",
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)"
            ],
            "jump10304_1": [
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)",
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)"
            ],
            "jump2510_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump9829_1": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump9829_0": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump7624_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump4635_0": [
                "owner.transfer (lottesyCom)",
                "owner.transfer (lottesyCom)"
            ],
            "jump15483": [
                "sha256(tosign2)",
                "sha256(tosign2)"
            ],
            "jump4635": [
                "owner.transfer (lottesyCom)",
                "owner.transfer (lottesyCom)"
            ],
            "block10304_0": [
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)"
            ],
            "block10304_1": [
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)"
            ],
            "jump12159_0": [
                "sha256(tosign1)",
                "sha256(tosign1)"
            ],
            "block2222_0": [
                "oraclize.setCustomGasPrice(gasPrice)"
            ],
            "block4635": [
                "owner.transfer (lottesyCom)"
            ],
            "jump11719_0": [
                "sha256(sessionPubkey)",
                "sha256(sessionPubkey)"
            ],
            "block8529_0": [
                "oraclize.cbAddress()"
            ],
            "block4635_0": [
                "owner.transfer (lottesyCom)"
            ],
            "block1954_0": [
                "OAR.getAddress()"
            ],
            "jump7624": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump8272_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block7038_1": [
                "OAR.getAddress()"
            ],
            "block7038_0": [
                "OAR.getAddress()"
            ],
            "block1954": [
                "OAR.getAddress()"
            ],
            "jump2510_1": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block12159": [
                "sha256(tosign1)"
            ],
            "jump2510": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump7295": [
                "oraclize.randomDS_getSessionPubKeyHash()",
                "oraclize.randomDS_getSessionPubKeyHash()"
            ],
            "jump10304": [
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)",
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)"
            ],
            "jump2222": [
                "oraclize.setCustomGasPrice(gasPrice)",
                "oraclize.setCustomGasPrice(gasPrice)"
            ],
            "jump8529": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "block3441": [
                "sha256(args[0])"
            ],
            "jump1954_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump16143_0": [
                "sha256(tosign3)",
                "sha256(tosign3)"
            ],
            "block8272_0": [
                "OAR.getAddress()"
            ],
            "block9829_0": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block3441_1": [
                "sha256(args[0])"
            ],
            "block3441_0": [
                "sha256(args[0])"
            ],
            "jump15483_0": [
                "sha256(tosign2)",
                "sha256(tosign2)"
            ],
            "block2846_1": [
                "oraclize.setProofType(proofP)"
            ],
            "block2846_0": [
                "oraclize.setProofType(proofP)"
            ],
            "block11365": [
                "sha256(sig1)"
            ],
            "jump9452_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump3441": [
                "sha256(args[0])",
                "sha256(args[0])"
            ],
            "jump11365_0": [
                "sha256(sig1)",
                "sha256(sig1)"
            ],
            "block5088": [
                "owner.transfer (this.balance)"
            ],
            "jump2846_1": [
                "oraclize.setProofType(proofP)",
                "oraclize.setProofType(proofP)"
            ],
            "jump2846_0": [
                "oraclize.setProofType(proofP)",
                "oraclize.setProofType(proofP)"
            ],
            "block16143": [
                "sha256(tosign3)"
            ],
            "jump10819": [
                "sha256(context_name, queryId)",
                "sha256(context_name, queryId)"
            ],
            "block4372_0": [
                "theWinner.transfer (10 ether)"
            ],
            "block10819": [
                "sha256(context_name, queryId)"
            ],
            "jump16143": [
                "sha256(tosign3)",
                "sha256(tosign3)"
            ],
            "jump8272": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump7038": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block4372": [
                "theWinner.transfer (10 ether)"
            ],
            "block2510": [
                "OAR.getAddress()"
            ],
            "jump2846": [
                "oraclize.setProofType(proofP)",
                "oraclize.setProofType(proofP)"
            ],
            "jump7295_0": [
                "oraclize.randomDS_getSessionPubKeyHash()",
                "oraclize.randomDS_getSessionPubKeyHash()"
            ],
            "jump7295_1": [
                "oraclize.randomDS_getSessionPubKeyHash()",
                "oraclize.randomDS_getSessionPubKeyHash()"
            ],
            "jump1954": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block16276_10": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "jump8529_0": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "block11365_0": [
                "sha256(sig1)"
            ],
            "block10819_0": [
                "sha256(context_name, queryId)"
            ],
            "block8529": [
                "oraclize.cbAddress()"
            ],
            "block8272": [
                "OAR.getAddress()"
            ],
            "block16276": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block7295": [
                "oraclize.randomDS_getSessionPubKeyHash()"
            ],
            "block15483_0": [
                "sha256(tosign2)"
            ],
            "jump11719": [
                "sha256(sessionPubkey)",
                "sha256(sessionPubkey)"
            ],
            "jump7624_1": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block11719_0": [
                "sha256(sessionPubkey)"
            ],
            "block7624_0": [
                "OAR.getAddress()"
            ],
            "block7624_1": [
                "OAR.getAddress()"
            ],
            "block9829_1": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block2846": [
                "oraclize.setProofType(proofP)"
            ],
            "block7038": [
                "OAR.getAddress()"
            ],
            "block16276_8": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block16276_9": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block16276_6": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block16276_7": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block16276_4": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block16276_5": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block16276_2": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block16276_3": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block16276_0": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block16276_1": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block12159_0": [
                "sha256(tosign1)"
            ],
            "block11719": [
                "sha256(sessionPubkey)"
            ],
            "block7624": [
                "OAR.getAddress()"
            ],
            "jump9829": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block10304": [
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)"
            ],
            "jump9452": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump7038_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block9829": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump4372_0": [
                "theWinner.transfer (10 ether)",
                "theWinner.transfer (10 ether)"
            ],
            "block15483": [
                "sha256(tosign2)"
            ],
            "jump11365": [
                "sha256(sig1)",
                "sha256(sig1)"
            ],
            "jump9452_1": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block16143_0": [
                "sha256(tosign3)"
            ],
            "block2510_1": [
                "OAR.getAddress()"
            ],
            "block2510_0": [
                "OAR.getAddress()"
            ],
            "jump10819_0": [
                "sha256(context_name, queryId)",
                "sha256(context_name, queryId)"
            ],
            "block9452": [
                "OAR.getAddress()"
            ],
            "block2222": [
                "oraclize.setCustomGasPrice(gasPrice)"
            ]
        }
    }
}