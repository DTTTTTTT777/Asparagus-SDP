{
    "usingOraclize": {
        "function_list": [
            "oraclize_setNetwork()",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_cbAddress()",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "getCodeSize(address)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)"
        ],
        "initial_state": {
            "oraclize_setNetwork()": {
                "argument": {},
                "contract": {}
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {}
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {}
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {}
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {}
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {}
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {}
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {}
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {}
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {}
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {}
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "__callback(bytes32,string,bytes)": [
                200,
                97
            ],
            "__callback(bytes32,string)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "strings": {
        "function_list": [
            "memcpy(uint256,uint256,uint256)",
            "toSlice(string)",
            "len(bytes32)",
            "toSliceB32(bytes32)",
            "copy(strings.slice)",
            "toString(strings.slice)",
            "len(strings.slice)",
            "empty(strings.slice)",
            "compare(strings.slice,strings.slice)",
            "equals(strings.slice,strings.slice)",
            "nextRune(strings.slice,strings.slice)",
            "nextRune(strings.slice)",
            "ord(strings.slice)",
            "keccak(strings.slice)",
            "startsWith(strings.slice,strings.slice)",
            "beyond(strings.slice,strings.slice)",
            "endsWith(strings.slice,strings.slice)",
            "until(strings.slice,strings.slice)",
            "findPtr(uint256,uint256,uint256,uint256)",
            "rfindPtr(uint256,uint256,uint256,uint256)",
            "find(strings.slice,strings.slice)",
            "rfind(strings.slice,strings.slice)",
            "split(strings.slice,strings.slice,strings.slice)",
            "split(strings.slice,strings.slice)",
            "rsplit(strings.slice,strings.slice,strings.slice)",
            "rsplit(strings.slice,strings.slice)",
            "count(strings.slice,strings.slice)",
            "contains(strings.slice,strings.slice)",
            "concat(strings.slice,strings.slice)",
            "join(strings.slice,strings.slice[])"
        ],
        "initial_state": {
            "memcpy(uint256,uint256,uint256)": {
                "argument": {
                    "dest": "uint256",
                    "src": "uint256",
                    "len": "uint256"
                },
                "contract": {}
            },
            "toSlice(string)": {
                "argument": {
                    "self": "string"
                },
                "contract": {}
            },
            "len(bytes32)": {
                "argument": {
                    "self": "bytes32"
                },
                "contract": {}
            },
            "toSliceB32(bytes32)": {
                "argument": {
                    "self": "bytes32"
                },
                "contract": {}
            },
            "copy(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "toString(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "len(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "empty(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "compare(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "other": "strings.slice"
                },
                "contract": {}
            },
            "equals(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "other": "strings.slice"
                },
                "contract": {}
            },
            "nextRune(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "rune": "strings.slice"
                },
                "contract": {}
            },
            "nextRune(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "ord(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "keccak(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "startsWith(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "beyond(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "endsWith(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "until(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "findPtr(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "selflen": "uint256",
                    "selfptr": "uint256",
                    "needlelen": "uint256",
                    "needleptr": "uint256"
                },
                "contract": {}
            },
            "rfindPtr(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "selflen": "uint256",
                    "selfptr": "uint256",
                    "needlelen": "uint256",
                    "needleptr": "uint256"
                },
                "contract": {}
            },
            "find(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "rfind(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "split(strings.slice,strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice",
                    "token": "strings.slice"
                },
                "contract": {}
            },
            "split(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "rsplit(strings.slice,strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice",
                    "token": "strings.slice"
                },
                "contract": {}
            },
            "rsplit(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "count(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "contains(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "concat(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "other": "strings.slice"
                },
                "contract": {}
            },
            "join(strings.slice,strings.slice[])": {
                "argument": {
                    "self": "strings.slice",
                    "parts": "strings.slice[]"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "LastWillOraclizeProxy": {
        "function_list": [
            "getPrice()",
            "query(address,uint256,uint256,function(bool))",
            "oraclize_setNetwork()",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_cbAddress()",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "getCodeSize(address)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "getPrice()",
            "query(address,uint256,uint256,function(bool))",
            "__callback(bytes32,string,bytes)",
            "buildUrl(address,uint256,uint256)",
            "parseJsonArrayAndGetFirstElementAsNumber(string)",
            "toHex(address)"
        ],
        "initial_state": {
            "getPrice()": {
                "argument": {},
                "contract": {}
            },
            "query(address,uint256,uint256,function(bool))": {
                "argument": {
                    "startBlock": "uint256",
                    "endBlock": "uint256"
                },
                "contract": {}
            },
            "oraclize_setNetwork()": {
                "argument": {},
                "contract": {}
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {}
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "queryId": "bytes32",
                    "result": "string",
                    "bytes": "bytes"
                },
                "contract": {}
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {}
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {}
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {}
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {}
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {}
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {}
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {}
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {}
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {}
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {}
            },
            "buildUrl(address,uint256,uint256)": {
                "argument": {
                    "startBlock": "uint256",
                    "endBlock": "uint256"
                },
                "contract": {}
            },
            "parseJsonArrayAndGetFirstElementAsNumber(string)": {
                "argument": {
                    "json": "string"
                },
                "contract": {}
            },
            "toHex(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "getPrice()": [
                588,
                141
            ],
            "__callback(bytes32,string,bytes)": [
                222,
                97
            ],
            "__callback(bytes32,string)": [
                103,
                75
            ]
        },
        "block_CALL_mapping": {
            "block3164": [
                "OAR.getAddress()"
            ],
            "block1603_0": [
                "OAR.getAddress()"
            ],
            "block1603": [
                "OAR.getAddress()"
            ],
            "block4692": [
                "oraclize.getPrice(datasource)"
            ],
            "jump1006_0": [
                "callback(bytes(result).length != 0)",
                "callback(bytes(result).length != 0)"
            ],
            "block3533": [
                "oraclize.getPrice(datasource)"
            ],
            "jump1860_0": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "jump1006": [
                "callback(bytes(result).length != 0)",
                "callback(bytes(result).length != 0)"
            ],
            "jump4323": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump3993": [
                "oraclize.query.value(price)(0, datasource, arg)",
                "oraclize.query.value(price)(0, datasource, arg)"
            ],
            "jump1860": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "jump3533": [
                "oraclize.getPrice(datasource)",
                "oraclize.getPrice(datasource)"
            ],
            "jump4692": [
                "oraclize.getPrice(datasource)",
                "oraclize.getPrice(datasource)"
            ],
            "block1860_0": [
                "oraclize.cbAddress()"
            ],
            "jump3164": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block1006": [
                "callback(bytes(result).length != 0)"
            ],
            "block1860": [
                "oraclize.cbAddress()"
            ],
            "block4323": [
                "OAR.getAddress()"
            ],
            "jump1603_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block1006_0": [
                "callback(bytes(result).length != 0)"
            ],
            "jump1603": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block3993": [
                "oraclize.query.value(price)(0, datasource, arg)"
            ]
        }
    }
}