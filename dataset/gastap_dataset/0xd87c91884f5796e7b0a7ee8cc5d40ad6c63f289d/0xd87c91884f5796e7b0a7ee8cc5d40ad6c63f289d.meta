{
    "Token": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "totalSupply()": [
                226,
                97
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "E4Lava": {
        "function_list": [
            "checkDividends(address)",
            "withdrawDividends()",
            "transferDividends(address)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "E4Lava()",
            "applySettings(E4Lava.SettingStateValue,uint256,uint256,uint256,uint256)",
            "addAccount(address)",
            "totalSupply()",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "calcCurPointsForAcct(address)",
            "fallback()",
            "blackHole()",
            "withdrawDividends()",
            "transferDividends(address)",
            "setOpGas(uint256,uint256)",
            "checkDividends(address)",
            "changeOwner(address)",
            "setDeveloper(address)",
            "setOldE4(address,address)",
            "haraKiri()",
            "optInFromClassic()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "checkDividends(address)": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "vestTime": "uint256",
                    "rwGas": "uint256",
                    "optInGas": "uint256"
                }
            },
            "withdrawDividends()": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "vestTime": "uint256",
                    "rwGas": "uint256",
                    "optInGas": "uint256"
                }
            },
            "transferDividends(address)": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "vestTime": "uint256",
                    "rwGas": "uint256",
                    "optInGas": "uint256"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "vestTime": "uint256",
                    "rwGas": "uint256",
                    "optInGas": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "vestTime": "uint256",
                    "rwGas": "uint256",
                    "optInGas": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "vestTime": "uint256",
                    "rwGas": "uint256",
                    "optInGas": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "vestTime": "uint256",
                    "rwGas": "uint256",
                    "optInGas": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "vestTime": "uint256",
                    "rwGas": "uint256",
                    "optInGas": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "vestTime": "uint256",
                    "rwGas": "uint256",
                    "optInGas": "uint256"
                }
            },
            "E4Lava()": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "vestTime": "uint256",
                    "rwGas": "uint256",
                    "optInGas": "uint256"
                }
            },
            "applySettings(E4Lava.SettingStateValue,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_threshold": "uint256",
                    "_vest": "uint256",
                    "_rw": "uint256",
                    "_optGas": "uint256"
                },
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "vestTime": "uint256",
                    "rwGas": "uint256",
                    "optInGas": "uint256"
                }
            },
            "addAccount(address)": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "vestTime": "uint256",
                    "rwGas": "uint256",
                    "optInGas": "uint256"
                }
            },
            "calcCurPointsForAcct(address)": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "vestTime": "uint256",
                    "rwGas": "uint256",
                    "optInGas": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "vestTime": "uint256",
                    "rwGas": "uint256",
                    "optInGas": "uint256"
                }
            },
            "blackHole()": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "vestTime": "uint256",
                    "rwGas": "uint256",
                    "optInGas": "uint256"
                }
            },
            "setOpGas(uint256,uint256)": {
                "argument": {
                    "_rw": "uint256",
                    "_optIn": "uint256"
                },
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "vestTime": "uint256",
                    "rwGas": "uint256",
                    "optInGas": "uint256"
                }
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "vestTime": "uint256",
                    "rwGas": "uint256",
                    "optInGas": "uint256"
                }
            },
            "setDeveloper(address)": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "vestTime": "uint256",
                    "rwGas": "uint256",
                    "optInGas": "uint256"
                }
            },
            "setOldE4(address,address)": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "vestTime": "uint256",
                    "rwGas": "uint256",
                    "optInGas": "uint256"
                }
            },
            "haraKiri()": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "vestTime": "uint256",
                    "rwGas": "uint256",
                    "optInGas": "uint256"
                }
            },
            "optInFromClassic()": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "vestTime": "uint256",
                    "rwGas": "uint256",
                    "optInGas": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "vestTime": "uint256",
                    "rwGas": "uint256",
                    "optInGas": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "optInFromClassic()": [
                2713,
                757
            ],
            "setOpGas(uint256,uint256)": [
                1547,
                405
            ],
            "checkDividends(address)": [
                838,
                163
            ],
            "totalSupply()": [
                752,
                119
            ],
            "allowance(address,address)": [
                10110,
                874
            ],
            "transferFrom(address,address,uint256)": [
                10574,
                1031
            ],
            "transferDividends(address)": [
                2306,
                647
            ],
            "approve(address,uint256)": [
                563,
                75
            ],
            "haraKiri()": [
                2196,
                603
            ],
            "withdrawDividends()": [
                1145,
                229
            ],
            "blackHole()": [
                1919,
                515
            ],
            "calcCurPointsForAcct(address)": [
                2516,
                691
            ],
            "changeOwner(address)": [
                1929,
                537
            ],
            "setOldE4(address,address)": [
                2097,
                581
            ],
            "balanceOf(address)": [
                10792,
                890
            ],
            "setDeveloper(address)": [
                2736,
                779
            ],
            "transfer(address,uint256)": [
                1996,
                559
            ]
        },
        "block_CALL_mapping": {
            "jump10792": [
                "iclassic.balanceOf(nrequester)",
                "iclassic.balanceOf(nrequester)"
            ],
            "block5796": [
                "msg.sender.call.gas(rwGas).value(_amount)()"
            ],
            "jump10574": [
                "iclassic.transferFrom.gas(optInGas)(nrequester, oldE4RecycleBin, _toks)",
                "iclassic.transferFrom.gas(optInGas)(nrequester, oldE4RecycleBin, _toks)"
            ],
            "jump5796": [
                "msg.sender.call.gas(rwGas).value(_amount)()",
                "msg.sender.call.gas(rwGas).value(_amount)()"
            ],
            "block9723": [
                "iclassic.balanceOf(nrequester)"
            ],
            "block10110": [
                "iclassic.allowance(nrequester, address(this))"
            ],
            "jump9723": [
                "iclassic.balanceOf(nrequester)",
                "iclassic.balanceOf(nrequester)"
            ],
            "block10574": [
                "iclassic.transferFrom.gas(optInGas)(nrequester, oldE4RecycleBin, _toks)"
            ],
            "block10792": [
                "iclassic.balanceOf(nrequester)"
            ],
            "block3785": [
                "owner.call.gas(rwGas).value(this.balance)()"
            ],
            "jump10110": [
                "iclassic.allowance(nrequester, address(this))",
                "iclassic.allowance(nrequester, address(this))"
            ],
            "jump3785": [
                "owner.call.gas(rwGas).value(this.balance)()",
                "owner.call.gas(rwGas).value(this.balance)()"
            ]
        }
    }
}