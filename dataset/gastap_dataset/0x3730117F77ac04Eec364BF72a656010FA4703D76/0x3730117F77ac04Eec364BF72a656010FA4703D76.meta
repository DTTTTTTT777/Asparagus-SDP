{
    "PassTokenManager": {
        "function_list": [
            "TotalSupply()",
            "balanceOf(address)",
            "allowance(address,address)",
            "FundedAmount(uint256)",
            "priceDivisor(uint256)",
            "actualPriceDivisor()",
            "fundingMaxAmount(address)",
            "initToken(string,string,uint8,address,uint256,bool)",
            "setTokenPriceProposal(uint256,uint256,uint256)",
            "setFundingRules(address,bool,uint256,uint256,uint256,uint256,uint256)",
            "createToken(address,uint256,uint256)",
            "setFundingStartTime(uint256)",
            "rewardToken(address,uint256,uint256)",
            "closeFunding()",
            "setFundingFueled()",
            "ableTransfer()",
            "disableTransfer()",
            "blockTransfer(address,uint256)",
            "transferFromTo(address,address,uint256)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "TotalSupply()",
            "balanceOf(address)",
            "allowance(address,address)",
            "FundedAmount(uint256)",
            "priceDivisor(uint256)",
            "actualPriceDivisor()",
            "fundingMaxAmount(address)",
            "PassTokenManager(address,address,address)",
            "initToken(string,string,uint8,address,uint256,bool)",
            "setTokenPriceProposal(uint256,uint256,uint256)",
            "setFundingRules(address,bool,uint256,uint256,uint256,uint256,uint256)",
            "createToken(address,uint256,uint256)",
            "setFundingStartTime(uint256)",
            "rewardToken(address,uint256,uint256)",
            "closeFunding()",
            "setFundingFueled()",
            "ableTransfer()",
            "disableTransfer()",
            "blockTransfer(address,uint256)",
            "transferFromTo(address,address,uint256)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "TotalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "FundedAmount(uint256)": {
                "argument": {
                    "_proposalID": "uint256"
                },
                "contract": {}
            },
            "priceDivisor(uint256)": {
                "argument": {
                    "_saleDate": "uint256"
                },
                "contract": {}
            },
            "actualPriceDivisor()": {
                "argument": {},
                "contract": {}
            },
            "fundingMaxAmount(address)": {
                "argument": {},
                "contract": {}
            },
            "initToken(string,string,uint8,address,uint256,bool)": {
                "argument": {
                    "_tokenName": "string",
                    "_tokenSymbol": "string",
                    "_tokenDecimals": "uint8",
                    "_initialSupply": "uint256"
                },
                "contract": {}
            },
            "setTokenPriceProposal(uint256,uint256,uint256)": {
                "argument": {
                    "_initialPriceMultiplier": "uint256",
                    "_inflationRate": "uint256",
                    "_closingTime": "uint256"
                },
                "contract": {}
            },
            "setFundingRules(address,bool,uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_initialPriceMultiplier": "uint256",
                    "_maxAmountToFund": "uint256",
                    "_minutesFundingPeriod": "uint256",
                    "_inflationRate": "uint256",
                    "_proposalID": "uint256"
                },
                "contract": {}
            },
            "createToken(address,uint256,uint256)": {
                "argument": {
                    "_amount": "uint256",
                    "_saleDate": "uint256"
                },
                "contract": {}
            },
            "setFundingStartTime(uint256)": {
                "argument": {
                    "_startTime": "uint256"
                },
                "contract": {}
            },
            "rewardToken(address,uint256,uint256)": {
                "argument": {
                    "_amount": "uint256",
                    "_date": "uint256"
                },
                "contract": {}
            },
            "closeFunding()": {
                "argument": {},
                "contract": {}
            },
            "setFundingFueled()": {
                "argument": {},
                "contract": {}
            },
            "ableTransfer()": {
                "argument": {},
                "contract": {}
            },
            "disableTransfer()": {
                "argument": {},
                "contract": {}
            },
            "blockTransfer(address,uint256)": {
                "argument": {
                    "_deadLine": "uint256"
                },
                "contract": {}
            },
            "transferFromTo(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "PassTokenManager(address,address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "setTokenPriceProposal(uint256,uint256,uint256)": [
                2167,
                537
            ],
            "balanceOf(address)": [
                1510,
                361
            ],
            "allowance(address,address)": [
                2365,
                625
            ],
            "transferFrom(address,address,uint256)": [
                1054,
                229
            ],
            "approve(address,uint256)": [
                587,
                119
            ],
            "rewardToken(address,uint256,uint256)": [
                944,
                185
            ],
            "setFundingFueled()": [
                2232,
                559
            ],
            "TotalSupply()": [
                1918,
                471
            ],
            "FundedAmount(uint256)": [
                1358,
                317
            ],
            "ableTransfer()": [
                1031,
                207
            ],
            "disableTransfer()": [
                2255,
                581
            ],
            "setFundingRules(address,bool,uint256,uint256,uint256,uint256,uint256)": [
                2038,
                515
            ],
            "fundingMaxAmount(address)": [
                2278,
                603
            ],
            "blockTransfer(address,uint256)": [
                1236,
                273
            ],
            "actualPriceDivisor()": [
                1597,
                383
            ],
            "initToken(string,string,uint8,address,uint256,bool)": [
                2484,
                647
            ],
            "setFundingStartTime(uint256)": [
                1313,
                295
            ],
            "transfer(address,uint256)": [
                1961,
                493
            ]
        },
        "block_CALL_mapping": {}
    },
    "PassManager": {
        "function_list": [
            "TotalSupply()",
            "balanceOf(address)",
            "allowance(address,address)",
            "FundedAmount(uint256)",
            "priceDivisor(uint256)",
            "actualPriceDivisor()",
            "fundingMaxAmount(address)",
            "PassTokenManager(address,address,address)",
            "initToken(string,string,uint8,address,uint256,bool)",
            "setTokenPriceProposal(uint256,uint256,uint256)",
            "setFundingRules(address,bool,uint256,uint256,uint256,uint256,uint256)",
            "createToken(address,uint256,uint256)",
            "setFundingStartTime(uint256)",
            "rewardToken(address,uint256,uint256)",
            "closeFunding()",
            "setFundingFueled()",
            "ableTransfer()",
            "disableTransfer()",
            "blockTransfer(address,uint256)",
            "transferFromTo(address,address,uint256)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "TotalSupply()",
            "balanceOf(address)",
            "allowance(address,address)",
            "FundedAmount(uint256)",
            "priceDivisor(uint256)",
            "actualPriceDivisor()",
            "fundingMaxAmount(address)",
            "initToken(string,string,uint8,address,uint256,bool)",
            "setTokenPriceProposal(uint256,uint256,uint256)",
            "setFundingRules(address,bool,uint256,uint256,uint256,uint256,uint256)",
            "createToken(address,uint256,uint256)",
            "setFundingStartTime(uint256)",
            "rewardToken(address,uint256,uint256)",
            "closeFunding()",
            "setFundingFueled()",
            "ableTransfer()",
            "disableTransfer()",
            "blockTransfer(address,uint256)",
            "transferFromTo(address,address,uint256)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "fallback()",
            "updateRecipient(address)",
            "buyShares()",
            "buySharesFor(address)",
            "newProposal(uint256,string,bytes32)",
            "order(uint256,uint256)",
            "sendTo(address,uint256)",
            "withdraw(uint256)",
            "PassManager(address,address,address)",
            "fallback()",
            "updateRecipient(address)",
            "buyShares()",
            "buySharesFor(address)",
            "newProposal(uint256,string,bytes32)",
            "order(uint256,uint256)",
            "sendTo(address,uint256)",
            "withdraw(uint256)"
        ],
        "initial_state": {
            "TotalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "FundedAmount(uint256)": {
                "argument": {
                    "_proposalID": "uint256"
                },
                "contract": {}
            },
            "priceDivisor(uint256)": {
                "argument": {
                    "_saleDate": "uint256"
                },
                "contract": {}
            },
            "actualPriceDivisor()": {
                "argument": {},
                "contract": {}
            },
            "fundingMaxAmount(address)": {
                "argument": {},
                "contract": {}
            },
            "PassTokenManager(address,address,address)": {
                "argument": {},
                "contract": {}
            },
            "initToken(string,string,uint8,address,uint256,bool)": {
                "argument": {
                    "_tokenName": "string",
                    "_tokenSymbol": "string",
                    "_tokenDecimals": "uint8",
                    "_initialSupply": "uint256"
                },
                "contract": {}
            },
            "setTokenPriceProposal(uint256,uint256,uint256)": {
                "argument": {
                    "_initialPriceMultiplier": "uint256",
                    "_inflationRate": "uint256",
                    "_closingTime": "uint256"
                },
                "contract": {}
            },
            "setFundingRules(address,bool,uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_initialPriceMultiplier": "uint256",
                    "_maxAmountToFund": "uint256",
                    "_minutesFundingPeriod": "uint256",
                    "_inflationRate": "uint256",
                    "_proposalID": "uint256"
                },
                "contract": {}
            },
            "createToken(address,uint256,uint256)": {
                "argument": {
                    "_amount": "uint256",
                    "_saleDate": "uint256"
                },
                "contract": {}
            },
            "setFundingStartTime(uint256)": {
                "argument": {
                    "_startTime": "uint256"
                },
                "contract": {}
            },
            "rewardToken(address,uint256,uint256)": {
                "argument": {
                    "_amount": "uint256",
                    "_date": "uint256"
                },
                "contract": {}
            },
            "closeFunding()": {
                "argument": {},
                "contract": {}
            },
            "setFundingFueled()": {
                "argument": {},
                "contract": {}
            },
            "ableTransfer()": {
                "argument": {},
                "contract": {}
            },
            "disableTransfer()": {
                "argument": {},
                "contract": {}
            },
            "blockTransfer(address,uint256)": {
                "argument": {
                    "_deadLine": "uint256"
                },
                "contract": {}
            },
            "transferFromTo(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "fallback()": {
                "argument": {},
                "contract": {}
            },
            "updateRecipient(address)": {
                "argument": {},
                "contract": {}
            },
            "buyShares()": {
                "argument": {},
                "contract": {}
            },
            "buySharesFor(address)": {
                "argument": {},
                "contract": {}
            },
            "newProposal(uint256,string,bytes32)": {
                "argument": {
                    "_amount": "uint256",
                    "_description": "string",
                    "_hashOfTheDocument": "bytes32"
                },
                "contract": {}
            },
            "order(uint256,uint256)": {
                "argument": {
                    "_proposalID": "uint256",
                    "_orderAmount": "uint256"
                },
                "contract": {}
            },
            "sendTo(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "withdraw(uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "PassManager(address,address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "setTokenPriceProposal(uint256,uint256,uint256)": [
                2889,
                669
            ],
            "balanceOf(address)": [
                2131,
                471
            ],
            "allowance(address,address)": [
                3097,
                779
            ],
            "transferFrom(address,address,uint256)": [
                1348,
                251
            ],
            "order(uint256,uint256)": [
                1575,
                317
            ],
            "approve(address,uint256)": [
                881,
                141
            ],
            "sendTo(address,uint256)": [
                2539,
                581
            ],
            "rewardToken(address,uint256,uint256)": [
                1238,
                207
            ],
            "setFundingFueled()": [
                2954,
                691
            ],
            "TotalSupply()": [
                2640,
                603
            ],
            "FundedAmount(uint256)": [
                1979,
                427
            ],
            "disableTransfer()": [
                2977,
                713
            ],
            "setFundingRules(address,bool,uint256,uint256,uint256,uint256,uint256)": [
                2760,
                647
            ],
            "withdraw(uint256)": [
                1481,
                273
            ],
            "ableTransfer()": [
                1325,
                229
            ],
            "buySharesFor(address)": [
                1803,
                361
            ],
            "fundingMaxAmount(address)": [
                3000,
                735
            ],
            "blockTransfer(address,uint256)": [
                1857,
                383
            ],
            "actualPriceDivisor()": [
                2218,
                493
            ],
            "initToken(string,string,uint8,address,uint256,bool)": [
                3216,
                801
            ],
            "setFundingStartTime(uint256)": [
                1934,
                405
            ],
            "buyShares()": [
                3087,
                757
            ],
            "newProposal(uint256,string,bytes32)": [
                1654,
                339
            ],
            "updateRecipient(address)": [
                3458,
                823
            ],
            "transfer(address,uint256)": [
                2683,
                625
            ]
        },
        "block_CALL_mapping": {
            "block5157": [
                "recipient.send(_amount)"
            ],
            "jump7378": [
                "_recipient.send(_amount)",
                "_recipient.send(_amount)"
            ],
            "block7378": [
                "_recipient.send(_amount)"
            ],
            "jump5157": [
                "recipient.send(_amount)",
                "recipient.send(_amount)"
            ]
        }
    },
    "PassDao": {
        "function_list": [
            "initDao(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
            "newBoardMeeting(uint256,uint256,uint256)",
            "newProposal(address,uint256,uint256,bool,bool,address,uint256,uint256,uint256,uint256)",
            "newDaoRulesProposal(uint256,uint256,uint256,uint256,uint256,bool,uint256)",
            "vote(uint256,bool)",
            "executeDecision(uint256)",
            "orderContractorProposal(uint256)",
            "withdrawBoardMeetingFees()",
            "minQuorum()",
            "PassDao()",
            "initDao(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
            "newBoardMeeting(uint256,uint256,uint256)",
            "newProposal(address,uint256,uint256,bool,bool,address,uint256,uint256,uint256,uint256)",
            "newDaoRulesProposal(uint256,uint256,uint256,uint256,uint256,bool,uint256)",
            "vote(uint256,bool)",
            "executeDecision(uint256)",
            "orderContractorProposal(uint256)",
            "withdrawBoardMeetingFees()",
            "minQuorum()"
        ],
        "initial_state": {
            "initDao(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_maxInflationRate": "uint256",
                    "_minMinutesPeriods": "uint256",
                    "_maxMinutesFundingPeriod": "uint256",
                    "_maxMinutesProposalPeriod": "uint256",
                    "_minQuorumDivisor": "uint256",
                    "_minBoardMeetingFees": "uint256",
                    "_minutesSetProposalPeriod": "uint256",
                    "_minMinutesDebatePeriod": "uint256",
                    "_feesRewardInflationRate": "uint256"
                },
                "contract": {}
            },
            "newBoardMeeting(uint256,uint256,uint256)": {
                "argument": {
                    "_proposalID": "uint256",
                    "_daoRulesProposalID": "uint256",
                    "_minutesDebatingPeriod": "uint256"
                },
                "contract": {}
            },
            "newProposal(address,uint256,uint256,bool,bool,address,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_contractorProposalID": "uint256",
                    "_amount": "uint256",
                    "_initialSharePriceMultiplier": "uint256",
                    "_inflationRate": "uint256",
                    "_minutesFundingPeriod": "uint256",
                    "_minutesDebatingPeriod": "uint256"
                },
                "contract": {}
            },
            "newDaoRulesProposal(uint256,uint256,uint256,uint256,uint256,bool,uint256)": {
                "argument": {
                    "_minQuorumDivisor": "uint256",
                    "_minBoardMeetingFees": "uint256",
                    "_minutesSetProposalPeriod": "uint256",
                    "_minMinutesDebatePeriod": "uint256",
                    "_feesRewardInflationRate": "uint256",
                    "_minutesDebatingPeriod": "uint256"
                },
                "contract": {}
            },
            "vote(uint256,bool)": {
                "argument": {
                    "_boardMeetingID": "uint256"
                },
                "contract": {}
            },
            "executeDecision(uint256)": {
                "argument": {
                    "_boardMeetingID": "uint256"
                },
                "contract": {}
            },
            "orderContractorProposal(uint256)": {
                "argument": {
                    "_proposalID": "uint256"
                },
                "contract": {}
            },
            "withdrawBoardMeetingFees()": {
                "argument": {},
                "contract": {}
            },
            "minQuorum()": {
                "argument": {},
                "contract": {}
            },
            "PassDao()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "executeDecision(uint256)": [
                641,
                141
            ],
            "minQuorum()": [
                1365,
                339
            ],
            "vote(uint256,bool)": [
                1408,
                361
            ],
            "newDaoRulesProposal(uint256,uint256,uint256,uint256,uint256,bool,uint256)": [
                257,
                75
            ],
            "newProposal(address,uint256,uint256,bool,bool,address,uint256,uint256,uint256,uint256)": [
                796,
                207
            ],
            "initDao(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": [
                1165,
                295
            ],
            "orderContractorProposal(uint256)": [
                1811,
                427
            ],
            "withdrawBoardMeetingFees()": [
                1118,
                273
            ]
        },
        "block_CALL_mapping": {
            "block7339": [
                "daoManager.blockTransfer(msg.sender, b.votingDeadline)"
            ],
            "block5975": [
                "daoManager.TotalSupply()"
            ],
            "jump7967": [
                "daoManager.FundedAmount(_proposalID)",
                "daoManager.FundedAmount(_proposalID)"
            ],
            "jump3500": [
                "daoManager.setFundingRules(p.mainPartner, p.publicShareCreation, p.initialSharePriceMultiplier, \n                    p.amount, p.minutesFundingPeriod, p.inflationRate, b.proposalID)",
                "daoManager.setFundingRules(p.mainPartner, p.publicShareCreation, p.initialSharePriceMultiplier, \n                    p.amount, p.minutesFundingPeriod, p.inflationRate, b.proposalID)"
            ],
            "block5975_0": [
                "daoManager.TotalSupply()"
            ],
            "block5322": [
                "msg.sender.send(_amount)"
            ],
            "block2901": [
                "daoManager.send(b.fees - b.totalRewardedAmount)"
            ],
            "jump8265": [
                "p.contractorManager.order(p.contractorProposalID, _amount)",
                "p.contractorManager.order(p.contractorProposalID, _amount)"
            ],
            "block7967": [
                "daoManager.FundedAmount(_proposalID)"
            ],
            "block4391": [
                "daoManager.disableTransfer()"
            ],
            "jump2901": [
                "daoManager.send(b.fees - b.totalRewardedAmount)",
                "daoManager.send(b.fees - b.totalRewardedAmount)"
            ],
            "block8265": [
                "p.contractorManager.order(p.contractorProposalID, _amount)"
            ],
            "jump5322": [
                "msg.sender.send(_amount)",
                "msg.sender.send(_amount)"
            ],
            "jump3875": [
                "p.contractorManager.setFundingRules(p.mainPartner, p.publicShareCreation, 0, \n                        p.amount, p.minutesFundingPeriod, maxInflationRate, b.proposalID)",
                "p.contractorManager.setFundingRules(p.mainPartner, p.publicShareCreation, 0, \n                        p.amount, p.minutesFundingPeriod, maxInflationRate, b.proposalID)"
            ],
            "jump5975_0": [
                "daoManager.TotalSupply()",
                "daoManager.TotalSupply()"
            ],
            "jump7339": [
                "daoManager.blockTransfer(msg.sender, b.votingDeadline)",
                "daoManager.blockTransfer(msg.sender, b.votingDeadline)"
            ],
            "block6885": [
                "daoManager.TotalSupply()"
            ],
            "block3500": [
                "daoManager.setFundingRules(p.mainPartner, p.publicShareCreation, p.initialSharePriceMultiplier, \n                    p.amount, p.minutesFundingPeriod, p.inflationRate, b.proposalID)"
            ],
            "block8569": [
                "daoManager.sendTo(p.contractorManager, _amount)"
            ],
            "jump6395": [
                "daoManager.balanceOf(msg.sender)",
                "daoManager.balanceOf(msg.sender)"
            ],
            "jump5975": [
                "daoManager.TotalSupply()",
                "daoManager.TotalSupply()"
            ],
            "jump4391": [
                "daoManager.disableTransfer()",
                "daoManager.disableTransfer()"
            ],
            "jump4228": [
                "daoManager.ableTransfer()",
                "daoManager.ableTransfer()"
            ],
            "block3875": [
                "p.contractorManager.setFundingRules(p.mainPartner, p.publicShareCreation, 0, \n                        p.amount, p.minutesFundingPeriod, maxInflationRate, b.proposalID)"
            ],
            "block6395": [
                "daoManager.balanceOf(msg.sender)"
            ],
            "jump6885": [
                "daoManager.TotalSupply()",
                "daoManager.TotalSupply()"
            ],
            "jump8569": [
                "daoManager.sendTo(p.contractorManager, _amount)",
                "daoManager.sendTo(p.contractorManager, _amount)"
            ],
            "block4228": [
                "daoManager.ableTransfer()"
            ]
        }
    }
}