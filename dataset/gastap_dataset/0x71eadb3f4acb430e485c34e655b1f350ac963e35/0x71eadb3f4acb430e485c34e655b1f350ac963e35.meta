{
    "usingOraclize": {
        "function_list": [
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)",
            "matchBytes32Prefix(bytes32,bytes,uint256)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "matchBytes32Prefix(bytes32,bytes,uint256)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes",
                    "n_random_bytes": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            }
        },
        "function_block_mapping": {
            "__callback(bytes32,string,bytes)": [
                200,
                97
            ],
            "__callback(bytes32,string)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20Basic": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "balanceOf(address)": [
                124,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "BasicToken": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transfer(address,uint256)": [
                222,
                119
            ],
            "balanceOf(address)": [
                135,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "StandardToken": {
        "function_list": [
            "transfer(address,uint256)",
            "balanceOf(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "increaseApproval(address,uint256)",
            "decreaseApproval(address,uint256)"
        ],
        "initial_state": {
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "increaseApproval(address,uint256)": {
                "argument": {
                    "_addedValue": "uint256"
                },
                "contract": {}
            },
            "decreaseApproval(address,uint256)": {
                "argument": {
                    "_subtractedValue": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                147,
                75
            ],
            "increaseApproval(address,uint256)": [
                713,
                207
            ],
            "balanceOf(address)": [
                525,
                163
            ],
            "allowance(address,address)": [
                814,
                229
            ],
            "decreaseApproval(address,uint256)": [
                424,
                141
            ],
            "transferFrom(address,address,uint256)": [
                291,
                119
            ],
            "transfer(address,uint256)": [
                612,
                185
            ]
        },
        "block_CALL_mapping": {}
    },
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "setPreIco(address)",
            "setICO(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "setPreIco(address)": {
                "argument": {},
                "contract": {}
            },
            "setICO(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "setICO(address)": [
                257,
                119
            ],
            "setPreIco(address)": [
                190,
                97
            ],
            "transferOwnership(address)": [
                324,
                141
            ]
        },
        "block_CALL_mapping": {}
    },
    "MintableToken": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "setPreIco(address)",
            "setICO(address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "increaseApproval(address,uint256)",
            "decreaseApproval(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "MintableToken()",
            "mintPreico(address,uint256)",
            "mint(address,uint256)",
            "finishMinting()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {
                    "limit": "uint256",
                    "limitPreico": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "limit": "uint256",
                    "limitPreico": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "setPreIco(address)": {
                "argument": {},
                "contract": {
                    "limit": "uint256",
                    "limitPreico": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "setICO(address)": {
                "argument": {},
                "contract": {
                    "limit": "uint256",
                    "limitPreico": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "limit": "uint256",
                    "limitPreico": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "limit": "uint256",
                    "limitPreico": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "limit": "uint256",
                    "limitPreico": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "increaseApproval(address,uint256)": {
                "argument": {
                    "_addedValue": "uint256"
                },
                "contract": {
                    "limit": "uint256",
                    "limitPreico": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "decreaseApproval(address,uint256)": {
                "argument": {
                    "_subtractedValue": "uint256"
                },
                "contract": {
                    "limit": "uint256",
                    "limitPreico": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "limit": "uint256",
                    "limitPreico": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "limit": "uint256",
                    "limitPreico": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "MintableToken()": {
                "argument": {},
                "contract": {
                    "limit": "uint256",
                    "limitPreico": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "mintPreico(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "limit": "uint256",
                    "limitPreico": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "mint(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "limit": "uint256",
                    "limitPreico": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "finishMinting()": {
                "argument": {},
                "contract": {
                    "limit": "uint256",
                    "limitPreico": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "limit": "uint256",
                    "limitPreico": "uint256",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                459,
                119
            ],
            "setICO(address)": [
                1621,
                405
            ],
            "setPreIco(address)": [
                1453,
                361
            ],
            "increaseApproval(address,uint256)": [
                1688,
                427
            ],
            "mint(address,uint256)": [
                785,
                207
            ],
            "finishMinting()": [
                1175,
                295
            ],
            "mintPreico(address,uint256)": [
                886,
                229
            ],
            "balanceOf(address)": [
                1088,
                273
            ],
            "decreaseApproval(address,uint256)": [
                987,
                251
            ],
            "transferFrom(address,address,uint256)": [
                603,
                163
            ],
            "transferOwnership(address)": [
                1908,
                471
            ],
            "allowance(address,address)": [
                1789,
                449
            ],
            "transfer(address,uint256)": [
                1520,
                383
            ]
        },
        "block_CALL_mapping": {}
    },
    "PreIco": {
        "function_list": [
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)",
            "matchBytes32Prefix(bytes32,bytes,uint256)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "Ownable()",
            "transferOwnership(address)",
            "setPreIco(address)",
            "setICO(address)",
            "PreIco(MintableToken)",
            "setDollar(uint256)",
            "__callback(bytes32,string)",
            "updatePrice()",
            "getRate()",
            "fallback()",
            "forwardFunds(uint256)",
            "hasEnded()",
            "validPurchase(uint256)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "matchBytes32Prefix(bytes32,bytes,uint256)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes",
                    "n_random_bytes": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "Ownable()": {
                "argument": {},
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "setPreIco(address)": {
                "argument": {},
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "setICO(address)": {
                "argument": {},
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "PreIco(MintableToken)": {
                "argument": {},
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "setDollar(uint256)": {
                "argument": {
                    "_dollarCost": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "updatePrice()": {
                "argument": {},
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "getRate()": {
                "argument": {},
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "forwardFunds(uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "hasEnded()": {
                "argument": {},
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "validPurchase(uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "dollarMultiplier": "uint256",
                    "decimals": "uint256",
                    "rate": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "hasEnded()": [
                1655,
                383
            ],
            "setICO(address)": [
                1545,
                339
            ],
            "setPreIco(address)": [
                1478,
                317
            ],
            "__callback(bytes32,string,bytes)": [
                975,
                141
            ],
            "setDollar(uint256)": [
                1303,
                251
            ],
            "transferOwnership(address)": [
                1702,
                405
            ],
            "updatePrice()": [
                1250,
                207
            ],
            "__callback(bytes32,string)": [
                770,
                75
            ]
        },
        "block_CALL_mapping": {
            "jump5551": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "jump5014": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block8267": [
                "oraclize.getPrice(datasource)"
            ],
            "jump8267": [
                "oraclize.getPrice(datasource)",
                "oraclize.getPrice(datasource)"
            ],
            "jump6636": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block5551": [
                "oraclize.cbAddress()"
            ],
            "block6915": [
                "OAR.getAddress()"
            ],
            "block2043": [
                "owner.transfer(value)"
            ],
            "block7897": [
                "OAR.getAddress()"
            ],
            "block588": [
                "token.mintPreico(msg.sender, tokens.mul(10 ** decimals))"
            ],
            "jump6915": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block7285": [
                "oraclize.getPrice(datasource)"
            ],
            "jump8727": [
                "oraclize.query.value(price)(0, datasource, arg)",
                "oraclize.query.value(price)(0, datasource, arg)"
            ],
            "block2043_0": [
                "owner.transfer(value)"
            ],
            "jump2043_0": [
                "owner.transfer(value)",
                "owner.transfer(value)"
            ],
            "jump2043": [
                "owner.transfer(value)",
                "owner.transfer(value)"
            ],
            "jump588": [
                "token.mintPreico(msg.sender, tokens.mul(10 ** decimals))",
                "token.mintPreico(msg.sender, tokens.mul(10 ** decimals))"
            ],
            "block8727": [
                "oraclize.query.value(price)(0, datasource, arg)"
            ],
            "block588_0": [
                "token.mintPreico(msg.sender, tokens.mul(10 ** decimals))"
            ],
            "block7618": [
                "OAR.getAddress()"
            ],
            "jump7897": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump7618": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump588_0": [
                "token.mintPreico(msg.sender, tokens.mul(10 ** decimals))",
                "token.mintPreico(msg.sender, tokens.mul(10 ** decimals))"
            ],
            "block5014": [
                "OAR.getAddress()"
            ],
            "block5293": [
                "OAR.getAddress()"
            ],
            "block6636": [
                "OAR.getAddress()"
            ],
            "jump5293": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump7285": [
                "oraclize.getPrice(datasource)",
                "oraclize.getPrice(datasource)"
            ]
        }
    },
    "ICO": {
        "function_list": [
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)",
            "matchBytes32Prefix(bytes32,bytes,uint256)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "Ownable()",
            "transferOwnership(address)",
            "setPreIco(address)",
            "setICO(address)",
            "ICO(MintableToken,PreIco)",
            "setDollar(uint256)",
            "__callback(bytes32,string)",
            "updatePrice()",
            "getRate()",
            "getMoneyBack()",
            "oneGetMoneyBack()",
            "fallback()",
            "forwardFunds(uint256)",
            "hasEnded()",
            "hasFunded()",
            "validPurchase(uint256)",
            "goalReached()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "matchBytes32Prefix(bytes32,bytes,uint256)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes",
                    "n_random_bytes": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "Ownable()": {
                "argument": {},
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "setPreIco(address)": {
                "argument": {},
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "setICO(address)": {
                "argument": {},
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "ICO(MintableToken,PreIco)": {
                "argument": {},
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "setDollar(uint256)": {
                "argument": {
                    "_dollarCost": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "updatePrice()": {
                "argument": {},
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "getRate()": {
                "argument": {},
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "getMoneyBack()": {
                "argument": {},
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "oneGetMoneyBack()": {
                "argument": {},
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "forwardFunds(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "hasEnded()": {
                "argument": {},
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "hasFunded()": {
                "argument": {},
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "validPurchase(uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "goalReached()": {
                "argument": {},
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "investorsArray": "address[]",
                    "dollarCost": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "secondTime": "uint256",
                    "thirdTime": "uint256",
                    "fourthTime": "uint256",
                    "fifthTime": "uint256",
                    "sixthTime": "uint256",
                    "seventhTime": "uint256",
                    "eighthTime": "uint256",
                    "ninthTime": "uint256",
                    "tenthTime": "uint256",
                    "eleventhTime": "uint256",
                    "decimals": "uint256",
                    "dollarMultiplier": "uint256",
                    "rate": "uint256",
                    "goal": "uint256",
                    "minimumCost": "uint256",
                    "weiRaised": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "hasEnded()": [
                2882,
                757
            ],
            "hasFunded()": [
                1220,
                97
            ],
            "forwardFunds(uint256)": [
                2794,
                713
            ],
            "getMoneyBack()": [
                2929,
                779
            ],
            "__callback(bytes32,string,bytes)": [
                1515,
                207
            ],
            "goalReached()": [
                2483,
                603
            ],
            "transferOwnership(address)": [
                2952,
                801
            ],
            "oneGetMoneyBack()": [
                2372,
                537
            ],
            "updatePrice()": [
                2005,
                383
            ],
            "setICO(address)": [
                2684,
                669
            ],
            "setPreIco(address)": [
                2617,
                647
            ],
            "__callback(bytes32,string)": [
                1310,
                141
            ],
            "setDollar(uint256)": [
                2395,
                559
            ]
        },
        "block_CALL_mapping": {
            "block3257": [
                "preICO.weiRaised()"
            ],
            "block11780": [
                "OAR.getAddress()"
            ],
            "jump3257": [
                "preICO.weiRaised()",
                "preICO.weiRaised()"
            ],
            "block3257_2": [
                "preICO.weiRaised()"
            ],
            "jump12429": [
                "oraclize.getPrice(datasource)",
                "oraclize.getPrice(datasource)"
            ],
            "block3257_0": [
                "preICO.weiRaised()"
            ],
            "block3257_1": [
                "preICO.weiRaised()"
            ],
            "jump822": [
                "token.mint(msg.sender, tokens.mul(10 ** decimals))",
                "token.mint(msg.sender, tokens.mul(10 ** decimals))"
            ],
            "block10798": [
                "OAR.getAddress()"
            ],
            "jump5201": [
                "msg.sender.transfer(investors[msg.sender].amount)",
                "msg.sender.transfer(investors[msg.sender].amount)"
            ],
            "jump9176": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block9176": [
                "OAR.getAddress()"
            ],
            "jump11077": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block12889": [
                "oraclize.query.value(price)(0, datasource, arg)"
            ],
            "block5201": [
                "msg.sender.transfer(investors[msg.sender].amount)"
            ],
            "block11077": [
                "OAR.getAddress()"
            ],
            "jump7888": [
                "investorsArray[i].transfer(investors[investorsArray[i]].amount)",
                "investorsArray[i].transfer(investors[investorsArray[i]].amount)"
            ],
            "jump3257_0": [
                "preICO.weiRaised()",
                "preICO.weiRaised()"
            ],
            "jump3257_1": [
                "preICO.weiRaised()",
                "preICO.weiRaised()"
            ],
            "jump3257_2": [
                "preICO.weiRaised()",
                "preICO.weiRaised()"
            ],
            "jump3257_3": [
                "preICO.weiRaised()",
                "preICO.weiRaised()"
            ],
            "jump9455": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump12889": [
                "oraclize.query.value(price)(0, datasource, arg)",
                "oraclize.query.value(price)(0, datasource, arg)"
            ],
            "jump12059": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump822_0": [
                "token.mint(msg.sender, tokens.mul(10 ** decimals))",
                "token.mint(msg.sender, tokens.mul(10 ** decimals))"
            ],
            "jump10798": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block11447": [
                "oraclize.getPrice(datasource)"
            ],
            "block822": [
                "token.mint(msg.sender, tokens.mul(10 ** decimals))"
            ],
            "block7068": [
                "owner.transfer(amount)"
            ],
            "jump11780": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block9713": [
                "oraclize.cbAddress()"
            ],
            "block12429": [
                "oraclize.getPrice(datasource)"
            ],
            "block3257_3": [
                "preICO.weiRaised()"
            ],
            "block7888": [
                "investorsArray[i].transfer(investors[investorsArray[i]].amount)"
            ],
            "block12059": [
                "OAR.getAddress()"
            ],
            "block9455": [
                "OAR.getAddress()"
            ],
            "jump9713": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "block822_0": [
                "token.mint(msg.sender, tokens.mul(10 ** decimals))"
            ],
            "jump11447": [
                "oraclize.getPrice(datasource)",
                "oraclize.getPrice(datasource)"
            ],
            "jump7068": [
                "owner.transfer(amount)",
                "owner.transfer(amount)"
            ]
        }
    }
}