{
    "ScamSealToken": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferBack(address,uint256)",
            "ScamSealToken()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256"
                }
            },
            "transferBack(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256"
                }
            },
            "ScamSealToken()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "balanceOf(address)": [
                383,
                141
            ],
            "transferBack(address,uint256)": [
                802,
                229
            ],
            "transfer(address,uint256)": [
                701,
                207
            ]
        },
        "block_CALL_mapping": {}
    },
    "ScamSeal": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)",
            "ScamSeal()",
            "markAsScam(address)",
            "forgiveIt(address)",
            "updateFlagCount(address,address,uint256)",
            "addAddressToIndex(address,address)",
            "forgiveMe()",
            "forgiveMeOnBehalfOf(address)",
            "forgiveThis(address)",
            "donate()",
            "fallback()",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "contractFeePercentage": "uint256",
                    "pricePerUnit": "uint256",
                    "reliefRatio": "uint256",
                    "totalNumberOfScammers": "uint256",
                    "totalScammedQuantity": "uint256",
                    "totalRepaidQuantity": "uint256",
                    "flaggedIndex": "mapping(address => address[])"
                }
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "contractFeePercentage": "uint256",
                    "pricePerUnit": "uint256",
                    "reliefRatio": "uint256",
                    "totalNumberOfScammers": "uint256",
                    "totalScammedQuantity": "uint256",
                    "totalRepaidQuantity": "uint256",
                    "flaggedIndex": "mapping(address => address[])"
                }
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "contractFeePercentage": "uint256",
                    "pricePerUnit": "uint256",
                    "reliefRatio": "uint256",
                    "totalNumberOfScammers": "uint256",
                    "totalScammedQuantity": "uint256",
                    "totalRepaidQuantity": "uint256",
                    "flaggedIndex": "mapping(address => address[])"
                }
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "contractFeePercentage": "uint256",
                    "pricePerUnit": "uint256",
                    "reliefRatio": "uint256",
                    "totalNumberOfScammers": "uint256",
                    "totalScammedQuantity": "uint256",
                    "totalRepaidQuantity": "uint256",
                    "flaggedIndex": "mapping(address => address[])"
                }
            },
            "ScamSeal()": {
                "argument": {},
                "contract": {
                    "contractFeePercentage": "uint256",
                    "pricePerUnit": "uint256",
                    "reliefRatio": "uint256",
                    "totalNumberOfScammers": "uint256",
                    "totalScammedQuantity": "uint256",
                    "totalRepaidQuantity": "uint256",
                    "flaggedIndex": "mapping(address => address[])"
                }
            },
            "markAsScam(address)": {
                "argument": {},
                "contract": {
                    "contractFeePercentage": "uint256",
                    "pricePerUnit": "uint256",
                    "reliefRatio": "uint256",
                    "totalNumberOfScammers": "uint256",
                    "totalScammedQuantity": "uint256",
                    "totalRepaidQuantity": "uint256",
                    "flaggedIndex": "mapping(address => address[])"
                }
            },
            "forgiveIt(address)": {
                "argument": {},
                "contract": {
                    "contractFeePercentage": "uint256",
                    "pricePerUnit": "uint256",
                    "reliefRatio": "uint256",
                    "totalNumberOfScammers": "uint256",
                    "totalScammedQuantity": "uint256",
                    "totalRepaidQuantity": "uint256",
                    "flaggedIndex": "mapping(address => address[])"
                }
            },
            "updateFlagCount(address,address,uint256)": {
                "argument": {
                    "quantity": "uint256"
                },
                "contract": {
                    "contractFeePercentage": "uint256",
                    "pricePerUnit": "uint256",
                    "reliefRatio": "uint256",
                    "totalNumberOfScammers": "uint256",
                    "totalScammedQuantity": "uint256",
                    "totalRepaidQuantity": "uint256",
                    "flaggedIndex": "mapping(address => address[])"
                }
            },
            "addAddressToIndex(address,address)": {
                "argument": {},
                "contract": {
                    "contractFeePercentage": "uint256",
                    "pricePerUnit": "uint256",
                    "reliefRatio": "uint256",
                    "totalNumberOfScammers": "uint256",
                    "totalScammedQuantity": "uint256",
                    "totalRepaidQuantity": "uint256",
                    "flaggedIndex": "mapping(address => address[])"
                }
            },
            "forgiveMe()": {
                "argument": {},
                "contract": {
                    "contractFeePercentage": "uint256",
                    "pricePerUnit": "uint256",
                    "reliefRatio": "uint256",
                    "totalNumberOfScammers": "uint256",
                    "totalScammedQuantity": "uint256",
                    "totalRepaidQuantity": "uint256",
                    "flaggedIndex": "mapping(address => address[])"
                }
            },
            "forgiveMeOnBehalfOf(address)": {
                "argument": {},
                "contract": {
                    "contractFeePercentage": "uint256",
                    "pricePerUnit": "uint256",
                    "reliefRatio": "uint256",
                    "totalNumberOfScammers": "uint256",
                    "totalScammedQuantity": "uint256",
                    "totalRepaidQuantity": "uint256",
                    "flaggedIndex": "mapping(address => address[])"
                }
            },
            "forgiveThis(address)": {
                "argument": {},
                "contract": {
                    "contractFeePercentage": "uint256",
                    "pricePerUnit": "uint256",
                    "reliefRatio": "uint256",
                    "totalNumberOfScammers": "uint256",
                    "totalScammedQuantity": "uint256",
                    "totalRepaidQuantity": "uint256",
                    "flaggedIndex": "mapping(address => address[])"
                }
            },
            "donate()": {
                "argument": {},
                "contract": {
                    "contractFeePercentage": "uint256",
                    "pricePerUnit": "uint256",
                    "reliefRatio": "uint256",
                    "totalNumberOfScammers": "uint256",
                    "totalScammedQuantity": "uint256",
                    "totalRepaidQuantity": "uint256",
                    "flaggedIndex": "mapping(address => address[])"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "contractFeePercentage": "uint256",
                    "pricePerUnit": "uint256",
                    "reliefRatio": "uint256",
                    "totalNumberOfScammers": "uint256",
                    "totalScammedQuantity": "uint256",
                    "totalRepaidQuantity": "uint256",
                    "flaggedIndex": "mapping(address => address[])"
                }
            }
        },
        "function_block_mapping": {
            "forgiveMeOnBehalfOf(address)": [
                974,
                251
            ],
            "forgiveMe()": [
                1206,
                317
            ],
            "markAsScam(address)": [
                659,
                163
            ],
            "forgiveIt(address)": [
                1139,
                295
            ],
            "donate()": [
                1326,
                383
            ]
        },
        "block_CALL_mapping": {
            "jump5922": [
                "forgivedBy.transfer(forgivenessAmount)",
                "forgivedBy.transfer(forgivenessAmount)"
            ],
            "block7698": [
                "theScamSealToken.transferBack(scammer, numberOfTotalTokensToForgive)"
            ],
            "jump7397": [
                "owner.transfer(contractFeeAmount)",
                "owner.transfer(contractFeeAmount)"
            ],
            "jump2075": [
                "theScamSealToken.transfer(scammer, numberOfTokens)",
                "theScamSealToken.transfer(scammer, numberOfTokens)"
            ],
            "block1491": [
                "owner.transfer(ownersFee)"
            ],
            "jump3950": [
                "theScamSealToken.transferBack(scammer, numberOfTokensToForgive)",
                "theScamSealToken.transferBack(scammer, numberOfTokensToForgive)"
            ],
            "jump5922_0": [
                "forgivedBy.transfer(forgivenessAmount)",
                "forgivedBy.transfer(forgivenessAmount)"
            ],
            "block7768_0": [
                "msg.sender.transfer(forgivenessAmount)"
            ],
            "jump7768": [
                "msg.sender.transfer(forgivenessAmount)",
                "msg.sender.transfer(forgivenessAmount)"
            ],
            "jump230_0": [
                "owner.transfer(msg.value)",
                "owner.transfer(msg.value)"
            ],
            "jump3992": [
                "msg.sender.transfer(insurance)",
                "msg.sender.transfer(insurance)"
            ],
            "jump1491": [
                "owner.transfer(ownersFee)",
                "owner.transfer(ownersFee)"
            ],
            "block7768": [
                "msg.sender.transfer(forgivenessAmount)"
            ],
            "block5922_0": [
                "forgivedBy.transfer(forgivenessAmount)"
            ],
            "block5922": [
                "forgivedBy.transfer(forgivenessAmount)"
            ],
            "block230_0": [
                "owner.transfer(msg.value)"
            ],
            "jump6391_0": [
                "forgivedBy.transfer(toForgive)",
                "forgivedBy.transfer(toForgive)"
            ],
            "jump6391": [
                "forgivedBy.transfer(toForgive)",
                "forgivedBy.transfer(toForgive)"
            ],
            "jump7698": [
                "theScamSealToken.transferBack(scammer, numberOfTotalTokensToForgive)",
                "theScamSealToken.transferBack(scammer, numberOfTotalTokensToForgive)"
            ],
            "jump7397_0": [
                "owner.transfer(contractFeeAmount)",
                "owner.transfer(contractFeeAmount)"
            ],
            "jump7698_0": [
                "theScamSealToken.transferBack(scammer, numberOfTotalTokensToForgive)",
                "theScamSealToken.transferBack(scammer, numberOfTotalTokensToForgive)"
            ],
            "block230": [
                "owner.transfer(msg.value)"
            ],
            "block6391": [
                "forgivedBy.transfer(toForgive)"
            ],
            "block7698_0": [
                "theScamSealToken.transferBack(scammer, numberOfTotalTokensToForgive)"
            ],
            "block3950": [
                "theScamSealToken.transferBack(scammer, numberOfTokensToForgive)"
            ],
            "jump7768_0": [
                "msg.sender.transfer(forgivenessAmount)",
                "msg.sender.transfer(forgivenessAmount)"
            ],
            "block7397_0": [
                "owner.transfer(contractFeeAmount)"
            ],
            "block2075": [
                "theScamSealToken.transfer(scammer, numberOfTokens)"
            ],
            "jump230": [
                "owner.transfer(msg.value)",
                "owner.transfer(msg.value)"
            ],
            "jump4428": [
                "owner.transfer(msg.value)",
                "owner.transfer(msg.value)"
            ],
            "block7397": [
                "owner.transfer(contractFeeAmount)"
            ],
            "block6391_0": [
                "forgivedBy.transfer(toForgive)"
            ],
            "block3992": [
                "msg.sender.transfer(insurance)"
            ],
            "block4428": [
                "owner.transfer(msg.value)"
            ]
        }
    }
}