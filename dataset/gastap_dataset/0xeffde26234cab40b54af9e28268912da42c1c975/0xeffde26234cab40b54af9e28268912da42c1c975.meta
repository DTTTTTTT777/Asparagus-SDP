{
    "Erc20Token": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "approve(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approveAndCall(address,uint256,bytes)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                302,
                97
            ],
            "balanceOf(address)": [
                628,
                185
            ],
            "totalSupply()": [
                403,
                119
            ],
            "transferFrom(address,address,uint256)": [
                446,
                141
            ],
            "allowance(address,address)": [
                960,
                251
            ],
            "transfer(address,uint256)": [
                859,
                229
            ]
        },
        "block_CALL_mapping": {}
    },
    "Base": {
        "function_list": [
            "Base()",
            "transferOwnership(address)",
            "userRefund()",
            "userRefundTo(address)",
            "_userRefund(address,address)",
            "lock()",
            "unLock()",
            "setLock()",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Base()": {
                "argument": {},
                "contract": {
                    "createTime": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "createTime": "uint256"
                }
            },
            "userRefund()": {
                "argument": {},
                "contract": {
                    "createTime": "uint256"
                }
            },
            "userRefundTo(address)": {
                "argument": {},
                "contract": {
                    "createTime": "uint256"
                }
            },
            "_userRefund(address,address)": {
                "argument": {},
                "contract": {
                    "createTime": "uint256"
                }
            },
            "lock()": {
                "argument": {},
                "contract": {
                    "createTime": "uint256"
                }
            },
            "unLock()": {
                "argument": {},
                "contract": {
                    "createTime": "uint256"
                }
            },
            "setLock()": {
                "argument": {},
                "contract": {
                    "createTime": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "userRefundTo(address)": [
                183,
                97
            ],
            "setLock()": [
                360,
                163
            ],
            "userRefund()": [
                337,
                141
            ],
            "transferOwnership(address)": [
                470,
                207
            ]
        },
        "block_CALL_mapping": {
            "block1047_0": [
                "_to.transfer(amount)"
            ],
            "block1047": [
                "_to.transfer(amount)"
            ],
            "jump1047_0": [
                "_to.transfer(amount)",
                "_to.transfer(amount)"
            ],
            "jump1047": [
                "_to.transfer(amount)",
                "_to.transfer(amount)"
            ]
        }
    },
    "Erc20TokenMarket": {
        "function_list": [
            "Base()",
            "transferOwnership(address)",
            "userRefund()",
            "userRefundTo(address)",
            "_userRefund(address,address)",
            "lock()",
            "unLock()",
            "setLock()",
            "Erc20TokenMarket()",
            "addBadToken(address)",
            "removeBadToken(address)",
            "isBadToken(address)",
            "setSellerGuarantee(uint256)",
            "checkSellerGuarantee(address)",
            "userRefundWithoutGuaranteeEther()",
            "receiveApproval(address,uint256,address,bytes)",
            "setSellingToken(address,uint256,uint256)",
            "cancelSellingToken(address)",
            "buyTokenFrom(address,address,uint256)",
            "fallback()",
            "disToken(address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Base()": {
                "argument": {},
                "contract": {
                    "sellerGuaranteeEther": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "sellerGuaranteeEther": "uint256"
                }
            },
            "userRefund()": {
                "argument": {},
                "contract": {
                    "sellerGuaranteeEther": "uint256"
                }
            },
            "userRefundTo(address)": {
                "argument": {},
                "contract": {
                    "sellerGuaranteeEther": "uint256"
                }
            },
            "_userRefund(address,address)": {
                "argument": {},
                "contract": {
                    "sellerGuaranteeEther": "uint256"
                }
            },
            "lock()": {
                "argument": {},
                "contract": {
                    "sellerGuaranteeEther": "uint256"
                }
            },
            "unLock()": {
                "argument": {},
                "contract": {
                    "sellerGuaranteeEther": "uint256"
                }
            },
            "setLock()": {
                "argument": {},
                "contract": {
                    "sellerGuaranteeEther": "uint256"
                }
            },
            "Erc20TokenMarket()": {
                "argument": {},
                "contract": {
                    "sellerGuaranteeEther": "uint256"
                }
            },
            "addBadToken(address)": {
                "argument": {},
                "contract": {
                    "sellerGuaranteeEther": "uint256"
                }
            },
            "removeBadToken(address)": {
                "argument": {},
                "contract": {
                    "sellerGuaranteeEther": "uint256"
                }
            },
            "isBadToken(address)": {
                "argument": {},
                "contract": {
                    "sellerGuaranteeEther": "uint256"
                }
            },
            "setSellerGuarantee(uint256)": {
                "argument": {
                    "_gurateeEther": "uint256"
                },
                "contract": {
                    "sellerGuaranteeEther": "uint256"
                }
            },
            "checkSellerGuarantee(address)": {
                "argument": {},
                "contract": {
                    "sellerGuaranteeEther": "uint256"
                }
            },
            "userRefundWithoutGuaranteeEther()": {
                "argument": {},
                "contract": {
                    "sellerGuaranteeEther": "uint256"
                }
            },
            "receiveApproval(address,uint256,address,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {
                    "sellerGuaranteeEther": "uint256"
                }
            },
            "setSellingToken(address,uint256,uint256)": {
                "argument": {
                    "_price": "uint256",
                    "_lineTime": "uint256"
                },
                "contract": {
                    "sellerGuaranteeEther": "uint256"
                }
            },
            "cancelSellingToken(address)": {
                "argument": {},
                "contract": {
                    "sellerGuaranteeEther": "uint256"
                }
            },
            "buyTokenFrom(address,address,uint256)": {
                "argument": {
                    "_buyerTokenPrice": "uint256"
                },
                "contract": {
                    "sellerGuaranteeEther": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "sellerGuaranteeEther": "uint256"
                }
            },
            "disToken(address)": {
                "argument": {},
                "contract": {
                    "sellerGuaranteeEther": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "disToken(address)": [
                617,
                141
            ],
            "userRefundTo(address)": [
                684,
                163
            ],
            "setSellingToken(address,uint256,uint256)": [
                838,
                207
            ],
            "setSellerGuarantee(uint256)": [
                1347,
                361
            ],
            "userRefundWithoutGuaranteeEther()": [
                945,
                229
            ],
            "setLock()": [
                991,
                273
            ],
            "userRefund()": [
                968,
                251
            ],
            "addBadToken(address)": [
                1280,
                339
            ],
            "transferOwnership(address)": [
                1709,
                471
            ],
            "buyTokenFrom(address,address,uint256)": [
                1459,
                405
            ],
            "cancelSellingToken(address)": [
                1392,
                383
            ],
            "removeBadToken(address)": [
                399,
                97
            ],
            "receiveApproval(address,uint256,address,bytes)": [
                1101,
                317
            ]
        },
        "block_CALL_mapping": {
            "block5977": [
                "token.allowance(msg.sender,this)"
            ],
            "jump4729": [
                "token.allowance(_from, this)",
                "token.allowance(_from, this)"
            ],
            "block2599": [
                "token.transfer(msg.sender, a1)"
            ],
            "block8734": [
                "token.allowance(_seller, this)"
            ],
            "jump8221": [
                "token.transferFrom(_seller, msg.sender, canTokenAmount)",
                "token.transferFrom(_seller, msg.sender, canTokenAmount)"
            ],
            "block8221": [
                "token.transferFrom(_seller, msg.sender, canTokenAmount)"
            ],
            "jump3896": [
                "msg.sender.transfer(amount)",
                "msg.sender.transfer(amount)"
            ],
            "jump6718": [
                "token.allowance(_seller, this)",
                "token.allowance(_seller, this)"
            ],
            "block10209": [
                "_to.transfer(amount)"
            ],
            "block6718": [
                "token.allowance(_seller, this)"
            ],
            "block2342": [
                "token.balanceOf(this)"
            ],
            "block10209_0": [
                "_to.transfer(amount)"
            ],
            "block4729": [
                "token.allowance(_from, this)"
            ],
            "block3315": [
                "token.allowance(msg.sender,this)"
            ],
            "jump2342": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "block7060": [
                "token.balanceOf(_seller)"
            ],
            "jump5977": [
                "token.allowance(msg.sender,this)",
                "token.allowance(msg.sender,this)"
            ],
            "jump10209": [
                "_to.transfer(amount)",
                "_to.transfer(amount)"
            ],
            "block2871": [
                "token.transfer(owner, a2)"
            ],
            "block8356": [
                "_seller.transfer(etherAmount)"
            ],
            "jump10209_0": [
                "_to.transfer(amount)",
                "_to.transfer(amount)"
            ],
            "jump2599": [
                "token.transfer(msg.sender, a1)",
                "token.transfer(msg.sender, a1)"
            ],
            "jump8356": [
                "_seller.transfer(etherAmount)",
                "_seller.transfer(etherAmount)"
            ],
            "block3896": [
                "msg.sender.transfer(amount)"
            ],
            "jump7060": [
                "token.balanceOf(_seller)",
                "token.balanceOf(_seller)"
            ],
            "jump8734": [
                "token.allowance(_seller, this)",
                "token.allowance(_seller, this)"
            ],
            "jump2871": [
                "token.transfer(owner, a2)",
                "token.transfer(owner, a2)"
            ],
            "jump3315": [
                "token.allowance(msg.sender,this)",
                "token.allowance(msg.sender,this)"
            ]
        }
    }
}