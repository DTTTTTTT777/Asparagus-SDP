{
    "Token": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                401,
                97
            ],
            "balanceOf(address)": [
                5247,
                929
            ],
            "totalSupply()": [
                2874,
                889
            ],
            "allowance(address,address)": [
                7505,
                961
            ],
            "transferFrom(address,address,uint256)": [
                545,
                141
            ],
            "transfer(address,uint256)": [
                1449,
                383
            ]
        },
        "block_CALL_mapping": {
            "jump4587": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "block4811": [
                "token.transfer(_to, balance)"
            ],
            "jump4811": [
                "token.transfer(_to, balance)",
                "token.transfer(_to, balance)"
            ],
            "jump5247": [
                "controller.balanceOf(a)",
                "controller.balanceOf(a)"
            ],
            "block5247": [
                "controller.balanceOf(a)"
            ],
            "jump7505": [
                "controller.allowance(_owner, _spender)",
                "controller.allowance(_owner, _spender)"
            ],
            "jump3854": [
                "controller.decreaseApproval(msg.sender, _spender, _subtractedValue)",
                "controller.decreaseApproval(msg.sender, _spender, _subtractedValue)"
            ],
            "jump7091": [
                "controller.allowance(msg.sender, _spender)",
                "controller.allowance(msg.sender, _spender)"
            ],
            "block7505": [
                "controller.allowance(_owner, _spender)"
            ],
            "block4587": [
                "token.balanceOf(this)"
            ],
            "jump3264": [
                "controller.transferFrom(msg.sender, _from, _to, _value)",
                "controller.transferFrom(msg.sender, _from, _to, _value)"
            ],
            "block3264": [
                "controller.transferFrom(msg.sender, _from, _to, _value)"
            ],
            "jump2243": [
                "controller.allowance(msg.sender, _spender)",
                "controller.allowance(msg.sender, _spender)"
            ],
            "block3854": [
                "controller.decreaseApproval(msg.sender, _spender, _subtractedValue)"
            ],
            "block2874": [
                "controller.totalSupply()"
            ],
            "jump6313": [
                "controller.transfer(msg.sender, _to, _value)",
                "controller.transfer(msg.sender, _to, _value)"
            ],
            "jump4162": [
                "controller.allowance(msg.sender, _spender)",
                "controller.allowance(msg.sender, _spender)"
            ],
            "block4162": [
                "controller.allowance(msg.sender, _spender)"
            ],
            "block6783": [
                "controller.increaseApproval(msg.sender, _spender, _addedValue)"
            ],
            "block7091": [
                "controller.allowance(msg.sender, _spender)"
            ],
            "jump6783": [
                "controller.increaseApproval(msg.sender, _spender, _addedValue)",
                "controller.increaseApproval(msg.sender, _spender, _addedValue)"
            ],
            "block6313": [
                "controller.transfer(msg.sender, _to, _value)"
            ],
            "block2243": [
                "controller.allowance(msg.sender, _spender)"
            ],
            "jump2562": [
                "controller.approve(msg.sender, _spender, _value)",
                "controller.approve(msg.sender, _spender, _value)"
            ],
            "block2562": [
                "controller.approve(msg.sender, _spender, _value)"
            ],
            "jump2874": [
                "controller.totalSupply()",
                "controller.totalSupply()"
            ]
        }
    },
    "E4Lava": {
        "function_list": [
            "optInFromClassic()",
            "checkDividends(address)",
            "withdrawDividends()",
            "transferDividends(address)",
            "getAccountInfo(address)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "E4Lava()",
            "applySettings(E4Lava.SettingStateValue,uint256,uint256,uint256,uint256)",
            "addAccount(address)",
            "totalSupply()",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "calcCurPointsForAcct(address)",
            "fallback()",
            "blackHole()",
            "withdrawDividends()",
            "transferDividends(address)",
            "setOpGas(uint256,uint256,uint256)",
            "checkDividends(address)",
            "changeOwner(address)",
            "setDeveloper(address)",
            "setOldE4(address,address)",
            "getAccountInfo(address)",
            "haraKiri()",
            "optInFromClassic()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "optInFromClassic()": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "rwGas": "uint256",
                    "optInXferGas": "uint256",
                    "optInFcnMinGas": "uint256",
                    "vestTime": "uint256"
                }
            },
            "checkDividends(address)": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "rwGas": "uint256",
                    "optInXferGas": "uint256",
                    "optInFcnMinGas": "uint256",
                    "vestTime": "uint256"
                }
            },
            "withdrawDividends()": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "rwGas": "uint256",
                    "optInXferGas": "uint256",
                    "optInFcnMinGas": "uint256",
                    "vestTime": "uint256"
                }
            },
            "transferDividends(address)": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "rwGas": "uint256",
                    "optInXferGas": "uint256",
                    "optInFcnMinGas": "uint256",
                    "vestTime": "uint256"
                }
            },
            "getAccountInfo(address)": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "rwGas": "uint256",
                    "optInXferGas": "uint256",
                    "optInFcnMinGas": "uint256",
                    "vestTime": "uint256"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "rwGas": "uint256",
                    "optInXferGas": "uint256",
                    "optInFcnMinGas": "uint256",
                    "vestTime": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "rwGas": "uint256",
                    "optInXferGas": "uint256",
                    "optInFcnMinGas": "uint256",
                    "vestTime": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "rwGas": "uint256",
                    "optInXferGas": "uint256",
                    "optInFcnMinGas": "uint256",
                    "vestTime": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "rwGas": "uint256",
                    "optInXferGas": "uint256",
                    "optInFcnMinGas": "uint256",
                    "vestTime": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "rwGas": "uint256",
                    "optInXferGas": "uint256",
                    "optInFcnMinGas": "uint256",
                    "vestTime": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "rwGas": "uint256",
                    "optInXferGas": "uint256",
                    "optInFcnMinGas": "uint256",
                    "vestTime": "uint256"
                }
            },
            "E4Lava()": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "rwGas": "uint256",
                    "optInXferGas": "uint256",
                    "optInFcnMinGas": "uint256",
                    "vestTime": "uint256"
                }
            },
            "applySettings(E4Lava.SettingStateValue,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_threshold": "uint256",
                    "_rw": "uint256",
                    "_optXferGas": "uint256",
                    "_optFcnGas": "uint256"
                },
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "rwGas": "uint256",
                    "optInXferGas": "uint256",
                    "optInFcnMinGas": "uint256",
                    "vestTime": "uint256"
                }
            },
            "addAccount(address)": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "rwGas": "uint256",
                    "optInXferGas": "uint256",
                    "optInFcnMinGas": "uint256",
                    "vestTime": "uint256"
                }
            },
            "calcCurPointsForAcct(address)": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "rwGas": "uint256",
                    "optInXferGas": "uint256",
                    "optInFcnMinGas": "uint256",
                    "vestTime": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "rwGas": "uint256",
                    "optInXferGas": "uint256",
                    "optInFcnMinGas": "uint256",
                    "vestTime": "uint256"
                }
            },
            "blackHole()": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "rwGas": "uint256",
                    "optInXferGas": "uint256",
                    "optInFcnMinGas": "uint256",
                    "vestTime": "uint256"
                }
            },
            "setOpGas(uint256,uint256,uint256)": {
                "argument": {
                    "_rw": "uint256",
                    "_optXferGas": "uint256",
                    "_optFcnGas": "uint256"
                },
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "rwGas": "uint256",
                    "optInXferGas": "uint256",
                    "optInFcnMinGas": "uint256",
                    "vestTime": "uint256"
                }
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "rwGas": "uint256",
                    "optInXferGas": "uint256",
                    "optInFcnMinGas": "uint256",
                    "vestTime": "uint256"
                }
            },
            "setDeveloper(address)": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "rwGas": "uint256",
                    "optInXferGas": "uint256",
                    "optInFcnMinGas": "uint256",
                    "vestTime": "uint256"
                }
            },
            "setOldE4(address,address)": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "rwGas": "uint256",
                    "optInXferGas": "uint256",
                    "optInFcnMinGas": "uint256",
                    "vestTime": "uint256"
                }
            },
            "haraKiri()": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "rwGas": "uint256",
                    "optInXferGas": "uint256",
                    "optInFcnMinGas": "uint256",
                    "vestTime": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "NumOrigTokens": "uint256",
                    "NewTokensPerOrigToken": "uint256",
                    "NewTokenSupply": "uint256",
                    "numToksSwitchedOver": "uint256",
                    "holdoverBalance": "uint256",
                    "TotalFeesReceived": "uint256",
                    "decimals": "uint256",
                    "symbol": "string",
                    "numAccounts": "uint256",
                    "payoutThreshold": "uint256",
                    "rwGas": "uint256",
                    "optInXferGas": "uint256",
                    "optInFcnMinGas": "uint256",
                    "vestTime": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "optInFromClassic()": [
                2811,
                779
            ],
            "balanceOf(address)": [
                10848,
                890
            ],
            "totalSupply()": [
                763,
                119
            ],
            "allowance(address,address)": [
                10147,
                874
            ],
            "transferFrom(address,address,uint256)": [
                10630,
                1031
            ],
            "transferDividends(address)": [
                2471,
                691
            ],
            "approve(address,uint256)": [
                574,
                75
            ],
            "haraKiri()": [
                2318,
                625
            ],
            "withdrawDividends()": [
                1156,
                229
            ],
            "setOpGas(uint256,uint256,uint256)": [
                1242,
                273
            ],
            "changeOwner(address)": [
                2051,
                559
            ],
            "blackHole()": [
                2041,
                537
            ],
            "setOldE4(address,address)": [
                2219,
                603
            ],
            "getAccountInfo(address)": [
                1666,
                449
            ],
            "checkDividends(address)": [
                849,
                163
            ],
            "setDeveloper(address)": [
                2834,
                801
            ],
            "transfer(address,uint256)": [
                2118,
                581
            ]
        },
        "block_CALL_mapping": {
            "jump9760": [
                "iclassic.balanceOf(nrequester)",
                "iclassic.balanceOf(nrequester)"
            ],
            "jump10147": [
                "iclassic.allowance(nrequester, address(this))",
                "iclassic.allowance(nrequester, address(this))"
            ],
            "jump10630": [
                "iclassic.transferFrom.gas(optInXferGas)(nrequester, oldE4RecycleBin, _toks)",
                "iclassic.transferFrom.gas(optInXferGas)(nrequester, oldE4RecycleBin, _toks)"
            ],
            "block9760": [
                "iclassic.balanceOf(nrequester)"
            ],
            "jump5894": [
                "msg.sender.call.gas(rwGas).value(_amount)()",
                "msg.sender.call.gas(rwGas).value(_amount)()"
            ],
            "jump3883": [
                "owner.call.gas(rwGas).value(this.balance)()",
                "owner.call.gas(rwGas).value(this.balance)()"
            ],
            "jump10848": [
                "iclassic.balanceOf(nrequester)",
                "iclassic.balanceOf(nrequester)"
            ],
            "block5894": [
                "msg.sender.call.gas(rwGas).value(_amount)()"
            ],
            "block10848": [
                "iclassic.balanceOf(nrequester)"
            ],
            "block10147": [
                "iclassic.allowance(nrequester, address(this))"
            ],
            "block10630": [
                "iclassic.transferFrom.gas(optInXferGas)(nrequester, oldE4RecycleBin, _toks)"
            ],
            "block3883": [
                "owner.call.gas(rwGas).value(this.balance)()"
            ]
        }
    }
}