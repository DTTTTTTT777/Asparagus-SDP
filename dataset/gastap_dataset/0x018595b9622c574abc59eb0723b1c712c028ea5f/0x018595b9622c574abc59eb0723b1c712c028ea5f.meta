{
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "AidaICO": {
        "function_list": [
            "AidaICO(address,address,address,address,address,address,address,address,address,address)",
            "setRate(uint256)",
            "startPreIco()",
            "pausePreIco()",
            "finishPreIco()",
            "startIco()",
            "pauseIco()",
            "finishIco()",
            "enableTokensTransfer()",
            "disableTokensTransfer()",
            "fallback()",
            "rememberEther(uint256,address)",
            "rememberTokensEth(uint256,address)",
            "rememberTokensOtherCrypto(uint256,address)",
            "buyForInvestor(address,uint256,string)",
            "createTokensForOtherCrypto(address,uint256)",
            "createTokensForEth(address,uint256)",
            "getBonus(uint256)",
            "startRefunds()",
            "stopRefunds()",
            "returnEther()",
            "returnOtherCrypto(address,string)",
            "withdrawEther()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "AidaICO(address,address,address,address,address,address,address,address,address,address)": {
                "argument": {},
                "contract": {
                    "Rate_Eth": "uint256",
                    "Tokens_Per_Dollar": "uint256",
                    "Token_Price": "uint256",
                    "bountyPart": "uint256",
                    "partnersPart": "uint256",
                    "teamPart": "uint256",
                    "icoAndPOfPart": "uint256",
                    "finishTime": "uint256"
                }
            },
            "setRate(uint256)": {
                "argument": {
                    "_RateEth": "uint256"
                },
                "contract": {
                    "Rate_Eth": "uint256",
                    "Tokens_Per_Dollar": "uint256",
                    "Token_Price": "uint256",
                    "bountyPart": "uint256",
                    "partnersPart": "uint256",
                    "teamPart": "uint256",
                    "icoAndPOfPart": "uint256",
                    "finishTime": "uint256"
                }
            },
            "startPreIco()": {
                "argument": {},
                "contract": {
                    "Rate_Eth": "uint256",
                    "Tokens_Per_Dollar": "uint256",
                    "Token_Price": "uint256",
                    "bountyPart": "uint256",
                    "partnersPart": "uint256",
                    "teamPart": "uint256",
                    "icoAndPOfPart": "uint256",
                    "finishTime": "uint256"
                }
            },
            "pausePreIco()": {
                "argument": {},
                "contract": {
                    "Rate_Eth": "uint256",
                    "Tokens_Per_Dollar": "uint256",
                    "Token_Price": "uint256",
                    "bountyPart": "uint256",
                    "partnersPart": "uint256",
                    "teamPart": "uint256",
                    "icoAndPOfPart": "uint256",
                    "finishTime": "uint256"
                }
            },
            "finishPreIco()": {
                "argument": {},
                "contract": {
                    "Rate_Eth": "uint256",
                    "Tokens_Per_Dollar": "uint256",
                    "Token_Price": "uint256",
                    "bountyPart": "uint256",
                    "partnersPart": "uint256",
                    "teamPart": "uint256",
                    "icoAndPOfPart": "uint256",
                    "finishTime": "uint256"
                }
            },
            "startIco()": {
                "argument": {},
                "contract": {
                    "Rate_Eth": "uint256",
                    "Tokens_Per_Dollar": "uint256",
                    "Token_Price": "uint256",
                    "bountyPart": "uint256",
                    "partnersPart": "uint256",
                    "teamPart": "uint256",
                    "icoAndPOfPart": "uint256",
                    "finishTime": "uint256"
                }
            },
            "pauseIco()": {
                "argument": {},
                "contract": {
                    "Rate_Eth": "uint256",
                    "Tokens_Per_Dollar": "uint256",
                    "Token_Price": "uint256",
                    "bountyPart": "uint256",
                    "partnersPart": "uint256",
                    "teamPart": "uint256",
                    "icoAndPOfPart": "uint256",
                    "finishTime": "uint256"
                }
            },
            "finishIco()": {
                "argument": {},
                "contract": {
                    "Rate_Eth": "uint256",
                    "Tokens_Per_Dollar": "uint256",
                    "Token_Price": "uint256",
                    "bountyPart": "uint256",
                    "partnersPart": "uint256",
                    "teamPart": "uint256",
                    "icoAndPOfPart": "uint256",
                    "finishTime": "uint256"
                }
            },
            "enableTokensTransfer()": {
                "argument": {},
                "contract": {
                    "Rate_Eth": "uint256",
                    "Tokens_Per_Dollar": "uint256",
                    "Token_Price": "uint256",
                    "bountyPart": "uint256",
                    "partnersPart": "uint256",
                    "teamPart": "uint256",
                    "icoAndPOfPart": "uint256",
                    "finishTime": "uint256"
                }
            },
            "disableTokensTransfer()": {
                "argument": {},
                "contract": {
                    "Rate_Eth": "uint256",
                    "Tokens_Per_Dollar": "uint256",
                    "Token_Price": "uint256",
                    "bountyPart": "uint256",
                    "partnersPart": "uint256",
                    "teamPart": "uint256",
                    "icoAndPOfPart": "uint256",
                    "finishTime": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "Rate_Eth": "uint256",
                    "Tokens_Per_Dollar": "uint256",
                    "Token_Price": "uint256",
                    "bountyPart": "uint256",
                    "partnersPart": "uint256",
                    "teamPart": "uint256",
                    "icoAndPOfPart": "uint256",
                    "finishTime": "uint256"
                }
            },
            "rememberEther(uint256,address)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "Rate_Eth": "uint256",
                    "Tokens_Per_Dollar": "uint256",
                    "Token_Price": "uint256",
                    "bountyPart": "uint256",
                    "partnersPart": "uint256",
                    "teamPart": "uint256",
                    "icoAndPOfPart": "uint256",
                    "finishTime": "uint256"
                }
            },
            "rememberTokensEth(uint256,address)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "Rate_Eth": "uint256",
                    "Tokens_Per_Dollar": "uint256",
                    "Token_Price": "uint256",
                    "bountyPart": "uint256",
                    "partnersPart": "uint256",
                    "teamPart": "uint256",
                    "icoAndPOfPart": "uint256",
                    "finishTime": "uint256"
                }
            },
            "rememberTokensOtherCrypto(uint256,address)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "Rate_Eth": "uint256",
                    "Tokens_Per_Dollar": "uint256",
                    "Token_Price": "uint256",
                    "bountyPart": "uint256",
                    "partnersPart": "uint256",
                    "teamPart": "uint256",
                    "icoAndPOfPart": "uint256",
                    "finishTime": "uint256"
                }
            },
            "buyForInvestor(address,uint256,string)": {
                "argument": {
                    "_aidValue": "uint256",
                    "_txHash": "string"
                },
                "contract": {
                    "Rate_Eth": "uint256",
                    "Tokens_Per_Dollar": "uint256",
                    "Token_Price": "uint256",
                    "bountyPart": "uint256",
                    "partnersPart": "uint256",
                    "teamPart": "uint256",
                    "icoAndPOfPart": "uint256",
                    "finishTime": "uint256"
                }
            },
            "createTokensForOtherCrypto(address,uint256)": {
                "argument": {
                    "_aidValue": "uint256"
                },
                "contract": {
                    "Rate_Eth": "uint256",
                    "Tokens_Per_Dollar": "uint256",
                    "Token_Price": "uint256",
                    "bountyPart": "uint256",
                    "partnersPart": "uint256",
                    "teamPart": "uint256",
                    "icoAndPOfPart": "uint256",
                    "finishTime": "uint256"
                }
            },
            "createTokensForEth(address,uint256)": {
                "argument": {
                    "_aidValue": "uint256"
                },
                "contract": {
                    "Rate_Eth": "uint256",
                    "Tokens_Per_Dollar": "uint256",
                    "Token_Price": "uint256",
                    "bountyPart": "uint256",
                    "partnersPart": "uint256",
                    "teamPart": "uint256",
                    "icoAndPOfPart": "uint256",
                    "finishTime": "uint256"
                }
            },
            "getBonus(uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "Rate_Eth": "uint256",
                    "Tokens_Per_Dollar": "uint256",
                    "Token_Price": "uint256",
                    "bountyPart": "uint256",
                    "partnersPart": "uint256",
                    "teamPart": "uint256",
                    "icoAndPOfPart": "uint256",
                    "finishTime": "uint256"
                }
            },
            "startRefunds()": {
                "argument": {},
                "contract": {
                    "Rate_Eth": "uint256",
                    "Tokens_Per_Dollar": "uint256",
                    "Token_Price": "uint256",
                    "bountyPart": "uint256",
                    "partnersPart": "uint256",
                    "teamPart": "uint256",
                    "icoAndPOfPart": "uint256",
                    "finishTime": "uint256"
                }
            },
            "stopRefunds()": {
                "argument": {},
                "contract": {
                    "Rate_Eth": "uint256",
                    "Tokens_Per_Dollar": "uint256",
                    "Token_Price": "uint256",
                    "bountyPart": "uint256",
                    "partnersPart": "uint256",
                    "teamPart": "uint256",
                    "icoAndPOfPart": "uint256",
                    "finishTime": "uint256"
                }
            },
            "returnEther()": {
                "argument": {},
                "contract": {
                    "Rate_Eth": "uint256",
                    "Tokens_Per_Dollar": "uint256",
                    "Token_Price": "uint256",
                    "bountyPart": "uint256",
                    "partnersPart": "uint256",
                    "teamPart": "uint256",
                    "icoAndPOfPart": "uint256",
                    "finishTime": "uint256"
                }
            },
            "returnOtherCrypto(address,string)": {
                "argument": {
                    "_logString": "string"
                },
                "contract": {
                    "Rate_Eth": "uint256",
                    "Tokens_Per_Dollar": "uint256",
                    "Token_Price": "uint256",
                    "bountyPart": "uint256",
                    "partnersPart": "uint256",
                    "teamPart": "uint256",
                    "icoAndPOfPart": "uint256",
                    "finishTime": "uint256"
                }
            },
            "withdrawEther()": {
                "argument": {},
                "contract": {
                    "Rate_Eth": "uint256",
                    "Tokens_Per_Dollar": "uint256",
                    "Token_Price": "uint256",
                    "bountyPart": "uint256",
                    "partnersPart": "uint256",
                    "teamPart": "uint256",
                    "icoAndPOfPart": "uint256",
                    "finishTime": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "Rate_Eth": "uint256",
                    "Tokens_Per_Dollar": "uint256",
                    "Token_Price": "uint256",
                    "bountyPart": "uint256",
                    "partnersPart": "uint256",
                    "teamPart": "uint256",
                    "icoAndPOfPart": "uint256",
                    "finishTime": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "setRate(uint256)": [
                1178,
                198
            ],
            "enableTokensTransfer()": [
                1876,
                418
            ],
            "disableTokensTransfer()": [
                2404,
                594
            ],
            "returnOtherCrypto(address,string)": [
                2226,
                550
            ],
            "startIco()": [
                2073,
                484
            ],
            "withdrawEther()": [
                1853,
                396
            ],
            "pauseIco()": [
                2628,
                682
            ],
            "getBonus(uint256)": [
                1658,
                330
            ],
            "finishPreIco()": [
                1045,
                132
            ],
            "pausePreIco()": [
                1022,
                110
            ],
            "stopRefunds()": [
                2781,
                748
            ],
            "startPreIco()": [
                2427,
                616
            ],
            "startRefunds()": [
                1068,
                154
            ],
            "returnEther()": [
                2804,
                770
            ],
            "finishIco()": [
                2827,
                792
            ]
        },
        "block_CALL_mapping": {
            "block7051": [
                "AID.burnTokens(_investor, tokens)"
            ],
            "block5973": [
                "AID.defrostTokens()"
            ],
            "jump3244_0": [
                "AID.mintTokens(_investor, total)",
                "AID.mintTokens(_investor, total)"
            ],
            "block10016": [
                "AID.totalSupply()"
            ],
            "jump5618": [
                "Company.transfer(this.balance)",
                "Company.transfer(this.balance)"
            ],
            "jump7533": [
                "AID.frostTokens()",
                "AID.frostTokens()"
            ],
            "jump10682": [
                "AID.mintTokens(PartnersFund, partnersPart.mul(totalAmount).div(1000))",
                "AID.mintTokens(PartnersFund, partnersPart.mul(totalAmount).div(1000))"
            ],
            "block10975": [
                "AID.mintTokens(TeamFund, teamPart.mul(totalAmount).div(1000))"
            ],
            "block7533": [
                "AID.frostTokens()"
            ],
            "jump7051": [
                "AID.burnTokens(_investor, tokens)",
                "AID.burnTokens(_investor, tokens)"
            ],
            "block5618": [
                "Company.transfer(this.balance)"
            ],
            "block12071": [
                "AID.mintTokens(_investor, total)"
            ],
            "jump10016": [
                "AID.totalSupply()",
                "AID.totalSupply()"
            ],
            "jump12071": [
                "AID.mintTokens(_investor, total)",
                "AID.mintTokens(_investor, total)"
            ],
            "block9198": [
                "msg.sender.transfer(eth)"
            ],
            "jump9198": [
                "msg.sender.transfer(eth)",
                "msg.sender.transfer(eth)"
            ],
            "jump10389": [
                "AID.mintTokens(BountyFund, bountyPart.mul(totalAmount).div(1000))",
                "AID.mintTokens(BountyFund, bountyPart.mul(totalAmount).div(1000))"
            ],
            "jump10975": [
                "AID.mintTokens(TeamFund, teamPart.mul(totalAmount).div(1000))",
                "AID.mintTokens(TeamFund, teamPart.mul(totalAmount).div(1000))"
            ],
            "block10389": [
                "AID.mintTokens(BountyFund, bountyPart.mul(totalAmount).div(1000))"
            ],
            "block3244": [
                "AID.mintTokens(_investor, total)"
            ],
            "jump3244": [
                "AID.mintTokens(_investor, total)",
                "AID.mintTokens(_investor, total)"
            ],
            "jump5973": [
                "AID.defrostTokens()",
                "AID.defrostTokens()"
            ],
            "block3244_0": [
                "AID.mintTokens(_investor, total)"
            ],
            "block10682": [
                "AID.mintTokens(PartnersFund, partnersPart.mul(totalAmount).div(1000))"
            ],
            "jump9553": [
                "AID.burnTokens(msg.sender, tokens)",
                "AID.burnTokens(msg.sender, tokens)"
            ],
            "block9553": [
                "AID.burnTokens(msg.sender, tokens)"
            ]
        }
    },
    "AidaToken": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "AidaToken(address)",
            "mintTokens(address,uint256)",
            "defrostTokens()",
            "frostTokens()",
            "burnTokens(address,uint256)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "AidaToken(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "mintTokens(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "defrostTokens()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "frostTokens()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "burnTokens(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "frostTokens()": [
                765,
                207
            ],
            "approve(address,uint256)": [
                368,
                97
            ],
            "defrostTokens()": [
                962,
                273
            ],
            "burnTokens(address,uint256)": [
                469,
                119
            ],
            "mintTokens(address,uint256)": [
                1396,
                383
            ],
            "balanceOf(address)": [
                875,
                251
            ],
            "transferFrom(address,address,uint256)": [
                589,
                163
            ],
            "allowance(address,address)": [
                1277,
                361
            ],
            "transfer(address,uint256)": [
                1129,
                317
            ]
        },
        "block_CALL_mapping": {}
    }
}