{
    "Token": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "decimals": "uint256",
                    "name": "string"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "decimals": "uint256",
                    "name": "string"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "decimals": "uint256",
                    "name": "string"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "decimals": "uint256",
                    "name": "string"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "decimals": "uint256",
                    "name": "string"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "decimals": "uint256",
                    "name": "string"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "totalSupply()": [
                226,
                97
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "SafeMath": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeDiv(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeDiv(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "ShortOrder": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeDiv(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "ShortOrder()",
            "changeAdmin(address)",
            "tokenFulfillmentDeposit(address[2],uint256,uint256[8],uint8,bytes32[2])",
            "depositCoupon(address[2],uint256[8],uint8,bytes32[2])",
            "placeLong(address[2],uint256[8],uint8,bytes32[2])",
            "buyLong(address[2],uint256[5],uint8,bytes32[3])",
            "exerciseLong(address[2],uint256[8],uint8,bytes32[2])",
            "claimDonations(address[2],uint256[8],uint8,bytes32[2])",
            "nonActivationShortWithdrawal(address[2],uint256[8],uint8,bytes32[2])",
            "nonActivationWithdrawal(address[2],uint256[8],uint8,bytes32[2])",
            "returnBalance(address[2],uint256[8],uint8,bytes32[2])",
            "returnTokenBalance(address[2],uint256[8],uint8,bytes32[2])",
            "returnUserBalance(address,address[2],uint256[8],uint8,bytes32[2])",
            "returnCoupon(address[2],uint256[8],uint8,bytes32[2])",
            "returnTokenDepositState(address[2],uint256[8],uint8,bytes32[2])",
            "returnHash(address[2],uint256[8])",
            "returnAddress(bytes32,uint8,bytes32[2])",
            "returnHashLong(address,uint256[3])",
            "returnLongAddress(bytes32,uint8,bytes32[2])"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeDiv(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "ShortOrder()": {
                "argument": {},
                "contract": {}
            },
            "changeAdmin(address)": {
                "argument": {},
                "contract": {}
            },
            "tokenFulfillmentDeposit(address[2],uint256,uint256[8],uint8,bytes32[2])": {
                "argument": {
                    "amount": "uint256",
                    "minMaxDMWCPNonce": "uint256[8]",
                    "v": "uint8",
                    "rs": "bytes32[2]"
                },
                "contract": {}
            },
            "depositCoupon(address[2],uint256[8],uint8,bytes32[2])": {
                "argument": {
                    "minMaxDMWCPNonce": "uint256[8]",
                    "v": "uint8",
                    "rs": "bytes32[2]"
                },
                "contract": {}
            },
            "placeLong(address[2],uint256[8],uint8,bytes32[2])": {
                "argument": {
                    "minMaxDMWCPNonce": "uint256[8]",
                    "v": "uint8",
                    "rs": "bytes32[2]"
                },
                "contract": {}
            },
            "buyLong(address[2],uint256[5],uint8,bytes32[3])": {
                "argument": {
                    "amountNonceExpiryDM": "uint256[5]",
                    "v": "uint8",
                    "hashRS": "bytes32[3]"
                },
                "contract": {}
            },
            "exerciseLong(address[2],uint256[8],uint8,bytes32[2])": {
                "argument": {
                    "minMaxDMWCPNonce": "uint256[8]",
                    "v": "uint8",
                    "rs": "bytes32[2]"
                },
                "contract": {}
            },
            "claimDonations(address[2],uint256[8],uint8,bytes32[2])": {
                "argument": {
                    "minMaxDMWCPNonce": "uint256[8]",
                    "v": "uint8",
                    "rs": "bytes32[2]"
                },
                "contract": {}
            },
            "nonActivationShortWithdrawal(address[2],uint256[8],uint8,bytes32[2])": {
                "argument": {
                    "minMaxDMWCPNonce": "uint256[8]",
                    "v": "uint8",
                    "rs": "bytes32[2]"
                },
                "contract": {}
            },
            "nonActivationWithdrawal(address[2],uint256[8],uint8,bytes32[2])": {
                "argument": {
                    "minMaxDMWCPNonce": "uint256[8]",
                    "v": "uint8",
                    "rs": "bytes32[2]"
                },
                "contract": {}
            },
            "returnBalance(address[2],uint256[8],uint8,bytes32[2])": {
                "argument": {
                    "minMaxDMWCPNonce": "uint256[8]",
                    "v": "uint8",
                    "rs": "bytes32[2]"
                },
                "contract": {}
            },
            "returnTokenBalance(address[2],uint256[8],uint8,bytes32[2])": {
                "argument": {
                    "minMaxDMWCPNonce": "uint256[8]",
                    "v": "uint8",
                    "rs": "bytes32[2]"
                },
                "contract": {}
            },
            "returnUserBalance(address,address[2],uint256[8],uint8,bytes32[2])": {
                "argument": {
                    "minMaxDMWCPNonce": "uint256[8]",
                    "v": "uint8",
                    "rs": "bytes32[2]"
                },
                "contract": {}
            },
            "returnCoupon(address[2],uint256[8],uint8,bytes32[2])": {
                "argument": {
                    "minMaxDMWCPNonce": "uint256[8]",
                    "v": "uint8",
                    "rs": "bytes32[2]"
                },
                "contract": {}
            },
            "returnTokenDepositState(address[2],uint256[8],uint8,bytes32[2])": {
                "argument": {
                    "minMaxDMWCPNonce": "uint256[8]",
                    "v": "uint8",
                    "rs": "bytes32[2]"
                },
                "contract": {}
            },
            "returnHash(address[2],uint256[8])": {
                "argument": {
                    "minMaxDMWCPNonce": "uint256[8]"
                },
                "contract": {}
            },
            "returnAddress(bytes32,uint8,bytes32[2])": {
                "argument": {
                    "orderHash": "bytes32",
                    "v": "uint8",
                    "rs": "bytes32[2]"
                },
                "contract": {}
            },
            "returnHashLong(address,uint256[3])": {
                "argument": {
                    "amountNonceExpiry": "uint256[3]"
                },
                "contract": {}
            },
            "returnLongAddress(bytes32,uint8,bytes32[2])": {
                "argument": {
                    "orderHash": "bytes32",
                    "v": "uint8",
                    "rs": "bytes32[2]"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "nonActivationWithdrawal(address[2],uint256[8],uint8,bytes32[2])": [
                1703,
                427
            ],
            "returnTokenDepositState(address[2],uint256[8],uint8,bytes32[2])": [
                336,
                97
            ],
            "returnTokenBalance(address[2],uint256[8],uint8,bytes32[2])": [
                786,
                207
            ],
            "returnLongAddress(bytes32,uint8,bytes32[2])": [
                1396,
                361
            ],
            "returnUserBalance(address,address[2],uint256[8],uint8,bytes32[2])": [
                1132,
                295
            ],
            "returnHashLong(address,uint256[3])": [
                1532,
                383
            ],
            "placeLong(address[2],uint256[8],uint8,bytes32[2])": [
                1330,
                339
            ],
            "buyLong(address[2],uint256[5],uint8,bytes32[3])": [
                439,
                119
            ],
            "returnAddress(bytes32,uint8,bytes32[2])": [
                1782,
                449
            ],
            "tokenFulfillmentDeposit(address[2],uint256,uint256[8],uint8,bytes32[2])": [
                964,
                251
            ],
            "returnHash(address[2],uint256[8])": [
                603,
                163
            ],
            "exerciseLong(address[2],uint256[8],uint8,bytes32[2])": [
                885,
                229
            ],
            "depositCoupon(address[2],uint256[8],uint8,bytes32[2])": [
                1637,
                405
            ],
            "returnCoupon(address[2],uint256[8],uint8,bytes32[2])": [
                687,
                185
            ],
            "claimDonations(address[2],uint256[8],uint8,bytes32[2])": [
                257,
                75
            ],
            "nonActivationShortWithdrawal(address[2],uint256[8],uint8,bytes32[2])": [
                1053,
                273
            ],
            "changeAdmin(address)": [
                1263,
                317
            ],
            "returnBalance(address[2],uint256[8],uint8,bytes32[2])": [
                504,
                141
            ]
        },
        "block_CALL_mapping": {
            "jump3679": [
                "Token(tokenUser[0]).transfer(admin,orderRecord[tokenUser[1]][orderHash].shortBalance[tokenUser[0]])",
                "Token(tokenUser[0]).transfer(admin,orderRecord[tokenUser[1]][orderHash].shortBalance[tokenUser[0]])"
            ],
            "block3164": [
                "admin.transfer(safeAdd(orderRecord[tokenUser[1]][orderHash].coupon,orderRecord[tokenUser[1]][orderHash].balance))"
            ],
            "block3679": [
                "Token(tokenUser[0]).transfer(admin,orderRecord[tokenUser[1]][orderHash].shortBalance[tokenUser[0]])"
            ],
            "block6408": [
                "sellerShort[0].transfer(amountNonceExpiryDM[0])"
            ],
            "block19264": [
                "msg.sender.transfer(orderRecord[msg.sender][orderHash].coupon)"
            ],
            "jump16728": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])",
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])"
            ],
            "block12823": [
                "Token(tokenUser[0]).transfer(msg.sender,amount)"
            ],
            "jump6041": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",longTransferHash),v,hashRS[1],hashRS[2])",
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",longTransferHash),v,hashRS[1],hashRS[2])"
            ],
            "block16728": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])"
            ],
            "block2635": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])"
            ],
            "block9364": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])"
            ],
            "jump22896": [
                "ecrecover(orderHash,v,rs[0],rs[1])",
                "ecrecover(orderHash,v,rs[0],rs[1])"
            ],
            "block22896": [
                "ecrecover(orderHash,v,rs[0],rs[1])"
            ],
            "jump23794": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])",
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])"
            ],
            "jump3164": [
                "admin.transfer(safeAdd(orderRecord[tokenUser[1]][orderHash].coupon,orderRecord[tokenUser[1]][orderHash].balance))",
                "admin.transfer(safeAdd(orderRecord[tokenUser[1]][orderHash].coupon,orderRecord[tokenUser[1]][orderHash].balance))"
            ],
            "block11343": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])"
            ],
            "jump5281": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])",
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])"
            ],
            "jump24970": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])",
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])"
            ],
            "jump21524": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])",
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])"
            ],
            "block17618": [
                "Token(tokenUser[0]).transferFrom(msg.sender,this,amount)"
            ],
            "block12546": [
                "msg.sender.transfer(couponAmount)"
            ],
            "block24970": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])"
            ],
            "block10301": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])"
            ],
            "block20368": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])"
            ],
            "block18906": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])"
            ],
            "block5281": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])"
            ],
            "jump6408": [
                "sellerShort[0].transfer(amountNonceExpiryDM[0])",
                "sellerShort[0].transfer(amountNonceExpiryDM[0])"
            ],
            "jump12546": [
                "msg.sender.transfer(couponAmount)",
                "msg.sender.transfer(couponAmount)"
            ],
            "jump7971": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])",
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])"
            ],
            "jump2635": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])",
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])"
            ],
            "jump10301": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])",
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])"
            ],
            "jump11343": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])",
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])"
            ],
            "jump26658": [
                "ecrecover(orderHash,v,rs[0],rs[1])",
                "ecrecover(orderHash,v,rs[0],rs[1])"
            ],
            "block21524": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])"
            ],
            "block26658": [
                "ecrecover(orderHash,v,rs[0],rs[1])"
            ],
            "jump19264": [
                "msg.sender.transfer(orderRecord[msg.sender][orderHash].coupon)",
                "msg.sender.transfer(orderRecord[msg.sender][orderHash].coupon)"
            ],
            "jump17618": [
                "Token(tokenUser[0]).transferFrom(msg.sender,this,amount)",
                "Token(tokenUser[0]).transferFrom(msg.sender,this,amount)"
            ],
            "block7971": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])"
            ],
            "jump12823": [
                "Token(tokenUser[0]).transfer(msg.sender,amount)",
                "Token(tokenUser[0]).transfer(msg.sender,amount)"
            ],
            "jump25404": [
                "msg.sender.transfer(orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender])",
                "msg.sender.transfer(orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender])"
            ],
            "block14819": [
                "msg.sender.transfer(safeAdd(couponAmount,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]))"
            ],
            "jump14819": [
                "msg.sender.transfer(safeAdd(couponAmount,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]))",
                "msg.sender.transfer(safeAdd(couponAmount,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]))"
            ],
            "block23794": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])"
            ],
            "block6041": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",longTransferHash),v,hashRS[1],hashRS[2])"
            ],
            "jump18906": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])",
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])"
            ],
            "block25404": [
                "msg.sender.transfer(orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender])"
            ],
            "jump20368": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])",
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])"
            ],
            "jump9364": [
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])",
                "ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\",orderHash),v,rs[0],rs[1])"
            ]
        }
    }
}