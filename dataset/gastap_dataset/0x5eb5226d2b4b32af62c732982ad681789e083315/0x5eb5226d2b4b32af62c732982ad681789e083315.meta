{
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "SafeBonus": {
        "function_list": [
            "addBonus(uint256,uint256)"
        ],
        "initial_state": {
            "addBonus(uint256,uint256)": {
                "argument": {
                    "value": "uint256",
                    "percentages": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "token": {
        "function_list": [
            "transfer(address,uint256)"
        ],
        "initial_state": {
            "transfer(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transfer(address,uint256)": [
                68,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "VesaPreICO": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "VesaPreICO()",
            "isAfterDeadline()",
            "isSoftCapAchieved()",
            "isHardCapAchieved()",
            "isCompanyCanBeFinished()",
            "getPrice()",
            "getBonus(uint256)",
            "fallback()",
            "checkGoalReached()",
            "safeWithdrawal()",
            "tokensWithdrawal(address,uint256)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {
                    "durationInDays": "uint8",
                    "fundingGoal": "uint256",
                    "fundingGoalHardCap": "uint256",
                    "amountRaised": "uint256",
                    "start": "uint256",
                    "deadline": "uint256",
                    "bonusPrice": "uint256",
                    "bonusPriceDeltaPerHour": "uint256",
                    "bonusPeriodDurationInHours": "uint256",
                    "price": "uint256",
                    "minSum": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "durationInDays": "uint8",
                    "fundingGoal": "uint256",
                    "fundingGoalHardCap": "uint256",
                    "amountRaised": "uint256",
                    "start": "uint256",
                    "deadline": "uint256",
                    "bonusPrice": "uint256",
                    "bonusPriceDeltaPerHour": "uint256",
                    "bonusPeriodDurationInHours": "uint256",
                    "price": "uint256",
                    "minSum": "uint256"
                }
            },
            "VesaPreICO()": {
                "argument": {},
                "contract": {
                    "durationInDays": "uint8",
                    "fundingGoal": "uint256",
                    "fundingGoalHardCap": "uint256",
                    "amountRaised": "uint256",
                    "start": "uint256",
                    "deadline": "uint256",
                    "bonusPrice": "uint256",
                    "bonusPriceDeltaPerHour": "uint256",
                    "bonusPeriodDurationInHours": "uint256",
                    "price": "uint256",
                    "minSum": "uint256"
                }
            },
            "isAfterDeadline()": {
                "argument": {},
                "contract": {
                    "durationInDays": "uint8",
                    "fundingGoal": "uint256",
                    "fundingGoalHardCap": "uint256",
                    "amountRaised": "uint256",
                    "start": "uint256",
                    "deadline": "uint256",
                    "bonusPrice": "uint256",
                    "bonusPriceDeltaPerHour": "uint256",
                    "bonusPeriodDurationInHours": "uint256",
                    "price": "uint256",
                    "minSum": "uint256"
                }
            },
            "isSoftCapAchieved()": {
                "argument": {},
                "contract": {
                    "durationInDays": "uint8",
                    "fundingGoal": "uint256",
                    "fundingGoalHardCap": "uint256",
                    "amountRaised": "uint256",
                    "start": "uint256",
                    "deadline": "uint256",
                    "bonusPrice": "uint256",
                    "bonusPriceDeltaPerHour": "uint256",
                    "bonusPeriodDurationInHours": "uint256",
                    "price": "uint256",
                    "minSum": "uint256"
                }
            },
            "isHardCapAchieved()": {
                "argument": {},
                "contract": {
                    "durationInDays": "uint8",
                    "fundingGoal": "uint256",
                    "fundingGoalHardCap": "uint256",
                    "amountRaised": "uint256",
                    "start": "uint256",
                    "deadline": "uint256",
                    "bonusPrice": "uint256",
                    "bonusPriceDeltaPerHour": "uint256",
                    "bonusPeriodDurationInHours": "uint256",
                    "price": "uint256",
                    "minSum": "uint256"
                }
            },
            "isCompanyCanBeFinished()": {
                "argument": {},
                "contract": {
                    "durationInDays": "uint8",
                    "fundingGoal": "uint256",
                    "fundingGoalHardCap": "uint256",
                    "amountRaised": "uint256",
                    "start": "uint256",
                    "deadline": "uint256",
                    "bonusPrice": "uint256",
                    "bonusPriceDeltaPerHour": "uint256",
                    "bonusPeriodDurationInHours": "uint256",
                    "price": "uint256",
                    "minSum": "uint256"
                }
            },
            "getPrice()": {
                "argument": {},
                "contract": {
                    "durationInDays": "uint8",
                    "fundingGoal": "uint256",
                    "fundingGoalHardCap": "uint256",
                    "amountRaised": "uint256",
                    "start": "uint256",
                    "deadline": "uint256",
                    "bonusPrice": "uint256",
                    "bonusPriceDeltaPerHour": "uint256",
                    "bonusPeriodDurationInHours": "uint256",
                    "price": "uint256",
                    "minSum": "uint256"
                }
            },
            "getBonus(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "durationInDays": "uint8",
                    "fundingGoal": "uint256",
                    "fundingGoalHardCap": "uint256",
                    "amountRaised": "uint256",
                    "start": "uint256",
                    "deadline": "uint256",
                    "bonusPrice": "uint256",
                    "bonusPriceDeltaPerHour": "uint256",
                    "bonusPeriodDurationInHours": "uint256",
                    "price": "uint256",
                    "minSum": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "durationInDays": "uint8",
                    "fundingGoal": "uint256",
                    "fundingGoalHardCap": "uint256",
                    "amountRaised": "uint256",
                    "start": "uint256",
                    "deadline": "uint256",
                    "bonusPrice": "uint256",
                    "bonusPriceDeltaPerHour": "uint256",
                    "bonusPeriodDurationInHours": "uint256",
                    "price": "uint256",
                    "minSum": "uint256"
                }
            },
            "checkGoalReached()": {
                "argument": {},
                "contract": {
                    "durationInDays": "uint8",
                    "fundingGoal": "uint256",
                    "fundingGoalHardCap": "uint256",
                    "amountRaised": "uint256",
                    "start": "uint256",
                    "deadline": "uint256",
                    "bonusPrice": "uint256",
                    "bonusPriceDeltaPerHour": "uint256",
                    "bonusPeriodDurationInHours": "uint256",
                    "price": "uint256",
                    "minSum": "uint256"
                }
            },
            "safeWithdrawal()": {
                "argument": {},
                "contract": {
                    "durationInDays": "uint8",
                    "fundingGoal": "uint256",
                    "fundingGoalHardCap": "uint256",
                    "amountRaised": "uint256",
                    "start": "uint256",
                    "deadline": "uint256",
                    "bonusPrice": "uint256",
                    "bonusPriceDeltaPerHour": "uint256",
                    "bonusPeriodDurationInHours": "uint256",
                    "price": "uint256",
                    "minSum": "uint256"
                }
            },
            "tokensWithdrawal(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "durationInDays": "uint8",
                    "fundingGoal": "uint256",
                    "fundingGoalHardCap": "uint256",
                    "amountRaised": "uint256",
                    "start": "uint256",
                    "deadline": "uint256",
                    "bonusPrice": "uint256",
                    "bonusPriceDeltaPerHour": "uint256",
                    "bonusPeriodDurationInHours": "uint256",
                    "price": "uint256",
                    "minSum": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "durationInDays": "uint8",
                    "fundingGoal": "uint256",
                    "fundingGoalHardCap": "uint256",
                    "amountRaised": "uint256",
                    "start": "uint256",
                    "deadline": "uint256",
                    "bonusPrice": "uint256",
                    "bonusPriceDeltaPerHour": "uint256",
                    "bonusPeriodDurationInHours": "uint256",
                    "price": "uint256",
                    "minSum": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "safeWithdrawal()": [
                2111,
                559
            ],
            "checkGoalReached()": [
                915,
                75
            ],
            "getPrice()": [
                1649,
                339
            ],
            "tokensWithdrawal(address,uint256)": [
                938,
                97
            ],
            "getBonus(uint256)": [
                1145,
                163
            ],
            "transferOwnership(address)": [
                2044,
                537
            ]
        },
        "block_CALL_mapping": {
            "jump764_0": [
                "tokenReward.transfer(msg.sender, tokensToTransferWithBonuses)",
                "tokenReward.transfer(msg.sender, tokensToTransferWithBonuses)"
            ],
            "jump4524": [
                "beneficiary.send(amountRaised)",
                "beneficiary.send(amountRaised)"
            ],
            "jump3336": [
                "tokenReward.transfer(receiver, amount)",
                "tokenReward.transfer(receiver, amount)"
            ],
            "block4524": [
                "beneficiary.send(amountRaised)"
            ],
            "block764_0": [
                "tokenReward.transfer(msg.sender, tokensToTransferWithBonuses)"
            ],
            "block764": [
                "tokenReward.transfer(msg.sender, tokensToTransferWithBonuses)"
            ],
            "jump764": [
                "tokenReward.transfer(msg.sender, tokensToTransferWithBonuses)",
                "tokenReward.transfer(msg.sender, tokensToTransferWithBonuses)"
            ],
            "block3336": [
                "tokenReward.transfer(receiver, amount)"
            ],
            "block4160": [
                "msg.sender.send(amount)"
            ],
            "jump4160": [
                "msg.sender.send(amount)",
                "msg.sender.send(amount)"
            ]
        }
    }
}