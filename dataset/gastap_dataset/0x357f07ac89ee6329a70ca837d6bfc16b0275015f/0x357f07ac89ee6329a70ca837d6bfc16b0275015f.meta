{
    "usingOraclize": {
        "function_list": [
            "oraclize_setNetwork(uint8)",
            "oraclize_setNetwork()",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)",
            "matchBytes32Prefix(bytes32,bytes,uint256)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setNetwork()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "matchBytes32Prefix(bytes32,bytes,uint256)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes",
                    "n_random_bytes": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            }
        },
        "function_block_mapping": {
            "__callback(bytes32,string,bytes)": [
                200,
                97
            ],
            "__callback(bytes32,string)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "SweepsToken": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "SweepsToken()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "_totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "_totalSupply": "uint256"
                }
            },
            "SweepsToken()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "_totalSupply": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "symbol": "string",
                    "name": "string",
                    "_totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "transfer(address,uint256)": [
                576,
                163
            ],
            "balanceOf(address)": [
                258,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "EthereumSweepstakes": {
        "function_list": [
            "oraclize_setNetwork(uint8)",
            "oraclize_setNetwork()",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)",
            "matchBytes32Prefix(bytes32,bytes,uint256)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "EthereumSweepstakes()",
            "management()",
            "min(uint256,uint256)",
            "calculateJackpots()",
            "buyTokens()",
            "updateRandomNumber(uint256,uint256)",
            "__callback(bytes32,string,bytes)",
            "closeOutSweeps()",
            "drawWinners(uint256,uint256,uint256)",
            "drawSecondaryWinners()",
            "drawTertiaryAWinners(uint256)",
            "drawTertiaryBWinners(uint256)",
            "drawTertiaryCWinners(uint256)",
            "drawTertiaryDWinners(uint256)",
            "Fund_Contract()",
            "fallback()",
            "cleanUp()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_setNetwork()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "matchBytes32Prefix(bytes32,bytes,uint256)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes",
                    "n_random_bytes": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "EthereumSweepstakes()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "management()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "calculateJackpots()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "buyTokens()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "updateRandomNumber(uint256,uint256)": {
                "argument": {
                    "numBytes": "uint256",
                    "callBackGas": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "closeOutSweeps()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "drawWinners(uint256,uint256,uint256)": {
                "argument": {
                    "numWinners": "uint256",
                    "jackpot": "uint256",
                    "shift": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "drawSecondaryWinners()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "drawTertiaryAWinners(uint256)": {
                "argument": {
                    "numToProcess": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "drawTertiaryBWinners(uint256)": {
                "argument": {
                    "numToProcess": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "drawTertiaryCWinners(uint256)": {
                "argument": {
                    "numToProcess": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "drawTertiaryDWinners(uint256)": {
                "argument": {
                    "numToProcess": "uint256"
                },
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "Fund_Contract()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "cleanUp()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "max_tickets": "uint256",
                    "sweepsCreationTime": "uint256",
                    "withdrawamount": "uint256",
                    "drawPool": "address[]",
                    "numTokensSold": "uint256",
                    "numTertiaryAWinnersPaidOut": "uint256",
                    "numTertiaryBWinnersPaidOut": "uint256",
                    "numTertiaryCWinnersPaidOut": "uint256",
                    "numTertiaryDWinnersPaidOut": "uint256",
                    "randomNumber": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "drawTertiaryAWinners(uint256)": [
                452,
                119
            ],
            "drawTertiaryBWinners(uint256)": [
                924,
                251
            ],
            "drawTertiaryDWinners(uint256)": [
                849,
                207
            ],
            "cleanUp()": [
                1371,
                427
            ],
            "drawSecondaryWinners()": [
                1413,
                471
            ],
            "Fund_Contract()": [
                1361,
                405
            ],
            "buyTokens()": [
                1327,
                383
            ],
            "drawTertiaryCWinners(uint256)": [
                1381,
                449
            ],
            "drawWinners(uint256,uint256,uint256)": [
                1166,
                339
            ],
            "__callback(bytes32,string,bytes)": [
                660,
                185
            ],
            "closeOutSweeps()": [
                418,
                97
            ],
            "management()": [
                1069,
                295
            ],
            "__callback(bytes32,string)": [
                484,
                141
            ]
        },
        "block_CALL_mapping": {
            "block8764_0": [
                "OAR.getAddress()"
            ],
            "block14558": [
                "OAR.getAddress()"
            ],
            "jump12387_0": [
                "sha256(sessionPubkey)",
                "sha256(sessionPubkey)"
            ],
            "jump2608": [
                "sweepsToken.transfer(msg.sender, tokensBought)",
                "sweepsToken.transfer(msg.sender, tokensBought)"
            ],
            "jump18936": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block15701": [
                "OAR.getAddress()"
            ],
            "jump8764": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block1904_1": [
                "sweepsToken.balanceOf(this)"
            ],
            "block1904_0": [
                "sweepsToken.balanceOf(this)"
            ],
            "block8328": [
                "oraclize.setProofType(proofP)"
            ],
            "jump12827_0": [
                "sha256(tosign1)",
                "sha256(tosign1)"
            ],
            "block11912_0": [
                "sha256(sig1)"
            ],
            "jump17851": [
                "sha256(tosign2)",
                "sha256(tosign2)"
            ],
            "block15423": [
                "OAR.getAddress()"
            ],
            "jump14558": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block18511": [
                "sha256(tosign3)"
            ],
            "block7991": [
                "OAR.getAddress()"
            ],
            "block11912": [
                "sha256(sig1)"
            ],
            "block9042": [
                "OAR.getAddress()"
            ],
            "jump11912_0": [
                "sha256(sig1)",
                "sha256(sig1)"
            ],
            "block5119": [
                "owner.transfer(withdrawamount)"
            ],
            "block4103": [
                "primaryWinner.transfer(jackpots.primaryJackpot)"
            ],
            "jump19592": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block8764": [
                "OAR.getAddress()"
            ],
            "jump14836": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block6104_1": [
                "winnerAddresses[j].transfer(jackpot)"
            ],
            "jump9300": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "block12827_0": [
                "sha256(tosign1)"
            ],
            "block7713": [
                "OAR.getAddress()"
            ],
            "jump6104": [
                "winnerAddresses[j].transfer(jackpot)",
                "winnerAddresses[j].transfer(jackpot)"
            ],
            "jump17851_0": [
                "sha256(tosign2)",
                "sha256(tosign2)"
            ],
            "block19592": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block17851": [
                "sha256(tosign2)"
            ],
            "block17851_0": [
                "sha256(tosign2)"
            ],
            "block4103_0": [
                "primaryWinner.transfer(jackpots.primaryJackpot)"
            ],
            "jump15094": [
                "oraclize.randomDS_getSessionPubKeyHash()",
                "oraclize.randomDS_getSessionPubKeyHash()"
            ],
            "jump1904": [
                "sweepsToken.balanceOf(this)",
                "sweepsToken.balanceOf(this)"
            ],
            "jump11375_0": [
                "sha256(context_name, queryId)",
                "sha256(context_name, queryId)"
            ],
            "jump12827": [
                "sha256(tosign1)",
                "sha256(tosign1)"
            ],
            "jump10530": [
                "sha256(args[0])",
                "sha256(args[0])"
            ],
            "block19214": [
                "OAR.getAddress()"
            ],
            "jump2608_1": [
                "sweepsToken.transfer(msg.sender, tokensBought)",
                "sweepsToken.transfer(msg.sender, tokensBought)"
            ],
            "jump2608_0": [
                "sweepsToken.transfer(msg.sender, tokensBought)",
                "sweepsToken.transfer(msg.sender, tokensBought)"
            ],
            "jump18511_0": [
                "sha256(tosign3)",
                "sha256(tosign3)"
            ],
            "block9300_0": [
                "oraclize.cbAddress()"
            ],
            "jump20067": [
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)",
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)"
            ],
            "jump15701": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump7713": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block18936": [
                "OAR.getAddress()"
            ],
            "jump4103_0": [
                "primaryWinner.transfer(jackpots.primaryJackpot)",
                "primaryWinner.transfer(jackpots.primaryJackpot)"
            ],
            "block6104_4": [
                "winnerAddresses[j].transfer(jackpot)"
            ],
            "block6104_2": [
                "winnerAddresses[j].transfer(jackpot)"
            ],
            "block6104_3": [
                "winnerAddresses[j].transfer(jackpot)"
            ],
            "block6104_0": [
                "winnerAddresses[j].transfer(jackpot)"
            ],
            "block20140_10": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block11375_0": [
                "sha256(context_name, queryId)"
            ],
            "block12827": [
                "sha256(tosign1)"
            ],
            "jump8328": [
                "oraclize.setProofType(proofP)",
                "oraclize.setProofType(proofP)"
            ],
            "jump19214": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block12387_0": [
                "sha256(sessionPubkey)"
            ],
            "block9300": [
                "oraclize.cbAddress()"
            ],
            "block20140_3": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block20140_2": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block20140_1": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block20140_0": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block20140_7": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block20140_6": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block20140_5": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block20140_4": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block12387": [
                "sha256(sessionPubkey)"
            ],
            "block11375": [
                "sha256(context_name, queryId)"
            ],
            "block20140_8": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "block2608_1": [
                "sweepsToken.transfer(msg.sender, tokensBought)"
            ],
            "block2608_0": [
                "sweepsToken.transfer(msg.sender, tokensBought)"
            ],
            "block18511_0": [
                "sha256(tosign3)"
            ],
            "block14836": [
                "OAR.getAddress()"
            ],
            "block2608": [
                "sweepsToken.transfer(msg.sender, tokensBought)"
            ],
            "block20140_9": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "jump18511": [
                "sha256(tosign3)",
                "sha256(tosign3)"
            ],
            "block6104": [
                "winnerAddresses[j].transfer(jackpot)"
            ],
            "jump9300_0": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "jump12387": [
                "sha256(sessionPubkey)",
                "sha256(sessionPubkey)"
            ],
            "block20067": [
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)"
            ],
            "block9042_0": [
                "OAR.getAddress()"
            ],
            "jump11375": [
                "sha256(context_name, queryId)",
                "sha256(context_name, queryId)"
            ],
            "block15094": [
                "oraclize.randomDS_getSessionPubKeyHash()"
            ],
            "jump8764_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump6104_0": [
                "winnerAddresses[j].transfer(jackpot)",
                "winnerAddresses[j].transfer(jackpot)"
            ],
            "block20140": [
                "call(3000, 1, 0, size, 128, size, 32)"
            ],
            "jump9042_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump6104_1": [
                "winnerAddresses[j].transfer(jackpot)",
                "winnerAddresses[j].transfer(jackpot)"
            ],
            "jump4103": [
                "primaryWinner.transfer(jackpots.primaryJackpot)",
                "primaryWinner.transfer(jackpots.primaryJackpot)"
            ],
            "jump5119": [
                "owner.transfer(withdrawamount)",
                "owner.transfer(withdrawamount)"
            ],
            "jump9042": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump6104_3": [
                "winnerAddresses[j].transfer(jackpot)",
                "winnerAddresses[j].transfer(jackpot)"
            ],
            "jump15423": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump7991": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block1904": [
                "sweepsToken.balanceOf(this)"
            ],
            "block10530": [
                "sha256(args[0])"
            ],
            "jump1904_1": [
                "sweepsToken.balanceOf(this)",
                "sweepsToken.balanceOf(this)"
            ],
            "jump1904_0": [
                "sweepsToken.balanceOf(this)",
                "sweepsToken.balanceOf(this)"
            ],
            "jump6104_2": [
                "winnerAddresses[j].transfer(jackpot)",
                "winnerAddresses[j].transfer(jackpot)"
            ],
            "jump11912": [
                "sha256(sig1)",
                "sha256(sig1)"
            ],
            "jump6104_4": [
                "winnerAddresses[j].transfer(jackpot)",
                "winnerAddresses[j].transfer(jackpot)"
            ]
        }
    }
}