{
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20Basic": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "balanceOf(address)": [
                124,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "BasicToken": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transfer(address,uint256)": [
                222,
                119
            ],
            "balanceOf(address)": [
                135,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERP": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "transfer(address,uint256)",
            "balanceOf(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "ERP(address)",
            "mint(address,address,uint256)",
            "getTokenBalance(address)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "REMAINING_SUPPLY": "uint256",
                    "buyMessage": "string"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "REMAINING_SUPPLY": "uint256",
                    "buyMessage": "string"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "REMAINING_SUPPLY": "uint256",
                    "buyMessage": "string"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "REMAINING_SUPPLY": "uint256",
                    "buyMessage": "string"
                }
            },
            "ERP(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "REMAINING_SUPPLY": "uint256",
                    "buyMessage": "string"
                }
            },
            "mint(address,address,uint256)": {
                "argument": {
                    "tokenAmount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "REMAINING_SUPPLY": "uint256",
                    "buyMessage": "string"
                }
            },
            "getTokenBalance(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "REMAINING_SUPPLY": "uint256",
                    "buyMessage": "string"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "REMAINING_SUPPLY": "uint256",
                    "buyMessage": "string"
                }
            }
        },
        "function_block_mapping": {
            "mint(address,address,uint256)": [
                1057,
                295
            ],
            "getTokenBalance(address)": [
                508,
                163
            ],
            "balanceOf(address)": [
                595,
                185
            ],
            "transfer(address,uint256)": [
                956,
                273
            ],
            "transferOwnership(address)": [
                1166,
                317
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERPTokenTransaction": {
        "function_list": [
            "ERPTokenTransaction(address)",
            "createTokenContract(address)",
            "fallback()",
            "buyTokens(address)",
            "forwardFunds()",
            "AddTransactionAgainstExistingEntity(address,uint256,uint256,string,string)",
            "MakeTokenCreditAndDebitEntry(address)",
            "updateAccountChartAgainstExistingEntity(address,uint256,uint256,uint256)",
            "addEntity(address)",
            "getAllEntityIds()",
            "getAllTransactionIdsByEntityId(address)",
            "getAllTransactionIds()",
            "getTransactionByTransactionId(uint256)",
            "getTransactionByTransactionAndEntityId(address,uint256)",
            "getAccountChartDetailsByEntityId(address)",
            "showMyTokenBalance()",
            "freezeTokensOfOneUser(address)",
            "UnfreezeTokensOfOneUser(address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "ERPTokenTransaction(address)": {
                "argument": {},
                "contract": {
                    "entities": "address[]",
                    "allTransactionIdsList": "uint256[]",
                    "allTransactionIdsAgainstAnEntityList": "uint256[]",
                    "entityTransactionsIds": "mapping(address => uint256[])",
                    "entityTransactions": "mapping(address => ERPTokenTransaction.Transaction[])",
                    "transactionIdSequence": "uint256",
                    "ratePerWei": "uint256",
                    "perTransactionRate": "uint256"
                }
            },
            "createTokenContract(address)": {
                "argument": {},
                "contract": {
                    "entities": "address[]",
                    "allTransactionIdsList": "uint256[]",
                    "allTransactionIdsAgainstAnEntityList": "uint256[]",
                    "entityTransactionsIds": "mapping(address => uint256[])",
                    "entityTransactions": "mapping(address => ERPTokenTransaction.Transaction[])",
                    "transactionIdSequence": "uint256",
                    "ratePerWei": "uint256",
                    "perTransactionRate": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "entities": "address[]",
                    "allTransactionIdsList": "uint256[]",
                    "allTransactionIdsAgainstAnEntityList": "uint256[]",
                    "entityTransactionsIds": "mapping(address => uint256[])",
                    "entityTransactions": "mapping(address => ERPTokenTransaction.Transaction[])",
                    "transactionIdSequence": "uint256",
                    "ratePerWei": "uint256",
                    "perTransactionRate": "uint256"
                }
            },
            "buyTokens(address)": {
                "argument": {},
                "contract": {
                    "entities": "address[]",
                    "allTransactionIdsList": "uint256[]",
                    "allTransactionIdsAgainstAnEntityList": "uint256[]",
                    "entityTransactionsIds": "mapping(address => uint256[])",
                    "entityTransactions": "mapping(address => ERPTokenTransaction.Transaction[])",
                    "transactionIdSequence": "uint256",
                    "ratePerWei": "uint256",
                    "perTransactionRate": "uint256"
                }
            },
            "forwardFunds()": {
                "argument": {},
                "contract": {
                    "entities": "address[]",
                    "allTransactionIdsList": "uint256[]",
                    "allTransactionIdsAgainstAnEntityList": "uint256[]",
                    "entityTransactionsIds": "mapping(address => uint256[])",
                    "entityTransactions": "mapping(address => ERPTokenTransaction.Transaction[])",
                    "transactionIdSequence": "uint256",
                    "ratePerWei": "uint256",
                    "perTransactionRate": "uint256"
                }
            },
            "AddTransactionAgainstExistingEntity(address,uint256,uint256,string,string)": {
                "argument": {
                    "transType": "uint256",
                    "amt": "uint256",
                    "curr": "string",
                    "accPr": "string"
                },
                "contract": {
                    "entities": "address[]",
                    "allTransactionIdsList": "uint256[]",
                    "allTransactionIdsAgainstAnEntityList": "uint256[]",
                    "entityTransactionsIds": "mapping(address => uint256[])",
                    "entityTransactions": "mapping(address => ERPTokenTransaction.Transaction[])",
                    "transactionIdSequence": "uint256",
                    "ratePerWei": "uint256",
                    "perTransactionRate": "uint256"
                }
            },
            "MakeTokenCreditAndDebitEntry(address)": {
                "argument": {},
                "contract": {
                    "entities": "address[]",
                    "allTransactionIdsList": "uint256[]",
                    "allTransactionIdsAgainstAnEntityList": "uint256[]",
                    "entityTransactionsIds": "mapping(address => uint256[])",
                    "entityTransactions": "mapping(address => ERPTokenTransaction.Transaction[])",
                    "transactionIdSequence": "uint256",
                    "ratePerWei": "uint256",
                    "perTransactionRate": "uint256"
                }
            },
            "updateAccountChartAgainstExistingEntity(address,uint256,uint256,uint256)": {
                "argument": {
                    "accPayable": "uint256",
                    "accReceivable": "uint256",
                    "sale": "uint256"
                },
                "contract": {
                    "entities": "address[]",
                    "allTransactionIdsList": "uint256[]",
                    "allTransactionIdsAgainstAnEntityList": "uint256[]",
                    "entityTransactionsIds": "mapping(address => uint256[])",
                    "entityTransactions": "mapping(address => ERPTokenTransaction.Transaction[])",
                    "transactionIdSequence": "uint256",
                    "ratePerWei": "uint256",
                    "perTransactionRate": "uint256"
                }
            },
            "addEntity(address)": {
                "argument": {},
                "contract": {
                    "entities": "address[]",
                    "allTransactionIdsList": "uint256[]",
                    "allTransactionIdsAgainstAnEntityList": "uint256[]",
                    "entityTransactionsIds": "mapping(address => uint256[])",
                    "entityTransactions": "mapping(address => ERPTokenTransaction.Transaction[])",
                    "transactionIdSequence": "uint256",
                    "ratePerWei": "uint256",
                    "perTransactionRate": "uint256"
                }
            },
            "getAllEntityIds()": {
                "argument": {},
                "contract": {
                    "entities": "address[]",
                    "allTransactionIdsList": "uint256[]",
                    "allTransactionIdsAgainstAnEntityList": "uint256[]",
                    "entityTransactionsIds": "mapping(address => uint256[])",
                    "entityTransactions": "mapping(address => ERPTokenTransaction.Transaction[])",
                    "transactionIdSequence": "uint256",
                    "ratePerWei": "uint256",
                    "perTransactionRate": "uint256"
                }
            },
            "getAllTransactionIdsByEntityId(address)": {
                "argument": {},
                "contract": {
                    "entities": "address[]",
                    "allTransactionIdsList": "uint256[]",
                    "allTransactionIdsAgainstAnEntityList": "uint256[]",
                    "entityTransactionsIds": "mapping(address => uint256[])",
                    "entityTransactions": "mapping(address => ERPTokenTransaction.Transaction[])",
                    "transactionIdSequence": "uint256",
                    "ratePerWei": "uint256",
                    "perTransactionRate": "uint256"
                }
            },
            "getAllTransactionIds()": {
                "argument": {},
                "contract": {
                    "entities": "address[]",
                    "allTransactionIdsList": "uint256[]",
                    "allTransactionIdsAgainstAnEntityList": "uint256[]",
                    "entityTransactionsIds": "mapping(address => uint256[])",
                    "entityTransactions": "mapping(address => ERPTokenTransaction.Transaction[])",
                    "transactionIdSequence": "uint256",
                    "ratePerWei": "uint256",
                    "perTransactionRate": "uint256"
                }
            },
            "getTransactionByTransactionId(uint256)": {
                "argument": {
                    "transId": "uint256"
                },
                "contract": {
                    "entities": "address[]",
                    "allTransactionIdsList": "uint256[]",
                    "allTransactionIdsAgainstAnEntityList": "uint256[]",
                    "entityTransactionsIds": "mapping(address => uint256[])",
                    "entityTransactions": "mapping(address => ERPTokenTransaction.Transaction[])",
                    "transactionIdSequence": "uint256",
                    "ratePerWei": "uint256",
                    "perTransactionRate": "uint256"
                }
            },
            "getTransactionByTransactionAndEntityId(address,uint256)": {
                "argument": {
                    "transId": "uint256"
                },
                "contract": {
                    "entities": "address[]",
                    "allTransactionIdsList": "uint256[]",
                    "allTransactionIdsAgainstAnEntityList": "uint256[]",
                    "entityTransactionsIds": "mapping(address => uint256[])",
                    "entityTransactions": "mapping(address => ERPTokenTransaction.Transaction[])",
                    "transactionIdSequence": "uint256",
                    "ratePerWei": "uint256",
                    "perTransactionRate": "uint256"
                }
            },
            "getAccountChartDetailsByEntityId(address)": {
                "argument": {},
                "contract": {
                    "entities": "address[]",
                    "allTransactionIdsList": "uint256[]",
                    "allTransactionIdsAgainstAnEntityList": "uint256[]",
                    "entityTransactionsIds": "mapping(address => uint256[])",
                    "entityTransactions": "mapping(address => ERPTokenTransaction.Transaction[])",
                    "transactionIdSequence": "uint256",
                    "ratePerWei": "uint256",
                    "perTransactionRate": "uint256"
                }
            },
            "showMyTokenBalance()": {
                "argument": {},
                "contract": {
                    "entities": "address[]",
                    "allTransactionIdsList": "uint256[]",
                    "allTransactionIdsAgainstAnEntityList": "uint256[]",
                    "entityTransactionsIds": "mapping(address => uint256[])",
                    "entityTransactions": "mapping(address => ERPTokenTransaction.Transaction[])",
                    "transactionIdSequence": "uint256",
                    "ratePerWei": "uint256",
                    "perTransactionRate": "uint256"
                }
            },
            "freezeTokensOfOneUser(address)": {
                "argument": {},
                "contract": {
                    "entities": "address[]",
                    "allTransactionIdsList": "uint256[]",
                    "allTransactionIdsAgainstAnEntityList": "uint256[]",
                    "entityTransactionsIds": "mapping(address => uint256[])",
                    "entityTransactions": "mapping(address => ERPTokenTransaction.Transaction[])",
                    "transactionIdSequence": "uint256",
                    "ratePerWei": "uint256",
                    "perTransactionRate": "uint256"
                }
            },
            "UnfreezeTokensOfOneUser(address)": {
                "argument": {},
                "contract": {
                    "entities": "address[]",
                    "allTransactionIdsList": "uint256[]",
                    "allTransactionIdsAgainstAnEntityList": "uint256[]",
                    "entityTransactionsIds": "mapping(address => uint256[])",
                    "entityTransactions": "mapping(address => ERPTokenTransaction.Transaction[])",
                    "transactionIdSequence": "uint256",
                    "ratePerWei": "uint256",
                    "perTransactionRate": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "freezeTokensOfOneUser(address)": [
                241,
                75
            ],
            "getAllTransactionIdsByEntityId(address)": [
                375,
                119
            ],
            "getTransactionByTransactionId(uint256)": [
                1047,
                229
            ],
            "getTransactionByTransactionAndEntityId(address,uint256)": [
                970,
                207
            ],
            "updateAccountChartAgainstExistingEntity(address,uint256,uint256,uint256)": [
                1409,
                383
            ],
            "showMyTokenBalance()": [
                1135,
                273
            ],
            "AddTransactionAgainstExistingEntity(address,uint256,uint256,string,string)": [
                635,
                163
            ],
            "getAccountChartDetailsByEntityId(address)": [
                1342,
                361
            ],
            "addEntity(address)": [
                1275,
                339
            ],
            "getAllTransactionIds()": [
                527,
                141
            ],
            "buyTokens(address)": [
                1178,
                295
            ],
            "getAllEntityIds()": [
                862,
                185
            ],
            "UnfreezeTokensOfOneUser(address)": [
                308,
                97
            ]
        },
        "block_CALL_mapping": {
            "block3101": [
                "token.mint(msg.sender, wallet, perTransactionRate)"
            ],
            "jump14119": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ],
            "jump5514": [
                "token.getTokenBalance(msg.sender)",
                "token.getTokenBalance(msg.sender)"
            ],
            "block6506": [
                "token.getTokenBalance(msg.sender)"
            ],
            "block3656": [
                "token.getTokenBalance(msg.sender)"
            ],
            "jump2649": [
                "token.getTokenBalance(msg.sender)",
                "token.getTokenBalance(msg.sender)"
            ],
            "jump3656": [
                "token.getTokenBalance(msg.sender)",
                "token.getTokenBalance(msg.sender)"
            ],
            "jump12973": [
                "token.getTokenBalance(msg.sender)",
                "token.getTokenBalance(msg.sender)"
            ],
            "block14119_0": [
                "wallet.transfer(msg.value)"
            ],
            "block14119_1": [
                "wallet.transfer(msg.value)"
            ],
            "block11874": [
                "token.getTokenBalance(msg.sender)"
            ],
            "jump1943_1": [
                "token.mint(wallet, beneficiary, tokens)",
                "token.mint(wallet, beneficiary, tokens)"
            ],
            "block6958": [
                "token.mint(msg.sender, wallet, perTransactionRate)"
            ],
            "jump5871": [
                "token.mint(msg.sender, wallet, perTransactionRate)",
                "token.mint(msg.sender, wallet, perTransactionRate)"
            ],
            "jump1943_0": [
                "token.mint(wallet, beneficiary, tokens)",
                "token.mint(wallet, beneficiary, tokens)"
            ],
            "jump1943": [
                "token.mint(wallet, beneficiary, tokens)",
                "token.mint(wallet, beneficiary, tokens)"
            ],
            "block12326": [
                "token.mint(msg.sender, wallet, perTransactionRate)"
            ],
            "jump6506": [
                "token.getTokenBalance(msg.sender)",
                "token.getTokenBalance(msg.sender)"
            ],
            "jump12326": [
                "token.mint(msg.sender, wallet, perTransactionRate)",
                "token.mint(msg.sender, wallet, perTransactionRate)"
            ],
            "jump6958": [
                "token.mint(msg.sender, wallet, perTransactionRate)",
                "token.mint(msg.sender, wallet, perTransactionRate)"
            ],
            "jump8386": [
                "token.getTokenBalance(msg.sender)",
                "token.getTokenBalance(msg.sender)"
            ],
            "block5514": [
                "token.getTokenBalance(msg.sender)"
            ],
            "jump11874": [
                "token.getTokenBalance(msg.sender)",
                "token.getTokenBalance(msg.sender)"
            ],
            "block10618": [
                "token.getTokenBalance(msg.sender)"
            ],
            "block8838": [
                "token.mint(msg.sender, wallet, perTransactionRate)"
            ],
            "block11151": [
                "token.mint(msg.sender, wallet, perTransactionRate)"
            ],
            "block1943_0": [
                "token.mint(wallet, beneficiary, tokens)"
            ],
            "block1943_1": [
                "token.mint(wallet, beneficiary, tokens)"
            ],
            "jump10618": [
                "token.getTokenBalance(msg.sender)",
                "token.getTokenBalance(msg.sender)"
            ],
            "jump4108": [
                "token.mint(msg.sender,wallet,perTransactionRate)",
                "token.mint(msg.sender,wallet,perTransactionRate)"
            ],
            "jump3101": [
                "token.mint(msg.sender, wallet, perTransactionRate)",
                "token.mint(msg.sender, wallet, perTransactionRate)"
            ],
            "block12973": [
                "token.getTokenBalance(msg.sender)"
            ],
            "block13506": [
                "token.mint(msg.sender, wallet, perTransactionRate)"
            ],
            "block1943": [
                "token.mint(wallet, beneficiary, tokens)"
            ],
            "block2649": [
                "token.getTokenBalance(msg.sender)"
            ],
            "block10353": [
                "token.getTokenBalance(msg.sender)"
            ],
            "block4108": [
                "token.mint(msg.sender,wallet,perTransactionRate)"
            ],
            "jump14119_0": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ],
            "jump14119_1": [
                "wallet.transfer(msg.value)",
                "wallet.transfer(msg.value)"
            ],
            "block14119": [
                "wallet.transfer(msg.value)"
            ],
            "block5871": [
                "token.mint(msg.sender, wallet, perTransactionRate)"
            ],
            "block8386": [
                "token.getTokenBalance(msg.sender)"
            ],
            "jump11151": [
                "token.mint(msg.sender, wallet, perTransactionRate)",
                "token.mint(msg.sender, wallet, perTransactionRate)"
            ],
            "jump8838": [
                "token.mint(msg.sender, wallet, perTransactionRate)",
                "token.mint(msg.sender, wallet, perTransactionRate)"
            ],
            "jump13506": [
                "token.mint(msg.sender, wallet, perTransactionRate)",
                "token.mint(msg.sender, wallet, perTransactionRate)"
            ],
            "jump10353": [
                "token.getTokenBalance(msg.sender)",
                "token.getTokenBalance(msg.sender)"
            ]
        }
    }
}