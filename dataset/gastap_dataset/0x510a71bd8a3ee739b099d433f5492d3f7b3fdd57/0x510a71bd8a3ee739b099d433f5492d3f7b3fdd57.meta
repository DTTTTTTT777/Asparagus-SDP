{
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "totalSupply()": [
                226,
                97
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "OwnedToken": {
        "function_list": [
            "OwnedToken()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "OwnedToken()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "NamedOwnedToken": {
        "function_list": [
            "OwnedToken()",
            "transferOwnership(address)",
            "NamedOwnedToken(string,string)",
            "changeName(string,string)"
        ],
        "initial_state": {
            "OwnedToken()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string"
                }
            },
            "NamedOwnedToken(string,string)": {
                "argument": {
                    "tokenName": "string",
                    "tokenSymbol": "string"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string"
                }
            },
            "changeName(string,string)": {
                "argument": {
                    "newName": "string",
                    "newSymbol": "string"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string"
                }
            }
        },
        "function_block_mapping": {
            "changeName(string,string)": [
                258,
                97
            ],
            "transferOwnership(address)": [
                664,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "TSBToken": {
        "function_list": [
            "NamedOwnedToken(string,string)",
            "changeName(string,string)",
            "OwnedToken()",
            "transferOwnership(address)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "TSBToken(string,string)",
            "transferDiv(uint256,uint256,uint256,uint256,uint256,uint256)",
            "_transfer(address,address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)",
            "totalSupply()",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "burnTo(uint256,address)",
            "deleteTokens(address,uint256)",
            "fallback()",
            "WithdrawLeftToOwner(uint256)",
            "mintToken(address,uint256)",
            "finishMinting()",
            "WithdrawDividendsAndCoupons()",
            "WithdrawDividendsAndCouponsTo(address)",
            "withdrawTo(address,uint256)",
            "accrueDividendandCoupons(uint256,uint256)",
            "setTokenPrice(uint256)",
            "InformRebuy(uint256)",
            "InformRebuyTo(uint256,address)",
            "_informRebuyTo(uint256,address)",
            "StartRebuy()",
            "doRebuy()",
            "doRebuyTo(address)",
            "_doRebuyTo(address,uint256)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "NamedOwnedToken(string,string)": {
                "argument": {
                    "tokenName": "string",
                    "tokenSymbol": "string"
                },
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "changeName(string,string)": {
                "argument": {
                    "newName": "string",
                    "newSymbol": "string"
                },
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "OwnedToken()": {
                "argument": {},
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "TSBToken(string,string)": {
                "argument": {
                    "tokenName": "string",
                    "tokenSymbol": "string"
                },
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "transferDiv(uint256,uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "startTokens": "uint256",
                    "fromTokens": "uint256",
                    "toTokens": "uint256",
                    "sumPaydFrom": "uint256",
                    "sumPaydTo": "uint256",
                    "acrued": "uint256"
                },
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "_transfer(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "burnTo(uint256,address)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "deleteTokens(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "WithdrawLeftToOwner(uint256)": {
                "argument": {
                    "sum": "uint256"
                },
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "mintToken(address,uint256)": {
                "argument": {
                    "mintedAmount": "uint256"
                },
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "finishMinting()": {
                "argument": {},
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "WithdrawDividendsAndCoupons()": {
                "argument": {},
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "WithdrawDividendsAndCouponsTo(address)": {
                "argument": {},
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "withdrawTo(address,uint256)": {
                "argument": {
                    "comiss": "uint256"
                },
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "accrueDividendandCoupons(uint256,uint256)": {
                "argument": {
                    "sumDivFinney": "uint256",
                    "sumFinneyCoup": "uint256"
                },
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "setTokenPrice(uint256)": {
                "argument": {
                    "priceFinney": "uint256"
                },
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "InformRebuy(uint256)": {
                "argument": {
                    "sum": "uint256"
                },
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "InformRebuyTo(uint256,address)": {
                "argument": {
                    "sum": "uint256"
                },
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "_informRebuyTo(uint256,address)": {
                "argument": {
                    "sum": "uint256"
                },
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "StartRebuy()": {
                "argument": {},
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "doRebuy()": {
                "argument": {},
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "doRebuyTo(address)": {
                "argument": {},
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            },
            "_doRebuyTo(address,uint256)": {
                "argument": {
                    "comiss": "uint256"
                },
                "contract": {
                    "_totalSupply": "uint256",
                    "decimals": "uint8",
                    "accrueDividendsPerXTokenETH": "uint256",
                    "tokenPriceETH": "uint256",
                    "accrueCouponsPerXTokenETH": "uint256",
                    "totalCouponsUSD": "uint256",
                    "MaxCouponsPaymentUSD": "uint256",
                    "endSaleTime": "uint256",
                    "startRebuyTime": "uint256",
                    "reservedSum": "uint256",
                    "tokenDecimals": "uint256",
                    "tokenDecimalsLeft": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "deleteTokens(address,uint256)": [
                1297,
                295
            ],
            "accrueDividendandCoupons(uint256,uint256)": [
                2051,
                559
            ],
            "balanceOf(address)": [
                1964,
                537
            ],
            "totalSupply()": [
                832,
                141
            ],
            "WithdrawDividendsAndCouponsTo(address)": [
                3361,
                977
            ],
            "changeName(string,string)": [
                2273,
                647
            ],
            "transferFrom(address,address,uint256)": [
                918,
                185
            ],
            "doRebuy()": [
                1547,
                383
            ],
            "WithdrawLeftToOwner(uint256)": [
                2580,
                713
            ],
            "approve(address,uint256)": [
                731,
                119
            ],
            "InformRebuy(uint256)": [
                2448,
                669
            ],
            "StartRebuy()": [
                1941,
                515
            ],
            "setTokenPrice(uint256)": [
                1896,
                493
            ],
            "finishMinting()": [
                2183,
                603
            ],
            "doRebuyTo(address)": [
                2859,
                801
            ],
            "mintToken(address,uint256)": [
                2106,
                581
            ],
            "InformRebuyTo(uint256,address)": [
                1570,
                405
            ],
            "WithdrawDividendsAndCoupons()": [
                1225,
                251
            ],
            "transfer(address,uint256)": [
                2969,
                845
            ],
            "allowance(address,address)": [
                3242,
                955
            ],
            "transferOwnership(address)": [
                3515,
                1021
            ]
        },
        "block_CALL_mapping": {
            "block9988": [
                "adr.transfer(sum)"
            ],
            "jump6206": [
                "owner.transfer(sum)",
                "owner.transfer(sum)"
            ],
            "block8700": [
                "_sendadr.transfer(sumToPay)"
            ],
            "jump8700_0": [
                "_sendadr.transfer(sumToPay)",
                "_sendadr.transfer(sumToPay)"
            ],
            "jump8700_1": [
                "_sendadr.transfer(sumToPay)",
                "_sendadr.transfer(sumToPay)"
            ],
            "block8700_0": [
                "_sendadr.transfer(sumToPay)"
            ],
            "block8700_1": [
                "_sendadr.transfer(sumToPay)"
            ],
            "jump9988_0": [
                "adr.transfer(sum)",
                "adr.transfer(sum)"
            ],
            "block6206": [
                "owner.transfer(sum)"
            ],
            "block8700_2": [
                "_sendadr.transfer(sumToPay)"
            ],
            "block9988_0": [
                "adr.transfer(sum)"
            ],
            "jump8700": [
                "_sendadr.transfer(sumToPay)",
                "_sendadr.transfer(sumToPay)"
            ],
            "jump8700_2": [
                "_sendadr.transfer(sumToPay)",
                "_sendadr.transfer(sumToPay)"
            ],
            "jump9988": [
                "adr.transfer(sum)",
                "adr.transfer(sum)"
            ]
        }
    },
    "TSBCrowdFundingContract": {
        "function_list": [
            "NamedOwnedToken(string,string)",
            "changeName(string,string)",
            "OwnedToken()",
            "transferOwnership(address)",
            "TSBCrowdFundingContract(uint256,uint256,string,string)",
            "SetStartTime(uint256,uint256)",
            "assignTokenContract(address)",
            "fallback()",
            "CheckBTCtransaction()",
            "AddBTCTransactionFromArray(address[],uint256[],uint256[],bytes4[])",
            "AddBTCTransaction(address,uint256,uint256,bytes4)",
            "SetCryptoPrice(uint256,uint256)",
            "convertToUSD(uint256,uint256)",
            "collectedSum()",
            "checkGoalReached()",
            "checkMaxCapReached()",
            "ReceiveAmount(address,uint256,uint256,uint256,uint256)",
            "DistributeNextNTokens(uint256)",
            "finishDistribution()",
            "safeWithdrawal()",
            "killContract()",
            "AddBonusToListFromArray(bytes32[],uint256[],uint256[])",
            "AddBonusToList(bytes32,uint256,uint256)",
            "checkBonus(uint256,uint256,uint256,uint256,uint256)",
            "calcNextNBonuses(uint256)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "NamedOwnedToken(string,string)": {
                "argument": {
                    "tokenName": "string",
                    "tokenSymbol": "string"
                },
                "contract": {
                    "fundingGoalUSD": "uint256",
                    "fundingMaxCapUSD": "uint256",
                    "priceUSD": "uint256",
                    "USDDecimals": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "bonusEndTime": "uint256",
                    "selfDestroyTime": "uint256",
                    "ETHPrice": "uint256",
                    "BTCPrice": "uint256",
                    "PriceDecimals": "uint256",
                    "ETHCollected": "uint256",
                    "BTCCollected": "uint256",
                    "amountRaisedUSD": "uint256",
                    "TokenAmountToPay": "uint256",
                    "balanceList": "TSBCrowdFundingContract.mapStruct[]",
                    "bonusCapUSD": "uint256",
                    "bonusesList": "TSBCrowdFundingContract.bonusStruct[]",
                    "DistributionNextPos": "uint256",
                    "BonusCalcPos": "uint256"
                }
            },
            "changeName(string,string)": {
                "argument": {
                    "newName": "string",
                    "newSymbol": "string"
                },
                "contract": {
                    "fundingGoalUSD": "uint256",
                    "fundingMaxCapUSD": "uint256",
                    "priceUSD": "uint256",
                    "USDDecimals": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "bonusEndTime": "uint256",
                    "selfDestroyTime": "uint256",
                    "ETHPrice": "uint256",
                    "BTCPrice": "uint256",
                    "PriceDecimals": "uint256",
                    "ETHCollected": "uint256",
                    "BTCCollected": "uint256",
                    "amountRaisedUSD": "uint256",
                    "TokenAmountToPay": "uint256",
                    "balanceList": "TSBCrowdFundingContract.mapStruct[]",
                    "bonusCapUSD": "uint256",
                    "bonusesList": "TSBCrowdFundingContract.bonusStruct[]",
                    "DistributionNextPos": "uint256",
                    "BonusCalcPos": "uint256"
                }
            },
            "OwnedToken()": {
                "argument": {},
                "contract": {
                    "fundingGoalUSD": "uint256",
                    "fundingMaxCapUSD": "uint256",
                    "priceUSD": "uint256",
                    "USDDecimals": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "bonusEndTime": "uint256",
                    "selfDestroyTime": "uint256",
                    "ETHPrice": "uint256",
                    "BTCPrice": "uint256",
                    "PriceDecimals": "uint256",
                    "ETHCollected": "uint256",
                    "BTCCollected": "uint256",
                    "amountRaisedUSD": "uint256",
                    "TokenAmountToPay": "uint256",
                    "balanceList": "TSBCrowdFundingContract.mapStruct[]",
                    "bonusCapUSD": "uint256",
                    "bonusesList": "TSBCrowdFundingContract.bonusStruct[]",
                    "DistributionNextPos": "uint256",
                    "BonusCalcPos": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "fundingGoalUSD": "uint256",
                    "fundingMaxCapUSD": "uint256",
                    "priceUSD": "uint256",
                    "USDDecimals": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "bonusEndTime": "uint256",
                    "selfDestroyTime": "uint256",
                    "ETHPrice": "uint256",
                    "BTCPrice": "uint256",
                    "PriceDecimals": "uint256",
                    "ETHCollected": "uint256",
                    "BTCCollected": "uint256",
                    "amountRaisedUSD": "uint256",
                    "TokenAmountToPay": "uint256",
                    "balanceList": "TSBCrowdFundingContract.mapStruct[]",
                    "bonusCapUSD": "uint256",
                    "bonusesList": "TSBCrowdFundingContract.bonusStruct[]",
                    "DistributionNextPos": "uint256",
                    "BonusCalcPos": "uint256"
                }
            },
            "TSBCrowdFundingContract(uint256,uint256,string,string)": {
                "argument": {
                    "_startTime": "uint256",
                    "durationInHours": "uint256",
                    "tokenName": "string",
                    "tokenSymbol": "string"
                },
                "contract": {
                    "fundingGoalUSD": "uint256",
                    "fundingMaxCapUSD": "uint256",
                    "priceUSD": "uint256",
                    "USDDecimals": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "bonusEndTime": "uint256",
                    "selfDestroyTime": "uint256",
                    "ETHPrice": "uint256",
                    "BTCPrice": "uint256",
                    "PriceDecimals": "uint256",
                    "ETHCollected": "uint256",
                    "BTCCollected": "uint256",
                    "amountRaisedUSD": "uint256",
                    "TokenAmountToPay": "uint256",
                    "balanceList": "TSBCrowdFundingContract.mapStruct[]",
                    "bonusCapUSD": "uint256",
                    "bonusesList": "TSBCrowdFundingContract.bonusStruct[]",
                    "DistributionNextPos": "uint256",
                    "BonusCalcPos": "uint256"
                }
            },
            "SetStartTime(uint256,uint256)": {
                "argument": {
                    "startT": "uint256",
                    "durationInHours": "uint256"
                },
                "contract": {
                    "fundingGoalUSD": "uint256",
                    "fundingMaxCapUSD": "uint256",
                    "priceUSD": "uint256",
                    "USDDecimals": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "bonusEndTime": "uint256",
                    "selfDestroyTime": "uint256",
                    "ETHPrice": "uint256",
                    "BTCPrice": "uint256",
                    "PriceDecimals": "uint256",
                    "ETHCollected": "uint256",
                    "BTCCollected": "uint256",
                    "amountRaisedUSD": "uint256",
                    "TokenAmountToPay": "uint256",
                    "balanceList": "TSBCrowdFundingContract.mapStruct[]",
                    "bonusCapUSD": "uint256",
                    "bonusesList": "TSBCrowdFundingContract.bonusStruct[]",
                    "DistributionNextPos": "uint256",
                    "BonusCalcPos": "uint256"
                }
            },
            "assignTokenContract(address)": {
                "argument": {},
                "contract": {
                    "fundingGoalUSD": "uint256",
                    "fundingMaxCapUSD": "uint256",
                    "priceUSD": "uint256",
                    "USDDecimals": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "bonusEndTime": "uint256",
                    "selfDestroyTime": "uint256",
                    "ETHPrice": "uint256",
                    "BTCPrice": "uint256",
                    "PriceDecimals": "uint256",
                    "ETHCollected": "uint256",
                    "BTCCollected": "uint256",
                    "amountRaisedUSD": "uint256",
                    "TokenAmountToPay": "uint256",
                    "balanceList": "TSBCrowdFundingContract.mapStruct[]",
                    "bonusCapUSD": "uint256",
                    "bonusesList": "TSBCrowdFundingContract.bonusStruct[]",
                    "DistributionNextPos": "uint256",
                    "BonusCalcPos": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "fundingGoalUSD": "uint256",
                    "fundingMaxCapUSD": "uint256",
                    "priceUSD": "uint256",
                    "USDDecimals": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "bonusEndTime": "uint256",
                    "selfDestroyTime": "uint256",
                    "ETHPrice": "uint256",
                    "BTCPrice": "uint256",
                    "PriceDecimals": "uint256",
                    "ETHCollected": "uint256",
                    "BTCCollected": "uint256",
                    "amountRaisedUSD": "uint256",
                    "TokenAmountToPay": "uint256",
                    "balanceList": "TSBCrowdFundingContract.mapStruct[]",
                    "bonusCapUSD": "uint256",
                    "bonusesList": "TSBCrowdFundingContract.bonusStruct[]",
                    "DistributionNextPos": "uint256",
                    "BonusCalcPos": "uint256"
                }
            },
            "CheckBTCtransaction()": {
                "argument": {},
                "contract": {
                    "fundingGoalUSD": "uint256",
                    "fundingMaxCapUSD": "uint256",
                    "priceUSD": "uint256",
                    "USDDecimals": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "bonusEndTime": "uint256",
                    "selfDestroyTime": "uint256",
                    "ETHPrice": "uint256",
                    "BTCPrice": "uint256",
                    "PriceDecimals": "uint256",
                    "ETHCollected": "uint256",
                    "BTCCollected": "uint256",
                    "amountRaisedUSD": "uint256",
                    "TokenAmountToPay": "uint256",
                    "balanceList": "TSBCrowdFundingContract.mapStruct[]",
                    "bonusCapUSD": "uint256",
                    "bonusesList": "TSBCrowdFundingContract.bonusStruct[]",
                    "DistributionNextPos": "uint256",
                    "BonusCalcPos": "uint256"
                }
            },
            "AddBTCTransactionFromArray(address[],uint256[],uint256[],bytes4[])": {
                "argument": {
                    "ETHadress": "address[]",
                    "BTCnum": "uint256[]",
                    "TransTime": "uint256[]",
                    "bonusdata": "bytes4[]"
                },
                "contract": {
                    "fundingGoalUSD": "uint256",
                    "fundingMaxCapUSD": "uint256",
                    "priceUSD": "uint256",
                    "USDDecimals": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "bonusEndTime": "uint256",
                    "selfDestroyTime": "uint256",
                    "ETHPrice": "uint256",
                    "BTCPrice": "uint256",
                    "PriceDecimals": "uint256",
                    "ETHCollected": "uint256",
                    "BTCCollected": "uint256",
                    "amountRaisedUSD": "uint256",
                    "TokenAmountToPay": "uint256",
                    "balanceList": "TSBCrowdFundingContract.mapStruct[]",
                    "bonusCapUSD": "uint256",
                    "bonusesList": "TSBCrowdFundingContract.bonusStruct[]",
                    "DistributionNextPos": "uint256",
                    "BonusCalcPos": "uint256"
                }
            },
            "AddBTCTransaction(address,uint256,uint256,bytes4)": {
                "argument": {
                    "BTCnum": "uint256",
                    "TransTime": "uint256",
                    "bonusdata": "bytes4"
                },
                "contract": {
                    "fundingGoalUSD": "uint256",
                    "fundingMaxCapUSD": "uint256",
                    "priceUSD": "uint256",
                    "USDDecimals": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "bonusEndTime": "uint256",
                    "selfDestroyTime": "uint256",
                    "ETHPrice": "uint256",
                    "BTCPrice": "uint256",
                    "PriceDecimals": "uint256",
                    "ETHCollected": "uint256",
                    "BTCCollected": "uint256",
                    "amountRaisedUSD": "uint256",
                    "TokenAmountToPay": "uint256",
                    "balanceList": "TSBCrowdFundingContract.mapStruct[]",
                    "bonusCapUSD": "uint256",
                    "bonusesList": "TSBCrowdFundingContract.bonusStruct[]",
                    "DistributionNextPos": "uint256",
                    "BonusCalcPos": "uint256"
                }
            },
            "SetCryptoPrice(uint256,uint256)": {
                "argument": {
                    "_ETHPrice": "uint256",
                    "_BTCPrice": "uint256"
                },
                "contract": {
                    "fundingGoalUSD": "uint256",
                    "fundingMaxCapUSD": "uint256",
                    "priceUSD": "uint256",
                    "USDDecimals": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "bonusEndTime": "uint256",
                    "selfDestroyTime": "uint256",
                    "ETHPrice": "uint256",
                    "BTCPrice": "uint256",
                    "PriceDecimals": "uint256",
                    "ETHCollected": "uint256",
                    "BTCCollected": "uint256",
                    "amountRaisedUSD": "uint256",
                    "TokenAmountToPay": "uint256",
                    "balanceList": "TSBCrowdFundingContract.mapStruct[]",
                    "bonusCapUSD": "uint256",
                    "bonusesList": "TSBCrowdFundingContract.bonusStruct[]",
                    "DistributionNextPos": "uint256",
                    "BonusCalcPos": "uint256"
                }
            },
            "convertToUSD(uint256,uint256)": {
                "argument": {
                    "ETH": "uint256",
                    "BTC": "uint256"
                },
                "contract": {
                    "fundingGoalUSD": "uint256",
                    "fundingMaxCapUSD": "uint256",
                    "priceUSD": "uint256",
                    "USDDecimals": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "bonusEndTime": "uint256",
                    "selfDestroyTime": "uint256",
                    "ETHPrice": "uint256",
                    "BTCPrice": "uint256",
                    "PriceDecimals": "uint256",
                    "ETHCollected": "uint256",
                    "BTCCollected": "uint256",
                    "amountRaisedUSD": "uint256",
                    "TokenAmountToPay": "uint256",
                    "balanceList": "TSBCrowdFundingContract.mapStruct[]",
                    "bonusCapUSD": "uint256",
                    "bonusesList": "TSBCrowdFundingContract.bonusStruct[]",
                    "DistributionNextPos": "uint256",
                    "BonusCalcPos": "uint256"
                }
            },
            "collectedSum()": {
                "argument": {},
                "contract": {
                    "fundingGoalUSD": "uint256",
                    "fundingMaxCapUSD": "uint256",
                    "priceUSD": "uint256",
                    "USDDecimals": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "bonusEndTime": "uint256",
                    "selfDestroyTime": "uint256",
                    "ETHPrice": "uint256",
                    "BTCPrice": "uint256",
                    "PriceDecimals": "uint256",
                    "ETHCollected": "uint256",
                    "BTCCollected": "uint256",
                    "amountRaisedUSD": "uint256",
                    "TokenAmountToPay": "uint256",
                    "balanceList": "TSBCrowdFundingContract.mapStruct[]",
                    "bonusCapUSD": "uint256",
                    "bonusesList": "TSBCrowdFundingContract.bonusStruct[]",
                    "DistributionNextPos": "uint256",
                    "BonusCalcPos": "uint256"
                }
            },
            "checkGoalReached()": {
                "argument": {},
                "contract": {
                    "fundingGoalUSD": "uint256",
                    "fundingMaxCapUSD": "uint256",
                    "priceUSD": "uint256",
                    "USDDecimals": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "bonusEndTime": "uint256",
                    "selfDestroyTime": "uint256",
                    "ETHPrice": "uint256",
                    "BTCPrice": "uint256",
                    "PriceDecimals": "uint256",
                    "ETHCollected": "uint256",
                    "BTCCollected": "uint256",
                    "amountRaisedUSD": "uint256",
                    "TokenAmountToPay": "uint256",
                    "balanceList": "TSBCrowdFundingContract.mapStruct[]",
                    "bonusCapUSD": "uint256",
                    "bonusesList": "TSBCrowdFundingContract.bonusStruct[]",
                    "DistributionNextPos": "uint256",
                    "BonusCalcPos": "uint256"
                }
            },
            "checkMaxCapReached()": {
                "argument": {},
                "contract": {
                    "fundingGoalUSD": "uint256",
                    "fundingMaxCapUSD": "uint256",
                    "priceUSD": "uint256",
                    "USDDecimals": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "bonusEndTime": "uint256",
                    "selfDestroyTime": "uint256",
                    "ETHPrice": "uint256",
                    "BTCPrice": "uint256",
                    "PriceDecimals": "uint256",
                    "ETHCollected": "uint256",
                    "BTCCollected": "uint256",
                    "amountRaisedUSD": "uint256",
                    "TokenAmountToPay": "uint256",
                    "balanceList": "TSBCrowdFundingContract.mapStruct[]",
                    "bonusCapUSD": "uint256",
                    "bonusesList": "TSBCrowdFundingContract.bonusStruct[]",
                    "DistributionNextPos": "uint256",
                    "BonusCalcPos": "uint256"
                }
            },
            "ReceiveAmount(address,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "sumETH": "uint256",
                    "sumBTC": "uint256",
                    "TransTime": "uint256",
                    "bonuspos": "uint256"
                },
                "contract": {
                    "fundingGoalUSD": "uint256",
                    "fundingMaxCapUSD": "uint256",
                    "priceUSD": "uint256",
                    "USDDecimals": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "bonusEndTime": "uint256",
                    "selfDestroyTime": "uint256",
                    "ETHPrice": "uint256",
                    "BTCPrice": "uint256",
                    "PriceDecimals": "uint256",
                    "ETHCollected": "uint256",
                    "BTCCollected": "uint256",
                    "amountRaisedUSD": "uint256",
                    "TokenAmountToPay": "uint256",
                    "balanceList": "TSBCrowdFundingContract.mapStruct[]",
                    "bonusCapUSD": "uint256",
                    "bonusesList": "TSBCrowdFundingContract.bonusStruct[]",
                    "DistributionNextPos": "uint256",
                    "BonusCalcPos": "uint256"
                }
            },
            "DistributeNextNTokens(uint256)": {
                "argument": {
                    "n": "uint256"
                },
                "contract": {
                    "fundingGoalUSD": "uint256",
                    "fundingMaxCapUSD": "uint256",
                    "priceUSD": "uint256",
                    "USDDecimals": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "bonusEndTime": "uint256",
                    "selfDestroyTime": "uint256",
                    "ETHPrice": "uint256",
                    "BTCPrice": "uint256",
                    "PriceDecimals": "uint256",
                    "ETHCollected": "uint256",
                    "BTCCollected": "uint256",
                    "amountRaisedUSD": "uint256",
                    "TokenAmountToPay": "uint256",
                    "balanceList": "TSBCrowdFundingContract.mapStruct[]",
                    "bonusCapUSD": "uint256",
                    "bonusesList": "TSBCrowdFundingContract.bonusStruct[]",
                    "DistributionNextPos": "uint256",
                    "BonusCalcPos": "uint256"
                }
            },
            "finishDistribution()": {
                "argument": {},
                "contract": {
                    "fundingGoalUSD": "uint256",
                    "fundingMaxCapUSD": "uint256",
                    "priceUSD": "uint256",
                    "USDDecimals": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "bonusEndTime": "uint256",
                    "selfDestroyTime": "uint256",
                    "ETHPrice": "uint256",
                    "BTCPrice": "uint256",
                    "PriceDecimals": "uint256",
                    "ETHCollected": "uint256",
                    "BTCCollected": "uint256",
                    "amountRaisedUSD": "uint256",
                    "TokenAmountToPay": "uint256",
                    "balanceList": "TSBCrowdFundingContract.mapStruct[]",
                    "bonusCapUSD": "uint256",
                    "bonusesList": "TSBCrowdFundingContract.bonusStruct[]",
                    "DistributionNextPos": "uint256",
                    "BonusCalcPos": "uint256"
                }
            },
            "safeWithdrawal()": {
                "argument": {},
                "contract": {
                    "fundingGoalUSD": "uint256",
                    "fundingMaxCapUSD": "uint256",
                    "priceUSD": "uint256",
                    "USDDecimals": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "bonusEndTime": "uint256",
                    "selfDestroyTime": "uint256",
                    "ETHPrice": "uint256",
                    "BTCPrice": "uint256",
                    "PriceDecimals": "uint256",
                    "ETHCollected": "uint256",
                    "BTCCollected": "uint256",
                    "amountRaisedUSD": "uint256",
                    "TokenAmountToPay": "uint256",
                    "balanceList": "TSBCrowdFundingContract.mapStruct[]",
                    "bonusCapUSD": "uint256",
                    "bonusesList": "TSBCrowdFundingContract.bonusStruct[]",
                    "DistributionNextPos": "uint256",
                    "BonusCalcPos": "uint256"
                }
            },
            "killContract()": {
                "argument": {},
                "contract": {
                    "fundingGoalUSD": "uint256",
                    "fundingMaxCapUSD": "uint256",
                    "priceUSD": "uint256",
                    "USDDecimals": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "bonusEndTime": "uint256",
                    "selfDestroyTime": "uint256",
                    "ETHPrice": "uint256",
                    "BTCPrice": "uint256",
                    "PriceDecimals": "uint256",
                    "ETHCollected": "uint256",
                    "BTCCollected": "uint256",
                    "amountRaisedUSD": "uint256",
                    "TokenAmountToPay": "uint256",
                    "balanceList": "TSBCrowdFundingContract.mapStruct[]",
                    "bonusCapUSD": "uint256",
                    "bonusesList": "TSBCrowdFundingContract.bonusStruct[]",
                    "DistributionNextPos": "uint256",
                    "BonusCalcPos": "uint256"
                }
            },
            "AddBonusToListFromArray(bytes32[],uint256[],uint256[])": {
                "argument": {
                    "bonusCode": "bytes32[]",
                    "ETHsumInFinney": "uint256[]",
                    "BTCsumInFinney": "uint256[]"
                },
                "contract": {
                    "fundingGoalUSD": "uint256",
                    "fundingMaxCapUSD": "uint256",
                    "priceUSD": "uint256",
                    "USDDecimals": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "bonusEndTime": "uint256",
                    "selfDestroyTime": "uint256",
                    "ETHPrice": "uint256",
                    "BTCPrice": "uint256",
                    "PriceDecimals": "uint256",
                    "ETHCollected": "uint256",
                    "BTCCollected": "uint256",
                    "amountRaisedUSD": "uint256",
                    "TokenAmountToPay": "uint256",
                    "balanceList": "TSBCrowdFundingContract.mapStruct[]",
                    "bonusCapUSD": "uint256",
                    "bonusesList": "TSBCrowdFundingContract.bonusStruct[]",
                    "DistributionNextPos": "uint256",
                    "BonusCalcPos": "uint256"
                }
            },
            "AddBonusToList(bytes32,uint256,uint256)": {
                "argument": {
                    "bonusCode": "bytes32",
                    "ETHsumInFinney": "uint256",
                    "BTCsumInFinney": "uint256"
                },
                "contract": {
                    "fundingGoalUSD": "uint256",
                    "fundingMaxCapUSD": "uint256",
                    "priceUSD": "uint256",
                    "USDDecimals": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "bonusEndTime": "uint256",
                    "selfDestroyTime": "uint256",
                    "ETHPrice": "uint256",
                    "BTCPrice": "uint256",
                    "PriceDecimals": "uint256",
                    "ETHCollected": "uint256",
                    "BTCCollected": "uint256",
                    "amountRaisedUSD": "uint256",
                    "TokenAmountToPay": "uint256",
                    "balanceList": "TSBCrowdFundingContract.mapStruct[]",
                    "bonusCapUSD": "uint256",
                    "bonusesList": "TSBCrowdFundingContract.bonusStruct[]",
                    "DistributionNextPos": "uint256",
                    "BonusCalcPos": "uint256"
                }
            },
            "checkBonus(uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "newBalancePos": "uint256",
                    "sumETH": "uint256",
                    "sumBTC": "uint256",
                    "TransTime": "uint256",
                    "pos": "uint256"
                },
                "contract": {
                    "fundingGoalUSD": "uint256",
                    "fundingMaxCapUSD": "uint256",
                    "priceUSD": "uint256",
                    "USDDecimals": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "bonusEndTime": "uint256",
                    "selfDestroyTime": "uint256",
                    "ETHPrice": "uint256",
                    "BTCPrice": "uint256",
                    "PriceDecimals": "uint256",
                    "ETHCollected": "uint256",
                    "BTCCollected": "uint256",
                    "amountRaisedUSD": "uint256",
                    "TokenAmountToPay": "uint256",
                    "balanceList": "TSBCrowdFundingContract.mapStruct[]",
                    "bonusCapUSD": "uint256",
                    "bonusesList": "TSBCrowdFundingContract.bonusStruct[]",
                    "DistributionNextPos": "uint256",
                    "BonusCalcPos": "uint256"
                }
            },
            "calcNextNBonuses(uint256)": {
                "argument": {
                    "N": "uint256"
                },
                "contract": {
                    "fundingGoalUSD": "uint256",
                    "fundingMaxCapUSD": "uint256",
                    "priceUSD": "uint256",
                    "USDDecimals": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256",
                    "bonusEndTime": "uint256",
                    "selfDestroyTime": "uint256",
                    "ETHPrice": "uint256",
                    "BTCPrice": "uint256",
                    "PriceDecimals": "uint256",
                    "ETHCollected": "uint256",
                    "BTCCollected": "uint256",
                    "amountRaisedUSD": "uint256",
                    "TokenAmountToPay": "uint256",
                    "balanceList": "TSBCrowdFundingContract.mapStruct[]",
                    "bonusCapUSD": "uint256",
                    "bonusesList": "TSBCrowdFundingContract.bonusStruct[]",
                    "DistributionNextPos": "uint256",
                    "BonusCalcPos": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "AddBTCTransactionFromArray(address[],uint256[],uint256[],bytes4[])": [
                1375,
                295
            ],
            "AddBonusToListFromArray(bytes32[],uint256[],uint256[])": [
                2400,
                515
            ],
            "assignTokenContract(address)": [
                2177,
                449
            ],
            "checkGoalReached()": [
                785,
                75
            ],
            "safeWithdrawal()": [
                4064,
                1109
            ],
            "calcNextNBonuses(uint256)": [
                1038,
                163
            ],
            "collectedSum()": [
                3854,
                1021
            ],
            "killContract()": [
                1083,
                185
            ],
            "SetCryptoPrice(uint256,uint256)": [
                3554,
                889
            ],
            "AddBTCTransaction(address,uint256,uint256,bytes4)": [
                1204,
                251
            ],
            "DistributeNextNTokens(uint256)": [
                3432,
                823
            ],
            "transferOwnership(address)": [
                3940,
                1065
            ],
            "checkMaxCapReached()": [
                3070,
                669
            ],
            "changeName(string,string)": [
                2808,
                625
            ],
            "finishDistribution()": [
                3280,
                735
            ],
            "AddBonusToList(bytes32,uint256,uint256)": [
                2331,
                493
            ],
            "SetStartTime(uint256,uint256)": [
                1106,
                207
            ],
            "convertToUSD(uint256,uint256)": [
                1842,
                361
            ]
        },
        "block_CALL_mapping": {
            "jump9807": [
                "tokenReward.transferOwnership(owner)",
                "tokenReward.transferOwnership(owner)"
            ],
            "jump6520": [
                "tokenReward.transferOwnership(owner)",
                "tokenReward.transferOwnership(owner)"
            ],
            "block11345": [
                "msg.sender.transfer(amount)"
            ],
            "jump11345": [
                "msg.sender.transfer(amount)",
                "msg.sender.transfer(amount)"
            ],
            "block10535": [
                "tokenReward.mintToken(balanceList[i].mapAddress, tokensCount + balanceList[i].bonusTokens)"
            ],
            "block8014": [
                "tokenReward.transferOwnership(address(this))"
            ],
            "block9807": [
                "tokenReward.transferOwnership(owner)"
            ],
            "block6520": [
                "tokenReward.transferOwnership(owner)"
            ],
            "jump8014": [
                "tokenReward.transferOwnership(address(this))",
                "tokenReward.transferOwnership(address(this))"
            ],
            "jump10535": [
                "tokenReward.mintToken(balanceList[i].mapAddress, tokensCount + balanceList[i].bonusTokens)",
                "tokenReward.mintToken(balanceList[i].mapAddress, tokensCount + balanceList[i].bonusTokens)"
            ]
        }
    }
}