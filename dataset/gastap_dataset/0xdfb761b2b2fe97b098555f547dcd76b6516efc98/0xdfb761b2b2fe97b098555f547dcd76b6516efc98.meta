{
    "Owned": {
        "function_list": [
            "Owned()",
            "changeOwner(address)"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {}
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "changeOwner(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "safeMath": {
        "function_list": [
            "add(uint256,uint256)",
            "sub(uint256,uint256)"
        ],
        "initial_state": {
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "add(uint256,uint256)": [
                81,
                75
            ],
            "sub(uint256,uint256)": [
                156,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "tokenRecipient": {
        "function_list": [
            "receiveApproval(address,uint256,address,bytes)"
        ],
        "initial_state": {
            "receiveApproval(address,uint256,address,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "receiveApproval(address,uint256,address,bytes)": [
                174,
                75
            ]
        },
        "block_CALL_mapping": {
            "jump573": [
                "t.transferFrom(_from, this, _value)",
                "t.transferFrom(_from, this, _value)"
            ],
            "block573": [
                "t.transferFrom(_from, this, _value)"
            ]
        }
    },
    "ERC20Token": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                337,
                97
            ],
            "allowance(address,address)": [
                1310,
                295
            ],
            "balanceOf(address)": [
                807,
                207
            ],
            "transferFrom(address,address,uint256)": [
                481,
                141
            ],
            "transfer(address,uint256)": [
                1038,
                251
            ]
        },
        "block_CALL_mapping": {
            "block3855": [
                "_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)"
            ],
            "jump3855": [
                "_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)",
                "_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "MCTContractToken": {
        "function_list": [
            "Owned()",
            "changeOwner(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "MCTContractToken(uint256,address)",
            "mctTotalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "approve(address,uint256)",
            "approveAndCall(address,uint256,bytes)",
            "transferFrom(address,address,uint256)",
            "allowance(address,address)",
            "mintTokens(address,uint256)",
            "burnTokens(address,uint256)",
            "burnLeftTokens()",
            "freezeTransfersUntil(uint256,string)",
            "freezeAccounts(address,bool)",
            "mintUnICOLeftToken(address,address,address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "tokenFrozenUntilTime": "uint256",
                    "blackListFreezeTime": "uint256",
                    "totalRemainSupply": "uint256",
                    "foundingTeamSupply": "uint256",
                    "gameDeveloperSupply": "uint256",
                    "communitySupply": "uint256"
                }
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "tokenFrozenUntilTime": "uint256",
                    "blackListFreezeTime": "uint256",
                    "totalRemainSupply": "uint256",
                    "foundingTeamSupply": "uint256",
                    "gameDeveloperSupply": "uint256",
                    "communitySupply": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "tokenFrozenUntilTime": "uint256",
                    "blackListFreezeTime": "uint256",
                    "totalRemainSupply": "uint256",
                    "foundingTeamSupply": "uint256",
                    "gameDeveloperSupply": "uint256",
                    "communitySupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "tokenFrozenUntilTime": "uint256",
                    "blackListFreezeTime": "uint256",
                    "totalRemainSupply": "uint256",
                    "foundingTeamSupply": "uint256",
                    "gameDeveloperSupply": "uint256",
                    "communitySupply": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "tokenFrozenUntilTime": "uint256",
                    "blackListFreezeTime": "uint256",
                    "totalRemainSupply": "uint256",
                    "foundingTeamSupply": "uint256",
                    "gameDeveloperSupply": "uint256",
                    "communitySupply": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "tokenFrozenUntilTime": "uint256",
                    "blackListFreezeTime": "uint256",
                    "totalRemainSupply": "uint256",
                    "foundingTeamSupply": "uint256",
                    "gameDeveloperSupply": "uint256",
                    "communitySupply": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "tokenFrozenUntilTime": "uint256",
                    "blackListFreezeTime": "uint256",
                    "totalRemainSupply": "uint256",
                    "foundingTeamSupply": "uint256",
                    "gameDeveloperSupply": "uint256",
                    "communitySupply": "uint256"
                }
            },
            "MCTContractToken(uint256,address)": {
                "argument": {
                    "_totalSupply": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "tokenFrozenUntilTime": "uint256",
                    "blackListFreezeTime": "uint256",
                    "totalRemainSupply": "uint256",
                    "foundingTeamSupply": "uint256",
                    "gameDeveloperSupply": "uint256",
                    "communitySupply": "uint256"
                }
            },
            "mctTotalSupply()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "tokenFrozenUntilTime": "uint256",
                    "blackListFreezeTime": "uint256",
                    "totalRemainSupply": "uint256",
                    "foundingTeamSupply": "uint256",
                    "gameDeveloperSupply": "uint256",
                    "communitySupply": "uint256"
                }
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "tokenFrozenUntilTime": "uint256",
                    "blackListFreezeTime": "uint256",
                    "totalRemainSupply": "uint256",
                    "foundingTeamSupply": "uint256",
                    "gameDeveloperSupply": "uint256",
                    "communitySupply": "uint256"
                }
            },
            "mintTokens(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "tokenFrozenUntilTime": "uint256",
                    "blackListFreezeTime": "uint256",
                    "totalRemainSupply": "uint256",
                    "foundingTeamSupply": "uint256",
                    "gameDeveloperSupply": "uint256",
                    "communitySupply": "uint256"
                }
            },
            "burnTokens(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "tokenFrozenUntilTime": "uint256",
                    "blackListFreezeTime": "uint256",
                    "totalRemainSupply": "uint256",
                    "foundingTeamSupply": "uint256",
                    "gameDeveloperSupply": "uint256",
                    "communitySupply": "uint256"
                }
            },
            "burnLeftTokens()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "tokenFrozenUntilTime": "uint256",
                    "blackListFreezeTime": "uint256",
                    "totalRemainSupply": "uint256",
                    "foundingTeamSupply": "uint256",
                    "gameDeveloperSupply": "uint256",
                    "communitySupply": "uint256"
                }
            },
            "freezeTransfersUntil(uint256,string)": {
                "argument": {
                    "_frozenUntilTime": "uint256",
                    "_freezeReason": "string"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "tokenFrozenUntilTime": "uint256",
                    "blackListFreezeTime": "uint256",
                    "totalRemainSupply": "uint256",
                    "foundingTeamSupply": "uint256",
                    "gameDeveloperSupply": "uint256",
                    "communitySupply": "uint256"
                }
            },
            "freezeAccounts(address,bool)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "tokenFrozenUntilTime": "uint256",
                    "blackListFreezeTime": "uint256",
                    "totalRemainSupply": "uint256",
                    "foundingTeamSupply": "uint256",
                    "gameDeveloperSupply": "uint256",
                    "communitySupply": "uint256"
                }
            },
            "mintUnICOLeftToken(address,address,address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "tokenFrozenUntilTime": "uint256",
                    "blackListFreezeTime": "uint256",
                    "totalRemainSupply": "uint256",
                    "foundingTeamSupply": "uint256",
                    "gameDeveloperSupply": "uint256",
                    "communitySupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "mintUnICOLeftToken(address,address,address)": [
                2385,
                603
            ],
            "allowance(address,address)": [
                2266,
                581
            ],
            "transferFrom(address,address,uint256)": [
                886,
                229
            ],
            "approve(address,uint256)": [
                586,
                141
            ],
            "mintTokens(address,uint256)": [
                2516,
                625
            ],
            "burnTokens(address,uint256)": [
                687,
                163
            ],
            "changeOwner(address)": [
                1769,
                471
            ],
            "burnLeftTokens()": [
                1019,
                251
            ],
            "balanceOf(address)": [
                1321,
                361
            ],
            "freezeTransfersUntil(uint256,string)": [
                1937,
                515
            ],
            "approveAndCall(address,uint256,bytes)": [
                2052,
                537
            ],
            "mctTotalSupply()": [
                356,
                75
            ],
            "freezeAccounts(address,bool)": [
                764,
                185
            ],
            "transfer(address,uint256)": [
                1836,
                493
            ]
        },
        "block_CALL_mapping": {
            "block6673": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "jump6673": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "MCTCrowdsale": {
        "function_list": [
            "add(uint256,uint256)",
            "sub(uint256,uint256)",
            "Owned()",
            "changeOwner(address)",
            "fallback()",
            "MCTCrowdsale(uint256,uint256,uint256)",
            "priceAt(uint256)",
            "buyMCTTokenProxy(address,uint256,uint256)",
            "buyMCT(address,uint256)",
            "setFinalICOPeriod()",
            "setTokenContract(address)",
            "withdraw(address,uint256)",
            "crowdsaleEther()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "tokenSupportLimit": "uint256",
                    "tokenSupportSoftLimit": "uint256",
                    "etherChange": "uint256",
                    "crowdsaleTokenSupply": "uint256",
                    "crowdsaleTokenMint": "uint256",
                    "crowdsaleStartDate": "uint256",
                    "crowdsaleStopDate": "uint256",
                    "totalCrowdsaleEther": "uint256",
                    "nextParticipantIndex": "uint256"
                }
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "tokenSupportLimit": "uint256",
                    "tokenSupportSoftLimit": "uint256",
                    "etherChange": "uint256",
                    "crowdsaleTokenSupply": "uint256",
                    "crowdsaleTokenMint": "uint256",
                    "crowdsaleStartDate": "uint256",
                    "crowdsaleStopDate": "uint256",
                    "totalCrowdsaleEther": "uint256",
                    "nextParticipantIndex": "uint256"
                }
            },
            "Owned()": {
                "argument": {},
                "contract": {
                    "tokenSupportLimit": "uint256",
                    "tokenSupportSoftLimit": "uint256",
                    "etherChange": "uint256",
                    "crowdsaleTokenSupply": "uint256",
                    "crowdsaleTokenMint": "uint256",
                    "crowdsaleStartDate": "uint256",
                    "crowdsaleStopDate": "uint256",
                    "totalCrowdsaleEther": "uint256",
                    "nextParticipantIndex": "uint256"
                }
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {
                    "tokenSupportLimit": "uint256",
                    "tokenSupportSoftLimit": "uint256",
                    "etherChange": "uint256",
                    "crowdsaleTokenSupply": "uint256",
                    "crowdsaleTokenMint": "uint256",
                    "crowdsaleStartDate": "uint256",
                    "crowdsaleStopDate": "uint256",
                    "totalCrowdsaleEther": "uint256",
                    "nextParticipantIndex": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "tokenSupportLimit": "uint256",
                    "tokenSupportSoftLimit": "uint256",
                    "etherChange": "uint256",
                    "crowdsaleTokenSupply": "uint256",
                    "crowdsaleTokenMint": "uint256",
                    "crowdsaleStartDate": "uint256",
                    "crowdsaleStopDate": "uint256",
                    "totalCrowdsaleEther": "uint256",
                    "nextParticipantIndex": "uint256"
                }
            },
            "MCTCrowdsale(uint256,uint256,uint256)": {
                "argument": {
                    "_crowdsaleStartDate": "uint256",
                    "_crowdsaleStopDate": "uint256",
                    "_totalTokenSupply": "uint256"
                },
                "contract": {
                    "tokenSupportLimit": "uint256",
                    "tokenSupportSoftLimit": "uint256",
                    "etherChange": "uint256",
                    "crowdsaleTokenSupply": "uint256",
                    "crowdsaleTokenMint": "uint256",
                    "crowdsaleStartDate": "uint256",
                    "crowdsaleStopDate": "uint256",
                    "totalCrowdsaleEther": "uint256",
                    "nextParticipantIndex": "uint256"
                }
            },
            "priceAt(uint256)": {
                "argument": {
                    "_atTime": "uint256"
                },
                "contract": {
                    "tokenSupportLimit": "uint256",
                    "tokenSupportSoftLimit": "uint256",
                    "etherChange": "uint256",
                    "crowdsaleTokenSupply": "uint256",
                    "crowdsaleTokenMint": "uint256",
                    "crowdsaleStartDate": "uint256",
                    "crowdsaleStopDate": "uint256",
                    "totalCrowdsaleEther": "uint256",
                    "nextParticipantIndex": "uint256"
                }
            },
            "buyMCTTokenProxy(address,uint256,uint256)": {
                "argument": {
                    "_msgValue": "uint256",
                    "_priceAtNow": "uint256"
                },
                "contract": {
                    "tokenSupportLimit": "uint256",
                    "tokenSupportSoftLimit": "uint256",
                    "etherChange": "uint256",
                    "crowdsaleTokenSupply": "uint256",
                    "crowdsaleTokenMint": "uint256",
                    "crowdsaleStartDate": "uint256",
                    "crowdsaleStopDate": "uint256",
                    "totalCrowdsaleEther": "uint256",
                    "nextParticipantIndex": "uint256"
                }
            },
            "buyMCT(address,uint256)": {
                "argument": {
                    "_tokenBuy": "uint256"
                },
                "contract": {
                    "tokenSupportLimit": "uint256",
                    "tokenSupportSoftLimit": "uint256",
                    "etherChange": "uint256",
                    "crowdsaleTokenSupply": "uint256",
                    "crowdsaleTokenMint": "uint256",
                    "crowdsaleStartDate": "uint256",
                    "crowdsaleStopDate": "uint256",
                    "totalCrowdsaleEther": "uint256",
                    "nextParticipantIndex": "uint256"
                }
            },
            "setFinalICOPeriod()": {
                "argument": {},
                "contract": {
                    "tokenSupportLimit": "uint256",
                    "tokenSupportSoftLimit": "uint256",
                    "etherChange": "uint256",
                    "crowdsaleTokenSupply": "uint256",
                    "crowdsaleTokenMint": "uint256",
                    "crowdsaleStartDate": "uint256",
                    "crowdsaleStopDate": "uint256",
                    "totalCrowdsaleEther": "uint256",
                    "nextParticipantIndex": "uint256"
                }
            },
            "setTokenContract(address)": {
                "argument": {},
                "contract": {
                    "tokenSupportLimit": "uint256",
                    "tokenSupportSoftLimit": "uint256",
                    "etherChange": "uint256",
                    "crowdsaleTokenSupply": "uint256",
                    "crowdsaleTokenMint": "uint256",
                    "crowdsaleStartDate": "uint256",
                    "crowdsaleStopDate": "uint256",
                    "totalCrowdsaleEther": "uint256",
                    "nextParticipantIndex": "uint256"
                }
            },
            "withdraw(address,uint256)": {
                "argument": {
                    "_balance": "uint256"
                },
                "contract": {
                    "tokenSupportLimit": "uint256",
                    "tokenSupportSoftLimit": "uint256",
                    "etherChange": "uint256",
                    "crowdsaleTokenSupply": "uint256",
                    "crowdsaleTokenMint": "uint256",
                    "crowdsaleStartDate": "uint256",
                    "crowdsaleStopDate": "uint256",
                    "totalCrowdsaleEther": "uint256",
                    "nextParticipantIndex": "uint256"
                }
            },
            "crowdsaleEther()": {
                "argument": {},
                "contract": {
                    "tokenSupportLimit": "uint256",
                    "tokenSupportSoftLimit": "uint256",
                    "etherChange": "uint256",
                    "crowdsaleTokenSupply": "uint256",
                    "crowdsaleTokenMint": "uint256",
                    "crowdsaleStartDate": "uint256",
                    "crowdsaleStopDate": "uint256",
                    "totalCrowdsaleEther": "uint256",
                    "nextParticipantIndex": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "tokenSupportLimit": "uint256",
                    "tokenSupportSoftLimit": "uint256",
                    "etherChange": "uint256",
                    "crowdsaleTokenSupply": "uint256",
                    "crowdsaleTokenMint": "uint256",
                    "crowdsaleStartDate": "uint256",
                    "crowdsaleStopDate": "uint256",
                    "totalCrowdsaleEther": "uint256",
                    "nextParticipantIndex": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "setTokenContract(address)": [
                1520,
                405
            ],
            "add(uint256,uint256)": [
                1041,
                251
            ],
            "withdraw(address,uint256)": [
                1814,
                515
            ],
            "setFinalICOPeriod()": [
                1116,
                273
            ],
            "sub(uint256,uint256)": [
                1445,
                383
            ],
            "changeOwner(address)": [
                1335,
                339
            ],
            "crowdsaleEther()": [
                652,
                97
            ]
        },
        "block_CALL_mapping": {
            "block2265_0": [
                "_msgSender.transfer(needRetreat)"
            ],
            "jump2265": [
                "_msgSender.transfer(needRetreat)",
                "_msgSender.transfer(needRetreat)"
            ],
            "block2265": [
                "_msgSender.transfer(needRetreat)"
            ],
            "jump3583": [
                "multisigAddress.transfer(_balance)",
                "multisigAddress.transfer(_balance)"
            ],
            "jump2265_0": [
                "_msgSender.transfer(needRetreat)",
                "_msgSender.transfer(needRetreat)"
            ],
            "jump4036_0": [
                "mctTokenContract.mintTokens(_sender, _tokenBuy)",
                "mctTokenContract.mintTokens(_sender, _tokenBuy)"
            ],
            "block4036": [
                "mctTokenContract.mintTokens(_sender, _tokenBuy)"
            ],
            "block3583": [
                "multisigAddress.transfer(_balance)"
            ],
            "block4036_0": [
                "mctTokenContract.mintTokens(_sender, _tokenBuy)"
            ],
            "jump4036": [
                "mctTokenContract.mintTokens(_sender, _tokenBuy)",
                "mctTokenContract.mintTokens(_sender, _tokenBuy)"
            ]
        }
    }
}