{
    "Token": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                390,
                97
            ],
            "allowance(address,address)": [
                1698,
                427
            ],
            "balanceOf(address)": [
                894,
                229
            ],
            "transferFrom(address,address,uint256)": [
                621,
                163
            ],
            "totalSupply()": [
                578,
                141
            ],
            "transfer(address,uint256)": [
                1443,
                361
            ]
        },
        "block_CALL_mapping": {}
    },
    "TestIco": {
        "function_list": [
            "TestIco(address,address,address,address)",
            "addToken(address,uint256,uint256)",
            "removeToken(address)",
            "buyWithTokens(address)",
            "addTokenToUser(address,address)",
            "buyWithTokensBy(address,address)",
            "returnFundsFor(address)",
            "returnFundsForUsers(address[])",
            "buyTokens(address,uint256)",
            "fallback()",
            "withdrawEtherTo(address)",
            "withdrawEther()",
            "withdrawEtherToReserveEscrow()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "TestIco(address,address,address,address)": {
                "argument": {},
                "contract": {
                    "ETH_PRICE": "uint256",
                    "allowedTokens": "address[]",
                    "userTokens": "mapping(address => address[])"
                }
            },
            "addToken(address,uint256,uint256)": {
                "argument": {
                    "_amount": "uint256",
                    "_price": "uint256"
                },
                "contract": {
                    "ETH_PRICE": "uint256",
                    "allowedTokens": "address[]",
                    "userTokens": "mapping(address => address[])"
                }
            },
            "removeToken(address)": {
                "argument": {},
                "contract": {
                    "ETH_PRICE": "uint256",
                    "allowedTokens": "address[]",
                    "userTokens": "mapping(address => address[])"
                }
            },
            "buyWithTokens(address)": {
                "argument": {},
                "contract": {
                    "ETH_PRICE": "uint256",
                    "allowedTokens": "address[]",
                    "userTokens": "mapping(address => address[])"
                }
            },
            "addTokenToUser(address,address)": {
                "argument": {},
                "contract": {
                    "ETH_PRICE": "uint256",
                    "allowedTokens": "address[]",
                    "userTokens": "mapping(address => address[])"
                }
            },
            "buyWithTokensBy(address,address)": {
                "argument": {},
                "contract": {
                    "ETH_PRICE": "uint256",
                    "allowedTokens": "address[]",
                    "userTokens": "mapping(address => address[])"
                }
            },
            "returnFundsFor(address)": {
                "argument": {},
                "contract": {
                    "ETH_PRICE": "uint256",
                    "allowedTokens": "address[]",
                    "userTokens": "mapping(address => address[])"
                }
            },
            "returnFundsForUsers(address[])": {
                "argument": {
                    "_users": "address[]"
                },
                "contract": {
                    "ETH_PRICE": "uint256",
                    "allowedTokens": "address[]",
                    "userTokens": "mapping(address => address[])"
                }
            },
            "buyTokens(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "ETH_PRICE": "uint256",
                    "allowedTokens": "address[]",
                    "userTokens": "mapping(address => address[])"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "ETH_PRICE": "uint256",
                    "allowedTokens": "address[]",
                    "userTokens": "mapping(address => address[])"
                }
            },
            "withdrawEtherTo(address)": {
                "argument": {},
                "contract": {
                    "ETH_PRICE": "uint256",
                    "allowedTokens": "address[]",
                    "userTokens": "mapping(address => address[])"
                }
            },
            "withdrawEther()": {
                "argument": {},
                "contract": {
                    "ETH_PRICE": "uint256",
                    "allowedTokens": "address[]",
                    "userTokens": "mapping(address => address[])"
                }
            },
            "withdrawEtherToReserveEscrow()": {
                "argument": {},
                "contract": {
                    "ETH_PRICE": "uint256",
                    "allowedTokens": "address[]",
                    "userTokens": "mapping(address => address[])"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "ETH_PRICE": "uint256",
                    "allowedTokens": "address[]",
                    "userTokens": "mapping(address => address[])"
                }
            }
        },
        "function_block_mapping": {
            "returnFundsForUsers(address[])": [
                602,
                141
            ],
            "removeToken(address)": [
                991,
                229
            ],
            "withdrawEther()": [
                1058,
                251
            ],
            "withdrawEtherToReserveEscrow()": [
                2044,
                515
            ],
            "addToken(address,uint256,uint256)": [
                1563,
                405
            ],
            "buyWithTokens(address)": [
                1650,
                427
            ],
            "returnFundsFor(address)": [
                1081,
                273
            ],
            "buyWithTokensBy(address,address)": [
                1804,
                471
            ]
        },
        "block_CALL_mapping": {
            "jump4095_0": [
                "_user.transfer(ethBalances[_user])",
                "_user.transfer(ethBalances[_user])"
            ],
            "block4800_0": [
                "token.transfer(_user, userTokenValue)"
            ],
            "block6455_0": [
                "token.balanceOf(address(this))"
            ],
            "jump6731_0": [
                "token.transferFrom(_user, address(this), tokensToSend)",
                "token.transferFrom(_user, address(this), tokensToSend)"
            ],
            "jump7730_0": [
                "_escrow.transfer(this.balance)",
                "_escrow.transfer(this.balance)"
            ],
            "jump6455": [
                "token.balanceOf(address(this))",
                "token.balanceOf(address(this))"
            ],
            "jump6227": [
                "token.allowance(_user, address(this))",
                "token.allowance(_user, address(this))"
            ],
            "jump6731": [
                "token.transferFrom(_user, address(this), tokensToSend)",
                "token.transferFrom(_user, address(this), tokensToSend)"
            ],
            "block8057": [
                "token.balanceOf(address(this))"
            ],
            "block4095_0": [
                "_user.transfer(ethBalances[_user])"
            ],
            "block6227": [
                "token.allowance(_user, address(this))"
            ],
            "block6955": [
                "token.balanceOf(address(this))"
            ],
            "block4095": [
                "_user.transfer(ethBalances[_user])"
            ],
            "jump6955_0": [
                "token.balanceOf(address(this))",
                "token.balanceOf(address(this))"
            ],
            "jump6955": [
                "token.balanceOf(address(this))",
                "token.balanceOf(address(this))"
            ],
            "block6455": [
                "token.balanceOf(address(this))"
            ],
            "jump4800_0": [
                "token.transfer(_user, userTokenValue)",
                "token.transfer(_user, userTokenValue)"
            ],
            "block4800": [
                "token.transfer(_user, userTokenValue)"
            ],
            "block6731": [
                "token.transferFrom(_user, address(this), tokensToSend)"
            ],
            "jump4800": [
                "token.transfer(_user, userTokenValue)",
                "token.transfer(_user, userTokenValue)"
            ],
            "block8290_0": [
                "token.transfer(_escrow, tokenBalance)"
            ],
            "block7730_0": [
                "_escrow.transfer(this.balance)"
            ],
            "block6227_0": [
                "token.allowance(_user, address(this))"
            ],
            "jump6455_0": [
                "token.balanceOf(address(this))",
                "token.balanceOf(address(this))"
            ],
            "jump6227_0": [
                "token.allowance(_user, address(this))",
                "token.allowance(_user, address(this))"
            ],
            "block8057_0": [
                "token.balanceOf(address(this))"
            ],
            "block6731_0": [
                "token.transferFrom(_user, address(this), tokensToSend)"
            ],
            "jump8290_0": [
                "token.transfer(_escrow, tokenBalance)",
                "token.transfer(_escrow, tokenBalance)"
            ],
            "block6955_0": [
                "token.balanceOf(address(this))"
            ],
            "jump7730": [
                "_escrow.transfer(this.balance)",
                "_escrow.transfer(this.balance)"
            ],
            "block7730": [
                "_escrow.transfer(this.balance)"
            ],
            "jump8290": [
                "token.transfer(_escrow, tokenBalance)",
                "token.transfer(_escrow, tokenBalance)"
            ],
            "jump8057_0": [
                "token.balanceOf(address(this))",
                "token.balanceOf(address(this))"
            ],
            "jump4095": [
                "_user.transfer(ethBalances[_user])",
                "_user.transfer(ethBalances[_user])"
            ],
            "jump8057": [
                "token.balanceOf(address(this))",
                "token.balanceOf(address(this))"
            ],
            "block8290": [
                "token.transfer(_escrow, tokenBalance)"
            ]
        }
    }
}