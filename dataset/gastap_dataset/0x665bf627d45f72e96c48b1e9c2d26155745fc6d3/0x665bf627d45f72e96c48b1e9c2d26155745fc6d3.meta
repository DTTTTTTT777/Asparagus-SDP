{
    "token": {
        "function_list": [
            "transfer(address,uint256)"
        ],
        "initial_state": {
            "transfer(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transfer(address,uint256)": [
                1038,
                251
            ]
        },
        "block_CALL_mapping": {
            "jump3650": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "block3650": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "BittrexOpenSourceCloneCrowdsale": {
        "function_list": [
            "BittrexOpenSourceCloneCrowdsale(address,address)",
            "fallback()",
            "bank()",
            "returnUnsold()",
            "returnUnsoldSafe()"
        ],
        "initial_state": {
            "BittrexOpenSourceCloneCrowdsale(address,address)": {
                "argument": {},
                "contract": {
                    "amountRaised": "uint256",
                    "currentBalance": "uint256",
                    "price": "uint256",
                    "initialTokenAmount": "uint256",
                    "currentTokenAmount": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "amountRaised": "uint256",
                    "currentBalance": "uint256",
                    "price": "uint256",
                    "initialTokenAmount": "uint256",
                    "currentTokenAmount": "uint256"
                }
            },
            "bank()": {
                "argument": {},
                "contract": {
                    "amountRaised": "uint256",
                    "currentBalance": "uint256",
                    "price": "uint256",
                    "initialTokenAmount": "uint256",
                    "currentTokenAmount": "uint256"
                }
            },
            "returnUnsold()": {
                "argument": {},
                "contract": {
                    "amountRaised": "uint256",
                    "currentBalance": "uint256",
                    "price": "uint256",
                    "initialTokenAmount": "uint256",
                    "currentTokenAmount": "uint256"
                }
            },
            "returnUnsoldSafe()": {
                "argument": {},
                "contract": {
                    "amountRaised": "uint256",
                    "currentBalance": "uint256",
                    "price": "uint256",
                    "initialTokenAmount": "uint256",
                    "currentTokenAmount": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "returnUnsoldSafe()": [
                992,
                251
            ],
            "returnUnsold()": [
                969,
                229
            ],
            "bank()": [
                860,
                163
            ]
        },
        "block_CALL_mapping": {
            "block1707": [
                "tokenReward.transfer(beneficiary, currentTokenAmount * 1 ether)"
            ],
            "block527": [
                "tokenReward.transfer(msg.sender, tokenAmount * 1 ether)"
            ],
            "jump527_0": [
                "tokenReward.transfer(msg.sender, tokenAmount * 1 ether)",
                "tokenReward.transfer(msg.sender, tokenAmount * 1 ether)"
            ],
            "block2067": [
                "tokenReward.transfer(beneficiary, tokenAmount * 1 ether)"
            ],
            "jump527": [
                "tokenReward.transfer(msg.sender, tokenAmount * 1 ether)",
                "tokenReward.transfer(msg.sender, tokenAmount * 1 ether)"
            ],
            "block527_0": [
                "tokenReward.transfer(msg.sender, tokenAmount * 1 ether)"
            ],
            "jump2067": [
                "tokenReward.transfer(beneficiary, tokenAmount * 1 ether)",
                "tokenReward.transfer(beneficiary, tokenAmount * 1 ether)"
            ],
            "block1265": [
                "beneficiary.send(amountToSend)"
            ],
            "jump1707": [
                "tokenReward.transfer(beneficiary, currentTokenAmount * 1 ether)",
                "tokenReward.transfer(beneficiary, currentTokenAmount * 1 ether)"
            ]
        }
    }
}