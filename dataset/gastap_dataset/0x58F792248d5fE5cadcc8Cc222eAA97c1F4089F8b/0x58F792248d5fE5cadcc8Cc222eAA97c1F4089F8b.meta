{
    "PassManager": {
        "function_list": [
            "Client()",
            "ClosingTimeForCloning()",
            "totalSupply()",
            "balanceOf(address)",
            "allowance(address,address)",
            "FundedAmount(uint256)",
            "priceDivisor(uint256)",
            "actualPriceDivisor()",
            "fundingMaxAmount(address)",
            "numberOfHolders()",
            "HolderAddress(uint256)",
            "numberOfProposals()",
            "cloneProposal(uint256,string,bytes32,uint256,uint256,uint256,uint256)",
            "initialTokenSupply(address,uint256)",
            "cloneTokens(uint256,uint256)",
            "closeSetup()",
            "updateRecipient(address)",
            "fallback()",
            "withdraw(uint256)",
            "updateClient(address)",
            "newProposal(uint256,string,bytes32)",
            "order(uint256,uint256,uint256)",
            "sendTo(address,uint256)",
            "addHolder(address)",
            "createInitialTokens(address,uint256)",
            "setTokenPriceProposal(uint256,uint256,uint256)",
            "setFundingRules(address,bool,uint256,uint256,uint256,uint256,uint256)",
            "createToken(address,uint256,uint256)",
            "setFundingStartTime(uint256)",
            "rewardToken(address,uint256,uint256)",
            "closeFunding()",
            "setFundingFueled()",
            "ableTransfer()",
            "disableTransfer(uint256)",
            "blockTransfer(address,uint256)",
            "buyShares()",
            "buySharesFor(address)",
            "transferFromTo(address,address,uint256)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "Client()",
            "ClosingTimeForCloning()",
            "totalSupply()",
            "balanceOf(address)",
            "allowance(address,address)",
            "FundedAmount(uint256)",
            "priceDivisor(uint256)",
            "actualPriceDivisor()",
            "fundingMaxAmount(address)",
            "numberOfHolders()",
            "HolderAddress(uint256)",
            "numberOfProposals()",
            "PassManager(address,address,address,address,string,string,uint8,bool)",
            "cloneProposal(uint256,string,bytes32,uint256,uint256,uint256,uint256)",
            "initialTokenSupply(address,uint256)",
            "cloneTokens(uint256,uint256)",
            "closeSetup()",
            "fallback()",
            "updateRecipient(address)",
            "withdraw(uint256)",
            "updateClient(address)",
            "newProposal(uint256,string,bytes32)",
            "order(uint256,uint256,uint256)",
            "sendTo(address,uint256)",
            "addHolder(address)",
            "createInitialTokens(address,uint256)",
            "setTokenPriceProposal(uint256,uint256,uint256)",
            "setFundingRules(address,bool,uint256,uint256,uint256,uint256,uint256)",
            "createToken(address,uint256,uint256)",
            "setFundingStartTime(uint256)",
            "rewardToken(address,uint256,uint256)",
            "closeFunding()",
            "setFundingFueled()",
            "ableTransfer()",
            "disableTransfer(uint256)",
            "blockTransfer(address,uint256)",
            "buyShares()",
            "buySharesFor(address)",
            "transferFromTo(address,address,uint256)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "Client()": {
                "argument": {},
                "contract": {}
            },
            "ClosingTimeForCloning()": {
                "argument": {},
                "contract": {}
            },
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "FundedAmount(uint256)": {
                "argument": {
                    "_proposalID": "uint256"
                },
                "contract": {}
            },
            "priceDivisor(uint256)": {
                "argument": {
                    "_saleDate": "uint256"
                },
                "contract": {}
            },
            "actualPriceDivisor()": {
                "argument": {},
                "contract": {}
            },
            "fundingMaxAmount(address)": {
                "argument": {},
                "contract": {}
            },
            "numberOfHolders()": {
                "argument": {},
                "contract": {}
            },
            "HolderAddress(uint256)": {
                "argument": {
                    "_index": "uint256"
                },
                "contract": {}
            },
            "numberOfProposals()": {
                "argument": {},
                "contract": {}
            },
            "cloneProposal(uint256,string,bytes32,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_amount": "uint256",
                    "_description": "string",
                    "_hashOfTheDocument": "bytes32",
                    "_dateOfProposal": "uint256",
                    "_lastClientProposalID": "uint256",
                    "_orderAmount": "uint256",
                    "_dateOfOrder": "uint256"
                },
                "contract": {}
            },
            "initialTokenSupply(address,uint256)": {
                "argument": {
                    "_quantity": "uint256"
                },
                "contract": {}
            },
            "cloneTokens(uint256,uint256)": {
                "argument": {
                    "_from": "uint256",
                    "_to": "uint256"
                },
                "contract": {}
            },
            "closeSetup()": {
                "argument": {},
                "contract": {}
            },
            "updateRecipient(address)": {
                "argument": {},
                "contract": {}
            },
            "fallback()": {
                "argument": {},
                "contract": {}
            },
            "withdraw(uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "updateClient(address)": {
                "argument": {},
                "contract": {}
            },
            "newProposal(uint256,string,bytes32)": {
                "argument": {
                    "_amount": "uint256",
                    "_description": "string",
                    "_hashOfTheDocument": "bytes32"
                },
                "contract": {}
            },
            "order(uint256,uint256,uint256)": {
                "argument": {
                    "_clientProposalID": "uint256",
                    "_proposalID": "uint256",
                    "_orderAmount": "uint256"
                },
                "contract": {}
            },
            "sendTo(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "addHolder(address)": {
                "argument": {},
                "contract": {}
            },
            "createInitialTokens(address,uint256)": {
                "argument": {
                    "_quantity": "uint256"
                },
                "contract": {}
            },
            "setTokenPriceProposal(uint256,uint256,uint256)": {
                "argument": {
                    "_initialPriceMultiplier": "uint256",
                    "_inflationRate": "uint256",
                    "_closingTime": "uint256"
                },
                "contract": {}
            },
            "setFundingRules(address,bool,uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_initialPriceMultiplier": "uint256",
                    "_maxAmountToFund": "uint256",
                    "_minutesFundingPeriod": "uint256",
                    "_inflationRate": "uint256",
                    "_proposalID": "uint256"
                },
                "contract": {}
            },
            "createToken(address,uint256,uint256)": {
                "argument": {
                    "_amount": "uint256",
                    "_saleDate": "uint256"
                },
                "contract": {}
            },
            "setFundingStartTime(uint256)": {
                "argument": {
                    "_startTime": "uint256"
                },
                "contract": {}
            },
            "rewardToken(address,uint256,uint256)": {
                "argument": {
                    "_amount": "uint256",
                    "_date": "uint256"
                },
                "contract": {}
            },
            "closeFunding()": {
                "argument": {},
                "contract": {}
            },
            "setFundingFueled()": {
                "argument": {},
                "contract": {}
            },
            "ableTransfer()": {
                "argument": {},
                "contract": {}
            },
            "disableTransfer(uint256)": {
                "argument": {
                    "_closingTime": "uint256"
                },
                "contract": {}
            },
            "blockTransfer(address,uint256)": {
                "argument": {
                    "_deadLine": "uint256"
                },
                "contract": {}
            },
            "buyShares()": {
                "argument": {},
                "contract": {}
            },
            "buySharesFor(address)": {
                "argument": {},
                "contract": {}
            },
            "transferFromTo(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "PassManager(address,address,address,address,string,string,uint8,bool)": {
                "argument": {
                    "_tokenName": "string",
                    "_tokenSymbol": "string",
                    "_tokenDecimals": "uint8"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "HolderAddress(uint256)": [
                3862,
                911
            ],
            "cloneTokens(uint256,uint256)": [
                1330,
                207
            ],
            "ClosingTimeForCloning()": [
                9739,
                886
            ],
            "setFundingStartTime(uint256)": [
                2564,
                537
            ],
            "fundingMaxAmount(address)": [
                3971,
                933
            ],
            "transferFrom(address,address,uint256)": [
                1924,
                339
            ],
            "approve(address,uint256)": [
                1140,
                163
            ],
            "Client()": [
                10428,
                886
            ],
            "cloneProposal(uint256,string,bytes32,uint256,uint256,uint256,uint256)": [
                1409,
                229
            ],
            "numberOfHolders()": [
                5565,
                801
            ],
            "setFundingFueled()": [
                3839,
                889
            ],
            "buyShares()": [
                4277,
                1021
            ],
            "disableTransfer(uint256)": [
                4058,
                955
            ],
            "FundedAmount(uint256)": [
                2652,
                581
            ],
            "numberOfProposals()": [
                3021,
                691
            ],
            "setTokenPriceProposal(uint256,uint256,uint256)": [
                3774,
                867
            ],
            "order(uint256,uint256,uint256)": [
                1241,
                185
            ],
            "setFundingRules(address,bool,uint256,uint256,uint256,uint256,uint256)": [
                3645,
                845
            ],
            "initialTokenSupply(address,uint256)": [
                3342,
                779
            ],
            "withdraw(uint256)": [
                2057,
                361
            ],
            "ableTransfer()": [
                1901,
                317
            ],
            "updateRecipient(address)": [
                4493,
                1087
            ],
            "updateClient(address)": [
                2151,
                405
            ],
            "balanceOf(address)": [
                2804,
                625
            ],
            "buySharesFor(address)": [
                2367,
                449
            ],
            "sendTo(address,uint256)": [
                3443,
                801
            ],
            "totalSupply()": [
                1602,
                251
            ],
            "blockTransfer(address,uint256)": [
                2421,
                471
            ],
            "actualPriceDivisor()": [
                2891,
                647
            ],
            "closeSetup()": [
                2498,
                493
            ],
            "newProposal(uint256,string,bytes32)": [
                2218,
                427
            ],
            "rewardToken(address,uint256,uint256)": [
                1814,
                295
            ],
            "transfer(address,uint256)": [
                3544,
                823
            ],
            "allowance(address,address)": [
                4287,
                1043
            ]
        },
        "block_CALL_mapping": {
            "jump10428_6": [
                "daoManager.Client()",
                "daoManager.Client()"
            ],
            "jump10428": [
                "daoManager.Client()",
                "daoManager.Client()"
            ],
            "block10428": [
                "daoManager.Client()"
            ],
            "block7724": [
                "recipient.send(_amount)"
            ],
            "jump7724": [
                "recipient.send(_amount)",
                "recipient.send(_amount)"
            ],
            "block5761": [
                "_clonedFrom.HolderAddress(i)"
            ],
            "block6053": [
                "_clonedFrom.balanceOf(_holder)"
            ],
            "block9739_1": [
                "daoManager.ClosingTimeForCloning()"
            ],
            "block9739_0": [
                "daoManager.ClosingTimeForCloning()"
            ],
            "jump6053": [
                "_clonedFrom.balanceOf(_holder)",
                "_clonedFrom.balanceOf(_holder)"
            ],
            "jump5565": [
                "_clonedFrom.numberOfHolders()",
                "_clonedFrom.numberOfHolders()"
            ],
            "block9739": [
                "daoManager.ClosingTimeForCloning()"
            ],
            "jump9739_1": [
                "daoManager.ClosingTimeForCloning()",
                "daoManager.ClosingTimeForCloning()"
            ],
            "jump9739_0": [
                "daoManager.ClosingTimeForCloning()",
                "daoManager.ClosingTimeForCloning()"
            ],
            "jump10428_1": [
                "daoManager.Client()",
                "daoManager.Client()"
            ],
            "jump10428_0": [
                "daoManager.Client()",
                "daoManager.Client()"
            ],
            "jump10428_3": [
                "daoManager.Client()",
                "daoManager.Client()"
            ],
            "jump10428_2": [
                "daoManager.Client()",
                "daoManager.Client()"
            ],
            "block10428_3": [
                "daoManager.Client()"
            ],
            "block10428_2": [
                "daoManager.Client()"
            ],
            "block10428_1": [
                "daoManager.Client()"
            ],
            "block10428_0": [
                "daoManager.Client()"
            ],
            "jump10984": [
                "_recipient.send(_amount)",
                "_recipient.send(_amount)"
            ],
            "jump9739": [
                "daoManager.ClosingTimeForCloning()",
                "daoManager.ClosingTimeForCloning()"
            ],
            "block10428_6": [
                "daoManager.Client()"
            ],
            "block5565": [
                "_clonedFrom.numberOfHolders()"
            ],
            "block10428_5": [
                "daoManager.Client()"
            ],
            "jump5761": [
                "_clonedFrom.HolderAddress(i)",
                "_clonedFrom.HolderAddress(i)"
            ],
            "block10428_4": [
                "daoManager.Client()"
            ],
            "block10984": [
                "_recipient.send(_amount)"
            ],
            "jump10428_5": [
                "daoManager.Client()",
                "daoManager.Client()"
            ],
            "jump10428_4": [
                "daoManager.Client()",
                "daoManager.Client()"
            ]
        }
    },
    "PassDao": {
        "function_list": [
            "addContractor(address,uint256)",
            "cloneContractor(address,uint256)",
            "initDao(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
            "newBoardMeeting(uint256,uint256,uint256)",
            "newProposal(address,uint256,uint256,bool,bool,address,uint256,uint256,uint256,uint256)",
            "newDaoRulesProposal(uint256,uint256,uint256,uint256,uint256,bool,address,uint256,uint256)",
            "vote(uint256,bool)",
            "executeDecision(uint256)",
            "orderContractorProposal(uint256)",
            "withdrawBoardMeetingFees()",
            "PendingFees(address)",
            "minQuorum()",
            "numberOfContractors()",
            "numberOfBoardMeetings()",
            "PassDao(string,address)",
            "addContractor(address,uint256)",
            "cloneContractor(address,uint256)",
            "initDao(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
            "newBoardMeeting(uint256,uint256,uint256)",
            "newProposal(address,uint256,uint256,bool,bool,address,uint256,uint256,uint256,uint256)",
            "newDaoRulesProposal(uint256,uint256,uint256,uint256,uint256,bool,address,uint256,uint256)",
            "vote(uint256,bool)",
            "executeDecision(uint256)",
            "orderContractorProposal(uint256)",
            "withdrawBoardMeetingFees()",
            "PendingFees(address)",
            "minQuorum()",
            "numberOfContractors()",
            "numberOfBoardMeetings()"
        ],
        "initial_state": {
            "addContractor(address,uint256)": {
                "argument": {
                    "_creationDate": "uint256"
                },
                "contract": {}
            },
            "cloneContractor(address,uint256)": {
                "argument": {
                    "_creationDate": "uint256"
                },
                "contract": {}
            },
            "initDao(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_maxInflationRate": "uint256",
                    "_minMinutesPeriods": "uint256",
                    "_maxMinutesFundingPeriod": "uint256",
                    "_maxMinutesProposalPeriod": "uint256",
                    "_minQuorumDivisor": "uint256",
                    "_minBoardMeetingFees": "uint256",
                    "_minutesSetProposalPeriod": "uint256",
                    "_minMinutesDebatePeriod": "uint256",
                    "_feesRewardInflationRate": "uint256"
                },
                "contract": {}
            },
            "newBoardMeeting(uint256,uint256,uint256)": {
                "argument": {
                    "_proposalID": "uint256",
                    "_daoRulesProposalID": "uint256",
                    "_minutesDebatingPeriod": "uint256"
                },
                "contract": {}
            },
            "newProposal(address,uint256,uint256,bool,bool,address,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_contractorProposalID": "uint256",
                    "_amount": "uint256",
                    "_initialSharePriceMultiplier": "uint256",
                    "_inflationRate": "uint256",
                    "_minutesFundingPeriod": "uint256",
                    "_minutesDebatingPeriod": "uint256"
                },
                "contract": {}
            },
            "newDaoRulesProposal(uint256,uint256,uint256,uint256,uint256,bool,address,uint256,uint256)": {
                "argument": {
                    "_minQuorumDivisor": "uint256",
                    "_minBoardMeetingFees": "uint256",
                    "_minutesSetProposalPeriod": "uint256",
                    "_minMinutesDebatePeriod": "uint256",
                    "_feesRewardInflationRate": "uint256",
                    "_minutesForTokensCloning": "uint256",
                    "_minutesDebatingPeriod": "uint256"
                },
                "contract": {}
            },
            "vote(uint256,bool)": {
                "argument": {
                    "_boardMeetingID": "uint256"
                },
                "contract": {}
            },
            "executeDecision(uint256)": {
                "argument": {
                    "_boardMeetingID": "uint256"
                },
                "contract": {}
            },
            "orderContractorProposal(uint256)": {
                "argument": {
                    "_proposalID": "uint256"
                },
                "contract": {}
            },
            "withdrawBoardMeetingFees()": {
                "argument": {},
                "contract": {}
            },
            "PendingFees(address)": {
                "argument": {},
                "contract": {}
            },
            "minQuorum()": {
                "argument": {},
                "contract": {}
            },
            "numberOfContractors()": {
                "argument": {},
                "contract": {}
            },
            "numberOfBoardMeetings()": {
                "argument": {},
                "contract": {}
            },
            "PassDao(string,address)": {
                "argument": {
                    "_projectName": "string"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "executeDecision(uint256)": [
                756,
                163
            ],
            "newDaoRulesProposal(uint256,uint256,uint256,uint256,uint256,bool,address,uint256,uint256)": [
                2091,
                515
            ],
            "initDao(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": [
                1848,
                449
            ],
            "numberOfContractors()": [
                2864,
                647
            ],
            "numberOfBoardMeetings()": [
                912,
                207
            ],
            "cloneContractor(address,uint256)": [
                998,
                251
            ],
            "vote(uint256,bool)": [
                2247,
                537
            ],
            "PendingFees(address)": [
                825,
                185
            ],
            "withdrawBoardMeetingFees()": [
                1801,
                427
            ],
            "newProposal(address,uint256,uint256,bool,bool,address,uint256,uint256,uint256,uint256)": [
                1277,
                339
            ],
            "orderContractorProposal(uint256)": [
                2708,
                603
            ],
            "minQuorum()": [
                2048,
                493
            ]
        },
        "block_CALL_mapping": {
            "jump3560": [
                "daoManager.send(_balance)",
                "daoManager.send(_balance)"
            ],
            "jump5793": [
                "daoManager.updateClient(r.newdao)",
                "daoManager.updateClient(r.newdao)"
            ],
            "jump11058": [
                "daoManager.FundedAmount(_proposalID)",
                "daoManager.FundedAmount(_proposalID)"
            ],
            "jump4174": [
                "daoManager.setFundingRules(p.mainPartner, p.publicShareCreation, p.initialSharePriceMultiplier, \n                    p.amount, p.minutesFundingPeriod, p.inflationRate, b.proposalID)",
                "daoManager.setFundingRules(p.mainPartner, p.publicShareCreation, p.initialSharePriceMultiplier, \n                    p.amount, p.minutesFundingPeriod, p.inflationRate, b.proposalID)"
            ],
            "block4174": [
                "daoManager.setFundingRules(p.mainPartner, p.publicShareCreation, p.initialSharePriceMultiplier, \n                    p.amount, p.minutesFundingPeriod, p.inflationRate, b.proposalID)"
            ],
            "jump5077": [
                "daoManager.disableTransfer(0)",
                "daoManager.disableTransfer(0)"
            ],
            "block11058": [
                "daoManager.FundedAmount(_proposalID)"
            ],
            "jump4549": [
                "p.contractorManager.setFundingRules(p.mainPartner, p.publicShareCreation, 0, \n                        p.amount, p.minutesFundingPeriod, maxInflationRate, b.proposalID)",
                "p.contractorManager.setFundingRules(p.mainPartner, p.publicShareCreation, 0, \n                        p.amount, p.minutesFundingPeriod, maxInflationRate, b.proposalID)"
            ],
            "jump10386": [
                "daoManager.blockTransfer(msg.sender, b.votingDeadline)",
                "daoManager.blockTransfer(msg.sender, b.votingDeadline)"
            ],
            "block3560": [
                "daoManager.send(_balance)"
            ],
            "jump9825": [
                "daoManager.totalSupply()",
                "daoManager.totalSupply()"
            ],
            "block4549": [
                "p.contractorManager.setFundingRules(p.mainPartner, p.publicShareCreation, 0, \n                        p.amount, p.minutesFundingPeriod, maxInflationRate, b.proposalID)"
            ],
            "jump4902": [
                "daoManager.ableTransfer()",
                "daoManager.ableTransfer()"
            ],
            "block8422": [
                "daoManager.totalSupply()"
            ],
            "block9825": [
                "daoManager.totalSupply()"
            ],
            "block4902": [
                "daoManager.ableTransfer()"
            ],
            "block10386": [
                "daoManager.blockTransfer(msg.sender, b.votingDeadline)"
            ],
            "jump11364": [
                "p.contractorManager.order(_proposalID, p.contractorProposalID, _amount)",
                "p.contractorManager.order(_proposalID, p.contractorProposalID, _amount)"
            ],
            "jump5279": [
                "daoManager.disableTransfer(closingTimeForCloning)",
                "daoManager.disableTransfer(closingTimeForCloning)"
            ],
            "block5279": [
                "daoManager.disableTransfer(closingTimeForCloning)"
            ],
            "jump11668": [
                "daoManager.sendTo(p.contractorManager, _amount)",
                "daoManager.sendTo(p.contractorManager, _amount)"
            ],
            "block5793": [
                "daoManager.updateClient(r.newdao)"
            ],
            "block7735": [
                "msg.sender.send(_amount)"
            ],
            "block9335": [
                "daoManager.balanceOf(msg.sender)"
            ],
            "block8422_0": [
                "daoManager.totalSupply()"
            ],
            "jump7735": [
                "msg.sender.send(_amount)",
                "msg.sender.send(_amount)"
            ],
            "jump9335": [
                "daoManager.balanceOf(msg.sender)",
                "daoManager.balanceOf(msg.sender)"
            ],
            "jump8422": [
                "daoManager.totalSupply()",
                "daoManager.totalSupply()"
            ],
            "block5077": [
                "daoManager.disableTransfer(0)"
            ],
            "block11668": [
                "daoManager.sendTo(p.contractorManager, _amount)"
            ],
            "jump8422_0": [
                "daoManager.totalSupply()",
                "daoManager.totalSupply()"
            ],
            "block11364": [
                "p.contractorManager.order(_proposalID, p.contractorProposalID, _amount)"
            ]
        }
    }
}