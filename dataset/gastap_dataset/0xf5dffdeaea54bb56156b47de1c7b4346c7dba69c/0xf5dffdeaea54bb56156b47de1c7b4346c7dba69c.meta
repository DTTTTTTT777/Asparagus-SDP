{
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                70,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "SafeMath": {
        "function_list": [
            "ADD(uint256,uint256)",
            "SUB(uint256,uint256)"
        ],
        "initial_state": {
            "ADD(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "SUB(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Token": {
        "function_list": [
            "transfer(address,uint256)",
            "burn(uint256)"
        ],
        "initial_state": {
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "burn(uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "GEECrowdsale": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "GEECrowdsale(Token)",
            "fallback()",
            "finalize()",
            "buy()",
            "isCrowdsaleActive()",
            "getPrice()",
            "refund()",
            "drainEther()",
            "setEndBlockNumber(uint256)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {
                    "soldTokens": "uint256",
                    "hardCapInTokens": "uint256",
                    "MIN_ETHER": "uint256",
                    "MAX_ETHER": "uint256",
                    "START_BLOCK_NUMBER": "uint256",
                    "TIER2": "uint256",
                    "TIER3": "uint256",
                    "TIER4": "uint256",
                    "endBlockNumber": "uint256",
                    "MAX_END_BLOCK_NUMBER": "uint256",
                    "price": "uint256",
                    "TIER1_PRICE": "uint256",
                    "TIER2_PRICE": "uint256",
                    "TIER3_PRICE": "uint256",
                    "TIER4_PRICE": "uint256",
                    "SOFT_CAP_IN_ETHER": "uint256",
                    "collected": "uint256",
                    "GEE100": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "soldTokens": "uint256",
                    "hardCapInTokens": "uint256",
                    "MIN_ETHER": "uint256",
                    "MAX_ETHER": "uint256",
                    "START_BLOCK_NUMBER": "uint256",
                    "TIER2": "uint256",
                    "TIER3": "uint256",
                    "TIER4": "uint256",
                    "endBlockNumber": "uint256",
                    "MAX_END_BLOCK_NUMBER": "uint256",
                    "price": "uint256",
                    "TIER1_PRICE": "uint256",
                    "TIER2_PRICE": "uint256",
                    "TIER3_PRICE": "uint256",
                    "TIER4_PRICE": "uint256",
                    "SOFT_CAP_IN_ETHER": "uint256",
                    "collected": "uint256",
                    "GEE100": "uint256"
                }
            },
            "GEECrowdsale(Token)": {
                "argument": {},
                "contract": {
                    "soldTokens": "uint256",
                    "hardCapInTokens": "uint256",
                    "MIN_ETHER": "uint256",
                    "MAX_ETHER": "uint256",
                    "START_BLOCK_NUMBER": "uint256",
                    "TIER2": "uint256",
                    "TIER3": "uint256",
                    "TIER4": "uint256",
                    "endBlockNumber": "uint256",
                    "MAX_END_BLOCK_NUMBER": "uint256",
                    "price": "uint256",
                    "TIER1_PRICE": "uint256",
                    "TIER2_PRICE": "uint256",
                    "TIER3_PRICE": "uint256",
                    "TIER4_PRICE": "uint256",
                    "SOFT_CAP_IN_ETHER": "uint256",
                    "collected": "uint256",
                    "GEE100": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "soldTokens": "uint256",
                    "hardCapInTokens": "uint256",
                    "MIN_ETHER": "uint256",
                    "MAX_ETHER": "uint256",
                    "START_BLOCK_NUMBER": "uint256",
                    "TIER2": "uint256",
                    "TIER3": "uint256",
                    "TIER4": "uint256",
                    "endBlockNumber": "uint256",
                    "MAX_END_BLOCK_NUMBER": "uint256",
                    "price": "uint256",
                    "TIER1_PRICE": "uint256",
                    "TIER2_PRICE": "uint256",
                    "TIER3_PRICE": "uint256",
                    "TIER4_PRICE": "uint256",
                    "SOFT_CAP_IN_ETHER": "uint256",
                    "collected": "uint256",
                    "GEE100": "uint256"
                }
            },
            "finalize()": {
                "argument": {},
                "contract": {
                    "soldTokens": "uint256",
                    "hardCapInTokens": "uint256",
                    "MIN_ETHER": "uint256",
                    "MAX_ETHER": "uint256",
                    "START_BLOCK_NUMBER": "uint256",
                    "TIER2": "uint256",
                    "TIER3": "uint256",
                    "TIER4": "uint256",
                    "endBlockNumber": "uint256",
                    "MAX_END_BLOCK_NUMBER": "uint256",
                    "price": "uint256",
                    "TIER1_PRICE": "uint256",
                    "TIER2_PRICE": "uint256",
                    "TIER3_PRICE": "uint256",
                    "TIER4_PRICE": "uint256",
                    "SOFT_CAP_IN_ETHER": "uint256",
                    "collected": "uint256",
                    "GEE100": "uint256"
                }
            },
            "buy()": {
                "argument": {},
                "contract": {
                    "soldTokens": "uint256",
                    "hardCapInTokens": "uint256",
                    "MIN_ETHER": "uint256",
                    "MAX_ETHER": "uint256",
                    "START_BLOCK_NUMBER": "uint256",
                    "TIER2": "uint256",
                    "TIER3": "uint256",
                    "TIER4": "uint256",
                    "endBlockNumber": "uint256",
                    "MAX_END_BLOCK_NUMBER": "uint256",
                    "price": "uint256",
                    "TIER1_PRICE": "uint256",
                    "TIER2_PRICE": "uint256",
                    "TIER3_PRICE": "uint256",
                    "TIER4_PRICE": "uint256",
                    "SOFT_CAP_IN_ETHER": "uint256",
                    "collected": "uint256",
                    "GEE100": "uint256"
                }
            },
            "isCrowdsaleActive()": {
                "argument": {},
                "contract": {
                    "soldTokens": "uint256",
                    "hardCapInTokens": "uint256",
                    "MIN_ETHER": "uint256",
                    "MAX_ETHER": "uint256",
                    "START_BLOCK_NUMBER": "uint256",
                    "TIER2": "uint256",
                    "TIER3": "uint256",
                    "TIER4": "uint256",
                    "endBlockNumber": "uint256",
                    "MAX_END_BLOCK_NUMBER": "uint256",
                    "price": "uint256",
                    "TIER1_PRICE": "uint256",
                    "TIER2_PRICE": "uint256",
                    "TIER3_PRICE": "uint256",
                    "TIER4_PRICE": "uint256",
                    "SOFT_CAP_IN_ETHER": "uint256",
                    "collected": "uint256",
                    "GEE100": "uint256"
                }
            },
            "getPrice()": {
                "argument": {},
                "contract": {
                    "soldTokens": "uint256",
                    "hardCapInTokens": "uint256",
                    "MIN_ETHER": "uint256",
                    "MAX_ETHER": "uint256",
                    "START_BLOCK_NUMBER": "uint256",
                    "TIER2": "uint256",
                    "TIER3": "uint256",
                    "TIER4": "uint256",
                    "endBlockNumber": "uint256",
                    "MAX_END_BLOCK_NUMBER": "uint256",
                    "price": "uint256",
                    "TIER1_PRICE": "uint256",
                    "TIER2_PRICE": "uint256",
                    "TIER3_PRICE": "uint256",
                    "TIER4_PRICE": "uint256",
                    "SOFT_CAP_IN_ETHER": "uint256",
                    "collected": "uint256",
                    "GEE100": "uint256"
                }
            },
            "refund()": {
                "argument": {},
                "contract": {
                    "soldTokens": "uint256",
                    "hardCapInTokens": "uint256",
                    "MIN_ETHER": "uint256",
                    "MAX_ETHER": "uint256",
                    "START_BLOCK_NUMBER": "uint256",
                    "TIER2": "uint256",
                    "TIER3": "uint256",
                    "TIER4": "uint256",
                    "endBlockNumber": "uint256",
                    "MAX_END_BLOCK_NUMBER": "uint256",
                    "price": "uint256",
                    "TIER1_PRICE": "uint256",
                    "TIER2_PRICE": "uint256",
                    "TIER3_PRICE": "uint256",
                    "TIER4_PRICE": "uint256",
                    "SOFT_CAP_IN_ETHER": "uint256",
                    "collected": "uint256",
                    "GEE100": "uint256"
                }
            },
            "drainEther()": {
                "argument": {},
                "contract": {
                    "soldTokens": "uint256",
                    "hardCapInTokens": "uint256",
                    "MIN_ETHER": "uint256",
                    "MAX_ETHER": "uint256",
                    "START_BLOCK_NUMBER": "uint256",
                    "TIER2": "uint256",
                    "TIER3": "uint256",
                    "TIER4": "uint256",
                    "endBlockNumber": "uint256",
                    "MAX_END_BLOCK_NUMBER": "uint256",
                    "price": "uint256",
                    "TIER1_PRICE": "uint256",
                    "TIER2_PRICE": "uint256",
                    "TIER3_PRICE": "uint256",
                    "TIER4_PRICE": "uint256",
                    "SOFT_CAP_IN_ETHER": "uint256",
                    "collected": "uint256",
                    "GEE100": "uint256"
                }
            },
            "setEndBlockNumber(uint256)": {
                "argument": {
                    "_newEndBlockNumber": "uint256"
                },
                "contract": {
                    "soldTokens": "uint256",
                    "hardCapInTokens": "uint256",
                    "MIN_ETHER": "uint256",
                    "MAX_ETHER": "uint256",
                    "START_BLOCK_NUMBER": "uint256",
                    "TIER2": "uint256",
                    "TIER3": "uint256",
                    "TIER4": "uint256",
                    "endBlockNumber": "uint256",
                    "MAX_END_BLOCK_NUMBER": "uint256",
                    "price": "uint256",
                    "TIER1_PRICE": "uint256",
                    "TIER2_PRICE": "uint256",
                    "TIER3_PRICE": "uint256",
                    "TIER4_PRICE": "uint256",
                    "SOFT_CAP_IN_ETHER": "uint256",
                    "collected": "uint256",
                    "GEE100": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "soldTokens": "uint256",
                    "hardCapInTokens": "uint256",
                    "MIN_ETHER": "uint256",
                    "MAX_ETHER": "uint256",
                    "START_BLOCK_NUMBER": "uint256",
                    "TIER2": "uint256",
                    "TIER3": "uint256",
                    "TIER4": "uint256",
                    "endBlockNumber": "uint256",
                    "MAX_END_BLOCK_NUMBER": "uint256",
                    "price": "uint256",
                    "TIER1_PRICE": "uint256",
                    "TIER2_PRICE": "uint256",
                    "TIER3_PRICE": "uint256",
                    "TIER4_PRICE": "uint256",
                    "SOFT_CAP_IN_ETHER": "uint256",
                    "collected": "uint256",
                    "GEE100": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "drainEther()": [
                735,
                163
            ],
            "refund()": [
                996,
                317
            ],
            "buy()": [
                1494,
                537
            ],
            "setEndBlockNumber(uint256)": [
                1590,
                603
            ],
            "transferOwnership(address)": [
                1678,
                647
            ],
            "finalize()": [
                973,
                295
            ],
            "isCrowdsaleActive()": [
                559,
                75
            ]
        },
        "block_CALL_mapping": {
            "block2340_1": [
                "gee.transfer(msg.sender, amount)"
            ],
            "jump2360_1": [
                "fund.transfer(this.balance)",
                "fund.transfer(this.balance)"
            ],
            "jump2360_0": [
                "fund.transfer(this.balance)",
                "fund.transfer(this.balance)"
            ],
            "jump2340": [
                "gee.transfer(msg.sender, amount)",
                "gee.transfer(msg.sender, amount)"
            ],
            "block3188": [
                "gee.burn(hardCapInTokens.SUB(soldTokens))"
            ],
            "jump3327": [
                "msg.sender.transfer(refund)",
                "msg.sender.transfer(refund)"
            ],
            "block2340_0": [
                "gee.transfer(msg.sender, amount)"
            ],
            "jump2360": [
                "fund.transfer(this.balance)",
                "fund.transfer(this.balance)"
            ],
            "block2360": [
                "fund.transfer(this.balance)"
            ],
            "jump2340_0": [
                "gee.transfer(msg.sender, amount)",
                "gee.transfer(msg.sender, amount)"
            ],
            "jump2340_1": [
                "gee.transfer(msg.sender, amount)",
                "gee.transfer(msg.sender, amount)"
            ],
            "jump3188": [
                "gee.burn(hardCapInTokens.SUB(soldTokens))",
                "gee.burn(hardCapInTokens.SUB(soldTokens))"
            ],
            "block2690": [
                "fund.transfer(this.balance)"
            ],
            "block2340": [
                "gee.transfer(msg.sender, amount)"
            ],
            "block3327": [
                "msg.sender.transfer(refund)"
            ],
            "block2360_1": [
                "fund.transfer(this.balance)"
            ],
            "block2360_0": [
                "fund.transfer(this.balance)"
            ],
            "jump2690": [
                "fund.transfer(this.balance)",
                "fund.transfer(this.balance)"
            ]
        }
    }
}