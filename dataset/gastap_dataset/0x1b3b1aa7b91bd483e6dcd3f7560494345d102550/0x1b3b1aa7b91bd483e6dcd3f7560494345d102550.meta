{
    "SafeMath": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "assert(bool)"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "assert(bool)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Token": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "assert(bool)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "assert(bool)": {
                "argument": {},
                "contract": {}
            },
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                378,
                141
            ],
            "totalSupply()": [
                226,
                97
            ],
            "allowance(address,address)": [
                542,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                465,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "StdToken": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "safeMul(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "assert(bool)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "assert(bool)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                378,
                141
            ],
            "totalSupply()": [
                226,
                97
            ],
            "allowance(address,address)": [
                542,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                465,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "MNTP": {
        "function_list": [
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "safeMul(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "assert(bool)",
            "setCreator(address)",
            "setIcoContractAddress(address)",
            "MNTP()",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "issueTokens(address,uint256)",
            "burnTokens(address,uint256)",
            "lockTransfer(bool)",
            "fallback()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "assert(bool)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "setCreator(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "setIcoContractAddress(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "MNTP()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "issueTokens(address,uint256)": {
                "argument": {
                    "_tokens": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "burnTokens(address,uint256)": {
                "argument": {
                    "_tokens": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "lockTransfer(bool)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256",
                    "TOTAL_TOKEN_SUPPLY": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                501,
                119
            ],
            "setCreator(address)": [
                988,
                273
            ],
            "issueTokens(address,uint256)": [
                1055,
                295
            ],
            "setIcoContractAddress(address)": [
                679,
                163
            ],
            "totalSupply()": [
                746,
                185
            ],
            "burnTokens(address,uint256)": [
                602,
                141
            ],
            "balanceOf(address)": [
                1132,
                317
            ],
            "transferFrom(address,address,uint256)": [
                836,
                229
            ],
            "lockTransfer(bool)": [
                789,
                207
            ],
            "allowance(address,address)": [
                1617,
                449
            ],
            "transfer(address,uint256)": [
                1497,
                405
            ]
        },
        "block_CALL_mapping": {}
    },
    "GoldmintUnsold": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "assert(bool)",
            "GoldmintUnsold(address,address)",
            "setIcoContractAddress(address)",
            "icoIsFinished()",
            "withdrawTokens()",
            "fallback()"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "icoIsFinishedDate": "uint64"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "icoIsFinishedDate": "uint64"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "icoIsFinishedDate": "uint64"
                }
            },
            "assert(bool)": {
                "argument": {},
                "contract": {
                    "icoIsFinishedDate": "uint64"
                }
            },
            "GoldmintUnsold(address,address)": {
                "argument": {},
                "contract": {
                    "icoIsFinishedDate": "uint64"
                }
            },
            "setIcoContractAddress(address)": {
                "argument": {},
                "contract": {
                    "icoIsFinishedDate": "uint64"
                }
            },
            "icoIsFinished()": {
                "argument": {},
                "contract": {
                    "icoIsFinishedDate": "uint64"
                }
            },
            "withdrawTokens()": {
                "argument": {},
                "contract": {
                    "icoIsFinishedDate": "uint64"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "icoIsFinishedDate": "uint64"
                }
            }
        },
        "function_block_mapping": {
            "setIcoContractAddress(address)": [
                234,
                97
            ],
            "icoIsFinished()": [
                474,
                185
            ],
            "withdrawTokens()": [
                451,
                163
            ]
        },
        "block_CALL_mapping": {
            "jump1177": [
                "mntToken.balanceOf(this)",
                "mntToken.balanceOf(this)"
            ],
            "block1177": [
                "mntToken.balanceOf(this)"
            ],
            "jump1469": [
                "mntToken.transfer(teamAccountAddress,total)",
                "mntToken.transfer(teamAccountAddress,total)"
            ],
            "block1469": [
                "mntToken.transfer(teamAccountAddress,total)"
            ]
        }
    },
    "FoundersVesting": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "assert(bool)",
            "FoundersVesting(address,address)",
            "withdrawTokens()",
            "fallback()",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "lastWithdrawTime": "uint64",
                    "withdrawsCount": "uint256",
                    "amountToSend": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "lastWithdrawTime": "uint64",
                    "withdrawsCount": "uint256",
                    "amountToSend": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "lastWithdrawTime": "uint64",
                    "withdrawsCount": "uint256",
                    "amountToSend": "uint256"
                }
            },
            "assert(bool)": {
                "argument": {},
                "contract": {
                    "lastWithdrawTime": "uint64",
                    "withdrawsCount": "uint256",
                    "amountToSend": "uint256"
                }
            },
            "FoundersVesting(address,address)": {
                "argument": {},
                "contract": {
                    "lastWithdrawTime": "uint64",
                    "withdrawsCount": "uint256",
                    "amountToSend": "uint256"
                }
            },
            "withdrawTokens()": {
                "argument": {},
                "contract": {
                    "lastWithdrawTime": "uint64",
                    "withdrawsCount": "uint256",
                    "amountToSend": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "lastWithdrawTime": "uint64",
                    "withdrawsCount": "uint256",
                    "amountToSend": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "withdrawTokens()": [
                353,
                141
            ]
        },
        "block_CALL_mapping": {
            "jump1231": [
                "mntToken.transfer(teamAccountAddress,amountToSend)",
                "mntToken.transfer(teamAccountAddress,amountToSend)"
            ],
            "block1231": [
                "mntToken.transfer(teamAccountAddress,amountToSend)"
            ],
            "jump907": [
                "mntToken.balanceOf(this)",
                "mntToken.balanceOf(this)"
            ],
            "block907": [
                "mntToken.balanceOf(this)"
            ]
        }
    },
    "Goldmint": {
        "function_list": [
            "safeMul(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "assert(bool)",
            "Goldmint(address,address,address,address,address,address)",
            "startICO()",
            "pauseICO()",
            "finishICO()",
            "mintFoundersRewards(address)",
            "setTokenManager(address)",
            "setOtherCurrenciesChecker(address)",
            "getTokensIcoSold()",
            "getTotalIcoTokens()",
            "getMntTokenBalance(address)",
            "getCurrentPrice()",
            "getBlockLength()",
            "isIcoFinished()",
            "setState(Goldmint.State)",
            "getMntTokensPerEth(uint256)",
            "buyTokens(address)",
            "issueTokensFromOtherCurrency(address,uint256)",
            "issueTokensExternal(address,uint256)",
            "issueTokensInternal(address,uint256)",
            "burnTokens(address,uint256)",
            "fallback()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "assert(bool)": {
                "argument": {},
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "Goldmint(address,address,address,address,address,address)": {
                "argument": {},
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "startICO()": {
                "argument": {},
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "pauseICO()": {
                "argument": {},
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "finishICO()": {
                "argument": {},
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "mintFoundersRewards(address)": {
                "argument": {},
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "setTokenManager(address)": {
                "argument": {},
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "setOtherCurrenciesChecker(address)": {
                "argument": {},
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "getTokensIcoSold()": {
                "argument": {},
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "getTotalIcoTokens()": {
                "argument": {},
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "getMntTokenBalance(address)": {
                "argument": {},
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "getCurrentPrice()": {
                "argument": {},
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "getBlockLength()": {
                "argument": {},
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "isIcoFinished()": {
                "argument": {},
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "setState(Goldmint.State)": {
                "argument": {},
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "getMntTokensPerEth(uint256)": {
                "argument": {
                    "tokensSold": "uint256"
                },
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "buyTokens(address)": {
                "argument": {},
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "issueTokensFromOtherCurrency(address,uint256)": {
                "argument": {
                    "_wei_count": "uint256"
                },
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "issueTokensExternal(address,uint256)": {
                "argument": {
                    "_tokens": "uint256"
                },
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "issueTokensInternal(address,uint256)": {
                "argument": {
                    "_tokens": "uint256"
                },
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "burnTokens(address,uint256)": {
                "argument": {
                    "_tokens": "uint256"
                },
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "icoStartedTime": "uint64",
                    "STD_PRICE_USD_PER_1000_TOKENS": "uint256",
                    "ETH_PRICE_IN_USD": "uint256",
                    "SINGLE_BLOCK_LEN": "uint256",
                    "BONUS_REWARD": "uint256",
                    "FOUNDERS_REWARD": "uint256",
                    "ICO_TOKEN_SUPPLY_LIMIT": "uint256",
                    "icoTokensSold": "uint256",
                    "icoTokensUnsold": "uint256",
                    "issuedExternallyTokens": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "setTokenManager(address)": [
                1228,
                339
            ],
            "getCurrentPrice()": [
                2109,
                669
            ],
            "burnTokens(address,uint256)": [
                3055,
                946
            ],
            "getTokensIcoSold()": [
                1138,
                295
            ],
            "getMntTokenBalance(address)": [
                1794,
                559
            ],
            "getMntTokensPerEth(uint256)": [
                2044,
                647
            ],
            "isIcoFinished()": [
                1181,
                317
            ],
            "getTotalIcoTokens()": [
                2336,
                757
            ],
            "issueTokensFromOtherCurrency(address,uint256)": [
                1061,
                273
            ],
            "issueTokensExternal(address,uint256)": [
                1881,
                581
            ],
            "buyTokens(address)": [
                2152,
                691
            ],
            "getBlockLength()": [
                1958,
                603
            ],
            "setOtherCurrenciesChecker(address)": [
                504,
                97
            ]
        },
        "block_CALL_mapping": {
            "block6110_1": [
                "mntToken.issueTokens(_to,_tokens)"
            ],
            "block6110_0": [
                "mntToken.issueTokens(_to,_tokens)"
            ],
            "block6110": [
                "mntToken.issueTokens(_to,_tokens)"
            ],
            "block7336": [
                "multisigAddress.send(this.balance)"
            ],
            "jump5452": [
                "mntToken.issueTokens(_to,_tokens)",
                "mntToken.issueTokens(_to,_tokens)"
            ],
            "jump8089": [
                "mntToken.issueTokens(_whereToMint,FOUNDERS_REWARD)",
                "mntToken.issueTokens(_whereToMint,FOUNDERS_REWARD)"
            ],
            "jump6775": [
                "mntToken.lockTransfer(false)",
                "mntToken.lockTransfer(false)"
            ],
            "jump3055": [
                "mntToken.burnTokens(_from,_tokens)",
                "mntToken.burnTokens(_from,_tokens)"
            ],
            "block7700": [
                "mntToken.lockTransfer(false)"
            ],
            "block6110_2": [
                "mntToken.issueTokens(_to,_tokens)"
            ],
            "block5452": [
                "mntToken.issueTokens(_to,_tokens)"
            ],
            "jump7700": [
                "mntToken.lockTransfer(false)",
                "mntToken.lockTransfer(false)"
            ],
            "jump5017": [
                "mntToken.balanceOf(_of)",
                "mntToken.balanceOf(_of)"
            ],
            "jump7336": [
                "multisigAddress.send(this.balance)",
                "multisigAddress.send(this.balance)"
            ],
            "jump7119": [
                "mntToken.issueTokens(unsoldContract,icoTokensUnsold)",
                "mntToken.issueTokens(unsoldContract,icoTokensUnsold)"
            ],
            "block3055": [
                "mntToken.burnTokens(_from,_tokens)"
            ],
            "jump6110_2": [
                "mntToken.issueTokens(_to,_tokens)",
                "mntToken.issueTokens(_to,_tokens)"
            ],
            "jump6110_1": [
                "mntToken.issueTokens(_to,_tokens)",
                "mntToken.issueTokens(_to,_tokens)"
            ],
            "jump6110_0": [
                "mntToken.issueTokens(_to,_tokens)",
                "mntToken.issueTokens(_to,_tokens)"
            ],
            "block6516": [
                "mntToken.lockTransfer(true)"
            ],
            "jump6110": [
                "mntToken.issueTokens(_to,_tokens)",
                "mntToken.issueTokens(_to,_tokens)"
            ],
            "block6775": [
                "mntToken.lockTransfer(false)"
            ],
            "block8089": [
                "mntToken.issueTokens(_whereToMint,FOUNDERS_REWARD)"
            ],
            "jump6516": [
                "mntToken.lockTransfer(true)",
                "mntToken.lockTransfer(true)"
            ],
            "block5017": [
                "mntToken.balanceOf(_of)"
            ],
            "block7119": [
                "mntToken.issueTokens(unsoldContract,icoTokensUnsold)"
            ],
            "block7277": [
                "unsoldContract.icoIsFinished()"
            ],
            "jump7277": [
                "unsoldContract.icoIsFinished()",
                "unsoldContract.icoIsFinished()"
            ]
        }
    }
}