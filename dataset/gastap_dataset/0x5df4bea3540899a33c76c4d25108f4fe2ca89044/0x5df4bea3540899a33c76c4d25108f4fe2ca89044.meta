{
    "RPS": {
        "function_list": [
            "RPS(address)",
            "getGames()",
            "totalProfit(address)",
            "computeNameFuzzyHash(string)",
            "validateNameInternal(string)",
            "fallback()",
            "setName(string)",
            "createGame(bytes32,uint256,address)",
            "abortGame(uint256)",
            "joinGame(uint256,uint8)",
            "revealMove(uint256,uint8,string)",
            "forfeitGame(uint256)",
            "claimGame(uint256)",
            "donate()",
            "deposit()",
            "withdraw()",
            "pause(bool)",
            "expire(bool)",
            "setOwner1(address)",
            "setOwner2(address)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "RPS(address)": {
                "argument": {},
                "contract": {
                    "feeDivisor": "uint8",
                    "revealTime": "uint256",
                    "gameIdCounter": "uint256",
                    "minimumNameLength": "uint256",
                    "maximumNameLength": "uint256",
                    "games": "RPS.Game[]"
                }
            },
            "getGames()": {
                "argument": {},
                "contract": {
                    "feeDivisor": "uint8",
                    "revealTime": "uint256",
                    "gameIdCounter": "uint256",
                    "minimumNameLength": "uint256",
                    "maximumNameLength": "uint256",
                    "games": "RPS.Game[]"
                }
            },
            "totalProfit(address)": {
                "argument": {},
                "contract": {
                    "feeDivisor": "uint8",
                    "revealTime": "uint256",
                    "gameIdCounter": "uint256",
                    "minimumNameLength": "uint256",
                    "maximumNameLength": "uint256",
                    "games": "RPS.Game[]"
                }
            },
            "computeNameFuzzyHash(string)": {
                "argument": {
                    "_name": "string"
                },
                "contract": {
                    "feeDivisor": "uint8",
                    "revealTime": "uint256",
                    "gameIdCounter": "uint256",
                    "minimumNameLength": "uint256",
                    "maximumNameLength": "uint256",
                    "games": "RPS.Game[]"
                }
            },
            "validateNameInternal(string)": {
                "argument": {
                    "_name": "string"
                },
                "contract": {
                    "feeDivisor": "uint8",
                    "revealTime": "uint256",
                    "gameIdCounter": "uint256",
                    "minimumNameLength": "uint256",
                    "maximumNameLength": "uint256",
                    "games": "RPS.Game[]"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "feeDivisor": "uint8",
                    "revealTime": "uint256",
                    "gameIdCounter": "uint256",
                    "minimumNameLength": "uint256",
                    "maximumNameLength": "uint256",
                    "games": "RPS.Game[]"
                }
            },
            "setName(string)": {
                "argument": {
                    "name": "string"
                },
                "contract": {
                    "feeDivisor": "uint8",
                    "revealTime": "uint256",
                    "gameIdCounter": "uint256",
                    "minimumNameLength": "uint256",
                    "maximumNameLength": "uint256",
                    "games": "RPS.Game[]"
                }
            },
            "createGame(bytes32,uint256,address)": {
                "argument": {
                    "move": "bytes32",
                    "val": "uint256"
                },
                "contract": {
                    "feeDivisor": "uint8",
                    "revealTime": "uint256",
                    "gameIdCounter": "uint256",
                    "minimumNameLength": "uint256",
                    "maximumNameLength": "uint256",
                    "games": "RPS.Game[]"
                }
            },
            "abortGame(uint256)": {
                "argument": {
                    "gameId": "uint256"
                },
                "contract": {
                    "feeDivisor": "uint8",
                    "revealTime": "uint256",
                    "gameIdCounter": "uint256",
                    "minimumNameLength": "uint256",
                    "maximumNameLength": "uint256",
                    "games": "RPS.Game[]"
                }
            },
            "joinGame(uint256,uint8)": {
                "argument": {
                    "gameId": "uint256",
                    "move": "uint8"
                },
                "contract": {
                    "feeDivisor": "uint8",
                    "revealTime": "uint256",
                    "gameIdCounter": "uint256",
                    "minimumNameLength": "uint256",
                    "maximumNameLength": "uint256",
                    "games": "RPS.Game[]"
                }
            },
            "revealMove(uint256,uint8,string)": {
                "argument": {
                    "gameId": "uint256",
                    "move": "uint8",
                    "secret": "string"
                },
                "contract": {
                    "feeDivisor": "uint8",
                    "revealTime": "uint256",
                    "gameIdCounter": "uint256",
                    "minimumNameLength": "uint256",
                    "maximumNameLength": "uint256",
                    "games": "RPS.Game[]"
                }
            },
            "forfeitGame(uint256)": {
                "argument": {
                    "gameId": "uint256"
                },
                "contract": {
                    "feeDivisor": "uint8",
                    "revealTime": "uint256",
                    "gameIdCounter": "uint256",
                    "minimumNameLength": "uint256",
                    "maximumNameLength": "uint256",
                    "games": "RPS.Game[]"
                }
            },
            "claimGame(uint256)": {
                "argument": {
                    "gameId": "uint256"
                },
                "contract": {
                    "feeDivisor": "uint8",
                    "revealTime": "uint256",
                    "gameIdCounter": "uint256",
                    "minimumNameLength": "uint256",
                    "maximumNameLength": "uint256",
                    "games": "RPS.Game[]"
                }
            },
            "donate()": {
                "argument": {},
                "contract": {
                    "feeDivisor": "uint8",
                    "revealTime": "uint256",
                    "gameIdCounter": "uint256",
                    "minimumNameLength": "uint256",
                    "maximumNameLength": "uint256",
                    "games": "RPS.Game[]"
                }
            },
            "deposit()": {
                "argument": {},
                "contract": {
                    "feeDivisor": "uint8",
                    "revealTime": "uint256",
                    "gameIdCounter": "uint256",
                    "minimumNameLength": "uint256",
                    "maximumNameLength": "uint256",
                    "games": "RPS.Game[]"
                }
            },
            "withdraw()": {
                "argument": {},
                "contract": {
                    "feeDivisor": "uint8",
                    "revealTime": "uint256",
                    "gameIdCounter": "uint256",
                    "minimumNameLength": "uint256",
                    "maximumNameLength": "uint256",
                    "games": "RPS.Game[]"
                }
            },
            "pause(bool)": {
                "argument": {},
                "contract": {
                    "feeDivisor": "uint8",
                    "revealTime": "uint256",
                    "gameIdCounter": "uint256",
                    "minimumNameLength": "uint256",
                    "maximumNameLength": "uint256",
                    "games": "RPS.Game[]"
                }
            },
            "expire(bool)": {
                "argument": {},
                "contract": {
                    "feeDivisor": "uint8",
                    "revealTime": "uint256",
                    "gameIdCounter": "uint256",
                    "minimumNameLength": "uint256",
                    "maximumNameLength": "uint256",
                    "games": "RPS.Game[]"
                }
            },
            "setOwner1(address)": {
                "argument": {},
                "contract": {
                    "feeDivisor": "uint8",
                    "revealTime": "uint256",
                    "gameIdCounter": "uint256",
                    "minimumNameLength": "uint256",
                    "maximumNameLength": "uint256",
                    "games": "RPS.Game[]"
                }
            },
            "setOwner2(address)": {
                "argument": {},
                "contract": {
                    "feeDivisor": "uint8",
                    "revealTime": "uint256",
                    "gameIdCounter": "uint256",
                    "minimumNameLength": "uint256",
                    "maximumNameLength": "uint256",
                    "games": "RPS.Game[]"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "feeDivisor": "uint8",
                    "revealTime": "uint256",
                    "gameIdCounter": "uint256",
                    "minimumNameLength": "uint256",
                    "maximumNameLength": "uint256",
                    "games": "RPS.Game[]"
                }
            }
        },
        "function_block_mapping": {
            "expire(bool)": [
                1505,
                339
            ],
            "forfeitGame(uint256)": [
                1650,
                383
            ],
            "pause(bool)": [
                346,
                75
            ],
            "setName(string)": [
                2110,
                493
            ],
            "createGame(bytes32,uint256,address)": [
                1552,
                361
            ],
            "abortGame(uint256)": [
                1719,
                405
            ],
            "setOwner1(address)": [
                650,
                119
            ],
            "setOwner2(address)": [
                1282,
                273
            ],
            "claimGame(uint256)": [
                804,
                163
            ],
            "withdraw()": [
                873,
                185
            ],
            "deposit()": [
                2308,
                537
            ],
            "totalProfit(address)": [
                1788,
                427
            ],
            "joinGame(uint256,uint8)": [
                2239,
                515
            ],
            "donate()": [
                2342,
                559
            ],
            "revealMove(uint256,uint8,string)": [
                1948,
                471
            ]
        },
        "block_CALL_mapping": {
            "block7165": [
                "thisGame.player2.transfer((thisGame.value*2) - fee*2)"
            ],
            "block4052": [
                "thisGame.player2.transfer((thisGame.value*2) - fee*2)"
            ],
            "block9476": [
                "winner.transfer((thisGame.value*2) - fee*2)"
            ],
            "jump9476": [
                "winner.transfer((thisGame.value*2) - fee*2)",
                "winner.transfer((thisGame.value*2) - fee*2)"
            ],
            "block7755": [
                "msg.sender.transfer(thisGame.value)"
            ],
            "jump7165": [
                "thisGame.player2.transfer((thisGame.value*2) - fee*2)",
                "thisGame.player2.transfer((thisGame.value*2) - fee*2)"
            ],
            "block4289": [
                "msg.sender.transfer(amount)"
            ],
            "jump4289": [
                "msg.sender.transfer(amount)",
                "msg.sender.transfer(amount)"
            ],
            "jump7755": [
                "msg.sender.transfer(thisGame.value)",
                "msg.sender.transfer(thisGame.value)"
            ],
            "jump4052": [
                "thisGame.player2.transfer((thisGame.value*2) - fee*2)",
                "thisGame.player2.transfer((thisGame.value*2) - fee*2)"
            ]
        }
    }
}