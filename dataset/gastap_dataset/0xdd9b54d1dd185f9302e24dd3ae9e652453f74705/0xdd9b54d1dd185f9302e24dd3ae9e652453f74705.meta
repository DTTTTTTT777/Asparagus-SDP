{
    "Owned": {
        "function_list": [
            "setOwner(address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "setOwner(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "setOwner(address)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "Delegated": {
        "function_list": [
            "setOwner(address)",
            "delegate(address)",
            "addDelegate(address)",
            "removeDelegate(address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "setOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "delegate(address)": {
                "argument": {},
                "contract": {}
            },
            "addDelegate(address)": {
                "argument": {},
                "contract": {}
            },
            "removeDelegate(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "addDelegate(address)": [
                426,
                163
            ],
            "setOwner(address)": [
                114,
                75
            ],
            "removeDelegate(address)": [
                272,
                119
            ],
            "delegate(address)": [
                181,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "FeeRegistrar": {
        "function_list": [
            "delegate(address)",
            "addDelegate(address)",
            "removeDelegate(address)",
            "setOwner(address)",
            "FeeRegistrar(address,uint256)",
            "payer(address)",
            "paid(address)",
            "pay(address)",
            "inject(address,address)",
            "revoke(address,address)",
            "setTreasury(address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "delegate(address)": {
                "argument": {},
                "contract": {
                    "fee": "uint256",
                    "s_paid": "mapping(address => address[])"
                }
            },
            "addDelegate(address)": {
                "argument": {},
                "contract": {
                    "fee": "uint256",
                    "s_paid": "mapping(address => address[])"
                }
            },
            "removeDelegate(address)": {
                "argument": {},
                "contract": {
                    "fee": "uint256",
                    "s_paid": "mapping(address => address[])"
                }
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {
                    "fee": "uint256",
                    "s_paid": "mapping(address => address[])"
                }
            },
            "FeeRegistrar(address,uint256)": {
                "argument": {
                    "_fee": "uint256"
                },
                "contract": {
                    "fee": "uint256",
                    "s_paid": "mapping(address => address[])"
                }
            },
            "payer(address)": {
                "argument": {},
                "contract": {
                    "fee": "uint256",
                    "s_paid": "mapping(address => address[])"
                }
            },
            "paid(address)": {
                "argument": {},
                "contract": {
                    "fee": "uint256",
                    "s_paid": "mapping(address => address[])"
                }
            },
            "pay(address)": {
                "argument": {},
                "contract": {
                    "fee": "uint256",
                    "s_paid": "mapping(address => address[])"
                }
            },
            "inject(address,address)": {
                "argument": {},
                "contract": {
                    "fee": "uint256",
                    "s_paid": "mapping(address => address[])"
                }
            },
            "revoke(address,address)": {
                "argument": {},
                "contract": {
                    "fee": "uint256",
                    "s_paid": "mapping(address => address[])"
                }
            },
            "setTreasury(address)": {
                "argument": {},
                "contract": {
                    "fee": "uint256",
                    "s_paid": "mapping(address => address[])"
                }
            }
        },
        "function_block_mapping": {
            "setTreasury(address)": [
                1200,
                339
            ],
            "setOwner(address)": [
                256,
                97
            ],
            "revoke(address,address)": [
                845,
                251
            ],
            "inject(address,address)": [
                568,
                185
            ],
            "removeDelegate(address)": [
                501,
                163
            ],
            "delegate(address)": [
                323,
                119
            ],
            "payer(address)": [
                974,
                295
            ],
            "addDelegate(address)": [
                1133,
                317
            ],
            "paid(address)": [
                754,
                229
            ],
            "pay(address)": [
                202,
                75
            ]
        },
        "block_CALL_mapping": {
            "jump4044": [
                "who.transfer(msg.value)",
                "who.transfer(msg.value)"
            ],
            "jump1402": [
                "treasury.transfer(msg.value)",
                "treasury.transfer(msg.value)"
            ],
            "block4044": [
                "who.transfer(msg.value)"
            ],
            "block1402": [
                "treasury.transfer(msg.value)"
            ]
        }
    }
}