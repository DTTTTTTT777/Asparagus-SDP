{
    "SafeMath": {
        "function_list": [
            "safeAdd(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeMul(uint256,uint256)",
            "safeDiv(uint256,uint256)",
            "assert(bool)"
        ],
        "initial_state": {
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeDiv(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "assert(bool)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Owned": {
        "function_list": [
            "Owned()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "Token": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                324,
                97
            ],
            "allowance(address,address)": [
                1297,
                295
            ],
            "balanceOf(address)": [
                794,
                207
            ],
            "transferFrom(address,address,uint256)": [
                468,
                141
            ],
            "transfer(address,uint256)": [
                1025,
                251
            ]
        },
        "block_CALL_mapping": {
            "jump3848": [
                "spender.receiveApproval(\n                msg.sender,\n                _value,\n                this,\n                _extraData\n            )",
                "spender.receiveApproval(\n                msg.sender,\n                _value,\n                this,\n                _extraData\n            )"
            ],
            "block3848": [
                "spender.receiveApproval(\n                msg.sender,\n                _value,\n                this,\n                _extraData\n            )"
            ]
        }
    },
    "StandardToken": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "KWHToken": {
        "function_list": [
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "Owned()",
            "transferOwnership(address)",
            "safeAdd(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "safeMul(uint256,uint256)",
            "safeDiv(uint256,uint256)",
            "assert(bool)",
            "KWHToken()",
            "setEtherPrices(uint256,uint256)",
            "setGasForKWH(uint256)",
            "setKWHForGas(uint256)",
            "setGasReserve(uint256)",
            "setMinBalance(uint256)",
            "haltDirectTrade()",
            "unhaltDirectTrade()",
            "transfer(address,uint256)",
            "buyKWHAgainstEther()",
            "sellKWHAgainstEther(uint256)",
            "refundToOwner(uint256,uint256)",
            "fallback()",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "buyPriceEth": "uint256",
                    "sellPriceEth": "uint256",
                    "gasForKWH": "uint256",
                    "KWHForGas": "uint256",
                    "gasReserve": "uint256",
                    "minBalanceForAccounts": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "buyPriceEth": "uint256",
                    "sellPriceEth": "uint256",
                    "gasForKWH": "uint256",
                    "KWHForGas": "uint256",
                    "gasReserve": "uint256",
                    "minBalanceForAccounts": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "buyPriceEth": "uint256",
                    "sellPriceEth": "uint256",
                    "gasForKWH": "uint256",
                    "KWHForGas": "uint256",
                    "gasReserve": "uint256",
                    "minBalanceForAccounts": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "buyPriceEth": "uint256",
                    "sellPriceEth": "uint256",
                    "gasForKWH": "uint256",
                    "KWHForGas": "uint256",
                    "gasReserve": "uint256",
                    "minBalanceForAccounts": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "buyPriceEth": "uint256",
                    "sellPriceEth": "uint256",
                    "gasForKWH": "uint256",
                    "KWHForGas": "uint256",
                    "gasReserve": "uint256",
                    "minBalanceForAccounts": "uint256"
                }
            },
            "Owned()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "buyPriceEth": "uint256",
                    "sellPriceEth": "uint256",
                    "gasForKWH": "uint256",
                    "KWHForGas": "uint256",
                    "gasReserve": "uint256",
                    "minBalanceForAccounts": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "buyPriceEth": "uint256",
                    "sellPriceEth": "uint256",
                    "gasForKWH": "uint256",
                    "KWHForGas": "uint256",
                    "gasReserve": "uint256",
                    "minBalanceForAccounts": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "buyPriceEth": "uint256",
                    "sellPriceEth": "uint256",
                    "gasForKWH": "uint256",
                    "KWHForGas": "uint256",
                    "gasReserve": "uint256",
                    "minBalanceForAccounts": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "buyPriceEth": "uint256",
                    "sellPriceEth": "uint256",
                    "gasForKWH": "uint256",
                    "KWHForGas": "uint256",
                    "gasReserve": "uint256",
                    "minBalanceForAccounts": "uint256"
                }
            },
            "safeMul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "buyPriceEth": "uint256",
                    "sellPriceEth": "uint256",
                    "gasForKWH": "uint256",
                    "KWHForGas": "uint256",
                    "gasReserve": "uint256",
                    "minBalanceForAccounts": "uint256"
                }
            },
            "safeDiv(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "buyPriceEth": "uint256",
                    "sellPriceEth": "uint256",
                    "gasForKWH": "uint256",
                    "KWHForGas": "uint256",
                    "gasReserve": "uint256",
                    "minBalanceForAccounts": "uint256"
                }
            },
            "assert(bool)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "buyPriceEth": "uint256",
                    "sellPriceEth": "uint256",
                    "gasForKWH": "uint256",
                    "KWHForGas": "uint256",
                    "gasReserve": "uint256",
                    "minBalanceForAccounts": "uint256"
                }
            },
            "KWHToken()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "buyPriceEth": "uint256",
                    "sellPriceEth": "uint256",
                    "gasForKWH": "uint256",
                    "KWHForGas": "uint256",
                    "gasReserve": "uint256",
                    "minBalanceForAccounts": "uint256"
                }
            },
            "setEtherPrices(uint256,uint256)": {
                "argument": {
                    "newBuyPriceEth": "uint256",
                    "newSellPriceEth": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "buyPriceEth": "uint256",
                    "sellPriceEth": "uint256",
                    "gasForKWH": "uint256",
                    "KWHForGas": "uint256",
                    "gasReserve": "uint256",
                    "minBalanceForAccounts": "uint256"
                }
            },
            "setGasForKWH(uint256)": {
                "argument": {
                    "newGasAmountInWei": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "buyPriceEth": "uint256",
                    "sellPriceEth": "uint256",
                    "gasForKWH": "uint256",
                    "KWHForGas": "uint256",
                    "gasReserve": "uint256",
                    "minBalanceForAccounts": "uint256"
                }
            },
            "setKWHForGas(uint256)": {
                "argument": {
                    "newDCNAmount": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "buyPriceEth": "uint256",
                    "sellPriceEth": "uint256",
                    "gasForKWH": "uint256",
                    "KWHForGas": "uint256",
                    "gasReserve": "uint256",
                    "minBalanceForAccounts": "uint256"
                }
            },
            "setGasReserve(uint256)": {
                "argument": {
                    "newGasReserveInWei": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "buyPriceEth": "uint256",
                    "sellPriceEth": "uint256",
                    "gasForKWH": "uint256",
                    "KWHForGas": "uint256",
                    "gasReserve": "uint256",
                    "minBalanceForAccounts": "uint256"
                }
            },
            "setMinBalance(uint256)": {
                "argument": {
                    "minimumBalanceInWei": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "buyPriceEth": "uint256",
                    "sellPriceEth": "uint256",
                    "gasForKWH": "uint256",
                    "KWHForGas": "uint256",
                    "gasReserve": "uint256",
                    "minBalanceForAccounts": "uint256"
                }
            },
            "haltDirectTrade()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "buyPriceEth": "uint256",
                    "sellPriceEth": "uint256",
                    "gasForKWH": "uint256",
                    "KWHForGas": "uint256",
                    "gasReserve": "uint256",
                    "minBalanceForAccounts": "uint256"
                }
            },
            "unhaltDirectTrade()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "buyPriceEth": "uint256",
                    "sellPriceEth": "uint256",
                    "gasForKWH": "uint256",
                    "KWHForGas": "uint256",
                    "gasReserve": "uint256",
                    "minBalanceForAccounts": "uint256"
                }
            },
            "buyKWHAgainstEther()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "buyPriceEth": "uint256",
                    "sellPriceEth": "uint256",
                    "gasForKWH": "uint256",
                    "KWHForGas": "uint256",
                    "gasReserve": "uint256",
                    "minBalanceForAccounts": "uint256"
                }
            },
            "sellKWHAgainstEther(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "buyPriceEth": "uint256",
                    "sellPriceEth": "uint256",
                    "gasForKWH": "uint256",
                    "KWHForGas": "uint256",
                    "gasReserve": "uint256",
                    "minBalanceForAccounts": "uint256"
                }
            },
            "refundToOwner(uint256,uint256)": {
                "argument": {
                    "amountOfEth": "uint256",
                    "kwh": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "buyPriceEth": "uint256",
                    "sellPriceEth": "uint256",
                    "gasForKWH": "uint256",
                    "KWHForGas": "uint256",
                    "gasReserve": "uint256",
                    "minBalanceForAccounts": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256",
                    "symbol": "string",
                    "name": "string",
                    "decimals": "uint8",
                    "buyPriceEth": "uint256",
                    "sellPriceEth": "uint256",
                    "gasForKWH": "uint256",
                    "KWHForGas": "uint256",
                    "gasReserve": "uint256",
                    "minBalanceForAccounts": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "setGasForKWH(uint256)": [
                1517,
                427
            ],
            "haltDirectTrade()": [
                1679,
                493
            ],
            "allowance(address,address)": [
                2079,
                603
            ],
            "transferFrom(address,address,uint256)": [
                1004,
                229
            ],
            "approve(address,uint256)": [
                728,
                141
            ],
            "setGasReserve(uint256)": [
                916,
                185
            ],
            "buyKWHAgainstEther()": [
                1649,
                471
            ],
            "setMinBalance(uint256)": [
                2034,
                581
            ],
            "balanceOf(address)": [
                1562,
                449
            ],
            "transferOwnership(address)": [
                2264,
                669
            ],
            "sellKWHAgainstEther(uint256)": [
                2331,
                691
            ],
            "unhaltDirectTrade()": [
                2198,
                625
            ],
            "setEtherPrices(uint256,uint256)": [
                1319,
                339
            ],
            "refundToOwner(uint256,uint256)": [
                1462,
                405
            ],
            "setKWHForGas(uint256)": [
                1417,
                383
            ],
            "transfer(address,uint256)": [
                1933,
                559
            ]
        },
        "block_CALL_mapping": {
            "block7172": [
                "_to.send(gasForKWH)"
            ],
            "block7072": [
                "msg.sender.send(gasForKWH)"
            ],
            "jump7985_0": [
                "msg.sender.send(revenue)",
                "msg.sender.send(revenue)"
            ],
            "block4605": [
                "msg.sender.send(eth)"
            ],
            "jump7172": [
                "_to.send(gasForKWH)",
                "_to.send(gasForKWH)"
            ],
            "jump4605": [
                "msg.sender.send(eth)",
                "msg.sender.send(eth)"
            ],
            "block7985_0": [
                "msg.sender.send(revenue)"
            ],
            "jump7072": [
                "msg.sender.send(gasForKWH)",
                "msg.sender.send(gasForKWH)"
            ],
            "block7985": [
                "msg.sender.send(revenue)"
            ],
            "jump7985": [
                "msg.sender.send(revenue)",
                "msg.sender.send(revenue)"
            ]
        }
    }
}