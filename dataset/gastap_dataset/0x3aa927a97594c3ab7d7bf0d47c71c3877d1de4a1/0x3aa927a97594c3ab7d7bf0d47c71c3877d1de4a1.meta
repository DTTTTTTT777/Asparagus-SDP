{
    "ERC20": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                147,
                75
            ],
            "transfer(address,uint256)": [
                717,
                207
            ],
            "balanceOf(address)": [
                630,
                185
            ],
            "allowance(address,address)": [
                818,
                229
            ],
            "transferFrom(address,address,uint256)": [
                291,
                119
            ],
            "totalSupply()": [
                248,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "DSMath": {
        "function_list": [
            "add(uint256,uint256)",
            "sub(uint256,uint256)",
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "hadd(uint128,uint128)",
            "hsub(uint128,uint128)",
            "hmul(uint128,uint128)",
            "hdiv(uint128,uint128)",
            "hmin(uint128,uint128)",
            "hmax(uint128,uint128)",
            "imin(int256,int256)",
            "imax(int256,int256)",
            "wadd(uint128,uint128)",
            "wsub(uint128,uint128)",
            "wmul(uint128,uint128)",
            "wdiv(uint128,uint128)",
            "wmin(uint128,uint128)",
            "wmax(uint128,uint128)",
            "radd(uint128,uint128)",
            "rsub(uint128,uint128)",
            "rmul(uint128,uint128)",
            "rdiv(uint128,uint128)",
            "rpow(uint128,uint64)",
            "rmin(uint128,uint128)",
            "rmax(uint128,uint128)",
            "cast(uint256)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "div(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "hadd(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "hsub(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "hmul(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "hdiv(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "hmin(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "hmax(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "imin(int256,int256)": {
                "argument": {},
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "imax(int256,int256)": {
                "argument": {},
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "wadd(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "wsub(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "wmul(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "wdiv(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "wmin(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "wmax(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "radd(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "rsub(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "rmul(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "rdiv(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "rpow(uint128,uint64)": {
                "argument": {
                    "x": "uint128",
                    "n": "uint64"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "rmin(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "rmax(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "cast(uint256)": {
                "argument": {
                    "x": "uint256"
                },
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "WAD": "uint128",
                    "RAY": "uint128"
                }
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "DSNote": {
        "function_list": [],
        "initial_state": {},
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "DSAuthEvents": {
        "function_list": [],
        "initial_state": {},
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "DSAuth": {
        "function_list": [
            "DSAuth()",
            "setOwner(address)",
            "setAuthority(DSAuthority)",
            "isAuthorized(address,bytes4)",
            "assert(bool)"
        ],
        "initial_state": {
            "DSAuth()": {
                "argument": {},
                "contract": {}
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "setAuthority(DSAuthority)": {
                "argument": {},
                "contract": {}
            },
            "isAuthorized(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {}
            },
            "assert(bool)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "setOwner(address)": [
                103,
                75
            ]
        },
        "block_CALL_mapping": {
            "jump1493_0": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block1493_0": [
                "authority.canCall(src, this, sig)"
            ],
            "jump1493": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block1493": [
                "authority.canCall(src, this, sig)"
            ]
        }
    },
    "EventfulMarket": {
        "function_list": [],
        "initial_state": {},
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "SimpleMarket": {
        "function_list": [
            "add(uint256,uint256)",
            "sub(uint256,uint256)",
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "hadd(uint128,uint128)",
            "hsub(uint128,uint128)",
            "hmul(uint128,uint128)",
            "hdiv(uint128,uint128)",
            "hmin(uint128,uint128)",
            "hmax(uint128,uint128)",
            "imin(int256,int256)",
            "imax(int256,int256)",
            "wadd(uint128,uint128)",
            "wsub(uint128,uint128)",
            "wmul(uint128,uint128)",
            "wdiv(uint128,uint128)",
            "wmin(uint128,uint128)",
            "wmax(uint128,uint128)",
            "radd(uint128,uint128)",
            "rsub(uint128,uint128)",
            "rmul(uint128,uint128)",
            "rdiv(uint128,uint128)",
            "rpow(uint128,uint64)",
            "rmin(uint128,uint128)",
            "rmax(uint128,uint128)",
            "cast(uint256)",
            "isActive(uint256)",
            "getOwner(uint256)",
            "getOffer(uint256)",
            "bump(bytes32)",
            "buy(uint256,uint256)",
            "cancel(uint256)",
            "kill(bytes32)",
            "make(ERC20,ERC20,uint128,uint128)",
            "offer(uint256,ERC20,uint256,ERC20)",
            "take(bytes32,uint128)",
            "_next_id()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "div(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "hadd(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "hsub(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "hmul(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "hdiv(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "hmin(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "hmax(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "imin(int256,int256)": {
                "argument": {},
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "imax(int256,int256)": {
                "argument": {},
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "wadd(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "wsub(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "wmul(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "wdiv(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "wmin(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "wmax(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "radd(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "rsub(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "rmul(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "rdiv(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "rpow(uint128,uint64)": {
                "argument": {
                    "x": "uint128",
                    "n": "uint64"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "rmin(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "rmax(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "cast(uint256)": {
                "argument": {
                    "x": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "isActive(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "getOwner(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "getOffer(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "bump(bytes32)": {
                "argument": {
                    "id_": "bytes32"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "buy(uint256,uint256)": {
                "argument": {
                    "id": "uint256",
                    "quantity": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "cancel(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "kill(bytes32)": {
                "argument": {
                    "id": "bytes32"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "make(ERC20,ERC20,uint128,uint128)": {
                "argument": {
                    "pay_amt": "uint128",
                    "buy_amt": "uint128"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "offer(uint256,ERC20,uint256,ERC20)": {
                "argument": {
                    "pay_amt": "uint256",
                    "buy_amt": "uint256"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "take(bytes32,uint128)": {
                "argument": {
                    "id": "bytes32",
                    "maxTakeAmount": "uint128"
                },
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "_next_id()": {
                "argument": {},
                "contract": {
                    "last_offer_id": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "last_offer_id": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "buy(uint256,uint256)": [
                1276,
                295
            ],
            "kill(bytes32)": [
                1118,
                251
            ],
            "getOffer(uint256)": [
                486,
                141
            ],
            "getOwner(uint256)": [
                1167,
                273
            ],
            "isActive(uint256)": [
                786,
                207
            ],
            "cancel(uint256)": [
                417,
                119
            ],
            "take(bytes32,uint128)": [
                660,
                163
            ],
            "bump(bytes32)": [
                737,
                185
            ]
        },
        "block_CALL_mapping": {
            "block5620_0": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump5620": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block7770_0": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "jump7770_0": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)",
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "block5386_0": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump7770": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)",
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "jump5620_0": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block5620": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump5386_0": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block5386": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block7770": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "block2477": [
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)"
            ],
            "jump2477_0": [
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)",
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)"
            ],
            "jump2477": [
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)",
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)"
            ],
            "jump5386": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block2477_0": [
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)"
            ]
        }
    },
    "ExpiringMarket": {
        "function_list": [
            "isActive(uint256)",
            "getOwner(uint256)",
            "getOffer(uint256)",
            "bump(bytes32)",
            "buy(uint256,uint256)",
            "cancel(uint256)",
            "kill(bytes32)",
            "make(ERC20,ERC20,uint128,uint128)",
            "offer(uint256,ERC20,uint256,ERC20)",
            "take(bytes32,uint128)",
            "_next_id()",
            "add(uint256,uint256)",
            "sub(uint256,uint256)",
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "hadd(uint128,uint128)",
            "hsub(uint128,uint128)",
            "hmul(uint128,uint128)",
            "hdiv(uint128,uint128)",
            "hmin(uint128,uint128)",
            "hmax(uint128,uint128)",
            "imin(int256,int256)",
            "imax(int256,int256)",
            "wadd(uint128,uint128)",
            "wsub(uint128,uint128)",
            "wmul(uint128,uint128)",
            "wdiv(uint128,uint128)",
            "wmin(uint128,uint128)",
            "wmax(uint128,uint128)",
            "radd(uint128,uint128)",
            "rsub(uint128,uint128)",
            "rmul(uint128,uint128)",
            "rdiv(uint128,uint128)",
            "rpow(uint128,uint64)",
            "rmin(uint128,uint128)",
            "rmax(uint128,uint128)",
            "cast(uint256)",
            "DSAuth()",
            "setOwner(address)",
            "setAuthority(DSAuthority)",
            "isAuthorized(address,bytes4)",
            "assert(bool)",
            "ExpiringMarket(uint64)",
            "isClosed()",
            "getTime()",
            "stop()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "isActive(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "getOwner(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "getOffer(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "bump(bytes32)": {
                "argument": {
                    "id_": "bytes32"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "buy(uint256,uint256)": {
                "argument": {
                    "id": "uint256",
                    "quantity": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "cancel(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "kill(bytes32)": {
                "argument": {
                    "id": "bytes32"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "make(ERC20,ERC20,uint128,uint128)": {
                "argument": {
                    "pay_amt": "uint128",
                    "buy_amt": "uint128"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "offer(uint256,ERC20,uint256,ERC20)": {
                "argument": {
                    "pay_amt": "uint256",
                    "buy_amt": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "take(bytes32,uint128)": {
                "argument": {
                    "id": "bytes32",
                    "maxTakeAmount": "uint128"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "_next_id()": {
                "argument": {},
                "contract": {
                    "close_time": "uint64"
                }
            },
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "div(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "hadd(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "hsub(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "hmul(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "hdiv(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "hmin(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "hmax(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "imin(int256,int256)": {
                "argument": {},
                "contract": {
                    "close_time": "uint64"
                }
            },
            "imax(int256,int256)": {
                "argument": {},
                "contract": {
                    "close_time": "uint64"
                }
            },
            "wadd(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "wsub(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "wmul(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "wdiv(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "wmin(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "wmax(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "radd(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "rsub(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "rmul(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "rdiv(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "rpow(uint128,uint64)": {
                "argument": {
                    "x": "uint128",
                    "n": "uint64"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "rmin(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "rmax(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "cast(uint256)": {
                "argument": {
                    "x": "uint256"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "DSAuth()": {
                "argument": {},
                "contract": {
                    "close_time": "uint64"
                }
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {
                    "close_time": "uint64"
                }
            },
            "setAuthority(DSAuthority)": {
                "argument": {},
                "contract": {
                    "close_time": "uint64"
                }
            },
            "isAuthorized(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "assert(bool)": {
                "argument": {},
                "contract": {
                    "close_time": "uint64"
                }
            },
            "ExpiringMarket(uint64)": {
                "argument": {
                    "_close_time": "uint64"
                },
                "contract": {
                    "close_time": "uint64"
                }
            },
            "isClosed()": {
                "argument": {},
                "contract": {
                    "close_time": "uint64"
                }
            },
            "getTime()": {
                "argument": {},
                "contract": {
                    "close_time": "uint64"
                }
            },
            "stop()": {
                "argument": {},
                "contract": {
                    "close_time": "uint64"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "close_time": "uint64"
                }
            }
        },
        "function_block_mapping": {
            "buy(uint256,uint256)": [
                1926,
                493
            ],
            "kill(bytes32)": [
                1634,
                405
            ],
            "setOwner(address)": [
                496,
                119
            ],
            "isClosed()": [
                1770,
                449
            ],
            "isActive(uint256)": [
                1215,
                339
            ],
            "getOffer(uint256)": [
                675,
                185
            ],
            "getTime()": [
                926,
                229
            ],
            "cancel(uint256)": [
                606,
                163
            ],
            "getOwner(uint256)": [
                1817,
                471
            ],
            "take(bytes32,uint128)": [
                849,
                207
            ],
            "bump(bytes32)": [
                1099,
                295
            ],
            "stop()": [
                290,
                75
            ]
        },
        "block_CALL_mapping": {
            "jump7062_0": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump3448_0": [
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)",
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)"
            ],
            "jump3448": [
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)",
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)"
            ],
            "jump10400": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block9229_0": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "block10400": [
                "authority.canCall(src, this, sig)"
            ],
            "block7062_0": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block3448_0": [
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)"
            ],
            "block6828_0": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump10400_1": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump10400_0": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block7062": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump9229_0": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)",
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "block9229": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "block3448": [
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)"
            ],
            "jump6828_0": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block10400_1": [
                "authority.canCall(src, this, sig)"
            ],
            "block10400_0": [
                "authority.canCall(src, this, sig)"
            ],
            "block6828": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump6828": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump7062": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump9229": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)",
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ]
        }
    },
    "MatchingEvents": {
        "function_list": [],
        "initial_state": {},
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "MatchingMarket": {
        "function_list": [
            "ExpiringMarket(uint64)",
            "isClosed()",
            "getTime()",
            "stop()",
            "isActive(uint256)",
            "getOwner(uint256)",
            "getOffer(uint256)",
            "bump(bytes32)",
            "buy(uint256,uint256)",
            "cancel(uint256)",
            "kill(bytes32)",
            "make(ERC20,ERC20,uint128,uint128)",
            "offer(uint256,ERC20,uint256,ERC20)",
            "take(bytes32,uint128)",
            "_next_id()",
            "add(uint256,uint256)",
            "sub(uint256,uint256)",
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "hadd(uint128,uint128)",
            "hsub(uint128,uint128)",
            "hmul(uint128,uint128)",
            "hdiv(uint128,uint128)",
            "hmin(uint128,uint128)",
            "hmax(uint128,uint128)",
            "imin(int256,int256)",
            "imax(int256,int256)",
            "wadd(uint128,uint128)",
            "wsub(uint128,uint128)",
            "wmul(uint128,uint128)",
            "wdiv(uint128,uint128)",
            "wmin(uint128,uint128)",
            "wmax(uint128,uint128)",
            "radd(uint128,uint128)",
            "rsub(uint128,uint128)",
            "rmul(uint128,uint128)",
            "rdiv(uint128,uint128)",
            "rpow(uint128,uint64)",
            "rmin(uint128,uint128)",
            "rmax(uint128,uint128)",
            "cast(uint256)",
            "DSAuth()",
            "setOwner(address)",
            "setAuthority(DSAuthority)",
            "isAuthorized(address,bytes4)",
            "assert(bool)",
            "MatchingMarket(uint64)",
            "make(ERC20,ERC20,uint128,uint128)",
            "take(bytes32,uint128)",
            "kill(bytes32)",
            "offer(uint256,ERC20,uint256,ERC20)",
            "offer(uint256,ERC20,uint256,ERC20,uint256)",
            "offer(uint256,ERC20,uint256,ERC20,uint256,bool)",
            "buy(uint256,uint256)",
            "cancel(uint256)",
            "insert(uint256,uint256)",
            "addTokenPairWhitelist(ERC20,ERC20)",
            "remTokenPairWhitelist(ERC20,ERC20)",
            "isTokenPairWhitelisted(ERC20,ERC20)",
            "setMinSell(ERC20,uint256)",
            "getMinSell(ERC20)",
            "setBuyEnabled(bool)",
            "setMatchingEnabled(bool)",
            "getBestOffer(ERC20,ERC20)",
            "getWorseOffer(uint256)",
            "getBetterOffer(uint256)",
            "getOfferCount(ERC20,ERC20)",
            "getFirstUnsortedOffer()",
            "getNextUnsortedOffer(uint256)",
            "isOfferSorted(uint256)",
            "_buys(uint256,uint256)",
            "_find(uint256)",
            "_isLtOrEq(uint256,uint256)",
            "_matcho(uint256,ERC20,uint256,ERC20,uint256,bool)",
            "_offeru(uint256,ERC20,uint256,ERC20)",
            "_sort(uint256,uint256)",
            "_unsort(uint256)",
            "_hide(uint256)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "ExpiringMarket(uint64)": {
                "argument": {
                    "_close_time": "uint64"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "isClosed()": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "getTime()": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "stop()": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "isActive(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "getOwner(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "getOffer(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "bump(bytes32)": {
                "argument": {
                    "id_": "bytes32"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "buy(uint256,uint256)": {
                "argument": {
                    "id": "uint256",
                    "amount": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "cancel(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "kill(bytes32)": {
                "argument": {
                    "id": "bytes32"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "make(ERC20,ERC20,uint128,uint128)": {
                "argument": {
                    "pay_amt": "uint128",
                    "buy_amt": "uint128"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "offer(uint256,ERC20,uint256,ERC20)": {
                "argument": {
                    "pay_amt": "uint256",
                    "buy_amt": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "take(bytes32,uint128)": {
                "argument": {
                    "id": "bytes32",
                    "maxTakeAmount": "uint128"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "_next_id()": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "div(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "hadd(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "hsub(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "hmul(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "hdiv(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "hmin(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "hmax(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "imin(int256,int256)": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "imax(int256,int256)": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "wadd(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "wsub(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "wmul(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "wdiv(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "wmin(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "wmax(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "radd(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "rsub(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "rmul(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "rdiv(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "rpow(uint128,uint64)": {
                "argument": {
                    "x": "uint128",
                    "n": "uint64"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "rmin(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "rmax(uint128,uint128)": {
                "argument": {
                    "x": "uint128",
                    "y": "uint128"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "cast(uint256)": {
                "argument": {
                    "x": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "DSAuth()": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "setAuthority(DSAuthority)": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "isAuthorized(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "assert(bool)": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "MatchingMarket(uint64)": {
                "argument": {
                    "close_time": "uint64"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "offer(uint256,ERC20,uint256,ERC20,uint256)": {
                "argument": {
                    "pay_amt": "uint256",
                    "buy_amt": "uint256",
                    "pos": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "offer(uint256,ERC20,uint256,ERC20,uint256,bool)": {
                "argument": {
                    "pay_amt": "uint256",
                    "buy_amt": "uint256",
                    "pos": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "insert(uint256,uint256)": {
                "argument": {
                    "id": "uint256",
                    "pos": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "addTokenPairWhitelist(ERC20,ERC20)": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "remTokenPairWhitelist(ERC20,ERC20)": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "isTokenPairWhitelisted(ERC20,ERC20)": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "setMinSell(ERC20,uint256)": {
                "argument": {
                    "dust": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "getMinSell(ERC20)": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "setBuyEnabled(bool)": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "setMatchingEnabled(bool)": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "getBestOffer(ERC20,ERC20)": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "getWorseOffer(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "getBetterOffer(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "getOfferCount(ERC20,ERC20)": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "getFirstUnsortedOffer()": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            },
            "getNextUnsortedOffer(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "isOfferSorted(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "_buys(uint256,uint256)": {
                "argument": {
                    "id": "uint256",
                    "amount": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "_find(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "_isLtOrEq(uint256,uint256)": {
                "argument": {
                    "low": "uint256",
                    "high": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "_matcho(uint256,ERC20,uint256,ERC20,uint256,bool)": {
                "argument": {
                    "t_pay_amt": "uint256",
                    "t_buy_amt": "uint256",
                    "pos": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "_offeru(uint256,ERC20,uint256,ERC20)": {
                "argument": {
                    "pay_amt": "uint256",
                    "buy_amt": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "_sort(uint256,uint256)": {
                "argument": {
                    "id": "uint256",
                    "pos": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "_unsort(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "_hide(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "_head": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "_head": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "buy(uint256,uint256)": [
                4255,
                999
            ],
            "getBetterOffer(uint256)": [
                3295,
                713
            ],
            "getFirstUnsortedOffer()": [
                3042,
                647
            ],
            "isClosed()": [
                3887,
                889
            ],
            "isOfferSorted(uint256)": [
                4115,
                955
            ],
            "kill(bytes32)": [
                3650,
                823
            ],
            "insert(uint256,uint256)": [
                1399,
                251
            ],
            "getTime()": [
                1999,
                405
            ],
            "isActive(uint256)": [
                2710,
                603
            ],
            "setOwner(address)": [
                937,
                163
            ],
            "getWorseOffer(uint256)": [
                3447,
                757
            ],
            "getOwner(uint256)": [
                4006,
                933
            ],
            "setBuyEnabled(bool)": [
                4184,
                977
            ],
            "getNextUnsortedOffer(uint256)": [
                2062,
                427
            ],
            "getOffer(uint256)": [
                1661,
                339
            ],
            "setMatchingEnabled(bool)": [
                1521,
                295
            ],
            "cancel(uint256)": [
                1592,
                317
            ],
            "take(bytes32,uint128)": [
                1835,
                361
            ],
            "bump(bytes32)": [
                2475,
                537
            ],
            "stop()": [
                731,
                119
            ]
        },
        "block_CALL_mapping": {
            "jump21803_0": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)",
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "jump21803_1": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)",
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "jump21803_2": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)",
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "jump21803_3": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)",
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "block18745": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump21803_5": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)",
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "jump21803_6": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)",
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "block13039_0": [
                "authority.canCall(src, this, sig)"
            ],
            "block13039_1": [
                "authority.canCall(src, this, sig)"
            ],
            "block13039_2": [
                "authority.canCall(src, this, sig)"
            ],
            "block13039_3": [
                "authority.canCall(src, this, sig)"
            ],
            "block13039_4": [
                "authority.canCall(src, this, sig)"
            ],
            "block13039_5": [
                "authority.canCall(src, this, sig)"
            ],
            "block13039_6": [
                "authority.canCall(src, this, sig)"
            ],
            "block21803_5": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "block16925": [
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)"
            ],
            "jump21803_4": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)",
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "jump16925_0": [
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)",
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)"
            ],
            "block18745_3": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block18745_2": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump18745": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump18511_3": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block18745_6": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block18745_5": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block18745_4": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump18511_5": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump16925": [
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)",
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)"
            ],
            "block18511_4": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block18511_5": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block18511_2": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block18511_3": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block18511_0": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block18511_1": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block18511": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block18745_1": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block18511_6": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block18745_0": [
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block21803": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "jump18511_0": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump18511_1": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump18511_2": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump21803": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)",
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "jump18511_4": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "block16925_0": [
                "offer.pay_gem.transfer(offer.owner, offer.pay_amt)"
            ],
            "jump18511_6": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump18745_1": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump18745_0": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump18745_3": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump18511": [
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)",
                "offer.buy_gem.transferFrom(msg.sender, offer.owner, spend)"
            ],
            "jump18745_5": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump18745_4": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump18745_2": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "jump18745_6": [
                "offer.pay_gem.transfer(msg.sender, quantity)",
                "offer.pay_gem.transfer(msg.sender, quantity)"
            ],
            "block21803_6": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "block21803_4": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "block13039": [
                "authority.canCall(src, this, sig)"
            ],
            "block21803_2": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "block21803_3": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "block21803_0": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "block21803_1": [
                "pay_gem.transferFrom(msg.sender, this, pay_amt)"
            ],
            "jump13039": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump13039_2": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump13039_3": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump13039_0": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump13039_1": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump13039_6": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump13039_4": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump13039_5": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ]
        }
    }
}