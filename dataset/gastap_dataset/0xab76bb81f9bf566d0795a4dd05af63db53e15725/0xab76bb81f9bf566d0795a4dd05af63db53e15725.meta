{
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "usingOraclize": {
        "function_list": [
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)",
            "matchBytes32Prefix(bytes32,bytes)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "": "uint8"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "bytes": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "matchBytes32Prefix(bytes32,bytes)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            }
        },
        "function_block_mapping": {
            "__callback(bytes32,string,bytes)": [
                200,
                97
            ],
            "__callback(bytes32,string)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "acceptOwnership()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "acceptOwnership()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                300,
                141
            ],
            "acceptOwnership()": [
                103,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "acceptOwnership()",
            "ERC20(uint256,string,uint8,string,bool,bool)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "approve(address,uint256)",
            "approveAndCall(address,uint256,bytes)",
            "transferFrom(address,address,uint256)",
            "setBalance(address,uint256)",
            "transferInternal(address,address,uint256)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "initialSupply": "uint256",
                    "creationBlock": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "initialSupply": "uint256",
                    "creationBlock": "uint256"
                }
            },
            "acceptOwnership()": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "initialSupply": "uint256",
                    "creationBlock": "uint256"
                }
            },
            "ERC20(uint256,string,uint8,string,bool,bool)": {
                "argument": {
                    "_initialSupply": "uint256",
                    "_tokenName": "string",
                    "_decimalUnits": "uint8",
                    "_tokenSymbol": "string"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "initialSupply": "uint256",
                    "creationBlock": "uint256"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "initialSupply": "uint256",
                    "creationBlock": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "initialSupply": "uint256",
                    "creationBlock": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "initialSupply": "uint256",
                    "creationBlock": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "initialSupply": "uint256",
                    "creationBlock": "uint256"
                }
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "initialSupply": "uint256",
                    "creationBlock": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "initialSupply": "uint256",
                    "creationBlock": "uint256"
                }
            },
            "setBalance(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "initialSupply": "uint256",
                    "creationBlock": "uint256"
                }
            },
            "transferInternal(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "standard": "string",
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "initialSupply": "uint256",
                    "creationBlock": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                412,
                97
            ],
            "transfer(address,uint256)": [
                1396,
                361
            ],
            "totalSupply()": [
                556,
                141
            ],
            "balanceOf(address)": [
                1055,
                273
            ],
            "transferFrom(address,address,uint256)": [
                599,
                163
            ],
            "acceptOwnership()": [
                1142,
                295
            ],
            "approveAndCall(address,uint256,bytes)": [
                1497,
                383
            ],
            "transferOwnership(address)": [
                1921,
                471
            ]
        },
        "block_CALL_mapping": {
            "block4085": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "jump4085": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "MintingERC20": {
        "function_list": [
            "ERC20(uint256,string,uint8,string,bool,bool)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "approve(address,uint256)",
            "approveAndCall(address,uint256,bytes)",
            "transferFrom(address,address,uint256)",
            "setBalance(address,uint256)",
            "transferInternal(address,address,uint256)",
            "Ownable()",
            "transferOwnership(address)",
            "acceptOwnership()",
            "MintingERC20(uint256,uint256,string,uint8,string,bool,bool)",
            "addMinter(address)",
            "removeMinter(address)",
            "mint(address,uint256)"
        ],
        "initial_state": {
            "ERC20(uint256,string,uint8,string,bool,bool)": {
                "argument": {
                    "_initialSupply": "uint256",
                    "_tokenName": "string",
                    "_decimalUnits": "uint8",
                    "_tokenSymbol": "string"
                },
                "contract": {
                    "maxSupply": "uint256"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "maxSupply": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "maxSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "maxSupply": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "maxSupply": "uint256"
                }
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {
                    "maxSupply": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "maxSupply": "uint256"
                }
            },
            "setBalance(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "maxSupply": "uint256"
                }
            },
            "transferInternal(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "maxSupply": "uint256"
                }
            },
            "Ownable()": {
                "argument": {},
                "contract": {
                    "maxSupply": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "maxSupply": "uint256"
                }
            },
            "acceptOwnership()": {
                "argument": {},
                "contract": {
                    "maxSupply": "uint256"
                }
            },
            "MintingERC20(uint256,uint256,string,uint8,string,bool,bool)": {
                "argument": {
                    "_initialSupply": "uint256",
                    "_maxSupply": "uint256",
                    "_tokenName": "string",
                    "_decimals": "uint8",
                    "_symbol": "string"
                },
                "contract": {
                    "maxSupply": "uint256"
                }
            },
            "addMinter(address)": {
                "argument": {},
                "contract": {
                    "maxSupply": "uint256"
                }
            },
            "removeMinter(address)": {
                "argument": {},
                "contract": {
                    "maxSupply": "uint256"
                }
            },
            "mint(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "maxSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "totalSupply()": [
                611,
                141
            ],
            "addMinter(address)": [
                1615,
                405
            ],
            "transferFrom(address,address,uint256)": [
                654,
                163
            ],
            "approve(address,uint256)": [
                467,
                97
            ],
            "removeMinter(address)": [
                874,
                207
            ],
            "balanceOf(address)": [
                1274,
                317
            ],
            "approveAndCall(address,uint256,bytes)": [
                1783,
                449
            ],
            "transferOwnership(address)": [
                2250,
                559
            ],
            "mint(address,uint256)": [
                1033,
                273
            ],
            "transfer(address,uint256)": [
                1682,
                427
            ],
            "acceptOwnership()": [
                1361,
                339
            ]
        },
        "block_CALL_mapping": {
            "jump5294": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "block5294": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "Node": {
        "function_list": [
            "MintingERC20(uint256,uint256,string,uint8,string,bool,bool)",
            "addMinter(address)",
            "removeMinter(address)",
            "mint(address,uint256)",
            "ERC20(uint256,string,uint8,string,bool,bool)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "approve(address,uint256)",
            "approveAndCall(address,uint256,bytes)",
            "transferFrom(address,address,uint256)",
            "setBalance(address,uint256)",
            "transferInternal(address,address,uint256)",
            "Ownable()",
            "transferOwnership(address)",
            "acceptOwnership()",
            "Node(uint256,string,string,uint8,bool)",
            "setLocked(bool)",
            "setNodePhases(address)",
            "unfreeze()",
            "buyBack(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "MintingERC20(uint256,uint256,string,uint8,string,bool,bool)": {
                "argument": {
                    "_initialSupply": "uint256",
                    "_maxSupply": "uint256",
                    "_tokenName": "string",
                    "_decimals": "uint8",
                    "_symbol": "string"
                },
                "contract": {}
            },
            "addMinter(address)": {
                "argument": {},
                "contract": {}
            },
            "removeMinter(address)": {
                "argument": {},
                "contract": {}
            },
            "mint(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "ERC20(uint256,string,uint8,string,bool,bool)": {
                "argument": {
                    "_initialSupply": "uint256",
                    "_tokenName": "string",
                    "_decimalUnits": "uint8",
                    "_tokenSymbol": "string"
                },
                "contract": {}
            },
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "setBalance(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "transferInternal(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "acceptOwnership()": {
                "argument": {},
                "contract": {}
            },
            "Node(uint256,string,string,uint8,bool)": {
                "argument": {
                    "_maxSupply": "uint256",
                    "_tokenName": "string",
                    "_tokenSymbol": "string",
                    "_precision": "uint8"
                },
                "contract": {}
            },
            "setLocked(bool)": {
                "argument": {},
                "contract": {}
            },
            "setNodePhases(address)": {
                "argument": {},
                "contract": {}
            },
            "unfreeze()": {
                "argument": {},
                "contract": {}
            },
            "buyBack(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "totalSupply()": [
                677,
                141
            ],
            "addMinter(address)": [
                1905,
                493
            ],
            "transferFrom(address,address,uint256)": [
                767,
                185
            ],
            "approve(address,uint256)": [
                533,
                97
            ],
            "unfreeze()": [
                1541,
                383
            ],
            "setNodePhases(address)": [
                1474,
                361
            ],
            "buyBack(address)": [
                1972,
                515
            ],
            "removeMinter(address)": [
                987,
                229
            ],
            "setLocked(bool)": [
                720,
                163
            ],
            "balanceOf(address)": [
                1564,
                405
            ],
            "approveAndCall(address,uint256,bytes)": [
                2207,
                581
            ],
            "transferOwnership(address)": [
                2674,
                691
            ],
            "mint(address,uint256)": [
                1146,
                295
            ],
            "transfer(address,uint256)": [
                2059,
                537
            ],
            "acceptOwnership()": [
                1651,
                427
            ]
        },
        "block_CALL_mapping": {
            "block4790": [
                "nodePhases.isFinished(1)"
            ],
            "jump4790": [
                "nodePhases.isFinished(1)",
                "nodePhases.isFinished(1)"
            ],
            "block6290": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "jump6290": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "NodeAllocation": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "acceptOwnership()",
            "NodeAllocation(address,address[],address[],uint256[])",
            "getPreICOAddress(uint8)",
            "getPreICOPercentage(uint8)",
            "getPreICOLength()",
            "getICOAddress(uint8)",
            "getICOPercentage(uint8)",
            "getICOLength()",
            "getThreshold(uint8)",
            "getThresholdsLength()",
            "setPreICOAllocation(address[])",
            "setICOAllocation(address[])"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {
                    "preIcoAllocation": "NodeAllocation.PreICOAllocation[]",
                    "icoAllocation": "NodeAllocation.ICOAllocation[]",
                    "distributionThresholds": "uint256[]"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "preIcoAllocation": "NodeAllocation.PreICOAllocation[]",
                    "icoAllocation": "NodeAllocation.ICOAllocation[]",
                    "distributionThresholds": "uint256[]"
                }
            },
            "acceptOwnership()": {
                "argument": {},
                "contract": {
                    "preIcoAllocation": "NodeAllocation.PreICOAllocation[]",
                    "icoAllocation": "NodeAllocation.ICOAllocation[]",
                    "distributionThresholds": "uint256[]"
                }
            },
            "NodeAllocation(address,address[],address[],uint256[])": {
                "argument": {
                    "_preICOAddresses": "address[]",
                    "_icoAddresses": "address[]",
                    "_distributionThresholds": "uint256[]"
                },
                "contract": {
                    "preIcoAllocation": "NodeAllocation.PreICOAllocation[]",
                    "icoAllocation": "NodeAllocation.ICOAllocation[]",
                    "distributionThresholds": "uint256[]"
                }
            },
            "getPreICOAddress(uint8)": {
                "argument": {
                    "_id": "uint8"
                },
                "contract": {
                    "preIcoAllocation": "NodeAllocation.PreICOAllocation[]",
                    "icoAllocation": "NodeAllocation.ICOAllocation[]",
                    "distributionThresholds": "uint256[]"
                }
            },
            "getPreICOPercentage(uint8)": {
                "argument": {
                    "_id": "uint8"
                },
                "contract": {
                    "preIcoAllocation": "NodeAllocation.PreICOAllocation[]",
                    "icoAllocation": "NodeAllocation.ICOAllocation[]",
                    "distributionThresholds": "uint256[]"
                }
            },
            "getPreICOLength()": {
                "argument": {},
                "contract": {
                    "preIcoAllocation": "NodeAllocation.PreICOAllocation[]",
                    "icoAllocation": "NodeAllocation.ICOAllocation[]",
                    "distributionThresholds": "uint256[]"
                }
            },
            "getICOAddress(uint8)": {
                "argument": {
                    "_id": "uint8"
                },
                "contract": {
                    "preIcoAllocation": "NodeAllocation.PreICOAllocation[]",
                    "icoAllocation": "NodeAllocation.ICOAllocation[]",
                    "distributionThresholds": "uint256[]"
                }
            },
            "getICOPercentage(uint8)": {
                "argument": {
                    "_id": "uint8"
                },
                "contract": {
                    "preIcoAllocation": "NodeAllocation.PreICOAllocation[]",
                    "icoAllocation": "NodeAllocation.ICOAllocation[]",
                    "distributionThresholds": "uint256[]"
                }
            },
            "getICOLength()": {
                "argument": {},
                "contract": {
                    "preIcoAllocation": "NodeAllocation.PreICOAllocation[]",
                    "icoAllocation": "NodeAllocation.ICOAllocation[]",
                    "distributionThresholds": "uint256[]"
                }
            },
            "getThreshold(uint8)": {
                "argument": {
                    "_id": "uint8"
                },
                "contract": {
                    "preIcoAllocation": "NodeAllocation.PreICOAllocation[]",
                    "icoAllocation": "NodeAllocation.ICOAllocation[]",
                    "distributionThresholds": "uint256[]"
                }
            },
            "getThresholdsLength()": {
                "argument": {},
                "contract": {
                    "preIcoAllocation": "NodeAllocation.PreICOAllocation[]",
                    "icoAllocation": "NodeAllocation.ICOAllocation[]",
                    "distributionThresholds": "uint256[]"
                }
            },
            "setPreICOAllocation(address[])": {
                "argument": {
                    "_addresses": "address[]"
                },
                "contract": {
                    "preIcoAllocation": "NodeAllocation.PreICOAllocation[]",
                    "icoAllocation": "NodeAllocation.ICOAllocation[]",
                    "distributionThresholds": "uint256[]"
                }
            },
            "setICOAllocation(address[])": {
                "argument": {
                    "_addresses": "address[]"
                },
                "contract": {
                    "preIcoAllocation": "NodeAllocation.PreICOAllocation[]",
                    "icoAllocation": "NodeAllocation.ICOAllocation[]",
                    "distributionThresholds": "uint256[]"
                }
            }
        },
        "function_block_mapping": {
            "getPreICOPercentage(uint8)": [
                865,
                273
            ],
            "getICOAddress(uint8)": [
                1303,
                383
            ],
            "getThresholdsLength()": [
                816,
                251
            ],
            "transferOwnership(address)": [
                1415,
                405
            ],
            "getThreshold(uint8)": [
                1113,
                339
            ],
            "getPreICOAddress(uint8)": [
                495,
                185
            ],
            "getICOLength()": [
                374,
                119
            ],
            "getICOPercentage(uint8)": [
                235,
                75
            ],
            "getPreICOLength()": [
                423,
                141
            ],
            "acceptOwnership()": [
                472,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "NodePhases": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "acceptOwnership()",
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)",
            "matchBytes32Prefix(bytes32,bytes)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "NodePhases(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
            "fallback()",
            "__callback(bytes32,string,bytes)",
            "setCurrentRate(uint256)",
            "setNode(address)",
            "setNodeAllocation(address)",
            "setPhase(uint8,uint256,uint256,uint256,uint256,uint256)",
            "sendToAddress(address,uint256)",
            "sendToAddressWithTime(address,uint256,uint256)",
            "sendToAddressWithBonus(address,uint256,uint256)",
            "getTokens()",
            "getSoldToken()",
            "getAllInvestors()",
            "getBalanceContract()",
            "isSucceed(uint8)",
            "refund()",
            "isFinished(uint8)",
            "getCurrentPhase(uint256)",
            "update()",
            "buy(address,uint256)",
            "onSuccessfulBuy(address,uint256,uint256,uint8)",
            "increaseInvestorsCount(address)",
            "getTokensAmount(uint256,uint8)",
            "getBonusAmount(uint256,uint256)",
            "getICOBonusAmount(uint256,uint256)",
            "allocateICOEthers()",
            "allocatePreICOEthers()",
            "allocate(uint8)",
            "allocateBounty()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "acceptOwnership()": {
                "argument": {},
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "": "uint8"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "_result": "string",
                    "bytes": "bytes"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "matchBytes32Prefix(bytes32,bytes)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "NodePhases(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_minInvest": "uint256",
                    "_tokenPrice": "uint256",
                    "_preIcoMaxCap": "uint256",
                    "_preIcoSince": "uint256",
                    "_preIcoTill": "uint256",
                    "_icoMinCap": "uint256",
                    "_icoMaxCap": "uint256",
                    "_icoSince": "uint256",
                    "_icoTill": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "setCurrentRate(uint256)": {
                "argument": {
                    "_rate": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "setNode(address)": {
                "argument": {},
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "setNodeAllocation(address)": {
                "argument": {},
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "setPhase(uint8,uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_phaseId": "uint8",
                    "_since": "uint256",
                    "_till": "uint256",
                    "_price": "uint256",
                    "_softCap": "uint256",
                    "_hardCap": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "sendToAddress(address,uint256)": {
                "argument": {
                    "_tokens": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "sendToAddressWithTime(address,uint256,uint256)": {
                "argument": {
                    "_tokens": "uint256",
                    "_time": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "sendToAddressWithBonus(address,uint256,uint256)": {
                "argument": {
                    "_tokens": "uint256",
                    "_bonus": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "getTokens()": {
                "argument": {},
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "getSoldToken()": {
                "argument": {},
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "getAllInvestors()": {
                "argument": {},
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "getBalanceContract()": {
                "argument": {},
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "isSucceed(uint8)": {
                "argument": {
                    "phaseId": "uint8"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "refund()": {
                "argument": {},
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "isFinished(uint8)": {
                "argument": {
                    "phaseId": "uint8"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "getCurrentPhase(uint256)": {
                "argument": {
                    "_time": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "update()": {
                "argument": {},
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "buy(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "onSuccessfulBuy(address,uint256,uint256,uint8)": {
                "argument": {
                    "_value": "uint256",
                    "_amount": "uint256",
                    "_currentPhase": "uint8"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "increaseInvestorsCount(address)": {
                "argument": {},
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "getTokensAmount(uint256,uint8)": {
                "argument": {
                    "_value": "uint256",
                    "_currentPhase": "uint8"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "getBonusAmount(uint256,uint256)": {
                "argument": {
                    "_amount": "uint256",
                    "_time": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "getICOBonusAmount(uint256,uint256)": {
                "argument": {
                    "_amount": "uint256",
                    "_time": "uint256"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "allocateICOEthers()": {
                "argument": {},
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "allocatePreICOEthers()": {
                "argument": {},
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "allocate(uint8)": {
                "argument": {
                    "_currentPhase": "uint8"
                },
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "allocateBounty()": {
                "argument": {},
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "phases": "NodePhases.Phase[]",
                    "HOUR": "uint256",
                    "DAY": "uint256",
                    "collectedEthers": "uint256",
                    "soldTokens": "uint256",
                    "priceUpdateAt": "uint256",
                    "investorsCount": "uint256",
                    "lastDistributedAmount": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "getTokens()": [
                2191,
                603
            ],
            "isFinished(uint8)": [
                729,
                185
            ],
            "getCurrentPhase(uint256)": [
                1411,
                317
            ],
            "sendToAddressWithTime(address,uint256,uint256)": [
                2431,
                691
            ],
            "refund()": [
                1482,
                339
            ],
            "__callback(bytes32,string,bytes)": [
                999,
                251
            ],
            "getBalanceContract()": [
                1572,
                383
            ],
            "getSoldToken()": [
                2696,
                757
            ],
            "setNode(address)": [
                2234,
                625
            ],
            "setCurrentRate(uint256)": [
                479,
                97
            ],
            "setNodeAllocation(address)": [
                2124,
                581
            ],
            "__callback(bytes32,string)": [
                567,
                141
            ],
            "getAllInvestors()": [
                2301,
                647
            ],
            "setPhase(uint8,uint256,uint256,uint256,uint256,uint256)": [
                1289,
                295
            ],
            "isSucceed(uint8)": [
                2009,
                537
            ],
            "sendToAddress(address,uint256)": [
                1188,
                273
            ],
            "sendToAddressWithBonus(address,uint256,uint256)": [
                1724,
                471
            ],
            "transferOwnership(address)": [
                2629,
                735
            ],
            "acceptOwnership()": [
                1615,
                405
            ]
        },
        "block_CALL_mapping": {
            "jump15174_0": [
                "nodeAllocation.getPreICOPercentage(i)",
                "nodeAllocation.getPreICOPercentage(i)"
            ],
            "jump13424": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block14891": [
                "nodeAllocation.getPreICOLength()"
            ],
            "block11905": [
                "node.maxSupply()"
            ],
            "jump13094_0": [
                "oraclize.getPrice(datasource)",
                "oraclize.getPrice(datasource)"
            ],
            "block13793_0": [
                "oraclize.getPrice(datasource)"
            ],
            "block13793": [
                "oraclize.getPrice(datasource)"
            ],
            "jump16347": [
                "nodeAllocation.getICOAddress(i)",
                "nodeAllocation.getICOAddress(i)"
            ],
            "block6228": [
                "node.mint(_address, totalAmount)"
            ],
            "block13424_0": [
                "OAR.getAddress()"
            ],
            "block16347": [
                "nodeAllocation.getICOAddress(i)"
            ],
            "block7739_0": [
                "node.mint(_address, totalAmount)"
            ],
            "block5288": [
                "node.buyBack(msg.sender)"
            ],
            "jump5288": [
                "node.buyBack(msg.sender)",
                "node.buyBack(msg.sender)"
            ],
            "block7001": [
                "node.totalSupply()"
            ],
            "block9980_0": [
                "nodeAllocation.getThreshold(j)"
            ],
            "jump11905": [
                "node.maxSupply()",
                "node.maxSupply()"
            ],
            "block9731_0": [
                "nodeAllocation.getThresholdsLength()"
            ],
            "jump12725": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump14253": [
                "oraclize.query.value(price)(0, datasource, arg)",
                "oraclize.query.value(price)(0, datasource, arg)"
            ],
            "block12725": [
                "OAR.getAddress()"
            ],
            "jump16050": [
                "nodeAllocation.getICOPercentage(i)",
                "nodeAllocation.getICOPercentage(i)"
            ],
            "block15471_0": [
                "nodeAllocation.getPreICOAddress(i)"
            ],
            "jump3100": [
                "node.mint(_address, amount)",
                "node.mint(_address, amount)"
            ],
            "block16347_1": [
                "nodeAllocation.getICOAddress(i)"
            ],
            "block16347_0": [
                "nodeAllocation.getICOAddress(i)"
            ],
            "block16050_0": [
                "nodeAllocation.getICOPercentage(i)"
            ],
            "block16050_1": [
                "nodeAllocation.getICOPercentage(i)"
            ],
            "jump7739": [
                "node.mint(_address, totalAmount)",
                "node.mint(_address, totalAmount)"
            ],
            "jump10364_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump13793_0": [
                "oraclize.getPrice(datasource)",
                "oraclize.getPrice(datasource)"
            ],
            "block15174_0": [
                "nodeAllocation.getPreICOPercentage(i)"
            ],
            "block10364_0": [
                "OAR.getAddress()"
            ],
            "jump6228": [
                "node.mint(_address, totalAmount)",
                "node.mint(_address, totalAmount)"
            ],
            "block7001_1": [
                "node.totalSupply()"
            ],
            "block7001_0": [
                "node.totalSupply()"
            ],
            "block7001_3": [
                "node.totalSupply()"
            ],
            "block7001_2": [
                "node.totalSupply()"
            ],
            "block3100_0": [
                "node.mint(_address, amount)"
            ],
            "block15513_0": [
                "nodeAllocation.getPreICOAddress(i).transfer(amount)"
            ],
            "jump13424_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump14891_0": [
                "nodeAllocation.getPreICOLength()",
                "nodeAllocation.getPreICOLength()"
            ],
            "jump16389_1": [
                "nodeAllocation.getICOAddress(i).transfer(amount)",
                "nodeAllocation.getICOAddress(i).transfer(amount)"
            ],
            "jump16389_0": [
                "nodeAllocation.getICOAddress(i).transfer(amount)",
                "nodeAllocation.getICOAddress(i).transfer(amount)"
            ],
            "jump12190": [
                "nodeAllocation.bountyAddress()",
                "nodeAllocation.bountyAddress()"
            ],
            "jump15767_0": [
                "nodeAllocation.getICOLength()",
                "nodeAllocation.getICOLength()"
            ],
            "jump15767_1": [
                "nodeAllocation.getICOLength()",
                "nodeAllocation.getICOLength()"
            ],
            "jump15513_0": [
                "nodeAllocation.getPreICOAddress(i).transfer(amount)",
                "nodeAllocation.getPreICOAddress(i).transfer(amount)"
            ],
            "block14891_0": [
                "nodeAllocation.getPreICOLength()"
            ],
            "jump14891": [
                "nodeAllocation.getPreICOLength()",
                "nodeAllocation.getPreICOLength()"
            ],
            "jump15174": [
                "nodeAllocation.getPreICOPercentage(i)",
                "nodeAllocation.getPreICOPercentage(i)"
            ],
            "jump7001_3": [
                "node.totalSupply()",
                "node.totalSupply()"
            ],
            "jump7001_2": [
                "node.totalSupply()",
                "node.totalSupply()"
            ],
            "jump7001_1": [
                "node.totalSupply()",
                "node.totalSupply()"
            ],
            "jump7001_0": [
                "node.totalSupply()",
                "node.totalSupply()"
            ],
            "jump16347_1": [
                "nodeAllocation.getICOAddress(i)",
                "nodeAllocation.getICOAddress(i)"
            ],
            "jump16347_0": [
                "nodeAllocation.getICOAddress(i)",
                "nodeAllocation.getICOAddress(i)"
            ],
            "block14253_0": [
                "oraclize.query.value(price)(0, datasource, arg)"
            ],
            "block15767_0": [
                "nodeAllocation.getICOLength()"
            ],
            "block15767_1": [
                "nodeAllocation.getICOLength()"
            ],
            "jump8993_0": [
                "node.decimals()",
                "node.decimals()"
            ],
            "block13094": [
                "oraclize.getPrice(datasource)"
            ],
            "block8993_0": [
                "node.decimals()"
            ],
            "block3100": [
                "node.mint(_address, amount)"
            ],
            "jump9731_0": [
                "nodeAllocation.getThresholdsLength()",
                "nodeAllocation.getThresholdsLength()"
            ],
            "block15174": [
                "nodeAllocation.getPreICOPercentage(i)"
            ],
            "block16389": [
                "nodeAllocation.getICOAddress(i).transfer(amount)"
            ],
            "jump16389": [
                "nodeAllocation.getICOAddress(i).transfer(amount)",
                "nodeAllocation.getICOAddress(i).transfer(amount)"
            ],
            "block15471": [
                "nodeAllocation.getPreICOAddress(i)"
            ],
            "block10364": [
                "OAR.getAddress()"
            ],
            "block8993": [
                "node.decimals()"
            ],
            "block9980": [
                "nodeAllocation.getThreshold(j)"
            ],
            "jump15471": [
                "nodeAllocation.getPreICOAddress(i)",
                "nodeAllocation.getPreICOAddress(i)"
            ],
            "block16389_1": [
                "nodeAllocation.getICOAddress(i).transfer(amount)"
            ],
            "block16389_0": [
                "nodeAllocation.getICOAddress(i).transfer(amount)"
            ],
            "block12383": [
                "node.mint(nodeAllocation.bountyAddress(), amount)"
            ],
            "jump12725_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump16050_0": [
                "nodeAllocation.getICOPercentage(i)",
                "nodeAllocation.getICOPercentage(i)"
            ],
            "jump16050_1": [
                "nodeAllocation.getICOPercentage(i)",
                "nodeAllocation.getICOPercentage(i)"
            ],
            "block14253": [
                "oraclize.query.value(price)(0, datasource, arg)"
            ],
            "jump15471_0": [
                "nodeAllocation.getPreICOAddress(i)",
                "nodeAllocation.getPreICOAddress(i)"
            ],
            "block15513": [
                "nodeAllocation.getPreICOAddress(i).transfer(amount)"
            ],
            "block10621_0": [
                "oraclize.cbAddress()"
            ],
            "jump5330": [
                "msg.sender.transfer(refundAmount)",
                "msg.sender.transfer(refundAmount)"
            ],
            "block12725_0": [
                "OAR.getAddress()"
            ],
            "jump15767": [
                "nodeAllocation.getICOLength()",
                "nodeAllocation.getICOLength()"
            ],
            "block13094_0": [
                "oraclize.getPrice(datasource)"
            ],
            "jump9731": [
                "nodeAllocation.getThresholdsLength()",
                "nodeAllocation.getThresholdsLength()"
            ],
            "jump14253_0": [
                "oraclize.query.value(price)(0, datasource, arg)",
                "oraclize.query.value(price)(0, datasource, arg)"
            ],
            "jump10621": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "block10621": [
                "oraclize.cbAddress()"
            ],
            "jump10364": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump4484": [
                "node.maxSupply()",
                "node.maxSupply()"
            ],
            "jump8993": [
                "node.decimals()",
                "node.decimals()"
            ],
            "block9731": [
                "nodeAllocation.getThresholdsLength()"
            ],
            "jump15513": [
                "nodeAllocation.getPreICOAddress(i).transfer(amount)",
                "nodeAllocation.getPreICOAddress(i).transfer(amount)"
            ],
            "block15767": [
                "nodeAllocation.getICOLength()"
            ],
            "jump3100_0": [
                "node.mint(_address, amount)",
                "node.mint(_address, amount)"
            ],
            "block12190": [
                "nodeAllocation.bountyAddress()"
            ],
            "jump9980": [
                "nodeAllocation.getThreshold(j)",
                "nodeAllocation.getThreshold(j)"
            ],
            "block5330": [
                "msg.sender.transfer(refundAmount)"
            ],
            "jump9980_0": [
                "nodeAllocation.getThreshold(j)",
                "nodeAllocation.getThreshold(j)"
            ],
            "jump10621_0": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "jump7739_0": [
                "node.mint(_address, totalAmount)",
                "node.mint(_address, totalAmount)"
            ],
            "block13424": [
                "OAR.getAddress()"
            ],
            "block7739": [
                "node.mint(_address, totalAmount)"
            ],
            "block4484": [
                "node.maxSupply()"
            ],
            "jump13094": [
                "oraclize.getPrice(datasource)",
                "oraclize.getPrice(datasource)"
            ],
            "jump12383": [
                "node.mint(nodeAllocation.bountyAddress(), amount)",
                "node.mint(nodeAllocation.bountyAddress(), amount)"
            ],
            "jump7001": [
                "node.totalSupply()",
                "node.totalSupply()"
            ],
            "jump13793": [
                "oraclize.getPrice(datasource)",
                "oraclize.getPrice(datasource)"
            ],
            "block16050": [
                "nodeAllocation.getICOPercentage(i)"
            ]
        }
    }
}