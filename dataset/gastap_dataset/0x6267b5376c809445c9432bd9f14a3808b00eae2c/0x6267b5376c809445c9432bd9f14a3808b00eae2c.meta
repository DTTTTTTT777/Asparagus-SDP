{
    "ERC20Basic": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "balanceOf(address)": [
                124,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                412,
                97
            ],
            "transfer(address,uint256)": [
                1396,
                361
            ],
            "allowance(address,address)": [
                1802,
                449
            ],
            "balanceOf(address)": [
                1055,
                273
            ],
            "transferFrom(address,address,uint256)": [
                599,
                163
            ]
        },
        "block_CALL_mapping": {
            "block4085": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "jump4085": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "Haltable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "halt()",
            "unhalt()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "halt()": {
                "argument": {},
                "contract": {}
            },
            "unhalt()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "unhalt()": [
                271,
                141
            ],
            "transferOwnership(address)": [
                294,
                163
            ],
            "halt()": [
                114,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "PricingStrategy": {
        "function_list": [
            "isPricingStrategy()",
            "isSane(address)",
            "isPresalePurchase(address)",
            "calculatePrice(uint256,uint256,uint256,address,uint256)"
        ],
        "initial_state": {
            "isPricingStrategy()": {
                "argument": {},
                "contract": {}
            },
            "isSane(address)": {
                "argument": {},
                "contract": {}
            },
            "isPresalePurchase(address)": {
                "argument": {},
                "contract": {}
            },
            "calculatePrice(uint256,uint256,uint256,address,uint256)": {
                "argument": {
                    "value": "uint256",
                    "weiRaised": "uint256",
                    "tokensSold": "uint256",
                    "decimals": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {
            "jump769": [
                "owner.send(this.balance)",
                "owner.send(this.balance)"
            ],
            "block769": [
                "owner.send(this.balance)"
            ]
        }
    },
    "SafeMathLib": {
        "function_list": [
            "times(uint256,uint256)",
            "minus(uint256,uint256)",
            "plus(uint256,uint256)"
        ],
        "initial_state": {
            "times(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "minus(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "plus(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "plus(uint256,uint256)": [
                190,
                105
            ],
            "minus(uint256,uint256)": [
                265,
                127
            ],
            "times(uint256,uint256)": [
                115,
                83
            ]
        },
        "block_CALL_mapping": {}
    },
    "Crowdsale": {
        "function_list": [
            "CrowdsaleBase(address,PricingStrategy,address,uint256,uint256,uint256,uint256)",
            "fallback()",
            "investInternal(address,uint128)",
            "finalize()",
            "setFinalizeAgent(FinalizeAgent)",
            "setEndsAt(uint256)",
            "setPricingStrategy(PricingStrategy)",
            "setMultisig(address)",
            "loadRefund()",
            "refund()",
            "isMinimumGoalReached()",
            "isFinalizerSane()",
            "isPricingSane()",
            "getState()",
            "setOwnerTestValue(uint256)",
            "setEarlyParicipantWhitelist(address,bool)",
            "isCrowdsale()",
            "isBreakingCap(uint256,uint256,uint256,uint256)",
            "isCrowdsaleFull()",
            "assignTokens(address,uint256)",
            "halt()",
            "unhalt()",
            "Ownable()",
            "transferOwnership(address)",
            "Crowdsale(address,PricingStrategy,address,uint256,uint256,uint256,uint256)",
            "preallocate(address,uint256,uint256)",
            "investWithSignedAddress(address,uint128,uint8,bytes32,bytes32)",
            "investWithCustomerId(address,uint128)",
            "invest(address)",
            "buyWithSignedAddress(uint128,uint8,bytes32,bytes32)",
            "buyWithCustomerIdWithChecksum(uint128,bytes1)",
            "buyWithCustomerId(uint128)",
            "buy()",
            "fallback()",
            "setRequireCustomerId(bool)",
            "setRequireSignedAddress(bool,address)",
            "setRequireWhitelistedAddress(bool,address)",
            "addToWhitelist(address[])",
            "removeFromWhitelist(address[])",
            "isWhitelistedAddress(address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "CrowdsaleBase(address,PricingStrategy,address,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_start": "uint256",
                    "_end": "uint256",
                    "_minimumFundingGoal": "uint256",
                    "_maxInvestment": "uint256"
                },
                "contract": {}
            },
            "fallback()": {
                "argument": {},
                "contract": {}
            },
            "investInternal(address,uint128)": {
                "argument": {
                    "customerId": "uint128"
                },
                "contract": {}
            },
            "finalize()": {
                "argument": {},
                "contract": {}
            },
            "setFinalizeAgent(FinalizeAgent)": {
                "argument": {},
                "contract": {}
            },
            "setEndsAt(uint256)": {
                "argument": {
                    "time": "uint256"
                },
                "contract": {}
            },
            "setPricingStrategy(PricingStrategy)": {
                "argument": {},
                "contract": {}
            },
            "setMultisig(address)": {
                "argument": {},
                "contract": {}
            },
            "loadRefund()": {
                "argument": {},
                "contract": {}
            },
            "refund()": {
                "argument": {},
                "contract": {}
            },
            "isMinimumGoalReached()": {
                "argument": {},
                "contract": {}
            },
            "isFinalizerSane()": {
                "argument": {},
                "contract": {}
            },
            "isPricingSane()": {
                "argument": {},
                "contract": {}
            },
            "getState()": {
                "argument": {},
                "contract": {}
            },
            "setOwnerTestValue(uint256)": {
                "argument": {
                    "val": "uint256"
                },
                "contract": {}
            },
            "setEarlyParicipantWhitelist(address,bool)": {
                "argument": {},
                "contract": {}
            },
            "isCrowdsale()": {
                "argument": {},
                "contract": {}
            },
            "isBreakingCap(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "weiAmount": "uint256",
                    "tokenAmount": "uint256",
                    "weiRaisedTotal": "uint256",
                    "tokensSoldTotal": "uint256"
                },
                "contract": {}
            },
            "isCrowdsaleFull()": {
                "argument": {},
                "contract": {}
            },
            "assignTokens(address,uint256)": {
                "argument": {
                    "tokenAmount": "uint256"
                },
                "contract": {}
            },
            "halt()": {
                "argument": {},
                "contract": {}
            },
            "unhalt()": {
                "argument": {},
                "contract": {}
            },
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "Crowdsale(address,PricingStrategy,address,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_start": "uint256",
                    "_end": "uint256",
                    "_minimumFundingGoal": "uint256",
                    "_maxInvestment": "uint256"
                },
                "contract": {}
            },
            "preallocate(address,uint256,uint256)": {
                "argument": {
                    "fullTokens": "uint256",
                    "weiPrice": "uint256"
                },
                "contract": {}
            },
            "investWithSignedAddress(address,uint128,uint8,bytes32,bytes32)": {
                "argument": {
                    "customerId": "uint128",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {}
            },
            "investWithCustomerId(address,uint128)": {
                "argument": {
                    "customerId": "uint128"
                },
                "contract": {}
            },
            "invest(address)": {
                "argument": {},
                "contract": {}
            },
            "buyWithSignedAddress(uint128,uint8,bytes32,bytes32)": {
                "argument": {
                    "customerId": "uint128",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {}
            },
            "buyWithCustomerIdWithChecksum(uint128,bytes1)": {
                "argument": {
                    "customerId": "uint128",
                    "checksum": "bytes1"
                },
                "contract": {}
            },
            "buyWithCustomerId(uint128)": {
                "argument": {
                    "customerId": "uint128"
                },
                "contract": {}
            },
            "buy()": {
                "argument": {},
                "contract": {}
            },
            "setRequireCustomerId(bool)": {
                "argument": {},
                "contract": {}
            },
            "setRequireSignedAddress(bool,address)": {
                "argument": {},
                "contract": {}
            },
            "setRequireWhitelistedAddress(bool,address)": {
                "argument": {},
                "contract": {}
            },
            "addToWhitelist(address[])": {
                "argument": {
                    "_addresses": "address[]"
                },
                "contract": {}
            },
            "removeFromWhitelist(address[])": {
                "argument": {
                    "_addresses": "address[]"
                },
                "contract": {}
            },
            "isWhitelistedAddress(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                239,
                141
            ]
        },
        "block_CALL_mapping": {
            "block1715": [
                "token.mint(restricted, restrictedTokens)"
            ],
            "block1909": [
                "token.finishMinting()"
            ],
            "block1085": [
                "token.mint(msg.sender, tokens)"
            ],
            "jump508_0": [
                "multisig.transfer(msg.value)",
                "multisig.transfer(msg.value)"
            ],
            "jump1085": [
                "token.mint(msg.sender, tokens)",
                "token.mint(msg.sender, tokens)"
            ],
            "block508_0": [
                "multisig.transfer(msg.value)"
            ],
            "block1085_0": [
                "token.mint(msg.sender, tokens)"
            ],
            "jump1909": [
                "token.finishMinting()",
                "token.finishMinting()"
            ],
            "jump1085_1": [
                "token.mint(msg.sender, tokens)",
                "token.mint(msg.sender, tokens)"
            ],
            "jump1085_0": [
                "token.mint(msg.sender, tokens)",
                "token.mint(msg.sender, tokens)"
            ],
            "block1085_1": [
                "token.mint(msg.sender, tokens)"
            ],
            "jump1715": [
                "token.mint(restricted, restrictedTokens)",
                "token.mint(restricted, restrictedTokens)"
            ],
            "block1377": [
                "token.totalSupply()"
            ],
            "jump508": [
                "multisig.transfer(msg.value)",
                "multisig.transfer(msg.value)"
            ],
            "block508": [
                "multisig.transfer(msg.value)"
            ],
            "jump508_1": [
                "multisig.transfer(msg.value)",
                "multisig.transfer(msg.value)"
            ],
            "block508_1": [
                "multisig.transfer(msg.value)"
            ],
            "jump1377": [
                "token.totalSupply()",
                "token.totalSupply()"
            ]
        }
    },
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "BasicToken": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transfer(address,uint256)": [
                222,
                119
            ],
            "balanceOf(address)": [
                135,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "StandardToken": {
        "function_list": [
            "transfer(address,uint256)",
            "balanceOf(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "StandardTokenExt": {
        "function_list": [
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "balanceOf(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "isToken()"
        ],
        "initial_state": {
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "isToken()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                136,
                75
            ],
            "balanceOf(address)": [
                413,
                141
            ],
            "allowance(address,address)": [
                601,
                185
            ],
            "transferFrom(address,address,uint256)": [
                280,
                119
            ],
            "transfer(address,uint256)": [
                500,
                163
            ],
            "isToken()": [
                720,
                207
            ]
        },
        "block_CALL_mapping": {}
    },
    "MintableToken": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "isToken()",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "balanceOf(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "mint(address,uint256)",
            "setMintAgent(address,bool)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "isToken()": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "mint(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {}
            },
            "setMintAgent(address,bool)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                271,
                97
            ],
            "mint(address,uint256)": [
                571,
                185
            ],
            "balanceOf(address)": [
                719,
                229
            ],
            "allowance(address,address)": [
                1064,
                339
            ],
            "transferFrom(address,address,uint256)": [
                415,
                141
            ],
            "transferOwnership(address)": [
                1183,
                361
            ],
            "transfer(address,uint256)": [
                963,
                317
            ]
        },
        "block_CALL_mapping": {}
    },
    "MintedEthCappedCrowdsale": {
        "function_list": [
            "Crowdsale(address,PricingStrategy,address,uint256,uint256,uint256,uint256)",
            "preallocate(address,uint256,uint256)",
            "investWithSignedAddress(address,uint128,uint8,bytes32,bytes32)",
            "investWithCustomerId(address,uint128)",
            "invest(address)",
            "buyWithSignedAddress(uint128,uint8,bytes32,bytes32)",
            "buyWithCustomerIdWithChecksum(uint128,bytes1)",
            "buyWithCustomerId(uint128)",
            "buy()",
            "fallback()",
            "setRequireCustomerId(bool)",
            "setRequireSignedAddress(bool,address)",
            "setRequireWhitelistedAddress(bool,address)",
            "addToWhitelist(address[])",
            "removeFromWhitelist(address[])",
            "isWhitelistedAddress(address)",
            "CrowdsaleBase(address,PricingStrategy,address,uint256,uint256,uint256,uint256)",
            "fallback()",
            "investInternal(address,uint128)",
            "finalize()",
            "setFinalizeAgent(FinalizeAgent)",
            "setEndsAt(uint256)",
            "setPricingStrategy(PricingStrategy)",
            "setMultisig(address)",
            "loadRefund()",
            "refund()",
            "isMinimumGoalReached()",
            "isFinalizerSane()",
            "isPricingSane()",
            "getState()",
            "setOwnerTestValue(uint256)",
            "setEarlyParicipantWhitelist(address,bool)",
            "isCrowdsale()",
            "isBreakingCap(uint256,uint256,uint256,uint256)",
            "isCrowdsaleFull()",
            "assignTokens(address,uint256)",
            "halt()",
            "unhalt()",
            "Ownable()",
            "transferOwnership(address)",
            "MintedEthCappedCrowdsale(address,PricingStrategy,address,uint256,uint256,uint256,uint256,uint256)",
            "isBreakingCap(uint256,uint256,uint256,uint256)",
            "isCrowdsaleFull()",
            "assignTokens(address,uint256)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Crowdsale(address,PricingStrategy,address,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_start": "uint256",
                    "_end": "uint256",
                    "_minimumFundingGoal": "uint256",
                    "_maxInvestment": "uint256"
                },
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "preallocate(address,uint256,uint256)": {
                "argument": {
                    "fullTokens": "uint256",
                    "weiPrice": "uint256"
                },
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "investWithSignedAddress(address,uint128,uint8,bytes32,bytes32)": {
                "argument": {
                    "customerId": "uint128",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "investWithCustomerId(address,uint128)": {
                "argument": {
                    "customerId": "uint128"
                },
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "invest(address)": {
                "argument": {},
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "buyWithSignedAddress(uint128,uint8,bytes32,bytes32)": {
                "argument": {
                    "customerId": "uint128",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "buyWithCustomerIdWithChecksum(uint128,bytes1)": {
                "argument": {
                    "customerId": "uint128",
                    "checksum": "bytes1"
                },
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "buyWithCustomerId(uint128)": {
                "argument": {
                    "customerId": "uint128"
                },
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "buy()": {
                "argument": {},
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "setRequireCustomerId(bool)": {
                "argument": {},
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "setRequireSignedAddress(bool,address)": {
                "argument": {},
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "setRequireWhitelistedAddress(bool,address)": {
                "argument": {},
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "addToWhitelist(address[])": {
                "argument": {
                    "_addresses": "address[]"
                },
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "removeFromWhitelist(address[])": {
                "argument": {
                    "_addresses": "address[]"
                },
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "isWhitelistedAddress(address)": {
                "argument": {},
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "CrowdsaleBase(address,PricingStrategy,address,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_start": "uint256",
                    "_end": "uint256",
                    "_minimumFundingGoal": "uint256",
                    "_maxInvestment": "uint256"
                },
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "investInternal(address,uint128)": {
                "argument": {
                    "customerId": "uint128"
                },
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "finalize()": {
                "argument": {},
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "setFinalizeAgent(FinalizeAgent)": {
                "argument": {},
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "setEndsAt(uint256)": {
                "argument": {
                    "time": "uint256"
                },
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "setPricingStrategy(PricingStrategy)": {
                "argument": {},
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "setMultisig(address)": {
                "argument": {},
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "loadRefund()": {
                "argument": {},
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "refund()": {
                "argument": {},
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "isMinimumGoalReached()": {
                "argument": {},
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "isFinalizerSane()": {
                "argument": {},
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "isPricingSane()": {
                "argument": {},
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "getState()": {
                "argument": {},
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "setOwnerTestValue(uint256)": {
                "argument": {
                    "val": "uint256"
                },
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "setEarlyParicipantWhitelist(address,bool)": {
                "argument": {},
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "isCrowdsale()": {
                "argument": {},
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "isBreakingCap(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "weiAmount": "uint256",
                    "tokenAmount": "uint256",
                    "weiRaisedTotal": "uint256",
                    "tokensSoldTotal": "uint256"
                },
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "isCrowdsaleFull()": {
                "argument": {},
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "assignTokens(address,uint256)": {
                "argument": {
                    "tokenAmount": "uint256"
                },
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "halt()": {
                "argument": {},
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "unhalt()": {
                "argument": {},
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "Ownable()": {
                "argument": {},
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "weiCap": "uint256"
                }
            },
            "MintedEthCappedCrowdsale(address,PricingStrategy,address,uint256,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_start": "uint256",
                    "_end": "uint256",
                    "_minimumFundingGoal": "uint256",
                    "_weiCap": "uint256",
                    "_maxInvestment": "uint256"
                },
                "contract": {
                    "weiCap": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "refund()": [
                1664,
                449
            ],
            "buy()": [
                2875,
                889
            ],
            "setMultisig(address)": [
                3882,
                1263
            ],
            "isMinimumGoalReached()": [
                2081,
                647
            ],
            "invest(address)": [
                786,
                119
            ],
            "setRequireCustomerId(bool)": [
                2128,
                669
            ],
            "isFinalizerSane()": [
                2885,
                911
            ],
            "isBreakingCap(uint256,uint256,uint256,uint256)": [
                2701,
                845
            ],
            "setEndsAt(uint256)": [
                1883,
                559
            ],
            "isCrowdsaleFull()": [
                3571,
                1153
            ],
            "loadRefund()": [
                2218,
                713
            ],
            "finalize()": [
                1531,
                383
            ],
            "isPricingSane()": [
                840,
                141
            ],
            "halt()": [
                1817,
                515
            ],
            "setEarlyParicipantWhitelist(address,bool)": [
                3736,
                1219
            ],
            "isCrowdsale()": [
                1484,
                361
            ],
            "setOwnerTestValue(uint256)": [
                2395,
                757
            ],
            "getState()": [
                973,
                207
            ],
            "unhalt()": [
                3339,
                1065
            ],
            "transferOwnership(address)": [
                3815,
                1241
            ]
        },
        "block_CALL_mapping": {
            "block5040_6": [
                "pricingStrategy.isSane(address(this))"
            ],
            "block5040_7": [
                "pricingStrategy.isSane(address(this))"
            ],
            "block5040_4": [
                "pricingStrategy.isSane(address(this))"
            ],
            "block5040_5": [
                "pricingStrategy.isSane(address(this))"
            ],
            "block5040_2": [
                "pricingStrategy.isSane(address(this))"
            ],
            "jump6410": [
                "finalizeAgent.finalizeCrowdsale()",
                "finalizeAgent.finalizeCrowdsale()"
            ],
            "block5040_0": [
                "pricingStrategy.isSane(address(this))"
            ],
            "block5040_1": [
                "pricingStrategy.isSane(address(this))"
            ],
            "block8611": [
                "token.decimals()"
            ],
            "block5040_8": [
                "pricingStrategy.isSane(address(this))"
            ],
            "block11814": [
                "token.decimals()"
            ],
            "block13082_4": [
                "mintableToken.mint(receiver, tokenAmount)"
            ],
            "block13082_2": [
                "mintableToken.mint(receiver, tokenAmount)"
            ],
            "block13082_3": [
                "mintableToken.mint(receiver, tokenAmount)"
            ],
            "block13082_0": [
                "mintableToken.mint(receiver, tokenAmount)"
            ],
            "block13082_1": [
                "mintableToken.mint(receiver, tokenAmount)"
            ],
            "block5040": [
                "pricingStrategy.isSane(address(this))"
            ],
            "block6410": [
                "finalizeAgent.finalizeCrowdsale()"
            ],
            "block9208": [
                "tokenVesting.isVestingSet(receiver)"
            ],
            "jump4777_10": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "jump12552_1": [
                "multisigWallet.send(weiAmount)",
                "multisigWallet.send(weiAmount)"
            ],
            "jump12552_0": [
                "multisigWallet.send(weiAmount)",
                "multisigWallet.send(weiAmount)"
            ],
            "jump12552_2": [
                "multisigWallet.send(weiAmount)",
                "multisigWallet.send(weiAmount)"
            ],
            "jump12552": [
                "multisigWallet.send(weiAmount)",
                "multisigWallet.send(weiAmount)"
            ],
            "block5040_3": [
                "pricingStrategy.isSane(address(this))"
            ],
            "block9486": [
                "tokenVesting.setVestingWithDefaultSchedule(receiver, lockedTokenAmount)"
            ],
            "jump11814_2": [
                "token.decimals()",
                "token.decimals()"
            ],
            "jump11814_1": [
                "token.decimals()",
                "token.decimals()"
            ],
            "jump11814_0": [
                "token.decimals()",
                "token.decimals()"
            ],
            "jump12030_0": [
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())",
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())"
            ],
            "jump12030_1": [
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())",
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())"
            ],
            "jump12030_2": [
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())",
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())"
            ],
            "jump12030": [
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())",
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())"
            ],
            "block12030_2": [
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())"
            ],
            "block12030_0": [
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())"
            ],
            "block12030_1": [
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())"
            ],
            "jump5040_9": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "block12552_2": [
                "multisigWallet.send(weiAmount)"
            ],
            "block12552_1": [
                "multisigWallet.send(weiAmount)"
            ],
            "block12552_0": [
                "multisigWallet.send(weiAmount)"
            ],
            "block4777_10": [
                "finalizeAgent.isSane()"
            ],
            "block7044": [
                "msg.sender.send(weiValue)"
            ],
            "block4777_8": [
                "finalizeAgent.isSane()"
            ],
            "block4777_9": [
                "finalizeAgent.isSane()"
            ],
            "block4777_0": [
                "finalizeAgent.isSane()"
            ],
            "block4777_1": [
                "finalizeAgent.isSane()"
            ],
            "block4777_2": [
                "finalizeAgent.isSane()"
            ],
            "block4777_3": [
                "finalizeAgent.isSane()"
            ],
            "block4777_4": [
                "finalizeAgent.isSane()"
            ],
            "block4777_5": [
                "finalizeAgent.isSane()"
            ],
            "block4777_6": [
                "finalizeAgent.isSane()"
            ],
            "block4777_7": [
                "finalizeAgent.isSane()"
            ],
            "block11814_1": [
                "token.decimals()"
            ],
            "block11814_0": [
                "token.decimals()"
            ],
            "block11814_2": [
                "token.decimals()"
            ],
            "jump7044": [
                "msg.sender.send(weiValue)",
                "msg.sender.send(weiValue)"
            ],
            "block12552": [
                "multisigWallet.send(weiAmount)"
            ],
            "jump4777_6": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "jump4777_7": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "jump4777_4": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "jump4777_5": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "jump4777_2": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "jump4777_3": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "jump4777_0": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "jump4777_1": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "jump4777_8": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "jump4777_9": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "jump6755": [
                "pricingStrategy.isPricingStrategy()",
                "pricingStrategy.isPricingStrategy()"
            ],
            "jump11814": [
                "token.decimals()",
                "token.decimals()"
            ],
            "block5040_9": [
                "pricingStrategy.isSane(address(this))"
            ],
            "jump4461": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "block13082": [
                "mintableToken.mint(receiver, tokenAmount)"
            ],
            "jump5040_8": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "jump10157": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "jump5040_4": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "jump5040_5": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "jump5040_6": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "jump5040_7": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "jump5040_0": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "jump5040_1": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "jump5040_2": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "jump5040_3": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "jump4777": [
                "finalizeAgent.isSane()",
                "finalizeAgent.isSane()"
            ],
            "block12030": [
                "pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals())"
            ],
            "jump9486": [
                "tokenVesting.setVestingWithDefaultSchedule(receiver, lockedTokenAmount)",
                "tokenVesting.setVestingWithDefaultSchedule(receiver, lockedTokenAmount)"
            ],
            "block4777": [
                "finalizeAgent.isSane()"
            ],
            "jump5040": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "block5040_10": [
                "pricingStrategy.isSane(address(this))"
            ],
            "block4461": [
                "pricingStrategy.isSane(address(this))"
            ],
            "block10157": [
                "finalizeAgent.isSane()"
            ],
            "block6755": [
                "pricingStrategy.isPricingStrategy()"
            ],
            "jump8611": [
                "token.decimals()",
                "token.decimals()"
            ],
            "jump5040_10": [
                "pricingStrategy.isSane(address(this))",
                "pricingStrategy.isSane(address(this))"
            ],
            "jump13082": [
                "mintableToken.mint(receiver, tokenAmount)",
                "mintableToken.mint(receiver, tokenAmount)"
            ],
            "jump5543": [
                "finalizeAgent.isFinalizeAgent()",
                "finalizeAgent.isFinalizeAgent()"
            ],
            "jump9208": [
                "tokenVesting.isVestingSet(receiver)",
                "tokenVesting.isVestingSet(receiver)"
            ],
            "block5543": [
                "finalizeAgent.isFinalizeAgent()"
            ],
            "jump13082_4": [
                "mintableToken.mint(receiver, tokenAmount)",
                "mintableToken.mint(receiver, tokenAmount)"
            ],
            "jump13082_0": [
                "mintableToken.mint(receiver, tokenAmount)",
                "mintableToken.mint(receiver, tokenAmount)"
            ],
            "jump13082_1": [
                "mintableToken.mint(receiver, tokenAmount)",
                "mintableToken.mint(receiver, tokenAmount)"
            ],
            "jump13082_2": [
                "mintableToken.mint(receiver, tokenAmount)",
                "mintableToken.mint(receiver, tokenAmount)"
            ],
            "jump13082_3": [
                "mintableToken.mint(receiver, tokenAmount)",
                "mintableToken.mint(receiver, tokenAmount)"
            ]
        }
    }
}