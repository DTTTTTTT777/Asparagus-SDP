{
    "BetterAuction": {
        "function_list": [
            "BetterAuction()",
            "auctionEndTime()",
            "getBid(address)",
            "bidderUpdateBid()",
            "bidderPlaceBid()",
            "nonHighestBidderRefund()",
            "createProposal(address,bool)",
            "voteProposal(uint256)",
            "fallback()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "BetterAuction()": {
                "argument": {},
                "contract": {
                    "auctionStart": "uint256",
                    "biddingPeriod": "uint256",
                    "recoveryAfterPeriod": "uint256",
                    "WITHDRAWAL_TRIGGER_AMOUNT": "uint256",
                    "REQUIRED_SIGNATURES": "uint256",
                    "proposals": "BetterAuction.Proposal[]",
                    "numProposals": "uint256",
                    "highestBid": "uint256",
                    "_biddingPeriod": "uint256",
                    "_recoveryAfterPeriod": "uint256"
                }
            },
            "auctionEndTime()": {
                "argument": {},
                "contract": {
                    "auctionStart": "uint256",
                    "biddingPeriod": "uint256",
                    "recoveryAfterPeriod": "uint256",
                    "WITHDRAWAL_TRIGGER_AMOUNT": "uint256",
                    "REQUIRED_SIGNATURES": "uint256",
                    "proposals": "BetterAuction.Proposal[]",
                    "numProposals": "uint256",
                    "highestBid": "uint256",
                    "_biddingPeriod": "uint256",
                    "_recoveryAfterPeriod": "uint256"
                }
            },
            "getBid(address)": {
                "argument": {},
                "contract": {
                    "auctionStart": "uint256",
                    "biddingPeriod": "uint256",
                    "recoveryAfterPeriod": "uint256",
                    "WITHDRAWAL_TRIGGER_AMOUNT": "uint256",
                    "REQUIRED_SIGNATURES": "uint256",
                    "proposals": "BetterAuction.Proposal[]",
                    "numProposals": "uint256",
                    "highestBid": "uint256",
                    "_biddingPeriod": "uint256",
                    "_recoveryAfterPeriod": "uint256"
                }
            },
            "bidderUpdateBid()": {
                "argument": {},
                "contract": {
                    "auctionStart": "uint256",
                    "biddingPeriod": "uint256",
                    "recoveryAfterPeriod": "uint256",
                    "WITHDRAWAL_TRIGGER_AMOUNT": "uint256",
                    "REQUIRED_SIGNATURES": "uint256",
                    "proposals": "BetterAuction.Proposal[]",
                    "numProposals": "uint256",
                    "highestBid": "uint256",
                    "_biddingPeriod": "uint256",
                    "_recoveryAfterPeriod": "uint256"
                }
            },
            "bidderPlaceBid()": {
                "argument": {},
                "contract": {
                    "auctionStart": "uint256",
                    "biddingPeriod": "uint256",
                    "recoveryAfterPeriod": "uint256",
                    "WITHDRAWAL_TRIGGER_AMOUNT": "uint256",
                    "REQUIRED_SIGNATURES": "uint256",
                    "proposals": "BetterAuction.Proposal[]",
                    "numProposals": "uint256",
                    "highestBid": "uint256",
                    "_biddingPeriod": "uint256",
                    "_recoveryAfterPeriod": "uint256"
                }
            },
            "nonHighestBidderRefund()": {
                "argument": {},
                "contract": {
                    "auctionStart": "uint256",
                    "biddingPeriod": "uint256",
                    "recoveryAfterPeriod": "uint256",
                    "WITHDRAWAL_TRIGGER_AMOUNT": "uint256",
                    "REQUIRED_SIGNATURES": "uint256",
                    "proposals": "BetterAuction.Proposal[]",
                    "numProposals": "uint256",
                    "highestBid": "uint256",
                    "_biddingPeriod": "uint256",
                    "_recoveryAfterPeriod": "uint256"
                }
            },
            "createProposal(address,bool)": {
                "argument": {},
                "contract": {
                    "auctionStart": "uint256",
                    "biddingPeriod": "uint256",
                    "recoveryAfterPeriod": "uint256",
                    "WITHDRAWAL_TRIGGER_AMOUNT": "uint256",
                    "REQUIRED_SIGNATURES": "uint256",
                    "proposals": "BetterAuction.Proposal[]",
                    "numProposals": "uint256",
                    "highestBid": "uint256",
                    "_biddingPeriod": "uint256",
                    "_recoveryAfterPeriod": "uint256"
                }
            },
            "voteProposal(uint256)": {
                "argument": {
                    "proposalID": "uint256"
                },
                "contract": {
                    "auctionStart": "uint256",
                    "biddingPeriod": "uint256",
                    "recoveryAfterPeriod": "uint256",
                    "WITHDRAWAL_TRIGGER_AMOUNT": "uint256",
                    "REQUIRED_SIGNATURES": "uint256",
                    "proposals": "BetterAuction.Proposal[]",
                    "numProposals": "uint256",
                    "highestBid": "uint256",
                    "_biddingPeriod": "uint256",
                    "_recoveryAfterPeriod": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "auctionStart": "uint256",
                    "biddingPeriod": "uint256",
                    "recoveryAfterPeriod": "uint256",
                    "WITHDRAWAL_TRIGGER_AMOUNT": "uint256",
                    "REQUIRED_SIGNATURES": "uint256",
                    "proposals": "BetterAuction.Proposal[]",
                    "numProposals": "uint256",
                    "highestBid": "uint256",
                    "_biddingPeriod": "uint256",
                    "_recoveryAfterPeriod": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "auctionStart": "uint256",
                    "biddingPeriod": "uint256",
                    "recoveryAfterPeriod": "uint256",
                    "WITHDRAWAL_TRIGGER_AMOUNT": "uint256",
                    "REQUIRED_SIGNATURES": "uint256",
                    "proposals": "BetterAuction.Proposal[]",
                    "numProposals": "uint256",
                    "highestBid": "uint256",
                    "_biddingPeriod": "uint256",
                    "_recoveryAfterPeriod": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "bidderPlaceBid()": [
                754,
                273
            ],
            "auctionEndTime()": [
                572,
                163
            ],
            "createProposal(address,bool)": [
                939,
                361
            ],
            "nonHighestBidderRefund()": [
                744,
                251
            ],
            "getBid(address)": [
                1018,
                383
            ],
            "voteProposal(uint256)": [
                764,
                295
            ]
        },
        "block_CALL_mapping": {
            "block2539": [
                "p.recipient.send(this.balance)"
            ],
            "block1226_0": [
                "msg.sender.send(amount + msg.value)"
            ],
            "block1226_1": [
                "msg.sender.send(amount + msg.value)"
            ],
            "block1226": [
                "msg.sender.send(amount + msg.value)"
            ],
            "block2693": [
                "p.recipient.send(highestBid)"
            ],
            "jump1226": [
                "msg.sender.send(amount + msg.value)",
                "msg.sender.send(amount + msg.value)"
            ],
            "jump2539": [
                "p.recipient.send(this.balance)",
                "p.recipient.send(this.balance)"
            ],
            "jump2693": [
                "p.recipient.send(highestBid)",
                "p.recipient.send(highestBid)"
            ],
            "jump1226_0": [
                "msg.sender.send(amount + msg.value)",
                "msg.sender.send(amount + msg.value)"
            ],
            "jump1226_1": [
                "msg.sender.send(amount + msg.value)",
                "msg.sender.send(amount + msg.value)"
            ]
        }
    }
}