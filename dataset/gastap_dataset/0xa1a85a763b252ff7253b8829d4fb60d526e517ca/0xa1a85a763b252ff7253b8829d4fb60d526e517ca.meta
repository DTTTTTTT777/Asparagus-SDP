{
    "ERC20Basic": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "balanceOf(address)": [
                124,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                401,
                97
            ],
            "transfer(address,uint256)": [
                1385,
                361
            ],
            "allowance(address,address)": [
                1704,
                427
            ],
            "balanceOf(address)": [
                1044,
                273
            ],
            "transferFrom(address,address,uint256)": [
                588,
                163
            ]
        },
        "block_CALL_mapping": {
            "block3721": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "jump3721": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "Own": {
        "function_list": [
            "Own()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Own()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "BasicToken": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transfer(address,uint256)": [
                222,
                119
            ],
            "balanceOf(address)": [
                135,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "StandardToken": {
        "function_list": [
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                147,
                75
            ],
            "balanceOf(address)": [
                525,
                163
            ],
            "allowance(address,address)": [
                814,
                229
            ],
            "transferFrom(address,address,uint256)": [
                291,
                119
            ],
            "transfer(address,uint256)": [
                612,
                185
            ]
        },
        "block_CALL_mapping": {}
    },
    "Token": {
        "function_list": [
            "Own()",
            "transferOwnership(address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)",
            "Token()",
            "burner(uint256)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Own()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "Token()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "burner(uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                136,
                75
            ],
            "balanceOf(address)": [
                413,
                141
            ],
            "allowance(address,address)": [
                712,
                207
            ],
            "transferFrom(address,address,uint256)": [
                280,
                119
            ],
            "transfer(address,uint256)": [
                611,
                185
            ]
        },
        "block_CALL_mapping": {}
    },
    "Crowdsale": {
        "function_list": [
            "asyncSend(address,uint256)",
            "withdrawPayments()",
            "emergencyStop()",
            "release()",
            "Own()",
            "transferOwnership(address)",
            "Crowdsale(address,address)",
            "fallback()",
            "start()",
            "receiveETH(address)",
            "bonus(uint256)",
            "finalize()",
            "drain()",
            "coinDrain()",
            "changeMultisig(address)",
            "changeTribeOwner()",
            "getCoinRemains()",
            "refund(uint256)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "asyncSend(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "MIN_CAP": "uint256",
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "withdrawPayments()": {
                "argument": {},
                "contract": {
                    "MIN_CAP": "uint256",
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "emergencyStop()": {
                "argument": {},
                "contract": {
                    "MIN_CAP": "uint256",
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "release()": {
                "argument": {},
                "contract": {
                    "MIN_CAP": "uint256",
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "Own()": {
                "argument": {},
                "contract": {
                    "MIN_CAP": "uint256",
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "MIN_CAP": "uint256",
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "Crowdsale(address,address)": {
                "argument": {},
                "contract": {
                    "MIN_CAP": "uint256",
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "MIN_CAP": "uint256",
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "start()": {
                "argument": {},
                "contract": {
                    "MIN_CAP": "uint256",
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "receiveETH(address)": {
                "argument": {},
                "contract": {
                    "MIN_CAP": "uint256",
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "bonus(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "MIN_CAP": "uint256",
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "finalize()": {
                "argument": {},
                "contract": {
                    "MIN_CAP": "uint256",
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "drain()": {
                "argument": {},
                "contract": {
                    "MIN_CAP": "uint256",
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "coinDrain()": {
                "argument": {},
                "contract": {
                    "MIN_CAP": "uint256",
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "changeMultisig(address)": {
                "argument": {},
                "contract": {
                    "MIN_CAP": "uint256",
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "changeTribeOwner()": {
                "argument": {},
                "contract": {
                    "MIN_CAP": "uint256",
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "getCoinRemains()": {
                "argument": {},
                "contract": {
                    "MIN_CAP": "uint256",
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "refund(uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "MIN_CAP": "uint256",
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "MIN_CAP": "uint256",
                    "MAX_CAP": "uint256",
                    "MIN_INVEST_ETHER": "uint256",
                    "CROWDSALE_PERIOD": "uint256",
                    "COIN_PER_ETHER": "uint256",
                    "etherReceived": "uint256",
                    "coinSentToEther": "uint256",
                    "coinToBurn": "uint256",
                    "startTime": "uint256",
                    "endTime": "uint256"
                }
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {
            "block1608": [
                "tokenReward.transfer(wallet,_amount)"
            ],
            "jump2457_1": [
                "wallet.send(msg.value)",
                "wallet.send(msg.value)"
            ],
            "jump2457_0": [
                "wallet.send(msg.value)",
                "wallet.send(msg.value)"
            ],
            "jump1122": [
                "tokenReward.transfer(beneficiary, tokens)",
                "tokenReward.transfer(beneficiary, tokens)"
            ],
            "jump1122_1": [
                "tokenReward.transfer(beneficiary, tokens)",
                "tokenReward.transfer(beneficiary, tokens)"
            ],
            "block2457": [
                "wallet.send(msg.value)"
            ],
            "jump2457": [
                "wallet.send(msg.value)",
                "wallet.send(msg.value)"
            ],
            "block2457_1": [
                "wallet.send(msg.value)"
            ],
            "block1122": [
                "tokenReward.transfer(beneficiary, tokens)"
            ],
            "jump1608": [
                "tokenReward.transfer(wallet,_amount)",
                "tokenReward.transfer(wallet,_amount)"
            ],
            "jump1122_0": [
                "tokenReward.transfer(beneficiary, tokens)",
                "tokenReward.transfer(beneficiary, tokens)"
            ],
            "block2457_0": [
                "wallet.send(msg.value)"
            ],
            "block1122_1": [
                "tokenReward.transfer(beneficiary, tokens)"
            ],
            "block1122_0": [
                "tokenReward.transfer(beneficiary, tokens)"
            ]
        }
    },
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)",
            "assert(bool)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "assert(bool)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    }
}