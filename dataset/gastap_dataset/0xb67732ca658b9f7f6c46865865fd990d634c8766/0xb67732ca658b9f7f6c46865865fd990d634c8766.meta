{
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "ROKToken": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "ROKToken()",
            "transfer(address,uint256)",
            "balanceOf(address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "unlockTransfer(address,uint256)",
            "allowance(address,address)",
            "increaseApproval(address,uint256)",
            "decreaseApproval(address,uint256)",
            "burn(uint256)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "INITIAL_SUPPLY": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "INITIAL_SUPPLY": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "INITIAL_SUPPLY": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "INITIAL_SUPPLY": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "INITIAL_SUPPLY": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "INITIAL_SUPPLY": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "INITIAL_SUPPLY": "uint256"
                }
            },
            "ROKToken()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "INITIAL_SUPPLY": "uint256"
                }
            },
            "unlockTransfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "INITIAL_SUPPLY": "uint256"
                }
            },
            "increaseApproval(address,uint256)": {
                "argument": {
                    "_addedValue": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "INITIAL_SUPPLY": "uint256"
                }
            },
            "decreaseApproval(address,uint256)": {
                "argument": {
                    "_subtractedValue": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "INITIAL_SUPPLY": "uint256"
                }
            },
            "burn(uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "INITIAL_SUPPLY": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "INITIAL_SUPPLY": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                379,
                97
            ],
            "increaseApproval(address,uint256)": [
                1438,
                361
            ],
            "burn(uint256)": [
                849,
                229
            ],
            "balanceOf(address)": [
                1019,
                273
            ],
            "decreaseApproval(address,uint256)": [
                918,
                251
            ],
            "unlockTransfer(address,uint256)": [
                523,
                141
            ],
            "transferFrom(address,address,uint256)": [
                624,
                163
            ],
            "allowance(address,address)": [
                1539,
                383
            ],
            "transfer(address,uint256)": [
                1337,
                339
            ],
            "transferOwnership(address)": [
                1658,
                405
            ]
        },
        "block_CALL_mapping": {}
    },
    "Pausable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "pause()",
            "unpause()",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "pause()": {
                "argument": {},
                "contract": {}
            },
            "unpause()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "pause()": [
                184,
                119
            ],
            "unpause()": [
                114,
                75
            ],
            "transferOwnership(address)": [
                294,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "PullPayment": {
        "function_list": [
            "asyncSend(address,uint256)",
            "withdrawPayments()"
        ],
        "initial_state": {
            "asyncSend(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "totalPayments": "uint256"
                }
            },
            "withdrawPayments()": {
                "argument": {},
                "contract": {
                    "totalPayments": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "withdrawPayments()": [
                134,
                22
            ]
        },
        "block_CALL_mapping": {
            "block396": [
                "payee.send(payment)"
            ],
            "jump396": [
                "payee.send(payment)",
                "payee.send(payment)"
            ]
        }
    },
    "Crowdsale": {
        "function_list": [
            "asyncSend(address,uint256)",
            "withdrawPayments()",
            "pause()",
            "unpause()",
            "Ownable()",
            "transferOwnership(address)",
            "Crowdsale()",
            "fallback()",
            "contribute(address)",
            "isStarted()",
            "isComplete()",
            "tokenBalance()",
            "isSuccessful()",
            "checkEthBalance(address)",
            "checkRokSold()",
            "checkRokTeam()",
            "checkRokBounty()",
            "refundPeriodOver()",
            "refundPeriodStart()",
            "percentOfGoal()",
            "getBonus(uint256)",
            "setBalance(address,uint256)",
            "finalize()",
            "payout()",
            "payTeam()",
            "updateKYClist(address[])",
            "claim()",
            "refund()",
            "partialRefund(uint256)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "asyncSend(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "withdrawPayments()": {
                "argument": {},
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "pause()": {
                "argument": {},
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "unpause()": {
                "argument": {},
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "Ownable()": {
                "argument": {},
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "Crowdsale()": {
                "argument": {},
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "contribute(address)": {
                "argument": {},
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "isStarted()": {
                "argument": {},
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "isComplete()": {
                "argument": {},
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "tokenBalance()": {
                "argument": {},
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "isSuccessful()": {
                "argument": {},
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "checkEthBalance(address)": {
                "argument": {},
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "checkRokSold()": {
                "argument": {},
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "checkRokTeam()": {
                "argument": {},
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "checkRokBounty()": {
                "argument": {},
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "refundPeriodOver()": {
                "argument": {},
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "refundPeriodStart()": {
                "argument": {},
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "percentOfGoal()": {
                "argument": {},
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "getBonus(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "setBalance(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "finalize()": {
                "argument": {},
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "payout()": {
                "argument": {},
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "payTeam()": {
                "argument": {},
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "updateKYClist(address[])": {
                "argument": {
                    "allowed": "address[]"
                },
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "claim()": {
                "argument": {},
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "refund()": {
                "argument": {},
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "partialRefund(uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "rateETH_ROK": "uint256",
                    "minimumPurchase": "uint256",
                    "maxFundingGoal": "uint256",
                    "minFundingGoal": "uint256",
                    "startDate": "uint256",
                    "deadline": "uint256",
                    "refundeadline": "uint256",
                    "savedBalance": "uint256",
                    "savedBalanceToken": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "checkRokBounty()": [
                853,
                88
            ],
            "percentOfGoal()": [
                2482,
                792
            ],
            "refund()": [
                1188,
                286
            ],
            "pause()": [
                1390,
                418
            ],
            "unpause()": [
                986,
                154
            ],
            "tokenBalance()": [
                1761,
                528
            ],
            "refundPeriodOver()": [
                1847,
                572
            ],
            "refundPeriodStart()": [
                896,
                110
            ],
            "isStarted()": [
                1141,
                264
            ],
            "checkRokSold()": [
                1009,
                176
            ],
            "claim()": [
                1075,
                220
            ],
            "withdrawPayments()": [
                1258,
                330
            ],
            "isSuccessful()": [
                2533,
                814
            ],
            "transferOwnership(address)": [
                2580,
                836
            ],
            "finalize()": [
                1052,
                198
            ],
            "partialRefund(uint256)": [
                2074,
                682
            ],
            "checkRokTeam()": [
                2031,
                660
            ],
            "payout()": [
                1281,
                352
            ],
            "isComplete()": [
                1894,
                594
            ],
            "checkEthBalance(address)": [
                1674,
                506
            ],
            "updateKYClist(address[])": [
                2206,
                726
            ]
        },
        "block_CALL_mapping": {
            "block7066_3": [
                "rok.totalSupply()"
            ],
            "jump9070_0": [
                "rok.totalSupply()",
                "rok.totalSupply()"
            ],
            "jump9505_0": [
                "rok.burn(rok.totalSupply().sub(checkRokSold()))",
                "rok.burn(rok.totalSupply().sub(checkRokSold()))"
            ],
            "block4670": [
                "rok.transfer(msg.sender,balancesRokToken[msg.sender])"
            ],
            "block7066_4": [
                "rok.totalSupply()"
            ],
            "jump7066_3": [
                "rok.totalSupply()",
                "rok.totalSupply()"
            ],
            "block9070": [
                "rok.totalSupply()"
            ],
            "block9505": [
                "rok.burn(rok.totalSupply().sub(checkRokSold()))"
            ],
            "jump5614": [
                "rok.transfer(bounty, checkRokBounty())",
                "rok.transfer(bounty, checkRokBounty())"
            ],
            "block5614": [
                "rok.transfer(bounty, checkRokBounty())"
            ],
            "block8876": [
                "rok.transfer(team, checkRokTeam())"
            ],
            "jump9070": [
                "rok.totalSupply()",
                "rok.totalSupply()"
            ],
            "jump9505": [
                "rok.burn(rok.totalSupply().sub(checkRokSold()))",
                "rok.burn(rok.totalSupply().sub(checkRokSold()))"
            ],
            "jump9350_0": [
                "rok.totalSupply()",
                "rok.totalSupply()"
            ],
            "block9350_0": [
                "rok.totalSupply()"
            ],
            "block3191": [
                "escrow.transfer(msg.value)"
            ],
            "block6150": [
                "rok.transfer(bounty, checkRokBounty())"
            ],
            "block9070_0": [
                "rok.totalSupply()"
            ],
            "block9505_0": [
                "rok.burn(rok.totalSupply().sub(checkRokSold()))"
            ],
            "block5701": [
                "escrow.transfer(savedBalance)"
            ],
            "block9711_0": [
                "rok.totalSupply()"
            ],
            "block9711": [
                "rok.totalSupply()"
            ],
            "jump3191_0": [
                "escrow.transfer(msg.value)",
                "escrow.transfer(msg.value)"
            ],
            "block7066": [
                "rok.totalSupply()"
            ],
            "jump6150": [
                "rok.transfer(bounty, checkRokBounty())",
                "rok.transfer(bounty, checkRokBounty())"
            ],
            "jump5116": [
                "payee.send(payment)",
                "payee.send(payment)"
            ],
            "jump8876_0": [
                "rok.transfer(team, checkRokTeam())",
                "rok.transfer(team, checkRokTeam())"
            ],
            "block6804": [
                "rok.balanceOf(address(this))"
            ],
            "jump4670": [
                "rok.transfer(msg.sender,balancesRokToken[msg.sender])",
                "rok.transfer(msg.sender,balancesRokToken[msg.sender])"
            ],
            "block7066_0": [
                "rok.totalSupply()"
            ],
            "block7066_1": [
                "rok.totalSupply()"
            ],
            "block7066_2": [
                "rok.totalSupply()"
            ],
            "block9350": [
                "rok.totalSupply()"
            ],
            "jump7066_4": [
                "rok.totalSupply()",
                "rok.totalSupply()"
            ],
            "jump9350": [
                "rok.totalSupply()",
                "rok.totalSupply()"
            ],
            "jump7066_2": [
                "rok.totalSupply()",
                "rok.totalSupply()"
            ],
            "jump5701": [
                "escrow.transfer(savedBalance)",
                "escrow.transfer(savedBalance)"
            ],
            "jump7066_0": [
                "rok.totalSupply()",
                "rok.totalSupply()"
            ],
            "jump7066_1": [
                "rok.totalSupply()",
                "rok.totalSupply()"
            ],
            "jump9711_0": [
                "rok.totalSupply()",
                "rok.totalSupply()"
            ],
            "block8876_0": [
                "rok.transfer(team, checkRokTeam())"
            ],
            "block3191_0": [
                "escrow.transfer(msg.value)"
            ],
            "block5116": [
                "payee.send(payment)"
            ],
            "jump4181": [
                "rok.transfer(msg.sender,balancesRokToken[msg.sender])",
                "rok.transfer(msg.sender,balancesRokToken[msg.sender])"
            ],
            "jump7066": [
                "rok.totalSupply()",
                "rok.totalSupply()"
            ],
            "jump9711": [
                "rok.totalSupply()",
                "rok.totalSupply()"
            ],
            "block4181": [
                "rok.transfer(msg.sender,balancesRokToken[msg.sender])"
            ],
            "jump6804": [
                "rok.balanceOf(address(this))",
                "rok.balanceOf(address(this))"
            ],
            "jump3191": [
                "escrow.transfer(msg.value)",
                "escrow.transfer(msg.value)"
            ],
            "jump8876": [
                "rok.transfer(team, checkRokTeam())",
                "rok.transfer(team, checkRokTeam())"
            ]
        }
    }
}