{
    "SafeMath": {
        "function_list": [
            "add(uint256,uint256)",
            "subtract(uint256,uint256)",
            "multiply(uint256,uint256)",
            "divide(uint256,uint256)",
            "min64(uint64,uint64)",
            "max64(uint64,uint64)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "assert(bool)"
        ],
        "initial_state": {
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "subtract(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "multiply(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "divide(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "x": "uint64",
                    "y": "uint64"
                },
                "contract": {}
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "x": "uint64",
                    "y": "uint64"
                },
                "contract": {}
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "assert(bool)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Owned": {
        "function_list": [
            "Owned()"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Mortal": {
        "function_list": [
            "Owned()",
            "kill()"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {}
            },
            "kill()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "kill()": [
                68,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "Lotthereum": {
        "function_list": [
            "add(uint256,uint256)",
            "subtract(uint256,uint256)",
            "multiply(uint256,uint256)",
            "divide(uint256,uint256)",
            "min64(uint64,uint64)",
            "max64(uint64,uint64)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "assert(bool)",
            "kill()",
            "Owned()",
            "createGame(uint256,uint256,uint256,uint256)",
            "closeGame(uint256)",
            "openGame(uint256)",
            "createGameRound(uint256)",
            "payout(uint256)",
            "closeRound(uint256)",
            "getBlockHash(uint256)",
            "getNumber(bytes32)",
            "placeBet(uint256,uint8)",
            "withdraw()",
            "getBalance()",
            "numberOfClosedGames()",
            "getGames()",
            "getGameCurrentRoundId(uint256)",
            "getGameRoundOpen(uint256,uint256)",
            "getGameMaxNumberOfBets(uint256)",
            "getGameMinAmountByBet(uint256)",
            "getGamePrize(uint256)",
            "getRoundNumberOfBets(uint256,uint256)",
            "getRoundBetOrigin(uint256,uint256,uint256)",
            "getRoundBetAmount(uint256,uint256,uint256)",
            "getRoundBetNumber(uint256,uint256,uint256)",
            "getRoundNumber(uint256,uint256)",
            "getRoundPointer(uint256,uint256)",
            "getPointer(uint256)",
            "fallback()"
        ],
        "initial_state": {
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "subtract(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "multiply(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "divide(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "x": "uint64",
                    "y": "uint64"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "x": "uint64",
                    "y": "uint64"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "assert(bool)": {
                "argument": {},
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "kill()": {
                "argument": {},
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "Owned()": {
                "argument": {},
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "createGame(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "pointer": "uint256",
                    "maxNumberOfBets": "uint256",
                    "minAmountByBet": "uint256",
                    "prize": "uint256"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "closeGame(uint256)": {
                "argument": {
                    "gameId": "uint256"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "openGame(uint256)": {
                "argument": {
                    "gameId": "uint256"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "createGameRound(uint256)": {
                "argument": {
                    "gameId": "uint256"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "payout(uint256)": {
                "argument": {
                    "gameId": "uint256"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "closeRound(uint256)": {
                "argument": {
                    "gameId": "uint256"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "getBlockHash(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "getNumber(bytes32)": {
                "argument": {
                    "_a": "bytes32"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "placeBet(uint256,uint8)": {
                "argument": {
                    "gameId": "uint256",
                    "bet": "uint8"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "withdraw()": {
                "argument": {},
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "getBalance()": {
                "argument": {},
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "numberOfClosedGames()": {
                "argument": {},
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "getGames()": {
                "argument": {},
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "getGameCurrentRoundId(uint256)": {
                "argument": {
                    "gameId": "uint256"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "getGameRoundOpen(uint256,uint256)": {
                "argument": {
                    "gameId": "uint256",
                    "roundId": "uint256"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "getGameMaxNumberOfBets(uint256)": {
                "argument": {
                    "gameId": "uint256"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "getGameMinAmountByBet(uint256)": {
                "argument": {
                    "gameId": "uint256"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "getGamePrize(uint256)": {
                "argument": {
                    "gameId": "uint256"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "getRoundNumberOfBets(uint256,uint256)": {
                "argument": {
                    "gameId": "uint256",
                    "roundId": "uint256"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "getRoundBetOrigin(uint256,uint256,uint256)": {
                "argument": {
                    "gameId": "uint256",
                    "roundId": "uint256",
                    "betId": "uint256"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "getRoundBetAmount(uint256,uint256,uint256)": {
                "argument": {
                    "gameId": "uint256",
                    "roundId": "uint256",
                    "betId": "uint256"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "getRoundBetNumber(uint256,uint256,uint256)": {
                "argument": {
                    "gameId": "uint256",
                    "roundId": "uint256",
                    "betId": "uint256"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "getRoundNumber(uint256,uint256)": {
                "argument": {
                    "gameId": "uint256",
                    "roundId": "uint256"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "getRoundPointer(uint256,uint256)": {
                "argument": {
                    "gameId": "uint256",
                    "roundId": "uint256"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "getPointer(uint256)": {
                "argument": {
                    "gameId": "uint256"
                },
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "games": "Lotthereum.Game[]"
                }
            }
        },
        "function_block_mapping": {
            "getNumber(bytes32)": [
                558,
                88
            ],
            "createGame(uint256,uint256,uint256,uint256)": [
                1165,
                286
            ],
            "getRoundNumber(uint256,uint256)": [
                1368,
                330
            ],
            "getPointer(uint256)": [
                1664,
                418
            ],
            "getRoundBetNumber(uint256,uint256,uint256)": [
                1514,
                374
            ],
            "placeBet(uint256,uint8)": [
                377,
                22
            ],
            "getRoundNumberOfBets(uint256,uint256)": [
                961,
                242
            ],
            "getRoundBetOrigin(uint256,uint256,uint256)": [
                1036,
                264
            ],
            "getRoundBetAmount(uint256,uint256,uint256)": [
                1867,
                484
            ],
            "getGames()": [
                1260,
                308
            ],
            "getGameCurrentRoundId(uint256)": [
                1449,
                352
            ],
            "getGameRoundOpen(uint256,uint256)": [
                699,
                154
            ],
            "getGameMinAmountByBet(uint256)": [
                896,
                220
            ],
            "getBlockHash(uint256)": [
                1794,
                462
            ],
            "closeGame(uint256)": [
                489,
                66
            ],
            "withdraw()": [
                633,
                110
            ],
            "getGamePrize(uint256)": [
                1729,
                440
            ],
            "numberOfClosedGames()": [
                853,
                198
            ],
            "getRoundPointer(uint256,uint256)": [
                778,
                176
            ],
            "kill()": [
                676,
                132
            ],
            "getGameMaxNumberOfBets(uint256)": [
                1599,
                396
            ],
            "getBalance()": [
                446,
                44
            ]
        },
        "block_CALL_mapping": {
            "jump4892": [
                "msg.sender.transfer(amount)",
                "msg.sender.transfer(amount)"
            ],
            "block4892": [
                "msg.sender.transfer(amount)"
            ]
        }
    }
}