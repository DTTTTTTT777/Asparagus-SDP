{
    "PreICO": {
        "function_list": [
            "PreICO()",
            "preICOBeneficiaryAddress()",
            "NTRYAvailableForSale()",
            "NTRYPerEther()",
            "minimumFundingGoal()",
            "remaingNTRY()",
            "RaisedFunds()",
            "isPreICOClosed()",
            "updatePrice(uint256)",
            "transferOwnership(address)",
            "fallback()",
            "updateRewardLedger(address,uint256,uint256)",
            "addBonuses(uint256)",
            "levelOneBonus(uint256)",
            "levelTwoBonus(uint256)",
            "levelThreeBonus(uint256)",
            "checkGoalReached()",
            "safeWithdrawal()",
            "mortal()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "PreICO()": {
                "argument": {},
                "contract": {
                    "contributions": "PreICO.Contribution[]",
                    "tokensAsReward": "uint256",
                    "PRICE": "uint256",
                    "fundingGoal": "uint256",
                    "remainingTokens": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256"
                }
            },
            "preICOBeneficiaryAddress()": {
                "argument": {},
                "contract": {
                    "contributions": "PreICO.Contribution[]",
                    "tokensAsReward": "uint256",
                    "PRICE": "uint256",
                    "fundingGoal": "uint256",
                    "remainingTokens": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256"
                }
            },
            "NTRYAvailableForSale()": {
                "argument": {},
                "contract": {
                    "contributions": "PreICO.Contribution[]",
                    "tokensAsReward": "uint256",
                    "PRICE": "uint256",
                    "fundingGoal": "uint256",
                    "remainingTokens": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256"
                }
            },
            "NTRYPerEther()": {
                "argument": {},
                "contract": {
                    "contributions": "PreICO.Contribution[]",
                    "tokensAsReward": "uint256",
                    "PRICE": "uint256",
                    "fundingGoal": "uint256",
                    "remainingTokens": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256"
                }
            },
            "minimumFundingGoal()": {
                "argument": {},
                "contract": {
                    "contributions": "PreICO.Contribution[]",
                    "tokensAsReward": "uint256",
                    "PRICE": "uint256",
                    "fundingGoal": "uint256",
                    "remainingTokens": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256"
                }
            },
            "remaingNTRY()": {
                "argument": {},
                "contract": {
                    "contributions": "PreICO.Contribution[]",
                    "tokensAsReward": "uint256",
                    "PRICE": "uint256",
                    "fundingGoal": "uint256",
                    "remainingTokens": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256"
                }
            },
            "RaisedFunds()": {
                "argument": {},
                "contract": {
                    "contributions": "PreICO.Contribution[]",
                    "tokensAsReward": "uint256",
                    "PRICE": "uint256",
                    "fundingGoal": "uint256",
                    "remainingTokens": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256"
                }
            },
            "isPreICOClosed()": {
                "argument": {},
                "contract": {
                    "contributions": "PreICO.Contribution[]",
                    "tokensAsReward": "uint256",
                    "PRICE": "uint256",
                    "fundingGoal": "uint256",
                    "remainingTokens": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256"
                }
            },
            "updatePrice(uint256)": {
                "argument": {
                    "_price": "uint256"
                },
                "contract": {
                    "contributions": "PreICO.Contribution[]",
                    "tokensAsReward": "uint256",
                    "PRICE": "uint256",
                    "fundingGoal": "uint256",
                    "remainingTokens": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "contributions": "PreICO.Contribution[]",
                    "tokensAsReward": "uint256",
                    "PRICE": "uint256",
                    "fundingGoal": "uint256",
                    "remainingTokens": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "contributions": "PreICO.Contribution[]",
                    "tokensAsReward": "uint256",
                    "PRICE": "uint256",
                    "fundingGoal": "uint256",
                    "remainingTokens": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256"
                }
            },
            "updateRewardLedger(address,uint256,uint256)": {
                "argument": {
                    "eth": "uint256",
                    "ntry": "uint256"
                },
                "contract": {
                    "contributions": "PreICO.Contribution[]",
                    "tokensAsReward": "uint256",
                    "PRICE": "uint256",
                    "fundingGoal": "uint256",
                    "remainingTokens": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256"
                }
            },
            "addBonuses(uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "contributions": "PreICO.Contribution[]",
                    "tokensAsReward": "uint256",
                    "PRICE": "uint256",
                    "fundingGoal": "uint256",
                    "remainingTokens": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256"
                }
            },
            "levelOneBonus(uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "contributions": "PreICO.Contribution[]",
                    "tokensAsReward": "uint256",
                    "PRICE": "uint256",
                    "fundingGoal": "uint256",
                    "remainingTokens": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256"
                }
            },
            "levelTwoBonus(uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "contributions": "PreICO.Contribution[]",
                    "tokensAsReward": "uint256",
                    "PRICE": "uint256",
                    "fundingGoal": "uint256",
                    "remainingTokens": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256"
                }
            },
            "levelThreeBonus(uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "contributions": "PreICO.Contribution[]",
                    "tokensAsReward": "uint256",
                    "PRICE": "uint256",
                    "fundingGoal": "uint256",
                    "remainingTokens": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256"
                }
            },
            "checkGoalReached()": {
                "argument": {},
                "contract": {
                    "contributions": "PreICO.Contribution[]",
                    "tokensAsReward": "uint256",
                    "PRICE": "uint256",
                    "fundingGoal": "uint256",
                    "remainingTokens": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256"
                }
            },
            "safeWithdrawal()": {
                "argument": {},
                "contract": {
                    "contributions": "PreICO.Contribution[]",
                    "tokensAsReward": "uint256",
                    "PRICE": "uint256",
                    "fundingGoal": "uint256",
                    "remainingTokens": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256"
                }
            },
            "mortal()": {
                "argument": {},
                "contract": {
                    "contributions": "PreICO.Contribution[]",
                    "tokensAsReward": "uint256",
                    "PRICE": "uint256",
                    "fundingGoal": "uint256",
                    "remainingTokens": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "contributions": "PreICO.Contribution[]",
                    "tokensAsReward": "uint256",
                    "PRICE": "uint256",
                    "fundingGoal": "uint256",
                    "remainingTokens": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "NTRYPerEther()": [
                1753,
                405
            ],
            "checkGoalReached()": [
                845,
                75
            ],
            "levelOneBonus(uint256)": [
                1566,
                339
            ],
            "addBonuses(uint256)": [
                1279,
                229
            ],
            "safeWithdrawal()": [
                1886,
                471
            ],
            "updateRewardLedger(address,uint256,uint256)": [
                1127,
                185
            ],
            "updatePrice(uint256)": [
                1521,
                317
            ],
            "remaingNTRY()": [
                868,
                97
            ],
            "preICOBeneficiaryAddress()": [
                1391,
                273
            ],
            "NTRYAvailableForSale()": [
                1478,
                295
            ],
            "isPreICOClosed()": [
                1344,
                251
            ],
            "RaisedFunds()": [
                1638,
                361
            ],
            "levelThreeBonus(uint256)": [
                1214,
                207
            ],
            "levelTwoBonus(uint256)": [
                1681,
                383
            ],
            "mortal()": [
                1796,
                427
            ],
            "transferOwnership(address)": [
                1819,
                449
            ],
            "minimumFundingGoal()": [
                911,
                119
            ]
        },
        "block_CALL_mapping": {
            "block5734": [
                "notaryToken.takeBackNTRY(recoveryAccount, msg.sender , rewardsLedger[msg.sender].NTRY)"
            ],
            "jump614_0": [
                "notaryToken.transferFrom(owner, msg.sender, amount)",
                "notaryToken.transferFrom(owner, msg.sender, amount)"
            ],
            "block614_0": [
                "notaryToken.transferFrom(owner, msg.sender, amount)"
            ],
            "block4872": [
                "notaryToken.takeBackNTRY(msg.sender, recoveryAccount , rewardsLedger[msg.sender].NTRY)"
            ],
            "block5909": [
                "beneficiary.send(amountRaised)"
            ],
            "block614": [
                "notaryToken.transferFrom(owner, msg.sender, amount)"
            ],
            "jump5909": [
                "beneficiary.send(amountRaised)",
                "beneficiary.send(amountRaised)"
            ],
            "jump5734": [
                "notaryToken.takeBackNTRY(recoveryAccount, msg.sender , rewardsLedger[msg.sender].NTRY)",
                "notaryToken.takeBackNTRY(recoveryAccount, msg.sender , rewardsLedger[msg.sender].NTRY)"
            ],
            "block4941": [
                "msg.sender.send(rewardsLedger[msg.sender].amount)"
            ],
            "block4148": [
                "beneficiary.transfer(amountRaised)"
            ],
            "jump4941": [
                "msg.sender.send(rewardsLedger[msg.sender].amount)",
                "msg.sender.send(rewardsLedger[msg.sender].amount)"
            ],
            "jump4148": [
                "beneficiary.transfer(amountRaised)",
                "beneficiary.transfer(amountRaised)"
            ],
            "jump614": [
                "notaryToken.transferFrom(owner, msg.sender, amount)",
                "notaryToken.transferFrom(owner, msg.sender, amount)"
            ],
            "jump4872": [
                "notaryToken.takeBackNTRY(msg.sender, recoveryAccount , rewardsLedger[msg.sender].NTRY)",
                "notaryToken.takeBackNTRY(msg.sender, recoveryAccount , rewardsLedger[msg.sender].NTRY)"
            ]
        }
    }
}