{
    "Crowdsale": {
        "function_list": [
            "buyTokens(address)"
        ],
        "initial_state": {
            "buyTokens(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {
            "jump5067_1": [
                "token.burnTokens()",
                "token.burnTokens()"
            ],
            "jump4729_2": [
                "vault.enableRefunds()",
                "vault.enableRefunds()"
            ],
            "jump4729_1": [
                "vault.enableRefunds()",
                "vault.enableRefunds()"
            ],
            "block3457_1": [
                "walletB.transfer(amountPaid)"
            ],
            "jump5410_7": [
                "msg.sender.transfer(weiNextTier)",
                "msg.sender.transfer(weiNextTier)"
            ],
            "jump5410_6": [
                "msg.sender.transfer(weiNextTier)",
                "msg.sender.transfer(weiNextTier)"
            ],
            "jump5410_5": [
                "msg.sender.transfer(weiNextTier)",
                "msg.sender.transfer(weiNextTier)"
            ],
            "jump5067_0": [
                "token.burnTokens()",
                "token.burnTokens()"
            ],
            "jump7944": [
                "msg.sender.transfer(exceedingBalance)",
                "msg.sender.transfer(exceedingBalance)"
            ],
            "block4729_2": [
                "vault.enableRefunds()"
            ],
            "jump4729": [
                "vault.enableRefunds()",
                "vault.enableRefunds()"
            ],
            "jump5410_1": [
                "msg.sender.transfer(weiNextTier)",
                "msg.sender.transfer(weiNextTier)"
            ],
            "block3755": [
                "vault.deposit.value(amountPaid)(msg.sender)"
            ],
            "block3927": [
                "vault.close()"
            ],
            "block4729_1": [
                "vault.enableRefunds()"
            ],
            "block4729_0": [
                "vault.enableRefunds()"
            ],
            "block3457": [
                "walletB.transfer(amountPaid)"
            ],
            "jump3152": [
                "token.distributeICOTokens(msg.sender, tokens)",
                "token.distributeICOTokens(msg.sender, tokens)"
            ],
            "jump5410_3": [
                "msg.sender.transfer(weiNextTier)",
                "msg.sender.transfer(weiNextTier)"
            ],
            "block5067_2": [
                "token.burnTokens()"
            ],
            "block5067_1": [
                "token.burnTokens()"
            ],
            "block5067_0": [
                "token.burnTokens()"
            ],
            "block7863_1": [
                "msg.sender.transfer(differenceWei)"
            ],
            "block5410_1": [
                "msg.sender.transfer(weiNextTier)"
            ],
            "block7944": [
                "msg.sender.transfer(exceedingBalance)"
            ],
            "jump3927_1": [
                "vault.close()",
                "vault.close()"
            ],
            "block3755_1": [
                "vault.deposit.value(amountPaid)(msg.sender)"
            ],
            "block3755_0": [
                "vault.deposit.value(amountPaid)(msg.sender)"
            ],
            "jump6615": [
                "token.refundTokens(msg.sender, tokensBought[msg.sender])",
                "token.refundTokens(msg.sender, tokensBought[msg.sender])"
            ],
            "block5410_0": [
                "msg.sender.transfer(weiNextTier)"
            ],
            "jump4729_0": [
                "vault.enableRefunds()",
                "vault.enableRefunds()"
            ],
            "block5410_3": [
                "msg.sender.transfer(weiNextTier)"
            ],
            "jump5410_4": [
                "msg.sender.transfer(weiNextTier)",
                "msg.sender.transfer(weiNextTier)"
            ],
            "jump5410_0": [
                "msg.sender.transfer(weiNextTier)",
                "msg.sender.transfer(weiNextTier)"
            ],
            "jump5067_2": [
                "token.burnTokens()",
                "token.burnTokens()"
            ],
            "block3152_0": [
                "token.distributeICOTokens(msg.sender, tokens)"
            ],
            "block3152_1": [
                "token.distributeICOTokens(msg.sender, tokens)"
            ],
            "block5410": [
                "msg.sender.transfer(weiNextTier)"
            ],
            "block5410_2": [
                "msg.sender.transfer(weiNextTier)"
            ],
            "block6615": [
                "token.refundTokens(msg.sender, tokensBought[msg.sender])"
            ],
            "block5410_4": [
                "msg.sender.transfer(weiNextTier)"
            ],
            "block5410_7": [
                "msg.sender.transfer(weiNextTier)"
            ],
            "block3927_1": [
                "vault.close()"
            ],
            "block5067": [
                "token.burnTokens()"
            ],
            "jump5410_2": [
                "msg.sender.transfer(weiNextTier)",
                "msg.sender.transfer(weiNextTier)"
            ],
            "block5410_6": [
                "msg.sender.transfer(weiNextTier)"
            ],
            "block4729": [
                "vault.enableRefunds()"
            ],
            "jump3152_1": [
                "token.distributeICOTokens(msg.sender, tokens)",
                "token.distributeICOTokens(msg.sender, tokens)"
            ],
            "jump3755_1": [
                "vault.deposit.value(amountPaid)(msg.sender)",
                "vault.deposit.value(amountPaid)(msg.sender)"
            ],
            "jump3755_0": [
                "vault.deposit.value(amountPaid)(msg.sender)",
                "vault.deposit.value(amountPaid)(msg.sender)"
            ],
            "jump3457": [
                "walletB.transfer(amountPaid)",
                "walletB.transfer(amountPaid)"
            ],
            "block7863_0": [
                "msg.sender.transfer(differenceWei)"
            ],
            "block3927_0": [
                "vault.close()"
            ],
            "jump5410": [
                "msg.sender.transfer(weiNextTier)",
                "msg.sender.transfer(weiNextTier)"
            ],
            "block3152": [
                "token.distributeICOTokens(msg.sender, tokens)"
            ],
            "jump3755": [
                "vault.deposit.value(amountPaid)(msg.sender)",
                "vault.deposit.value(amountPaid)(msg.sender)"
            ],
            "jump3927_0": [
                "vault.close()",
                "vault.close()"
            ],
            "jump7863_1": [
                "msg.sender.transfer(differenceWei)",
                "msg.sender.transfer(differenceWei)"
            ],
            "jump3457_0": [
                "walletB.transfer(amountPaid)",
                "walletB.transfer(amountPaid)"
            ],
            "jump3457_1": [
                "walletB.transfer(amountPaid)",
                "walletB.transfer(amountPaid)"
            ],
            "jump3927": [
                "vault.close()",
                "vault.close()"
            ],
            "block5410_8": [
                "msg.sender.transfer(weiNextTier)"
            ],
            "jump5067": [
                "token.burnTokens()",
                "token.burnTokens()"
            ],
            "block7944_1": [
                "msg.sender.transfer(exceedingBalance)"
            ],
            "block7944_0": [
                "msg.sender.transfer(exceedingBalance)"
            ],
            "block7863": [
                "msg.sender.transfer(differenceWei)"
            ],
            "block5410_5": [
                "msg.sender.transfer(weiNextTier)"
            ],
            "jump5410_8": [
                "msg.sender.transfer(weiNextTier)",
                "msg.sender.transfer(weiNextTier)"
            ],
            "jump6331": [
                "vault.refund(msg.sender)",
                "vault.refund(msg.sender)"
            ],
            "jump7863_0": [
                "msg.sender.transfer(differenceWei)",
                "msg.sender.transfer(differenceWei)"
            ],
            "jump7944_0": [
                "msg.sender.transfer(exceedingBalance)",
                "msg.sender.transfer(exceedingBalance)"
            ],
            "block3457_0": [
                "walletB.transfer(amountPaid)"
            ],
            "jump3152_0": [
                "token.distributeICOTokens(msg.sender, tokens)",
                "token.distributeICOTokens(msg.sender, tokens)"
            ],
            "jump7944_1": [
                "msg.sender.transfer(exceedingBalance)",
                "msg.sender.transfer(exceedingBalance)"
            ],
            "jump7863": [
                "msg.sender.transfer(differenceWei)",
                "msg.sender.transfer(differenceWei)"
            ],
            "block6331": [
                "vault.refund(msg.sender)"
            ]
        }
    },
    "CapWhitelist": {
        "function_list": [
            "CapWhitelist()",
            "destruct()",
            "setWhitelisted(address,uint256)",
            "setWhitelistInternal(address,uint256)"
        ],
        "initial_state": {
            "CapWhitelist()": {
                "argument": {},
                "contract": {}
            },
            "destruct()": {
                "argument": {},
                "contract": {}
            },
            "setWhitelisted(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "setWhitelistInternal(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "destruct()": [
                103,
                75
            ],
            "setWhitelisted(address,uint256)": [
                300,
                141
            ]
        },
        "block_CALL_mapping": {}
    },
    "Token": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "StandardToken": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "increaseApproval(address,uint256)",
            "decreaseApproval(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "increaseApproval(address,uint256)": {
                "argument": {
                    "_addedValue": "uint256"
                },
                "contract": {}
            },
            "decreaseApproval(address,uint256)": {
                "argument": {
                    "_subtractedValue": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                147,
                75
            ],
            "increaseApproval(address,uint256)": [
                713,
                207
            ],
            "balanceOf(address)": [
                525,
                163
            ],
            "allowance(address,address)": [
                814,
                229
            ],
            "decreaseApproval(address,uint256)": [
                424,
                141
            ],
            "transferFrom(address,address,uint256)": [
                291,
                119
            ],
            "transfer(address,uint256)": [
                612,
                185
            ]
        },
        "block_CALL_mapping": {}
    },
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "MintableToken": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "increaseApproval(address,uint256)",
            "decreaseApproval(address,uint256)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "mint(address,uint256)",
            "finishMinting()",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "increaseApproval(address,uint256)": {
                "argument": {
                    "_addedValue": "uint256"
                },
                "contract": {}
            },
            "decreaseApproval(address,uint256)": {
                "argument": {
                    "_subtractedValue": "uint256"
                },
                "contract": {}
            },
            "mint(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "finishMinting()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                249,
                97
            ],
            "increaseApproval(address,uint256)": [
                1002,
                295
            ],
            "mint(address,uint256)": [
                526,
                163
            ],
            "balanceOf(address)": [
                704,
                207
            ],
            "finishMinting()": [
                791,
                229
            ],
            "allowance(address,address)": [
                1103,
                317
            ],
            "decreaseApproval(address,uint256)": [
                603,
                185
            ],
            "transferFrom(address,address,uint256)": [
                393,
                141
            ],
            "transfer(address,uint256)": [
                901,
                273
            ],
            "transferOwnership(address)": [
                1222,
                339
            ]
        },
        "block_CALL_mapping": {}
    },
    "RCNToken": {
        "function_list": [
            "mint(address,uint256)",
            "finishMinting()",
            "Ownable()",
            "transferOwnership(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "increaseApproval(address,uint256)",
            "decreaseApproval(address,uint256)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "mint(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string"
                }
            },
            "finishMinting()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string"
                }
            },
            "Ownable()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string"
                }
            },
            "increaseApproval(address,uint256)": {
                "argument": {
                    "_addedValue": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string"
                }
            },
            "decreaseApproval(address,uint256)": {
                "argument": {
                    "_subtractedValue": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "version": "string"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                437,
                119
            ],
            "increaseApproval(address,uint256)": [
                1527,
                383
            ],
            "mint(address,uint256)": [
                763,
                207
            ],
            "finishMinting()": [
                1172,
                295
            ],
            "allowance(address,address)": [
                1628,
                405
            ],
            "balanceOf(address)": [
                1085,
                273
            ],
            "decreaseApproval(address,uint256)": [
                984,
                251
            ],
            "transferFrom(address,address,uint256)": [
                581,
                163
            ],
            "transferOwnership(address)": [
                1747,
                427
            ],
            "transfer(address,uint256)": [
                1426,
                361
            ]
        },
        "block_CALL_mapping": {}
    },
    "PreallocationsWhitelist": {
        "function_list": [
            "PreallocationsWhitelist()",
            "destruct()",
            "setWhitelisted(address,bool)",
            "setWhitelistInternal(address,bool)"
        ],
        "initial_state": {
            "PreallocationsWhitelist()": {
                "argument": {},
                "contract": {}
            },
            "destruct()": {
                "argument": {},
                "contract": {}
            },
            "setWhitelisted(address,bool)": {
                "argument": {},
                "contract": {}
            },
            "setWhitelistInternal(address,bool)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "setWhitelisted(address,bool)": [
                213,
                119
            ],
            "destruct()": [
                103,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "RCNCrowdsale": {
        "function_list": [
            "buyTokens(address)",
            "RCNCrowdsale(address,address,uint256,uint256)",
            "fallback()",
            "buyTokens(address)",
            "finalize()",
            "forwardFunds()",
            "setWhitelist(address,uint256)",
            "setPreallocationWhitelist(address,bool)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "buyTokens(address)": {
                "argument": {},
                "contract": {
                    "decimals": "uint256",
                    "fundingStartTimestamp": "uint256",
                    "fundingEndTimestamp": "uint256",
                    "rcnFund": "uint256",
                    "tokenExchangeRate": "uint256",
                    "tokenCreationCap": "uint256",
                    "minBuyTokens": "uint256",
                    "gasPriceLimit": "uint256"
                }
            },
            "RCNCrowdsale(address,address,uint256,uint256)": {
                "argument": {
                    "_fundingStartTimestamp": "uint256",
                    "_fundingEndTimestamp": "uint256"
                },
                "contract": {
                    "decimals": "uint256",
                    "fundingStartTimestamp": "uint256",
                    "fundingEndTimestamp": "uint256",
                    "rcnFund": "uint256",
                    "tokenExchangeRate": "uint256",
                    "tokenCreationCap": "uint256",
                    "minBuyTokens": "uint256",
                    "gasPriceLimit": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "decimals": "uint256",
                    "fundingStartTimestamp": "uint256",
                    "fundingEndTimestamp": "uint256",
                    "rcnFund": "uint256",
                    "tokenExchangeRate": "uint256",
                    "tokenCreationCap": "uint256",
                    "minBuyTokens": "uint256",
                    "gasPriceLimit": "uint256"
                }
            },
            "finalize()": {
                "argument": {},
                "contract": {
                    "decimals": "uint256",
                    "fundingStartTimestamp": "uint256",
                    "fundingEndTimestamp": "uint256",
                    "rcnFund": "uint256",
                    "tokenExchangeRate": "uint256",
                    "tokenCreationCap": "uint256",
                    "minBuyTokens": "uint256",
                    "gasPriceLimit": "uint256"
                }
            },
            "forwardFunds()": {
                "argument": {},
                "contract": {
                    "decimals": "uint256",
                    "fundingStartTimestamp": "uint256",
                    "fundingEndTimestamp": "uint256",
                    "rcnFund": "uint256",
                    "tokenExchangeRate": "uint256",
                    "tokenCreationCap": "uint256",
                    "minBuyTokens": "uint256",
                    "gasPriceLimit": "uint256"
                }
            },
            "setWhitelist(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "decimals": "uint256",
                    "fundingStartTimestamp": "uint256",
                    "fundingEndTimestamp": "uint256",
                    "rcnFund": "uint256",
                    "tokenExchangeRate": "uint256",
                    "tokenCreationCap": "uint256",
                    "minBuyTokens": "uint256",
                    "gasPriceLimit": "uint256"
                }
            },
            "setPreallocationWhitelist(address,bool)": {
                "argument": {},
                "contract": {
                    "decimals": "uint256",
                    "fundingStartTimestamp": "uint256",
                    "fundingEndTimestamp": "uint256",
                    "rcnFund": "uint256",
                    "tokenExchangeRate": "uint256",
                    "tokenCreationCap": "uint256",
                    "minBuyTokens": "uint256",
                    "gasPriceLimit": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "decimals": "uint256",
                    "fundingStartTimestamp": "uint256",
                    "fundingEndTimestamp": "uint256",
                    "rcnFund": "uint256",
                    "tokenExchangeRate": "uint256",
                    "tokenCreationCap": "uint256",
                    "minBuyTokens": "uint256",
                    "gasPriceLimit": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "setPreallocationWhitelist(address,bool)": [
                622,
                229
            ],
            "finalize()": [
                599,
                207
            ],
            "setWhitelist(address,uint256)": [
                263,
                75
            ],
            "buyTokens(address)": [
                1181,
                427
            ]
        },
        "block_CALL_mapping": {
            "block1556": [
                "preallocationsWhitelist.whitelist(msg.sender)"
            ],
            "jump2227_0": [
                "whiteList.whitelist(msg.sender)",
                "whiteList.whitelist(msg.sender)"
            ],
            "jump2227_1": [
                "whiteList.whitelist(msg.sender)",
                "whiteList.whitelist(msg.sender)"
            ],
            "block3023": [
                "token.mint(beneficiary, tokens)"
            ],
            "block5053_1": [
                "ethFundDeposit.transfer(msg.value)"
            ],
            "jump5053_0": [
                "ethFundDeposit.transfer(msg.value)",
                "ethFundDeposit.transfer(msg.value)"
            ],
            "jump5053_1": [
                "ethFundDeposit.transfer(msg.value)",
                "ethFundDeposit.transfer(msg.value)"
            ],
            "jump1879": [
                "token.totalSupply()",
                "token.totalSupply()"
            ],
            "jump2741": [
                "token.totalSupply()",
                "token.totalSupply()"
            ],
            "block3774": [
                "token.totalSupply()"
            ],
            "block2227_0": [
                "whiteList.whitelist(msg.sender)"
            ],
            "block2227_1": [
                "whiteList.whitelist(msg.sender)"
            ],
            "jump2484": [
                "preallocationsWhitelist.whitelist(msg.sender)",
                "preallocationsWhitelist.whitelist(msg.sender)"
            ],
            "jump3023_0": [
                "token.mint(beneficiary, tokens)",
                "token.mint(beneficiary, tokens)"
            ],
            "jump4255": [
                "whiteList.destruct()",
                "whiteList.destruct()"
            ],
            "jump3023_1": [
                "token.mint(beneficiary, tokens)",
                "token.mint(beneficiary, tokens)"
            ],
            "jump1879_0": [
                "token.totalSupply()",
                "token.totalSupply()"
            ],
            "jump1879_1": [
                "token.totalSupply()",
                "token.totalSupply()"
            ],
            "jump5053": [
                "ethFundDeposit.transfer(msg.value)",
                "ethFundDeposit.transfer(msg.value)"
            ],
            "block2484_0": [
                "preallocationsWhitelist.whitelist(msg.sender)"
            ],
            "block1879": [
                "token.totalSupply()"
            ],
            "block1556_0": [
                "preallocationsWhitelist.whitelist(msg.sender)"
            ],
            "block1556_1": [
                "preallocationsWhitelist.whitelist(msg.sender)"
            ],
            "block4097": [
                "token.finishMinting()"
            ],
            "jump1556": [
                "preallocationsWhitelist.whitelist(msg.sender)",
                "preallocationsWhitelist.whitelist(msg.sender)"
            ],
            "block4255": [
                "whiteList.destruct()"
            ],
            "jump4097": [
                "token.finishMinting()",
                "token.finishMinting()"
            ],
            "jump2741_1": [
                "token.totalSupply()",
                "token.totalSupply()"
            ],
            "jump2741_0": [
                "token.totalSupply()",
                "token.totalSupply()"
            ],
            "jump2484_1": [
                "preallocationsWhitelist.whitelist(msg.sender)",
                "preallocationsWhitelist.whitelist(msg.sender)"
            ],
            "jump2484_0": [
                "preallocationsWhitelist.whitelist(msg.sender)",
                "preallocationsWhitelist.whitelist(msg.sender)"
            ],
            "jump4731": [
                "preallocationsWhitelist.setWhitelisted(_address, _status)",
                "preallocationsWhitelist.setWhitelisted(_address, _status)"
            ],
            "block3023_0": [
                "token.mint(beneficiary, tokens)"
            ],
            "block2484": [
                "preallocationsWhitelist.whitelist(msg.sender)"
            ],
            "jump2227": [
                "whiteList.whitelist(msg.sender)",
                "whiteList.whitelist(msg.sender)"
            ],
            "block2741": [
                "token.totalSupply()"
            ],
            "jump3023": [
                "token.mint(beneficiary, tokens)",
                "token.mint(beneficiary, tokens)"
            ],
            "block5053_0": [
                "ethFundDeposit.transfer(msg.value)"
            ],
            "jump3774": [
                "token.totalSupply()",
                "token.totalSupply()"
            ],
            "block3023_1": [
                "token.mint(beneficiary, tokens)"
            ],
            "block2484_1": [
                "preallocationsWhitelist.whitelist(msg.sender)"
            ],
            "jump1556_0": [
                "preallocationsWhitelist.whitelist(msg.sender)",
                "preallocationsWhitelist.whitelist(msg.sender)"
            ],
            "block4413": [
                "preallocationsWhitelist.destruct()"
            ],
            "block2741_1": [
                "token.totalSupply()"
            ],
            "block1879_0": [
                "token.totalSupply()"
            ],
            "block1879_1": [
                "token.totalSupply()"
            ],
            "jump4413": [
                "preallocationsWhitelist.destruct()",
                "preallocationsWhitelist.destruct()"
            ],
            "block2741_0": [
                "token.totalSupply()"
            ],
            "block4731": [
                "preallocationsWhitelist.setWhitelisted(_address, _status)"
            ],
            "jump3495": [
                "whiteList.setWhitelisted(_address, _amount)",
                "whiteList.setWhitelisted(_address, _amount)"
            ],
            "block3495": [
                "whiteList.setWhitelisted(_address, _amount)"
            ],
            "block2227": [
                "whiteList.whitelist(msg.sender)"
            ],
            "jump1556_1": [
                "preallocationsWhitelist.whitelist(msg.sender)",
                "preallocationsWhitelist.whitelist(msg.sender)"
            ],
            "block5053": [
                "ethFundDeposit.transfer(msg.value)"
            ]
        }
    }
}