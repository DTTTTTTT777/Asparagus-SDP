{
    "ERC20": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                125,
                75
            ],
            "balanceOf(address)": [
                402,
                141
            ],
            "totalSupply()": [
                226,
                97
            ],
            "allowance(address,address)": [
                590,
                185
            ],
            "transferFrom(address,address,uint256)": [
                269,
                119
            ],
            "transfer(address,uint256)": [
                489,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "Owned": {
        "function_list": [
            "Owned()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "TokenTrader": {
        "function_list": [
            "Owned()",
            "transferOwnership(address)",
            "TokenTrader(address,uint256,uint256,uint256,bool,bool)",
            "activate(bool,bool)",
            "makerDepositEther()",
            "makerWithdrawAsset(uint256)",
            "makerTransferAsset(TokenTrader,uint256)",
            "makerWithdrawERC20Token(address,uint256)",
            "makerWithdrawEther(uint256)",
            "makerTransferEther(TokenTrader,uint256)",
            "takerBuyAsset()",
            "takerSellAsset(uint256)",
            "fallback()"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {
                    "buyPrice": "uint256",
                    "sellPrice": "uint256",
                    "units": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "buyPrice": "uint256",
                    "sellPrice": "uint256",
                    "units": "uint256"
                }
            },
            "TokenTrader(address,uint256,uint256,uint256,bool,bool)": {
                "argument": {
                    "_buyPrice": "uint256",
                    "_sellPrice": "uint256",
                    "_units": "uint256"
                },
                "contract": {
                    "buyPrice": "uint256",
                    "sellPrice": "uint256",
                    "units": "uint256"
                }
            },
            "activate(bool,bool)": {
                "argument": {},
                "contract": {
                    "buyPrice": "uint256",
                    "sellPrice": "uint256",
                    "units": "uint256"
                }
            },
            "makerDepositEther()": {
                "argument": {},
                "contract": {
                    "buyPrice": "uint256",
                    "sellPrice": "uint256",
                    "units": "uint256"
                }
            },
            "makerWithdrawAsset(uint256)": {
                "argument": {
                    "tokens": "uint256"
                },
                "contract": {
                    "buyPrice": "uint256",
                    "sellPrice": "uint256",
                    "units": "uint256"
                }
            },
            "makerTransferAsset(TokenTrader,uint256)": {
                "argument": {
                    "tokens": "uint256"
                },
                "contract": {
                    "buyPrice": "uint256",
                    "sellPrice": "uint256",
                    "units": "uint256"
                }
            },
            "makerWithdrawERC20Token(address,uint256)": {
                "argument": {
                    "tokens": "uint256"
                },
                "contract": {
                    "buyPrice": "uint256",
                    "sellPrice": "uint256",
                    "units": "uint256"
                }
            },
            "makerWithdrawEther(uint256)": {
                "argument": {
                    "ethers": "uint256"
                },
                "contract": {
                    "buyPrice": "uint256",
                    "sellPrice": "uint256",
                    "units": "uint256"
                }
            },
            "makerTransferEther(TokenTrader,uint256)": {
                "argument": {
                    "ethers": "uint256"
                },
                "contract": {
                    "buyPrice": "uint256",
                    "sellPrice": "uint256",
                    "units": "uint256"
                }
            },
            "takerBuyAsset()": {
                "argument": {},
                "contract": {
                    "buyPrice": "uint256",
                    "sellPrice": "uint256",
                    "units": "uint256"
                }
            },
            "takerSellAsset(uint256)": {
                "argument": {
                    "amountOfTokensToSell": "uint256"
                },
                "contract": {
                    "buyPrice": "uint256",
                    "sellPrice": "uint256",
                    "units": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "buyPrice": "uint256",
                    "sellPrice": "uint256",
                    "units": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "makerDepositEther()": [
                5070,
                1639
            ],
            "makerWithdrawEther(uint256)": [
                251,
                75
            ],
            "takerBuyAsset()": [
                1089,
                361
            ],
            "makerWithdrawAsset(uint256)": [
                1099,
                383
            ],
            "takerSellAsset(uint256)": [
                1168,
                405
            ],
            "activate(bool,bool)": [
                781,
                273
            ],
            "makerWithdrawERC20Token(address,uint256)": [
                988,
                339
            ],
            "transferOwnership(address)": [
                1213,
                427
            ]
        },
        "block_CALL_mapping": {
            "block1985": [
                "ERC20(asset).transfer(msg.sender, order * units)"
            ],
            "block3009": [
                "toTokenTrader.asset()"
            ],
            "jump1985_0": [
                "ERC20(asset).transfer(msg.sender, order * units)",
                "ERC20(asset).transfer(msg.sender, order * units)"
            ],
            "jump1985_1": [
                "ERC20(asset).transfer(msg.sender, order * units)",
                "ERC20(asset).transfer(msg.sender, order * units)"
            ],
            "block1985_0": [
                "ERC20(asset).transfer(msg.sender, order * units)"
            ],
            "jump3464": [
                "ERC20(asset).transfer(toTokenTrader, tokens)",
                "ERC20(asset).transfer(toTokenTrader, tokens)"
            ],
            "jump5943": [
                "ERC20(asset).transfer(owner, tokens)",
                "ERC20(asset).transfer(owner, tokens)"
            ],
            "block1601": [
                "ERC20(asset).balanceOf(address(this))"
            ],
            "block2159_0": [
                "msg.sender.send(msg.value)"
            ],
            "jump3009": [
                "toTokenTrader.asset()",
                "toTokenTrader.asset()"
            ],
            "jump3818": [
                "TokenTrader(msg.sender).owner()",
                "TokenTrader(msg.sender).owner()"
            ],
            "jump2159_1": [
                "msg.sender.send(msg.value)",
                "msg.sender.send(msg.value)"
            ],
            "jump5070": [
                "toTokenTrader.makerDepositEther.value(ethers)()",
                "toTokenTrader.makerDepositEther.value(ethers)()"
            ],
            "jump2764": [
                "toTokenTrader.owner()",
                "toTokenTrader.owner()"
            ],
            "jump1711_1": [
                "msg.sender.send(change)",
                "msg.sender.send(change)"
            ],
            "block5070": [
                "toTokenTrader.makerDepositEther.value(ethers)()"
            ],
            "block1601_1": [
                "ERC20(asset).balanceOf(address(this))"
            ],
            "block1601_0": [
                "ERC20(asset).balanceOf(address(this))"
            ],
            "jump5498": [
                "ERC20(tokenAddress).transfer(owner, tokens)",
                "ERC20(tokenAddress).transfer(owner, tokens)"
            ],
            "jump4680": [
                "toTokenTrader.asset()",
                "toTokenTrader.asset()"
            ],
            "jump2159": [
                "msg.sender.send(msg.value)",
                "msg.sender.send(msg.value)"
            ],
            "jump2159_0": [
                "msg.sender.send(msg.value)",
                "msg.sender.send(msg.value)"
            ],
            "block4435": [
                "toTokenTrader.owner()"
            ],
            "block5943": [
                "ERC20(asset).transfer(owner, tokens)"
            ],
            "block4680": [
                "toTokenTrader.asset()"
            ],
            "block5498": [
                "ERC20(tokenAddress).transfer(owner, tokens)"
            ],
            "block6519": [
                "msg.sender.send(order * buyPrice)"
            ],
            "block1711": [
                "msg.sender.send(change)"
            ],
            "block2159_1": [
                "msg.sender.send(msg.value)"
            ],
            "jump1711_0": [
                "msg.sender.send(change)",
                "msg.sender.send(change)"
            ],
            "block3818": [
                "TokenTrader(msg.sender).owner()"
            ],
            "block1711_1": [
                "msg.sender.send(change)"
            ],
            "block1711_0": [
                "msg.sender.send(change)"
            ],
            "block1985_1": [
                "ERC20(asset).transfer(msg.sender, order * units)"
            ],
            "jump4435": [
                "toTokenTrader.owner()",
                "toTokenTrader.owner()"
            ],
            "block2764": [
                "toTokenTrader.owner()"
            ],
            "jump1985": [
                "ERC20(asset).transfer(msg.sender, order * units)",
                "ERC20(asset).transfer(msg.sender, order * units)"
            ],
            "block3464": [
                "ERC20(asset).transfer(toTokenTrader, tokens)"
            ],
            "jump1601_1": [
                "ERC20(asset).balanceOf(address(this))",
                "ERC20(asset).balanceOf(address(this))"
            ],
            "jump1601_0": [
                "ERC20(asset).balanceOf(address(this))",
                "ERC20(asset).balanceOf(address(this))"
            ],
            "jump6519": [
                "msg.sender.send(order * buyPrice)",
                "msg.sender.send(order * buyPrice)"
            ],
            "block2159": [
                "msg.sender.send(msg.value)"
            ],
            "block2355": [
                "owner.send(ethers)"
            ],
            "jump6449": [
                "ERC20(asset).transferFrom(msg.sender, address(this), order * units)",
                "ERC20(asset).transferFrom(msg.sender, address(this), order * units)"
            ],
            "jump1601": [
                "ERC20(asset).balanceOf(address(this))",
                "ERC20(asset).balanceOf(address(this))"
            ],
            "block6449": [
                "ERC20(asset).transferFrom(msg.sender, address(this), order * units)"
            ],
            "jump1711": [
                "msg.sender.send(change)",
                "msg.sender.send(change)"
            ]
        }
    },
    "FixedSupplyToken": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "FixedSupplyToken(string,string,uint256,uint8)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "_totalSupply": "uint256",
                    "decimals": "uint8"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "_totalSupply": "uint256",
                    "decimals": "uint8"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "_totalSupply": "uint256",
                    "decimals": "uint8"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "_totalSupply": "uint256",
                    "decimals": "uint8"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "_totalSupply": "uint256",
                    "decimals": "uint8"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "_totalSupply": "uint256",
                    "decimals": "uint8"
                }
            },
            "FixedSupplyToken(string,string,uint256,uint8)": {
                "argument": {
                    "_name": "string",
                    "_symbol": "string",
                    "_supply": "uint256",
                    "_decimals": "uint8"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "_totalSupply": "uint256",
                    "decimals": "uint8"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                302,
                97
            ],
            "balanceOf(address)": [
                628,
                185
            ],
            "totalSupply()": [
                403,
                119
            ],
            "transferFrom(address,address,uint256)": [
                446,
                141
            ],
            "allowance(address,address)": [
                960,
                251
            ],
            "transfer(address,uint256)": [
                859,
                229
            ]
        },
        "block_CALL_mapping": {}
    },
    "TokenToken": {
        "function_list": [
            "FixedSupplyToken(string,string,uint256,uint8)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "totalSupply()",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "TokenToken(string,string,uint256,uint8,TokenTrader[],uint256[])",
            "transferOwnership(address)",
            "setPurchaseRatios(TokenTrader[],uint256[])",
            "buyPrice()",
            "sellPrice()",
            "fallback()",
            "buy()",
            "sell(uint256)",
            "breakdown(uint256)",
            "rebalance(TokenTrader,TokenTrader,uint256)",
            "kill()",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "FixedSupplyToken(string,string,uint256,uint8)": {
                "argument": {
                    "_name": "string",
                    "_symbol": "string",
                    "_supply": "uint256",
                    "_decimals": "uint8"
                },
                "contract": {
                    "tokenExchanges": "TokenTrader[]",
                    "tokenRatios": "uint256[]",
                    "tokensBought": "uint256"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "tokenExchanges": "TokenTrader[]",
                    "tokenRatios": "uint256[]",
                    "tokensBought": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "tokenExchanges": "TokenTrader[]",
                    "tokenRatios": "uint256[]",
                    "tokensBought": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "tokenExchanges": "TokenTrader[]",
                    "tokenRatios": "uint256[]",
                    "tokensBought": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "tokenExchanges": "TokenTrader[]",
                    "tokenRatios": "uint256[]",
                    "tokensBought": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "tokenExchanges": "TokenTrader[]",
                    "tokenRatios": "uint256[]",
                    "tokensBought": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "tokenExchanges": "TokenTrader[]",
                    "tokenRatios": "uint256[]",
                    "tokensBought": "uint256"
                }
            },
            "TokenToken(string,string,uint256,uint8,TokenTrader[],uint256[])": {
                "argument": {
                    "_name": "string",
                    "_symbol": "string",
                    "_supply": "uint256",
                    "_decimals": "uint8",
                    "initialTokenExchanges": "TokenTrader[]",
                    "initialTokenRatios": "uint256[]"
                },
                "contract": {
                    "tokenExchanges": "TokenTrader[]",
                    "tokenRatios": "uint256[]",
                    "tokensBought": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "tokenExchanges": "TokenTrader[]",
                    "tokenRatios": "uint256[]",
                    "tokensBought": "uint256"
                }
            },
            "setPurchaseRatios(TokenTrader[],uint256[])": {
                "argument": {
                    "newTokenExchanges": "TokenTrader[]",
                    "newTokenRatios": "uint256[]"
                },
                "contract": {
                    "tokenExchanges": "TokenTrader[]",
                    "tokenRatios": "uint256[]",
                    "tokensBought": "uint256"
                }
            },
            "buyPrice()": {
                "argument": {},
                "contract": {
                    "tokenExchanges": "TokenTrader[]",
                    "tokenRatios": "uint256[]",
                    "tokensBought": "uint256"
                }
            },
            "sellPrice()": {
                "argument": {},
                "contract": {
                    "tokenExchanges": "TokenTrader[]",
                    "tokenRatios": "uint256[]",
                    "tokensBought": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "tokenExchanges": "TokenTrader[]",
                    "tokenRatios": "uint256[]",
                    "tokensBought": "uint256"
                }
            },
            "buy()": {
                "argument": {},
                "contract": {
                    "tokenExchanges": "TokenTrader[]",
                    "tokenRatios": "uint256[]",
                    "tokensBought": "uint256"
                }
            },
            "sell(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "tokenExchanges": "TokenTrader[]",
                    "tokenRatios": "uint256[]",
                    "tokensBought": "uint256"
                }
            },
            "breakdown(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "tokenExchanges": "TokenTrader[]",
                    "tokenRatios": "uint256[]",
                    "tokensBought": "uint256"
                }
            },
            "rebalance(TokenTrader,TokenTrader,uint256)": {
                "argument": {
                    "fromPercent": "uint256"
                },
                "contract": {
                    "tokenExchanges": "TokenTrader[]",
                    "tokenRatios": "uint256[]",
                    "tokensBought": "uint256"
                }
            },
            "kill()": {
                "argument": {},
                "contract": {
                    "tokenExchanges": "TokenTrader[]",
                    "tokenRatios": "uint256[]",
                    "tokensBought": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                9370,
                902
            ],
            "kill()": [
                779,
                185
            ],
            "breakdown(uint256)": [
                1867,
                449
            ],
            "buyPrice()": [
                4570,
                931
            ],
            "totalSupply()": [
                554,
                119
            ],
            "sellPrice()": [
                8984,
                810
            ],
            "buy()": [
                1206,
                317
            ],
            "balanceOf(address)": [
                8812,
                881
            ],
            "sell(uint256)": [
                1912,
                471
            ],
            "transferFrom(address,address,uint256)": [
                597,
                141
            ],
            "transferOwnership(address)": [
                1977,
                493
            ],
            "allowance(address,address)": [
                1748,
                427
            ],
            "transfer(address,uint256)": [
                7979,
                901
            ]
        },
        "block_CALL_mapping": {
            "jump2285_1": [
                "tokenExchange.transfer(msg.value * tokenRatios[i] / 1e18)",
                "tokenExchange.transfer(msg.value * tokenRatios[i] / 1e18)"
            ],
            "jump4570_2": [
                "tokenExchanges[i].buyPrice()",
                "tokenExchanges[i].buyPrice()"
            ],
            "block7373": [
                "tokenExchange.asset()"
            ],
            "jump4570_0": [
                "tokenExchanges[i].buyPrice()",
                "tokenExchanges[i].buyPrice()"
            ],
            "jump6585": [
                "toExchange.transfer(revenue)",
                "toExchange.transfer(revenue)"
            ],
            "jump6565": [
                "fromExchange.takerSellAsset(subTokensToSell)",
                "fromExchange.takerSellAsset(subTokensToSell)"
            ],
            "block9541": [
                "tokenExchange.takerSellAsset(subTokensToSell)"
            ],
            "block6010": [
                "fromExchange.sellPrice()"
            ],
            "jump4570_1": [
                "tokenExchanges[i].buyPrice()",
                "tokenExchanges[i].buyPrice()"
            ],
            "block4570_0": [
                "tokenExchanges[i].buyPrice()"
            ],
            "block8599": [
                "tokenExchange.asset()"
            ],
            "jump2285_0": [
                "tokenExchange.transfer(msg.value * tokenRatios[i] / 1e18)",
                "tokenExchange.transfer(msg.value * tokenRatios[i] / 1e18)"
            ],
            "block6173": [
                "fromExchange.asset()"
            ],
            "jump7586": [
                "ERC20(tokenExchange.asset()).balanceOf(this)",
                "ERC20(tokenExchange.asset()).balanceOf(this)"
            ],
            "jump9370": [
                "ERC20(tokenExchange.asset()).approve(address(tokenExchange), subTokensToSell)",
                "ERC20(tokenExchange.asset()).approve(address(tokenExchange), subTokensToSell)"
            ],
            "block9370": [
                "ERC20(tokenExchange.asset()).approve(address(tokenExchange), subTokensToSell)"
            ],
            "block8812": [
                "ERC20(tokenExchange.asset()).balanceOf(this)"
            ],
            "jump8984": [
                "tokenExchange.sellPrice()",
                "tokenExchange.sellPrice()"
            ],
            "jump7373": [
                "tokenExchange.asset()",
                "tokenExchange.asset()"
            ],
            "jump5838": [
                "ERC20(fromExchange.asset()).balanceOf(this)",
                "ERC20(fromExchange.asset()).balanceOf(this)"
            ],
            "block2285_0": [
                "tokenExchange.transfer(msg.value * tokenRatios[i] / 1e18)"
            ],
            "block2285_1": [
                "tokenExchange.transfer(msg.value * tokenRatios[i] / 1e18)"
            ],
            "jump6394": [
                "ERC20(fromExchange.asset()).approve(address(fromExchange), subTokensToSell)",
                "ERC20(fromExchange.asset()).approve(address(fromExchange), subTokensToSell)"
            ],
            "jump8599": [
                "tokenExchange.asset()",
                "tokenExchange.asset()"
            ],
            "jump6010": [
                "fromExchange.sellPrice()",
                "fromExchange.sellPrice()"
            ],
            "jump9541": [
                "tokenExchange.takerSellAsset(subTokensToSell)",
                "tokenExchange.takerSellAsset(subTokensToSell)"
            ],
            "jump7979": [
                "ERC20(tokenExchange.asset()).transfer(msg.sender, subTokensToSell)",
                "ERC20(tokenExchange.asset()).transfer(msg.sender, subTokensToSell)"
            ],
            "block7979": [
                "ERC20(tokenExchange.asset()).transfer(msg.sender, subTokensToSell)"
            ],
            "jump6173": [
                "fromExchange.asset()",
                "fromExchange.asset()"
            ],
            "block7586": [
                "ERC20(tokenExchange.asset()).balanceOf(this)"
            ],
            "jump9149": [
                "tokenExchange.asset()",
                "tokenExchange.asset()"
            ],
            "block6394": [
                "ERC20(fromExchange.asset()).approve(address(fromExchange), subTokensToSell)"
            ],
            "block9149": [
                "tokenExchange.asset()"
            ],
            "jump5625": [
                "fromExchange.asset()",
                "fromExchange.asset()"
            ],
            "block2285": [
                "tokenExchange.transfer(msg.value * tokenRatios[i] / 1e18)"
            ],
            "jump4570": [
                "tokenExchanges[i].buyPrice()",
                "tokenExchanges[i].buyPrice()"
            ],
            "block8984": [
                "tokenExchange.sellPrice()"
            ],
            "jump2285": [
                "tokenExchange.transfer(msg.value * tokenRatios[i] / 1e18)",
                "tokenExchange.transfer(msg.value * tokenRatios[i] / 1e18)"
            ],
            "block9576": [
                "msg.sender.transfer(revenue)"
            ],
            "block4570_1": [
                "tokenExchanges[i].buyPrice()"
            ],
            "block5625": [
                "fromExchange.asset()"
            ],
            "block4570": [
                "tokenExchanges[i].buyPrice()"
            ],
            "block4570_2": [
                "tokenExchanges[i].buyPrice()"
            ],
            "block6585": [
                "toExchange.transfer(revenue)"
            ],
            "jump9576": [
                "msg.sender.transfer(revenue)",
                "msg.sender.transfer(revenue)"
            ],
            "block4188": [
                "tokenExchanges[i].sellPrice()"
            ],
            "jump4188": [
                "tokenExchanges[i].sellPrice()",
                "tokenExchanges[i].sellPrice()"
            ],
            "jump7758": [
                "tokenExchange.asset()",
                "tokenExchange.asset()"
            ],
            "block5838": [
                "ERC20(fromExchange.asset()).balanceOf(this)"
            ],
            "jump8812": [
                "ERC20(tokenExchange.asset()).balanceOf(this)",
                "ERC20(tokenExchange.asset()).balanceOf(this)"
            ],
            "block6565": [
                "fromExchange.takerSellAsset(subTokensToSell)"
            ],
            "block7758": [
                "tokenExchange.asset()"
            ]
        }
    }
}