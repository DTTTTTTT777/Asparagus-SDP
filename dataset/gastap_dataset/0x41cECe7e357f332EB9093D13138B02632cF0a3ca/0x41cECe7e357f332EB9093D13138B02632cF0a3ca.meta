{
    "token": {
        "function_list": [
            "transfer(address,uint256)",
            "balanceOf(address)"
        ],
        "initial_state": {
            "transfer(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transfer(address,uint256)": [
                68,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "Presale": {
        "function_list": [
            "Presale()",
            "fallback()",
            "checkGoalReached()",
            "safeWithdrawal()",
            "WithdrawlRemainingPAT()",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Presale()": {
                "argument": {},
                "contract": {
                    "min_fundingGoal": "uint256",
                    "max_fundingGoal": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256",
                    "rate": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "min_fundingGoal": "uint256",
                    "max_fundingGoal": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256",
                    "rate": "uint256"
                }
            },
            "checkGoalReached()": {
                "argument": {},
                "contract": {
                    "min_fundingGoal": "uint256",
                    "max_fundingGoal": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256",
                    "rate": "uint256"
                }
            },
            "safeWithdrawal()": {
                "argument": {},
                "contract": {
                    "min_fundingGoal": "uint256",
                    "max_fundingGoal": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256",
                    "rate": "uint256"
                }
            },
            "WithdrawlRemainingPAT()": {
                "argument": {},
                "contract": {
                    "min_fundingGoal": "uint256",
                    "max_fundingGoal": "uint256",
                    "amountRaised": "uint256",
                    "deadline": "uint256",
                    "rate": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "checkGoalReached()": [
                718,
                75
            ],
            "safeWithdrawal()": [
                1240,
                295
            ],
            "WithdrawlRemainingPAT()": [
                1174,
                251
            ]
        },
        "block_CALL_mapping": {
            "jump1903": [
                "tokenReward.balanceOf(this)",
                "tokenReward.balanceOf(this)"
            ],
            "jump571_0": [
                "tokenReward.transfer(msg.sender, amount * rate * 10 ** 8 / 1 ether)",
                "tokenReward.transfer(msg.sender, amount * rate * 10 ** 8 / 1 ether)"
            ],
            "block571_0": [
                "tokenReward.transfer(msg.sender, amount * rate * 10 ** 8 / 1 ether)"
            ],
            "block571": [
                "tokenReward.transfer(msg.sender, amount * rate * 10 ** 8 / 1 ether)"
            ],
            "block1903": [
                "tokenReward.balanceOf(this)"
            ],
            "jump2579": [
                "msg.sender.send(amount)",
                "msg.sender.send(amount)"
            ],
            "jump2212": [
                "tokenReward.transfer(beneficiary, remainingAmount)",
                "tokenReward.transfer(beneficiary, remainingAmount)"
            ],
            "jump571": [
                "tokenReward.transfer(msg.sender, amount * rate * 10 ** 8 / 1 ether)",
                "tokenReward.transfer(msg.sender, amount * rate * 10 ** 8 / 1 ether)"
            ],
            "block2942": [
                "beneficiary.send(amountRaised)"
            ],
            "block2579": [
                "msg.sender.send(amount)"
            ],
            "block2212": [
                "tokenReward.transfer(beneficiary, remainingAmount)"
            ],
            "jump2942": [
                "beneficiary.send(amountRaised)",
                "beneficiary.send(amountRaised)"
            ]
        }
    }
}