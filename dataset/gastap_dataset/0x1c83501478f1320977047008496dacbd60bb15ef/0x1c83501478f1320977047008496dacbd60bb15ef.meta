{
    "ERC20Basic": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "balanceOf(address)": [
                124,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "usingOraclize": {
        "function_list": [
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)",
            "matchBytes32Prefix(bytes32,bytes,uint256)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "matchBytes32Prefix(bytes32,bytes,uint256)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes",
                    "n_random_bytes": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            }
        },
        "function_block_mapping": {
            "__callback(bytes32,string,bytes)": [
                200,
                97
            ],
            "__callback(bytes32,string)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "BasicToken": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transfer(address,uint256)": [
                222,
                119
            ],
            "balanceOf(address)": [
                135,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "BurnableToken": {
        "function_list": [
            "transfer(address,uint256)",
            "balanceOf(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "burn(uint256)"
        ],
        "initial_state": {
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "burn(uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transfer(address,uint256)": [
                278,
                141
            ],
            "burn(uint256)": [
                146,
                97
            ],
            "balanceOf(address)": [
                191,
                119
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                346,
                97
            ],
            "balanceOf(address)": [
                773,
                207
            ],
            "transferFrom(address,address,uint256)": [
                490,
                141
            ],
            "allowance(address,address)": [
                1394,
                339
            ],
            "transfer(address,uint256)": [
                1091,
                273
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC223": {
        "function_list": [
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "transfer(address,uint256,bytes)",
            "transferFrom(address,address,uint256,bytes)"
        ],
        "initial_state": {
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "transfer(address,uint256,bytes)": {
                "argument": {
                    "value": "uint256",
                    "data": "bytes"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256,bytes)": {
                "argument": {
                    "value": "uint256",
                    "data": "bytes"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                346,
                97
            ],
            "balanceOf(address)": [
                1105,
                251
            ],
            "transfer(address,uint256,bytes)": [
                1437,
                317
            ],
            "transferFrom(address,address,uint256)": [
                581,
                163
            ],
            "allowance(address,address)": [
                1608,
                339
            ],
            "transfer(address,uint256)": [
                1336,
                295
            ]
        },
        "block_CALL_mapping": {
            "jump4657": [
                "ContractReceiver(to).tokenFallback(msg.sender, value, data)",
                "ContractReceiver(to).tokenFallback(msg.sender, value, data)"
            ],
            "block4657": [
                "ContractReceiver(to).tokenFallback(msg.sender, value, data)"
            ],
            "block4657_1": [
                "ContractReceiver(to).tokenFallback(msg.sender, value, data)"
            ],
            "block4657_0": [
                "ContractReceiver(to).tokenFallback(msg.sender, value, data)"
            ],
            "jump4657_1": [
                "ContractReceiver(to).tokenFallback(msg.sender, value, data)",
                "ContractReceiver(to).tokenFallback(msg.sender, value, data)"
            ],
            "jump4657_0": [
                "ContractReceiver(to).tokenFallback(msg.sender, value, data)",
                "ContractReceiver(to).tokenFallback(msg.sender, value, data)"
            ]
        }
    },
    "StandardToken": {
        "function_list": [
            "transfer(address,uint256)",
            "balanceOf(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "increaseApproval(address,uint256)",
            "decreaseApproval(address,uint256)"
        ],
        "initial_state": {
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "increaseApproval(address,uint256)": {
                "argument": {
                    "_addedValue": "uint256"
                },
                "contract": {}
            },
            "decreaseApproval(address,uint256)": {
                "argument": {
                    "_subtractedValue": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                147,
                75
            ],
            "increaseApproval(address,uint256)": [
                713,
                207
            ],
            "balanceOf(address)": [
                525,
                163
            ],
            "allowance(address,address)": [
                814,
                229
            ],
            "decreaseApproval(address,uint256)": [
                424,
                141
            ],
            "transferFrom(address,address,uint256)": [
                291,
                119
            ],
            "transfer(address,uint256)": [
                612,
                185
            ]
        },
        "block_CALL_mapping": {}
    },
    "Standard223Token": {
        "function_list": [
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "increaseApproval(address,uint256)",
            "decreaseApproval(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "transfer(address,uint256,bytes)",
            "transferFrom(address,address,uint256,bytes)",
            "transfer(address,uint256,bytes)",
            "transferFrom(address,address,uint256,bytes)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "contractFallback(address,address,uint256,bytes)",
            "isContract(address)"
        ],
        "initial_state": {
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "increaseApproval(address,uint256)": {
                "argument": {
                    "_addedValue": "uint256"
                },
                "contract": {}
            },
            "decreaseApproval(address,uint256)": {
                "argument": {
                    "_subtractedValue": "uint256"
                },
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_data": "bytes"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_data": "bytes"
                },
                "contract": {}
            },
            "contractFallback(address,address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_data": "bytes"
                },
                "contract": {}
            },
            "isContract(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                169,
                75
            ],
            "transferFrom(address,address,uint256,bytes)": [
                735,
                207
            ],
            "increaseApproval(address,uint256)": [
                1109,
                251
            ],
            "balanceOf(address)": [
                547,
                163
            ],
            "allowance(address,address)": [
                1210,
                273
            ],
            "decreaseApproval(address,uint256)": [
                446,
                141
            ],
            "transfer(address,uint256,bytes)": [
                938,
                229
            ],
            "transferFrom(address,address,uint256)": [
                313,
                119
            ],
            "transfer(address,uint256)": [
                634,
                185
            ]
        },
        "block_CALL_mapping": {
            "jump4902_0": [
                "reciever.tokenFallback(_origin, _value, _data)",
                "reciever.tokenFallback(_origin, _value, _data)"
            ],
            "jump4902_1": [
                "reciever.tokenFallback(_origin, _value, _data)",
                "reciever.tokenFallback(_origin, _value, _data)"
            ],
            "block4902_0": [
                "reciever.tokenFallback(_origin, _value, _data)"
            ],
            "jump4902": [
                "reciever.tokenFallback(_origin, _value, _data)",
                "reciever.tokenFallback(_origin, _value, _data)"
            ],
            "jump4902_2": [
                "reciever.tokenFallback(_origin, _value, _data)",
                "reciever.tokenFallback(_origin, _value, _data)"
            ],
            "block4902": [
                "reciever.tokenFallback(_origin, _value, _data)"
            ],
            "block4902_1": [
                "reciever.tokenFallback(_origin, _value, _data)"
            ],
            "block4902_2": [
                "reciever.tokenFallback(_origin, _value, _data)"
            ]
        }
    },
    "RefundVault": {
        "function_list": [
            "RefundVault()",
            "vault_deposit(address,uint256)",
            "vault_releaseDeposit()",
            "vault_enableRefunds()",
            "vault_refund(address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "RefundVault()": {
                "argument": {},
                "contract": {
                    "totalDeposited": "uint256",
                    "refundDeadline": "uint256"
                }
            },
            "vault_deposit(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "totalDeposited": "uint256",
                    "refundDeadline": "uint256"
                }
            },
            "vault_releaseDeposit()": {
                "argument": {},
                "contract": {
                    "totalDeposited": "uint256",
                    "refundDeadline": "uint256"
                }
            },
            "vault_enableRefunds()": {
                "argument": {},
                "contract": {
                    "totalDeposited": "uint256",
                    "refundDeadline": "uint256"
                }
            },
            "vault_refund(address)": {
                "argument": {},
                "contract": {
                    "totalDeposited": "uint256",
                    "refundDeadline": "uint256"
                }
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "DGTX": {
        "function_list": [
            "transfer(address,uint256,bytes)",
            "transferFrom(address,address,uint256,bytes)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "contractFallback(address,address,uint256,bytes)",
            "isContract(address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "increaseApproval(address,uint256)",
            "decreaseApproval(address,uint256)",
            "transfer(address,uint256)",
            "balanceOf(address)",
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)",
            "transfer(address,uint256,bytes)",
            "transferFrom(address,address,uint256,bytes)",
            "burn(uint256)",
            "RefundVault()",
            "vault_deposit(address,uint256)",
            "vault_releaseDeposit()",
            "vault_enableRefunds()",
            "vault_refund(address)",
            "Ownable()",
            "transferOwnership(address)",
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)",
            "matchBytes32Prefix(bytes32,bytes,uint256)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "increaseSupply(uint256,address)",
            "burn(uint256)",
            "transferOwnership(address)",
            "finalize()",
            "depositFunds()",
            "claimRefund()",
            "finalization()",
            "releaseUnclaimedFunds()",
            "goalReached()",
            "__callback(bytes32,string)",
            "UpdateUSDETHPriceAfter(uint256)",
            "DGTX()",
            "initializeSaleWalletAddress()",
            "fallback()",
            "ICOactive()",
            "buy()",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "transfer(address,uint256,bytes)": {
                "argument": {
                    "value": "uint256",
                    "data": "bytes"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "transferFrom(address,address,uint256,bytes)": {
                "argument": {
                    "value": "uint256",
                    "data": "bytes"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "contractFallback(address,address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_data": "bytes"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "isContract(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "increaseApproval(address,uint256)": {
                "argument": {
                    "_addedValue": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "decreaseApproval(address,uint256)": {
                "argument": {
                    "_subtractedValue": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "burn(uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "RefundVault()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "vault_deposit(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "vault_releaseDeposit()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "vault_enableRefunds()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "vault_refund(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "Ownable()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "matchBytes32Prefix(bytes32,bytes,uint256)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes",
                    "n_random_bytes": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "increaseSupply(uint256,address)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "finalize()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "depositFunds()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "claimRefund()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "finalization()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "releaseUnclaimedFunds()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "goalReached()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "UpdateUSDETHPriceAfter(uint256)": {
                "argument": {
                    "delay": "uint256"
                },
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "DGTX()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "initializeSaleWalletAddress()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "ICOactive()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "buy()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "symbol": "string",
                    "decimals": "uint8",
                    "DECIMALS_MULTIPLIER": "uint256",
                    "ICOstarttime": "uint256",
                    "ICOendtime": "uint256",
                    "minimumInvestmentInWei": "uint256",
                    "maximumInvestmentInWei": "uint256",
                    "softcapInTokens": "uint256",
                    "hardcapInTokens": "uint256",
                    "totaltokensold": "uint256",
                    "USDETH": "uint256",
                    "NumberOfTokensIn1USD": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "claimRefund()": [
                2740,
                691
            ],
            "buy()": [
                2340,
                581
            ],
            "decreaseApproval(address,uint256)": [
                1770,
                427
            ],
            "ICOactive()": [
                1680,
                383
            ],
            "transferFrom(address,address,uint256)": [
                1036,
                207
            ],
            "approve(address,uint256)": [
                725,
                97
            ],
            "increaseApproval(address,uint256)": [
                3064,
                779
            ],
            "increaseSupply(uint256,address)": [
                826,
                119
            ],
            "__callback(bytes32,string,bytes)": [
                1337,
                273
            ],
            "goalReached()": [
                1958,
                471
            ],
            "transferOwnership(address)": [
                3457,
                889
            ],
            "releaseUnclaimedFunds()": [
                1013,
                185
            ],
            "transferFrom(address,address,uint256,bytes)": [
                2494,
                647
            ],
            "balanceOf(address)": [
                1871,
                449
            ],
            "transfer(address,uint256,bytes)": [
                2806,
                735
            ],
            "__callback(bytes32,string)": [
                1169,
                229
            ],
            "finalize()": [
                1657,
                361
            ],
            "burn(uint256)": [
                1569,
                317
            ],
            "transfer(address,uint256)": [
                2393,
                625
            ],
            "allowance(address,address)": [
                3165,
                801
            ]
        },
        "block_CALL_mapping": {
            "jump13830": [
                "reciever.tokenFallback(_origin, _value, _data)",
                "reciever.tokenFallback(_origin, _value, _data)"
            ],
            "jump13915": [
                "investor.transfer(depositedValue)",
                "investor.transfer(depositedValue)"
            ],
            "jump10084": [
                "vault_wallet.transfer(totalDeposited)",
                "vault_wallet.transfer(totalDeposited)"
            ],
            "block4691": [
                "localOwner.transfer(msg.value * 96 / 100)"
            ],
            "jump13830_2": [
                "reciever.tokenFallback(_origin, _value, _data)",
                "reciever.tokenFallback(_origin, _value, _data)"
            ],
            "jump13830_1": [
                "reciever.tokenFallback(_origin, _value, _data)",
                "reciever.tokenFallback(_origin, _value, _data)"
            ],
            "jump13830_0": [
                "reciever.tokenFallback(_origin, _value, _data)",
                "reciever.tokenFallback(_origin, _value, _data)"
            ],
            "jump10463": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump10999": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "jump17076": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump10741": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block13830_1": [
                "reciever.tokenFallback(_origin, _value, _data)"
            ],
            "block13830_0": [
                "reciever.tokenFallback(_origin, _value, _data)"
            ],
            "block13830_2": [
                "reciever.tokenFallback(_origin, _value, _data)"
            ],
            "block17076": [
                "OAR.getAddress()"
            ],
            "block4691_0": [
                "localOwner.transfer(msg.value * 96 / 100)"
            ],
            "jump4472_0": [
                "saleWalletAddress.transfer(msg.value - msg.value * 96 / 100)",
                "saleWalletAddress.transfer(msg.value - msg.value * 96 / 100)"
            ],
            "block4472": [
                "saleWalletAddress.transfer(msg.value - msg.value * 96 / 100)"
            ],
            "jump10084_1": [
                "vault_wallet.transfer(totalDeposited)",
                "vault_wallet.transfer(totalDeposited)"
            ],
            "block10999": [
                "oraclize.cbAddress()"
            ],
            "block10084": [
                "vault_wallet.transfer(totalDeposited)"
            ],
            "block10463": [
                "OAR.getAddress()"
            ],
            "block10084_1": [
                "vault_wallet.transfer(totalDeposited)"
            ],
            "block10084_0": [
                "vault_wallet.transfer(totalDeposited)"
            ],
            "block10084_3": [
                "vault_wallet.transfer(totalDeposited)"
            ],
            "block10084_2": [
                "vault_wallet.transfer(totalDeposited)"
            ],
            "block16798": [
                "OAR.getAddress()"
            ],
            "block4472_0": [
                "saleWalletAddress.transfer(msg.value - msg.value * 96 / 100)"
            ],
            "block4472_1": [
                "saleWalletAddress.transfer(msg.value - msg.value * 96 / 100)"
            ],
            "block13830": [
                "reciever.tokenFallback(_origin, _value, _data)"
            ],
            "block13915": [
                "investor.transfer(depositedValue)"
            ],
            "jump4691_1": [
                "localOwner.transfer(msg.value * 96 / 100)",
                "localOwner.transfer(msg.value * 96 / 100)"
            ],
            "jump4691_0": [
                "localOwner.transfer(msg.value * 96 / 100)",
                "localOwner.transfer(msg.value * 96 / 100)"
            ],
            "block17905": [
                "oraclize.query.value(price)(timestamp, datasource, arg)"
            ],
            "jump17446": [
                "oraclize.getPrice(datasource)",
                "oraclize.getPrice(datasource)"
            ],
            "block4691_1": [
                "localOwner.transfer(msg.value * 96 / 100)"
            ],
            "jump4691": [
                "localOwner.transfer(msg.value * 96 / 100)",
                "localOwner.transfer(msg.value * 96 / 100)"
            ],
            "jump4472": [
                "saleWalletAddress.transfer(msg.value - msg.value * 96 / 100)",
                "saleWalletAddress.transfer(msg.value - msg.value * 96 / 100)"
            ],
            "block17446": [
                "oraclize.getPrice(datasource)"
            ],
            "jump10084_3": [
                "vault_wallet.transfer(totalDeposited)",
                "vault_wallet.transfer(totalDeposited)"
            ],
            "jump10084_2": [
                "vault_wallet.transfer(totalDeposited)",
                "vault_wallet.transfer(totalDeposited)"
            ],
            "jump16798": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump10084_0": [
                "vault_wallet.transfer(totalDeposited)",
                "vault_wallet.transfer(totalDeposited)"
            ],
            "jump4472_1": [
                "saleWalletAddress.transfer(msg.value - msg.value * 96 / 100)",
                "saleWalletAddress.transfer(msg.value - msg.value * 96 / 100)"
            ],
            "block10741": [
                "OAR.getAddress()"
            ],
            "jump17905": [
                "oraclize.query.value(price)(timestamp, datasource, arg)",
                "oraclize.query.value(price)(timestamp, datasource, arg)"
            ]
        }
    }
}