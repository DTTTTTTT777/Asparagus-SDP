{
    "FlightDelayDatabaseModel": {
        "function_list": [],
        "initial_state": {},
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "FlightDelayControlledContract": {
        "function_list": [
            "setController(address)",
            "destruct()",
            "setContracts()",
            "getContract(bytes32)"
        ],
        "initial_state": {
            "setController(address)": {
                "argument": {},
                "contract": {}
            },
            "destruct()": {
                "argument": {},
                "contract": {}
            },
            "setContracts()": {
                "argument": {},
                "contract": {}
            },
            "getContract(bytes32)": {
                "argument": {
                    "_id": "bytes32"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "destruct()": [
                92,
                75
            ],
            "setContracts()": [
                115,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "FlightDelayConstants": {
        "function_list": [
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "MIN_OBSERVATIONS": "uint256",
                    "MIN_PREMIUM": "uint256",
                    "MAX_PREMIUM": "uint256",
                    "MAX_PAYOUT": "uint256",
                    "MIN_PREMIUM_EUR": "uint256",
                    "MAX_PREMIUM_EUR": "uint256",
                    "MAX_PAYOUT_EUR": "uint256",
                    "MIN_PREMIUM_USD": "uint256",
                    "MAX_PREMIUM_USD": "uint256",
                    "MAX_PAYOUT_USD": "uint256",
                    "MIN_PREMIUM_GBP": "uint256",
                    "MAX_PREMIUM_GBP": "uint256",
                    "MAX_PAYOUT_GBP": "uint256",
                    "MAX_CUMULATED_WEIGHTED_PREMIUM": "uint256",
                    "REWARD_PERCENT": "uint8",
                    "RESERVE_PERCENT": "uint8",
                    "WEIGHT_PATTERN": "uint8[6]",
                    "MIN_TIME_BEFORE_DEPARTURE": "uint256",
                    "CHECK_PAYOUT_OFFSET": "uint256",
                    "MAX_FLIGHT_DURATION": "uint256",
                    "CONTRACT_DEAD_LINE": "uint256",
                    "MIN_DEPARTURE_LIM": "uint256",
                    "MAX_DEPARTURE_LIM": "uint256",
                    "ORACLIZE_GAS": "uint256",
                    "ORACLIZE_RATINGS_BASE_URL": "string",
                    "ORACLIZE_RATINGS_QUERY": "string",
                    "ORACLIZE_STATUS_BASE_URL": "string",
                    "ORACLIZE_STATUS_QUERY": "string"
                }
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "ConvertLib": {
        "function_list": [
            "b32toString(bytes32)",
            "b32toHexString(bytes32)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "toUnixtime(bytes32)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "b32toString(bytes32)": {
                "argument": {
                    "x": "bytes32"
                },
                "contract": {
                    "days_since": "uint16[12]"
                }
            },
            "b32toHexString(bytes32)": {
                "argument": {
                    "x": "bytes32"
                },
                "contract": {
                    "days_since": "uint16[12]"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "days_since": "uint16[12]"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "days_since": "uint16[12]"
                }
            },
            "toUnixtime(bytes32)": {
                "argument": {
                    "_dayMonthYear": "bytes32"
                },
                "contract": {
                    "days_since": "uint16[12]"
                }
            }
        },
        "function_block_mapping": {
            "b32toHexString(bytes32)": [
                81,
                75
            ],
            "toUnixtime(bytes32)": [
                251,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "FlightDelayNewPolicy": {
        "function_list": [
            "b32toString(bytes32)",
            "b32toHexString(bytes32)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "toUnixtime(bytes32)",
            "setController(address)",
            "destruct()",
            "setContracts()",
            "getContract(bytes32)",
            "FlightDelayNewPolicy(address)",
            "setContracts()",
            "bookAndCalcRemainingPremium()",
            "maintenanceMode(bool)",
            "newPolicy(bytes32,bytes32,uint256,uint256,FlightDelayDatabaseModel.Currency,bytes32)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "b32toString(bytes32)": {
                "argument": {
                    "x": "bytes32"
                },
                "contract": {}
            },
            "b32toHexString(bytes32)": {
                "argument": {
                    "x": "bytes32"
                },
                "contract": {}
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {}
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {}
            },
            "toUnixtime(bytes32)": {
                "argument": {
                    "_dayMonthYear": "bytes32"
                },
                "contract": {}
            },
            "setController(address)": {
                "argument": {},
                "contract": {}
            },
            "destruct()": {
                "argument": {},
                "contract": {}
            },
            "setContracts()": {
                "argument": {},
                "contract": {}
            },
            "getContract(bytes32)": {
                "argument": {
                    "_id": "bytes32"
                },
                "contract": {}
            },
            "FlightDelayNewPolicy(address)": {
                "argument": {},
                "contract": {}
            },
            "bookAndCalcRemainingPremium()": {
                "argument": {},
                "contract": {}
            },
            "maintenanceMode(bool)": {
                "argument": {},
                "contract": {}
            },
            "newPolicy(bytes32,bytes32,uint256,uint256,FlightDelayDatabaseModel.Currency,bytes32)": {
                "argument": {
                    "_carrierFlightNumber": "bytes32",
                    "_departureYearMonthDay": "bytes32",
                    "_departureTime": "uint256",
                    "_arrivalTime": "uint256",
                    "_customerExternalId": "bytes32"
                },
                "contract": {}
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "b32toHexString(bytes32)": [
                206,
                119
            ],
            "setContracts()": [
                445,
                163
            ],
            "destruct()": [
                136,
                75
            ],
            "maintenanceMode(bool)": [
                159,
                97
            ],
            "toUnixtime(bytes32)": [
                376,
                141
            ]
        },
        "block_CALL_mapping": {
            "block7230": [
                "FD_LG.sendFunds(msg.sender, Acc.Premium, msg.value)"
            ],
            "block6546": [
                "FD_LG.sendFunds(msg.sender, Acc.Premium, msg.value)"
            ],
            "jump10280_1": [
                "FD_CI.getContract(_id)",
                "FD_CI.getContract(_id)"
            ],
            "jump10280_0": [
                "FD_CI.getContract(_id)",
                "FD_CI.getContract(_id)"
            ],
            "jump10280_2": [
                "FD_CI.getContract(_id)",
                "FD_CI.getContract(_id)"
            ],
            "jump7685": [
                "FD_DB.getPremiumFactors(riskId)",
                "FD_DB.getPremiumFactors(riskId)"
            ],
            "block10810": [
                "FD_LG.bookkeeping(Acc.Premium, Acc.Reward, reward)"
            ],
            "jump9118": [
                "FD_DB.setState(\n            policyId,\n            policyState.Applied,\n            now,\n            \"Policy applied by customer\"\n        )",
                "FD_DB.setState(\n            policyId,\n            policyState.Applied,\n            now,\n            \"Policy applied by customer\"\n        )"
            ],
            "block8348": [
                "FD_DB.setPremiumFactors(riskId, MAX_CUMULATED_WEIGHTED_PREMIUM, premiumMultiplier)"
            ],
            "jump8096": [
                "FD_LG.sendFunds(msg.sender, Acc.Premium, msg.value)",
                "FD_LG.sendFunds(msg.sender, Acc.Premium, msg.value)"
            ],
            "block8096": [
                "FD_LG.sendFunds(msg.sender, Acc.Premium, msg.value)"
            ],
            "block1259": [
                "FD_AC.setPermissionByAddress(101, 0x0, !_on)"
            ],
            "block3849": [
                "FD_AC.setPermissionByAddress(101, 0x0)"
            ],
            "block5248": [
                "FD_CI.getContract(\"FD.CustomersAdmin\")"
            ],
            "jump5248": [
                "FD_CI.getContract(\"FD.CustomersAdmin\")",
                "FD_CI.getContract(\"FD.CustomersAdmin\")"
            ],
            "block10280_1": [
                "FD_CI.getContract(_id)"
            ],
            "jump6773": [
                "FD_LG.receiveFunds.value(msg.value)(Acc.Premium)",
                "FD_LG.receiveFunds.value(msg.value)(Acc.Premium)"
            ],
            "block9118": [
                "FD_DB.setState(\n            policyId,\n            policyState.Applied,\n            now,\n            \"Policy applied by customer\"\n        )"
            ],
            "jump6546": [
                "FD_LG.sendFunds(msg.sender, Acc.Premium, msg.value)",
                "FD_LG.sendFunds(msg.sender, Acc.Premium, msg.value)"
            ],
            "jump7472": [
                "FD_DB.createUpdateRisk(_carrierFlightNumber, _departureYearMonthDay, _arrivalTime)",
                "FD_DB.createUpdateRisk(_carrierFlightNumber, _departureYearMonthDay, _arrivalTime)"
            ],
            "jump5714": [
                "FD_LG.sendFunds(msg.sender, Acc.Premium, msg.value)",
                "FD_LG.sendFunds(msg.sender, Acc.Premium, msg.value)"
            ],
            "block4529": [
                "FD_AC.checkPermission(101, 0x0)"
            ],
            "jump1002": [
                "FD_AC.checkPermission(103, msg.sender)",
                "FD_AC.checkPermission(103, msg.sender)"
            ],
            "jump4275": [
                "FD_AC.setPermissionById(103, \"FD.Owner\")",
                "FD_AC.setPermissionById(103, \"FD.Owner\")"
            ],
            "jump10810": [
                "FD_LG.bookkeeping(Acc.Premium, Acc.Reward, reward)",
                "FD_LG.bookkeeping(Acc.Premium, Acc.Reward, reward)"
            ],
            "jump10595": [
                "FD_LG.bookkeeping(Acc.Premium, Acc.RiskFund, reserve)",
                "FD_LG.bookkeeping(Acc.Premium, Acc.RiskFund, reserve)"
            ],
            "jump8348": [
                "FD_DB.setPremiumFactors(riskId, MAX_CUMULATED_WEIGHTED_PREMIUM, premiumMultiplier)",
                "FD_DB.setPremiumFactors(riskId, MAX_CUMULATED_WEIGHTED_PREMIUM, premiumMultiplier)"
            ],
            "jump4529": [
                "FD_AC.checkPermission(101, 0x0)",
                "FD_AC.checkPermission(101, 0x0)"
            ],
            "jump1259": [
                "FD_AC.setPermissionByAddress(101, 0x0, !_on)",
                "FD_AC.setPermissionByAddress(101, 0x0, !_on)"
            ],
            "block5001": [
                "FD_LG.sendFunds(msg.sender, Acc.Premium, msg.value)"
            ],
            "block7472": [
                "FD_DB.createUpdateRisk(_carrierFlightNumber, _departureYearMonthDay, _arrivalTime)"
            ],
            "block10280_0": [
                "FD_CI.getContract(_id)"
            ],
            "block4275": [
                "FD_AC.setPermissionById(103, \"FD.Owner\")"
            ],
            "block7685": [
                "FD_DB.getPremiumFactors(riskId)"
            ],
            "block10280": [
                "FD_CI.getContract(_id)"
            ],
            "jump6130": [
                "FD_LG.sendFunds(msg.sender, Acc.Premium, msg.value)",
                "FD_LG.sendFunds(msg.sender, Acc.Premium, msg.value)"
            ],
            "block8634": [
                "FD_DB.createPolicy(msg.sender, premium, _currency, _customerExternalId, riskId)"
            ],
            "block6773": [
                "FD_LG.receiveFunds.value(msg.value)(Acc.Premium)"
            ],
            "jump4062": [
                "FD_AC.setPermissionById(102, \"FD.Controller\")",
                "FD_AC.setPermissionById(102, \"FD.Controller\")"
            ],
            "block6130": [
                "FD_LG.sendFunds(msg.sender, Acc.Premium, msg.value)"
            ],
            "block4062": [
                "FD_AC.setPermissionById(102, \"FD.Controller\")"
            ],
            "block1002": [
                "FD_AC.checkPermission(103, msg.sender)"
            ],
            "jump10280": [
                "FD_CI.getContract(_id)",
                "FD_CI.getContract(_id)"
            ],
            "jump3849": [
                "FD_AC.setPermissionByAddress(101, 0x0)",
                "FD_AC.setPermissionByAddress(101, 0x0)"
            ],
            "jump7230": [
                "FD_LG.sendFunds(msg.sender, Acc.Premium, msg.value)",
                "FD_LG.sendFunds(msg.sender, Acc.Premium, msg.value)"
            ],
            "block9557": [
                "FD_UW.scheduleUnderwriteOraclizeCall(policyId, _carrierFlightNumber)"
            ],
            "jump8634": [
                "FD_DB.createPolicy(msg.sender, premium, _currency, _customerExternalId, riskId)",
                "FD_DB.createPolicy(msg.sender, premium, _currency, _customerExternalId, riskId)"
            ],
            "jump5001": [
                "FD_LG.sendFunds(msg.sender, Acc.Premium, msg.value)",
                "FD_LG.sendFunds(msg.sender, Acc.Premium, msg.value)"
            ],
            "jump9557": [
                "FD_UW.scheduleUnderwriteOraclizeCall(policyId, _carrierFlightNumber)",
                "FD_UW.scheduleUnderwriteOraclizeCall(policyId, _carrierFlightNumber)"
            ],
            "block10595": [
                "FD_LG.bookkeeping(Acc.Premium, Acc.RiskFund, reserve)"
            ],
            "block8877": [
                "FD_DB.setPremiumFactors(\n                riskId,\n                cumulatedWeightedPremium + premium * premiumMultiplier,\n                premiumMultiplier\n            )"
            ],
            "block10280_2": [
                "FD_CI.getContract(_id)"
            ],
            "block5714": [
                "FD_LG.sendFunds(msg.sender, Acc.Premium, msg.value)"
            ],
            "jump8877": [
                "FD_DB.setPremiumFactors(\n                riskId,\n                cumulatedWeightedPremium + premium * premiumMultiplier,\n                premiumMultiplier\n            )",
                "FD_DB.setPremiumFactors(\n                riskId,\n                cumulatedWeightedPremium + premium * premiumMultiplier,\n                premiumMultiplier\n            )"
            ]
        }
    }
}