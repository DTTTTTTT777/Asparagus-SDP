{
    "DSAuthEvents": {
        "function_list": [],
        "initial_state": {},
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "DSAuth": {
        "function_list": [
            "DSAuth()",
            "setOwner(address)",
            "setAuthority(DSAuthority)",
            "isAuthorized(address,bytes4)"
        ],
        "initial_state": {
            "DSAuth()": {
                "argument": {},
                "contract": {}
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "setAuthority(DSAuthority)": {
                "argument": {},
                "contract": {}
            },
            "isAuthorized(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "setOwner(address)": [
                103,
                75
            ]
        },
        "block_CALL_mapping": {
            "jump1499": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block1499_0": [
                "authority.canCall(src, this, sig)"
            ],
            "jump1499_0": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block1499": [
                "authority.canCall(src, this, sig)"
            ]
        }
    },
    "DSNote": {
        "function_list": [],
        "initial_state": {},
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                202,
                75
            ],
            "transfer(address,uint256)": [
                873,
                273
            ],
            "balanceOf(address)": [
                601,
                185
            ],
            "totalSupply()": [
                303,
                97
            ],
            "transferFrom(address,address,uint256)": [
                346,
                119
            ],
            "allowance(address,address)": [
                1061,
                317
            ]
        },
        "block_CALL_mapping": {}
    },
    "DSStop": {
        "function_list": [
            "DSAuth()",
            "setOwner(address)",
            "setAuthority(DSAuthority)",
            "isAuthorized(address,bytes4)",
            "stop()",
            "start()"
        ],
        "initial_state": {
            "DSAuth()": {
                "argument": {},
                "contract": {}
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "setAuthority(DSAuthority)": {
                "argument": {},
                "contract": {}
            },
            "isAuthorized(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {}
            },
            "stop()": {
                "argument": {},
                "contract": {}
            },
            "start()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "setOwner(address)": [
                159,
                97
            ],
            "start()": [
                427,
                185
            ],
            "stop()": [
                136,
                75
            ]
        },
        "block_CALL_mapping": {
            "block2161_1": [
                "authority.canCall(src, this, sig)"
            ],
            "block2161_0": [
                "authority.canCall(src, this, sig)"
            ],
            "block2161": [
                "authority.canCall(src, this, sig)"
            ],
            "jump2161_0": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump2161_2": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump2161": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump2161_1": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block2161_2": [
                "authority.canCall(src, this, sig)"
            ]
        }
    },
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "RewardSharedPool": {
        "function_list": [
            "stop()",
            "start()",
            "DSAuth()",
            "setOwner(address)",
            "setAuthority(DSAuthority)",
            "isAuthorized(address,bytes4)",
            "RewardSharedPool()",
            "consume(uint256)",
            "available(uint256)",
            "changeMaxReward(uint256)",
            "addConsumer(address)",
            "removeConsumer(address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "stop()": {
                "argument": {},
                "contract": {
                    "maxReward": "uint256",
                    "consumed": "uint256"
                }
            },
            "start()": {
                "argument": {},
                "contract": {
                    "maxReward": "uint256",
                    "consumed": "uint256"
                }
            },
            "DSAuth()": {
                "argument": {},
                "contract": {
                    "maxReward": "uint256",
                    "consumed": "uint256"
                }
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {
                    "maxReward": "uint256",
                    "consumed": "uint256"
                }
            },
            "setAuthority(DSAuthority)": {
                "argument": {},
                "contract": {
                    "maxReward": "uint256",
                    "consumed": "uint256"
                }
            },
            "isAuthorized(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {
                    "maxReward": "uint256",
                    "consumed": "uint256"
                }
            },
            "RewardSharedPool()": {
                "argument": {},
                "contract": {
                    "maxReward": "uint256",
                    "consumed": "uint256"
                }
            },
            "consume(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "maxReward": "uint256",
                    "consumed": "uint256"
                }
            },
            "available(uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "maxReward": "uint256",
                    "consumed": "uint256"
                }
            },
            "changeMaxReward(uint256)": {
                "argument": {
                    "_maxReward": "uint256"
                },
                "contract": {
                    "maxReward": "uint256",
                    "consumed": "uint256"
                }
            },
            "addConsumer(address)": {
                "argument": {},
                "contract": {
                    "maxReward": "uint256",
                    "consumed": "uint256"
                }
            },
            "removeConsumer(address)": {
                "argument": {},
                "contract": {
                    "maxReward": "uint256",
                    "consumed": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "setOwner(address)": [
                472,
                163
            ],
            "changeMaxReward(uint256)": [
                539,
                185
            ],
            "removeConsumer(address)": [
                338,
                119
            ],
            "start()": [
                1009,
                361
            ],
            "available(uint256)": [
                940,
                339
            ],
            "addConsumer(address)": [
                405,
                141
            ],
            "consume(uint256)": [
                584,
                207
            ],
            "stop()": [
                224,
                75
            ]
        },
        "block_CALL_mapping": {
            "block3631_5": [
                "authority.canCall(src, this, sig)"
            ],
            "jump3631_5": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump3631_4": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block3631": [
                "authority.canCall(src, this, sig)"
            ],
            "jump3631_0": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump3631_1": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump3631_2": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump3631_3": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block3631_4": [
                "authority.canCall(src, this, sig)"
            ],
            "jump3631": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block3631_2": [
                "authority.canCall(src, this, sig)"
            ],
            "block3631_3": [
                "authority.canCall(src, this, sig)"
            ],
            "block3631_0": [
                "authority.canCall(src, this, sig)"
            ],
            "block3631_1": [
                "authority.canCall(src, this, sig)"
            ]
        }
    },
    "ATNLongTermHolding": {
        "function_list": [
            "onTokenTransfer(address,address,uint256)",
            "stop()",
            "start()",
            "DSAuth()",
            "setOwner(address)",
            "setAuthority(DSAuthority)",
            "isAuthorized(address,bytes4)",
            "ATNLongTermHolding(address,address,address,uint256,uint256)",
            "start()",
            "changeDepositStopTimeFromNow(uint256)",
            "tokenFallback(address,uint256,bytes)",
            "tokenFallback(address,uint256)",
            "onTokenTransfer(address,address,uint256)",
            "withdrawATN()",
            "withdrawATN(address)",
            "withdrawFor(address)",
            "batchWithdraw(address[])",
            "changeGasRequired(uint256)",
            "claimTokens(address)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "onTokenTransfer(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "DEPOSIT_WINDOW": "uint256",
                    "rate": "uint256",
                    "withdrawal_delay": "uint256",
                    "agtAtnReceived": "uint256",
                    "atnSent": "uint256",
                    "depositStartTime": "uint256",
                    "depositStopTime": "uint256",
                    "gasRequired": "uint256",
                    "depositId": "uint256",
                    "withdrawId": "uint256"
                }
            },
            "stop()": {
                "argument": {},
                "contract": {
                    "DEPOSIT_WINDOW": "uint256",
                    "rate": "uint256",
                    "withdrawal_delay": "uint256",
                    "agtAtnReceived": "uint256",
                    "atnSent": "uint256",
                    "depositStartTime": "uint256",
                    "depositStopTime": "uint256",
                    "gasRequired": "uint256",
                    "depositId": "uint256",
                    "withdrawId": "uint256"
                }
            },
            "start()": {
                "argument": {},
                "contract": {
                    "DEPOSIT_WINDOW": "uint256",
                    "rate": "uint256",
                    "withdrawal_delay": "uint256",
                    "agtAtnReceived": "uint256",
                    "atnSent": "uint256",
                    "depositStartTime": "uint256",
                    "depositStopTime": "uint256",
                    "gasRequired": "uint256",
                    "depositId": "uint256",
                    "withdrawId": "uint256"
                }
            },
            "DSAuth()": {
                "argument": {},
                "contract": {
                    "DEPOSIT_WINDOW": "uint256",
                    "rate": "uint256",
                    "withdrawal_delay": "uint256",
                    "agtAtnReceived": "uint256",
                    "atnSent": "uint256",
                    "depositStartTime": "uint256",
                    "depositStopTime": "uint256",
                    "gasRequired": "uint256",
                    "depositId": "uint256",
                    "withdrawId": "uint256"
                }
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {
                    "DEPOSIT_WINDOW": "uint256",
                    "rate": "uint256",
                    "withdrawal_delay": "uint256",
                    "agtAtnReceived": "uint256",
                    "atnSent": "uint256",
                    "depositStartTime": "uint256",
                    "depositStopTime": "uint256",
                    "gasRequired": "uint256",
                    "depositId": "uint256",
                    "withdrawId": "uint256"
                }
            },
            "setAuthority(DSAuthority)": {
                "argument": {},
                "contract": {
                    "DEPOSIT_WINDOW": "uint256",
                    "rate": "uint256",
                    "withdrawal_delay": "uint256",
                    "agtAtnReceived": "uint256",
                    "atnSent": "uint256",
                    "depositStartTime": "uint256",
                    "depositStopTime": "uint256",
                    "gasRequired": "uint256",
                    "depositId": "uint256",
                    "withdrawId": "uint256"
                }
            },
            "isAuthorized(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {
                    "DEPOSIT_WINDOW": "uint256",
                    "rate": "uint256",
                    "withdrawal_delay": "uint256",
                    "agtAtnReceived": "uint256",
                    "atnSent": "uint256",
                    "depositStartTime": "uint256",
                    "depositStopTime": "uint256",
                    "gasRequired": "uint256",
                    "depositId": "uint256",
                    "withdrawId": "uint256"
                }
            },
            "ATNLongTermHolding(address,address,address,uint256,uint256)": {
                "argument": {
                    "_rate": "uint256",
                    "_delayDays": "uint256"
                },
                "contract": {
                    "DEPOSIT_WINDOW": "uint256",
                    "rate": "uint256",
                    "withdrawal_delay": "uint256",
                    "agtAtnReceived": "uint256",
                    "atnSent": "uint256",
                    "depositStartTime": "uint256",
                    "depositStopTime": "uint256",
                    "gasRequired": "uint256",
                    "depositId": "uint256",
                    "withdrawId": "uint256"
                }
            },
            "changeDepositStopTimeFromNow(uint256)": {
                "argument": {
                    "_daysFromNow": "uint256"
                },
                "contract": {
                    "DEPOSIT_WINDOW": "uint256",
                    "rate": "uint256",
                    "withdrawal_delay": "uint256",
                    "agtAtnReceived": "uint256",
                    "atnSent": "uint256",
                    "depositStartTime": "uint256",
                    "depositStopTime": "uint256",
                    "gasRequired": "uint256",
                    "depositId": "uint256",
                    "withdrawId": "uint256"
                }
            },
            "tokenFallback(address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_data": "bytes"
                },
                "contract": {
                    "DEPOSIT_WINDOW": "uint256",
                    "rate": "uint256",
                    "withdrawal_delay": "uint256",
                    "agtAtnReceived": "uint256",
                    "atnSent": "uint256",
                    "depositStartTime": "uint256",
                    "depositStopTime": "uint256",
                    "gasRequired": "uint256",
                    "depositId": "uint256",
                    "withdrawId": "uint256"
                }
            },
            "tokenFallback(address,uint256)": {
                "argument": {
                    "_value": "uint256"
                },
                "contract": {
                    "DEPOSIT_WINDOW": "uint256",
                    "rate": "uint256",
                    "withdrawal_delay": "uint256",
                    "agtAtnReceived": "uint256",
                    "atnSent": "uint256",
                    "depositStartTime": "uint256",
                    "depositStopTime": "uint256",
                    "gasRequired": "uint256",
                    "depositId": "uint256",
                    "withdrawId": "uint256"
                }
            },
            "withdrawATN()": {
                "argument": {},
                "contract": {
                    "DEPOSIT_WINDOW": "uint256",
                    "rate": "uint256",
                    "withdrawal_delay": "uint256",
                    "agtAtnReceived": "uint256",
                    "atnSent": "uint256",
                    "depositStartTime": "uint256",
                    "depositStopTime": "uint256",
                    "gasRequired": "uint256",
                    "depositId": "uint256",
                    "withdrawId": "uint256"
                }
            },
            "withdrawATN(address)": {
                "argument": {},
                "contract": {
                    "DEPOSIT_WINDOW": "uint256",
                    "rate": "uint256",
                    "withdrawal_delay": "uint256",
                    "agtAtnReceived": "uint256",
                    "atnSent": "uint256",
                    "depositStartTime": "uint256",
                    "depositStopTime": "uint256",
                    "gasRequired": "uint256",
                    "depositId": "uint256",
                    "withdrawId": "uint256"
                }
            },
            "withdrawFor(address)": {
                "argument": {},
                "contract": {
                    "DEPOSIT_WINDOW": "uint256",
                    "rate": "uint256",
                    "withdrawal_delay": "uint256",
                    "agtAtnReceived": "uint256",
                    "atnSent": "uint256",
                    "depositStartTime": "uint256",
                    "depositStopTime": "uint256",
                    "gasRequired": "uint256",
                    "depositId": "uint256",
                    "withdrawId": "uint256"
                }
            },
            "batchWithdraw(address[])": {
                "argument": {
                    "_addrList": "address[]"
                },
                "contract": {
                    "DEPOSIT_WINDOW": "uint256",
                    "rate": "uint256",
                    "withdrawal_delay": "uint256",
                    "agtAtnReceived": "uint256",
                    "atnSent": "uint256",
                    "depositStartTime": "uint256",
                    "depositStopTime": "uint256",
                    "gasRequired": "uint256",
                    "depositId": "uint256",
                    "withdrawId": "uint256"
                }
            },
            "changeGasRequired(uint256)": {
                "argument": {
                    "_gasRequired": "uint256"
                },
                "contract": {
                    "DEPOSIT_WINDOW": "uint256",
                    "rate": "uint256",
                    "withdrawal_delay": "uint256",
                    "agtAtnReceived": "uint256",
                    "atnSent": "uint256",
                    "depositStartTime": "uint256",
                    "depositStopTime": "uint256",
                    "gasRequired": "uint256",
                    "depositId": "uint256",
                    "withdrawId": "uint256"
                }
            },
            "claimTokens(address)": {
                "argument": {},
                "contract": {
                    "DEPOSIT_WINDOW": "uint256",
                    "rate": "uint256",
                    "withdrawal_delay": "uint256",
                    "agtAtnReceived": "uint256",
                    "atnSent": "uint256",
                    "depositStartTime": "uint256",
                    "depositStopTime": "uint256",
                    "gasRequired": "uint256",
                    "depositId": "uint256",
                    "withdrawId": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "DEPOSIT_WINDOW": "uint256",
                    "rate": "uint256",
                    "withdrawal_delay": "uint256",
                    "agtAtnReceived": "uint256",
                    "atnSent": "uint256",
                    "depositStartTime": "uint256",
                    "depositStopTime": "uint256",
                    "gasRequired": "uint256",
                    "depositId": "uint256",
                    "withdrawId": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "withdrawATN()": [
                455,
                119
            ],
            "changeGasRequired(uint256)": [
                1496,
                449
            ],
            "claimTokens(address)": [
                2171,
                691
            ],
            "onTokenTransfer(address,address,uint256)": [
                1363,
                427
            ],
            "tokenFallback(address,uint256,bytes)": [
                2024,
                669
            ],
            "start()": [
                1914,
                625
            ],
            "withdrawATN(address)": [
                1296,
                405
            ],
            "setOwner(address)": [
                478,
                141
            ],
            "changeDepositStopTimeFromNow(uint256)": [
                892,
                273
            ],
            "tokenFallback(address,uint256)": [
                937,
                295
            ],
            "stop()": [
                432,
                97
            ],
            "batchWithdraw(address[])": [
                1014,
                317
            ]
        },
        "block_CALL_mapping": {
            "block5957": [
                "owner.transfer(this.balance)"
            ],
            "block6505": [
                "token.transfer(owner, balance)"
            ],
            "jump6505": [
                "token.transfer(owner, balance)",
                "token.transfer(owner, balance)"
            ],
            "block3908": [
                "pool.consume( _value.mul(rate - 100 ).div(100) )"
            ],
            "jump7275": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump3908_0": [
                "pool.consume( _value.mul(rate - 100 ).div(100) )",
                "pool.consume( _value.mul(rate - 100 ).div(100) )"
            ],
            "block7654_1": [
                "ATN.transfer(_addr, atnAmount)"
            ],
            "block7654_0": [
                "ATN.transfer(_addr, atnAmount)"
            ],
            "jump7654_1": [
                "ATN.transfer(_addr, atnAmount)",
                "ATN.transfer(_addr, atnAmount)"
            ],
            "jump7654_0": [
                "ATN.transfer(_addr, atnAmount)",
                "ATN.transfer(_addr, atnAmount)"
            ],
            "jump5148": [
                "pool.available( _amount.mul(rate - 100 ).div(100) )",
                "pool.available( _amount.mul(rate - 100 ).div(100) )"
            ],
            "jump6247": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "block5148": [
                "pool.available( _amount.mul(rate - 100 ).div(100) )"
            ],
            "block6247": [
                "token.balanceOf(this)"
            ],
            "jump5957": [
                "owner.transfer(this.balance)",
                "owner.transfer(this.balance)"
            ],
            "block7275_4": [
                "authority.canCall(src, this, sig)"
            ],
            "block7275_5": [
                "authority.canCall(src, this, sig)"
            ],
            "block7275_2": [
                "authority.canCall(src, this, sig)"
            ],
            "block7275_3": [
                "authority.canCall(src, this, sig)"
            ],
            "block7275_0": [
                "authority.canCall(src, this, sig)"
            ],
            "block7275_1": [
                "authority.canCall(src, this, sig)"
            ],
            "jump7275_5": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block7275": [
                "authority.canCall(src, this, sig)"
            ],
            "jump7654": [
                "ATN.transfer(_addr, atnAmount)",
                "ATN.transfer(_addr, atnAmount)"
            ],
            "block3908_0": [
                "pool.consume( _value.mul(rate - 100 ).div(100) )"
            ],
            "block7654": [
                "ATN.transfer(_addr, atnAmount)"
            ],
            "jump7275_4": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump3908": [
                "pool.consume( _value.mul(rate - 100 ).div(100) )",
                "pool.consume( _value.mul(rate - 100 ).div(100) )"
            ],
            "jump7275_0": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump7275_1": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump7275_2": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump7275_3": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ]
        }
    }
}