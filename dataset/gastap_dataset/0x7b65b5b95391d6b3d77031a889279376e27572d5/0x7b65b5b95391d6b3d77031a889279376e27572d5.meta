{
    "accessControlled": {
        "function_list": [
            "owned()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "owned()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "owned()": [
                179,
                97
            ],
            "transferOwnership(address)": [
                202,
                119
            ]
        },
        "block_CALL_mapping": {}
    },
    "OriginalMyIdRepository": {
        "function_list": [
            "owned()",
            "transferOwnership(address)",
            "OriginalMyIdRepository()",
            "newUser(uint256,string)",
            "checkUserByWallet(string)",
            "getLastWallet(uint256)",
            "getWalletsFromUser(uint256)",
            "isWalletFromUser(uint256,string)",
            "fallback()"
        ],
        "initial_state": {
            "owned()": {
                "argument": {},
                "contract": {
                    "totalUsers": "uint256",
                    "totalWallets": "uint256",
                    "userIds": "OriginalMyIdRepository.idRepository[]"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "totalUsers": "uint256",
                    "totalWallets": "uint256",
                    "userIds": "OriginalMyIdRepository.idRepository[]"
                }
            },
            "OriginalMyIdRepository()": {
                "argument": {},
                "contract": {
                    "totalUsers": "uint256",
                    "totalWallets": "uint256",
                    "userIds": "OriginalMyIdRepository.idRepository[]"
                }
            },
            "newUser(uint256,string)": {
                "argument": {
                    "id": "uint256",
                    "wallet": "string"
                },
                "contract": {
                    "totalUsers": "uint256",
                    "totalWallets": "uint256",
                    "userIds": "OriginalMyIdRepository.idRepository[]"
                }
            },
            "checkUserByWallet(string)": {
                "argument": {
                    "wallet": "string"
                },
                "contract": {
                    "totalUsers": "uint256",
                    "totalWallets": "uint256",
                    "userIds": "OriginalMyIdRepository.idRepository[]"
                }
            },
            "getLastWallet(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "totalUsers": "uint256",
                    "totalWallets": "uint256",
                    "userIds": "OriginalMyIdRepository.idRepository[]"
                }
            },
            "getWalletsFromUser(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "totalUsers": "uint256",
                    "totalWallets": "uint256",
                    "userIds": "OriginalMyIdRepository.idRepository[]"
                }
            },
            "isWalletFromUser(uint256,string)": {
                "argument": {
                    "id": "uint256",
                    "wallet": "string"
                },
                "contract": {
                    "totalUsers": "uint256",
                    "totalWallets": "uint256",
                    "userIds": "OriginalMyIdRepository.idRepository[]"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "totalUsers": "uint256",
                    "totalWallets": "uint256",
                    "userIds": "OriginalMyIdRepository.idRepository[]"
                }
            }
        },
        "function_block_mapping": {
            "newUser(uint256,string)": [
                726,
                163
            ],
            "getLastWallet(uint256)": [
                269,
                97
            ],
            "checkUserByWallet(string)": [
                435,
                119
            ],
            "getWalletsFromUser(uint256)": [
                560,
                141
            ],
            "owned()": [
                1103,
                273
            ],
            "isWalletFromUser(uint256,string)": [
                1126,
                295
            ],
            "transferOwnership(address)": [
                1265,
                317
            ]
        },
        "block_CALL_mapping": {}
    },
    "strings": {
        "function_list": [
            "memcpy(uint256,uint256,uint256)",
            "toSlice(string)",
            "len(bytes32)",
            "toSliceB32(bytes32)",
            "copy(strings.slice)",
            "toString(strings.slice)",
            "len(strings.slice)",
            "empty(strings.slice)",
            "compare(strings.slice,strings.slice)",
            "equals(strings.slice,strings.slice)",
            "nextRune(strings.slice,strings.slice)",
            "nextRune(strings.slice)",
            "ord(strings.slice)",
            "keccak(strings.slice)",
            "startsWith(strings.slice,strings.slice)",
            "beyond(strings.slice,strings.slice)",
            "endsWith(strings.slice,strings.slice)",
            "until(strings.slice,strings.slice)",
            "findPtr(uint256,uint256,uint256,uint256)",
            "rfindPtr(uint256,uint256,uint256,uint256)",
            "find(strings.slice,strings.slice)",
            "rfind(strings.slice,strings.slice)",
            "split(strings.slice,strings.slice,strings.slice)",
            "split(strings.slice,strings.slice)",
            "rsplit(strings.slice,strings.slice,strings.slice)",
            "rsplit(strings.slice,strings.slice)",
            "count(strings.slice,strings.slice)",
            "contains(strings.slice,strings.slice)",
            "concat(strings.slice,strings.slice)",
            "join(strings.slice,strings.slice[])"
        ],
        "initial_state": {
            "memcpy(uint256,uint256,uint256)": {
                "argument": {
                    "dest": "uint256",
                    "src": "uint256",
                    "len": "uint256"
                },
                "contract": {}
            },
            "toSlice(string)": {
                "argument": {
                    "self": "string"
                },
                "contract": {}
            },
            "len(bytes32)": {
                "argument": {
                    "self": "bytes32"
                },
                "contract": {}
            },
            "toSliceB32(bytes32)": {
                "argument": {
                    "self": "bytes32"
                },
                "contract": {}
            },
            "copy(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "toString(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "len(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "empty(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "compare(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "other": "strings.slice"
                },
                "contract": {}
            },
            "equals(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "other": "strings.slice"
                },
                "contract": {}
            },
            "nextRune(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "rune": "strings.slice"
                },
                "contract": {}
            },
            "nextRune(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "ord(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "keccak(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "startsWith(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "beyond(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "endsWith(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "until(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "findPtr(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "selflen": "uint256",
                    "selfptr": "uint256",
                    "needlelen": "uint256",
                    "needleptr": "uint256"
                },
                "contract": {}
            },
            "rfindPtr(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "selflen": "uint256",
                    "selfptr": "uint256",
                    "needlelen": "uint256",
                    "needleptr": "uint256"
                },
                "contract": {}
            },
            "find(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "rfind(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "split(strings.slice,strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice",
                    "token": "strings.slice"
                },
                "contract": {}
            },
            "split(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "rsplit(strings.slice,strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice",
                    "token": "strings.slice"
                },
                "contract": {}
            },
            "rsplit(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "count(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "contains(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "concat(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "other": "strings.slice"
                },
                "contract": {}
            },
            "join(strings.slice,strings.slice[])": {
                "argument": {
                    "self": "strings.slice",
                    "parts": "strings.slice[]"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    }
}