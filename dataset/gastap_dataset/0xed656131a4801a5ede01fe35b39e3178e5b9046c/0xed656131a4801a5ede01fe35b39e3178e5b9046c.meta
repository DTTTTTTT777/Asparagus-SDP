{
    "PricingStrategy": {
        "function_list": [
            "isPricingStrategy()",
            "isSane(address)",
            "calculatePrice(uint256,uint256,uint256,address)"
        ],
        "initial_state": {
            "isPricingStrategy()": {
                "argument": {},
                "contract": {}
            },
            "isSane(address)": {
                "argument": {},
                "contract": {}
            },
            "calculatePrice(uint256,uint256,uint256,address)": {
                "argument": {
                    "value": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "isPricingStrategy()": [
                190,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "balanceOf(address)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                147,
                75
            ],
            "transfer(address,uint256)": [
                717,
                207
            ],
            "balanceOf(address)": [
                630,
                185
            ],
            "allowance(address,address)": [
                818,
                229
            ],
            "transferFrom(address,address,uint256)": [
                291,
                119
            ]
        },
        "block_CALL_mapping": {}
    },
    "SafeMathLib": {
        "function_list": [
            "times(uint256,uint256)",
            "minus(uint256,uint256)",
            "plus(uint256,uint256)",
            "assert(bool)"
        ],
        "initial_state": {
            "times(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "minus(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "plus(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "assert(bool)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "plus(uint256,uint256)": [
                190,
                105
            ],
            "minus(uint256,uint256)": [
                265,
                127
            ],
            "times(uint256,uint256)": [
                115,
                83
            ]
        },
        "block_CALL_mapping": {}
    },
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                70,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "Haltable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "halt()",
            "unhalt()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "halt()": {
                "argument": {},
                "contract": {}
            },
            "unhalt()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "unhalt()": [
                271,
                141
            ],
            "transferOwnership(address)": [
                294,
                163
            ],
            "halt()": [
                114,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "Crowdsale": {
        "function_list": [
            "halt()",
            "unhalt()",
            "Ownable()",
            "transferOwnership(address)",
            "Crowdsale(address,PricingStrategy,address,uint256,uint256,uint256)",
            "fallback()",
            "invest(address)",
            "buy()",
            "finalize()",
            "setFinalizeAgent(FinalizeAgent)",
            "setPricingStrategy(PricingStrategy)",
            "loadRefund()",
            "refund()",
            "isMinimumGoalReached()",
            "getState()",
            "setOwnerTestValue(uint256)",
            "isBreakingCap(uint256,uint256,uint256,uint256)",
            "isCrowdsaleFull()",
            "assignTokens(address,uint256)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "halt()": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "unhalt()": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "Ownable()": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "Crowdsale(address,PricingStrategy,address,uint256,uint256,uint256)": {
                "argument": {
                    "_start": "uint256",
                    "_end": "uint256",
                    "_minimumFundingGoal": "uint256"
                },
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "invest(address)": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "buy()": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "finalize()": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "setFinalizeAgent(FinalizeAgent)": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "setPricingStrategy(PricingStrategy)": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "loadRefund()": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "refund()": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "isMinimumGoalReached()": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "getState()": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "setOwnerTestValue(uint256)": {
                "argument": {
                    "val": "uint256"
                },
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "isBreakingCap(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "weiAmount": "uint256",
                    "tokenAmount": "uint256",
                    "weiRaisedTotal": "uint256",
                    "tokensSoldTotal": "uint256"
                },
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "isCrowdsaleFull()": {
                "argument": {},
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            },
            "assignTokens(address,uint256)": {
                "argument": {
                    "tokenAmount": "uint256"
                },
                "contract": {
                    "minimumFundingGoal": "uint256",
                    "startsAt": "uint256",
                    "endsAt": "uint256",
                    "tokensSold": "uint256",
                    "weiRaised": "uint256",
                    "investorCount": "uint256",
                    "loadedRefund": "uint256",
                    "weiRefunded": "uint256",
                    "ownerTestValue": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                2205,
                823
            ]
        },
        "block_CALL_mapping": {
            "jump5067_1": [
                "token.burnTokens()",
                "token.burnTokens()"
            ],
            "jump4729_2": [
                "vault.enableRefunds()",
                "vault.enableRefunds()"
            ],
            "jump4729_1": [
                "vault.enableRefunds()",
                "vault.enableRefunds()"
            ],
            "block3457_1": [
                "walletB.transfer(amountPaid)"
            ],
            "jump5410_7": [
                "msg.sender.transfer(weiNextTier)",
                "msg.sender.transfer(weiNextTier)"
            ],
            "jump5410_6": [
                "msg.sender.transfer(weiNextTier)",
                "msg.sender.transfer(weiNextTier)"
            ],
            "jump5410_5": [
                "msg.sender.transfer(weiNextTier)",
                "msg.sender.transfer(weiNextTier)"
            ],
            "jump5067_0": [
                "token.burnTokens()",
                "token.burnTokens()"
            ],
            "jump7944": [
                "msg.sender.transfer(exceedingBalance)",
                "msg.sender.transfer(exceedingBalance)"
            ],
            "block4729_2": [
                "vault.enableRefunds()"
            ],
            "jump4729": [
                "vault.enableRefunds()",
                "vault.enableRefunds()"
            ],
            "jump5410_1": [
                "msg.sender.transfer(weiNextTier)",
                "msg.sender.transfer(weiNextTier)"
            ],
            "block3755": [
                "vault.deposit.value(amountPaid)(msg.sender)"
            ],
            "block3927": [
                "vault.close()"
            ],
            "block4729_1": [
                "vault.enableRefunds()"
            ],
            "block4729_0": [
                "vault.enableRefunds()"
            ],
            "block3457": [
                "walletB.transfer(amountPaid)"
            ],
            "jump3152": [
                "token.distributeICOTokens(msg.sender, tokens)",
                "token.distributeICOTokens(msg.sender, tokens)"
            ],
            "jump5410_3": [
                "msg.sender.transfer(weiNextTier)",
                "msg.sender.transfer(weiNextTier)"
            ],
            "block5067_2": [
                "token.burnTokens()"
            ],
            "block5067_1": [
                "token.burnTokens()"
            ],
            "block5067_0": [
                "token.burnTokens()"
            ],
            "block7863_1": [
                "msg.sender.transfer(differenceWei)"
            ],
            "block5410_1": [
                "msg.sender.transfer(weiNextTier)"
            ],
            "block7944": [
                "msg.sender.transfer(exceedingBalance)"
            ],
            "jump3927_1": [
                "vault.close()",
                "vault.close()"
            ],
            "block3755_1": [
                "vault.deposit.value(amountPaid)(msg.sender)"
            ],
            "block3755_0": [
                "vault.deposit.value(amountPaid)(msg.sender)"
            ],
            "jump6615": [
                "token.refundTokens(msg.sender, tokensBought[msg.sender])",
                "token.refundTokens(msg.sender, tokensBought[msg.sender])"
            ],
            "block5410_0": [
                "msg.sender.transfer(weiNextTier)"
            ],
            "jump4729_0": [
                "vault.enableRefunds()",
                "vault.enableRefunds()"
            ],
            "block5410_3": [
                "msg.sender.transfer(weiNextTier)"
            ],
            "jump5410_4": [
                "msg.sender.transfer(weiNextTier)",
                "msg.sender.transfer(weiNextTier)"
            ],
            "jump5410_0": [
                "msg.sender.transfer(weiNextTier)",
                "msg.sender.transfer(weiNextTier)"
            ],
            "jump5067_2": [
                "token.burnTokens()",
                "token.burnTokens()"
            ],
            "block3152_0": [
                "token.distributeICOTokens(msg.sender, tokens)"
            ],
            "block3152_1": [
                "token.distributeICOTokens(msg.sender, tokens)"
            ],
            "block5410": [
                "msg.sender.transfer(weiNextTier)"
            ],
            "block5410_2": [
                "msg.sender.transfer(weiNextTier)"
            ],
            "block6615": [
                "token.refundTokens(msg.sender, tokensBought[msg.sender])"
            ],
            "block5410_4": [
                "msg.sender.transfer(weiNextTier)"
            ],
            "block5410_7": [
                "msg.sender.transfer(weiNextTier)"
            ],
            "block3927_1": [
                "vault.close()"
            ],
            "block5067": [
                "token.burnTokens()"
            ],
            "jump5410_2": [
                "msg.sender.transfer(weiNextTier)",
                "msg.sender.transfer(weiNextTier)"
            ],
            "block5410_6": [
                "msg.sender.transfer(weiNextTier)"
            ],
            "block4729": [
                "vault.enableRefunds()"
            ],
            "jump3152_1": [
                "token.distributeICOTokens(msg.sender, tokens)",
                "token.distributeICOTokens(msg.sender, tokens)"
            ],
            "jump3755_1": [
                "vault.deposit.value(amountPaid)(msg.sender)",
                "vault.deposit.value(amountPaid)(msg.sender)"
            ],
            "jump3755_0": [
                "vault.deposit.value(amountPaid)(msg.sender)",
                "vault.deposit.value(amountPaid)(msg.sender)"
            ],
            "jump3457": [
                "walletB.transfer(amountPaid)",
                "walletB.transfer(amountPaid)"
            ],
            "block7863_0": [
                "msg.sender.transfer(differenceWei)"
            ],
            "block3927_0": [
                "vault.close()"
            ],
            "jump5410": [
                "msg.sender.transfer(weiNextTier)",
                "msg.sender.transfer(weiNextTier)"
            ],
            "block3152": [
                "token.distributeICOTokens(msg.sender, tokens)"
            ],
            "jump3755": [
                "vault.deposit.value(amountPaid)(msg.sender)",
                "vault.deposit.value(amountPaid)(msg.sender)"
            ],
            "jump3927_0": [
                "vault.close()",
                "vault.close()"
            ],
            "jump7863_1": [
                "msg.sender.transfer(differenceWei)",
                "msg.sender.transfer(differenceWei)"
            ],
            "jump3457_0": [
                "walletB.transfer(amountPaid)",
                "walletB.transfer(amountPaid)"
            ],
            "jump3457_1": [
                "walletB.transfer(amountPaid)",
                "walletB.transfer(amountPaid)"
            ],
            "jump3927": [
                "vault.close()",
                "vault.close()"
            ],
            "block5410_8": [
                "msg.sender.transfer(weiNextTier)"
            ],
            "jump5067": [
                "token.burnTokens()",
                "token.burnTokens()"
            ],
            "block7944_1": [
                "msg.sender.transfer(exceedingBalance)"
            ],
            "block7944_0": [
                "msg.sender.transfer(exceedingBalance)"
            ],
            "block7863": [
                "msg.sender.transfer(differenceWei)"
            ],
            "block5410_5": [
                "msg.sender.transfer(weiNextTier)"
            ],
            "jump5410_8": [
                "msg.sender.transfer(weiNextTier)",
                "msg.sender.transfer(weiNextTier)"
            ],
            "jump6331": [
                "vault.refund(msg.sender)",
                "vault.refund(msg.sender)"
            ],
            "jump7863_0": [
                "msg.sender.transfer(differenceWei)",
                "msg.sender.transfer(differenceWei)"
            ],
            "jump7944_0": [
                "msg.sender.transfer(exceedingBalance)",
                "msg.sender.transfer(exceedingBalance)"
            ],
            "block3457_0": [
                "walletB.transfer(amountPaid)"
            ],
            "jump3152_0": [
                "token.distributeICOTokens(msg.sender, tokens)",
                "token.distributeICOTokens(msg.sender, tokens)"
            ],
            "jump7944_1": [
                "msg.sender.transfer(exceedingBalance)",
                "msg.sender.transfer(exceedingBalance)"
            ],
            "jump7863": [
                "msg.sender.transfer(differenceWei)",
                "msg.sender.transfer(differenceWei)"
            ],
            "block6331": [
                "vault.refund(msg.sender)"
            ]
        }
    }
}