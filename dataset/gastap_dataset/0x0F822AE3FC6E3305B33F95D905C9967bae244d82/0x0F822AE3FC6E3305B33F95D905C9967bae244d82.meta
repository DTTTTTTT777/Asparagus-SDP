{
    "usingOraclize": {
        "function_list": [
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8"
                }
            }
        },
        "function_block_mapping": {
            "__callback(bytes32,string,bytes)": [
                200,
                97
            ],
            "__callback(bytes32,string)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "strings": {
        "function_list": [
            "memcpy(uint256,uint256,uint256)",
            "toSlice(string)",
            "len(bytes32)",
            "toSliceB32(bytes32)",
            "copy(strings.slice)",
            "toString(strings.slice)",
            "len(strings.slice)",
            "empty(strings.slice)",
            "compare(strings.slice,strings.slice)",
            "equals(strings.slice,strings.slice)",
            "nextRune(strings.slice,strings.slice)",
            "nextRune(strings.slice)",
            "ord(strings.slice)",
            "keccak(strings.slice)",
            "startsWith(strings.slice,strings.slice)",
            "beyond(strings.slice,strings.slice)",
            "endsWith(strings.slice,strings.slice)",
            "until(strings.slice,strings.slice)",
            "findPtr(uint256,uint256,uint256,uint256)",
            "rfindPtr(uint256,uint256,uint256,uint256)",
            "find(strings.slice,strings.slice)",
            "rfind(strings.slice,strings.slice)",
            "split(strings.slice,strings.slice,strings.slice)",
            "split(strings.slice,strings.slice)",
            "rsplit(strings.slice,strings.slice,strings.slice)",
            "rsplit(strings.slice,strings.slice)",
            "count(strings.slice,strings.slice)",
            "contains(strings.slice,strings.slice)",
            "concat(strings.slice,strings.slice)",
            "join(strings.slice,strings.slice[])"
        ],
        "initial_state": {
            "memcpy(uint256,uint256,uint256)": {
                "argument": {
                    "dest": "uint256",
                    "src": "uint256",
                    "len": "uint256"
                },
                "contract": {}
            },
            "toSlice(string)": {
                "argument": {
                    "self": "string"
                },
                "contract": {}
            },
            "len(bytes32)": {
                "argument": {
                    "self": "bytes32"
                },
                "contract": {}
            },
            "toSliceB32(bytes32)": {
                "argument": {
                    "self": "bytes32"
                },
                "contract": {}
            },
            "copy(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "toString(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "len(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "empty(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "compare(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "other": "strings.slice"
                },
                "contract": {}
            },
            "equals(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "other": "strings.slice"
                },
                "contract": {}
            },
            "nextRune(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "rune": "strings.slice"
                },
                "contract": {}
            },
            "nextRune(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "ord(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "keccak(strings.slice)": {
                "argument": {
                    "self": "strings.slice"
                },
                "contract": {}
            },
            "startsWith(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "beyond(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "endsWith(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "until(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "findPtr(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "selflen": "uint256",
                    "selfptr": "uint256",
                    "needlelen": "uint256",
                    "needleptr": "uint256"
                },
                "contract": {}
            },
            "rfindPtr(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "selflen": "uint256",
                    "selfptr": "uint256",
                    "needlelen": "uint256",
                    "needleptr": "uint256"
                },
                "contract": {}
            },
            "find(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "rfind(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "split(strings.slice,strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice",
                    "token": "strings.slice"
                },
                "contract": {}
            },
            "split(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "rsplit(strings.slice,strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice",
                    "token": "strings.slice"
                },
                "contract": {}
            },
            "rsplit(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "count(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "contains(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "needle": "strings.slice"
                },
                "contract": {}
            },
            "concat(strings.slice,strings.slice)": {
                "argument": {
                    "self": "strings.slice",
                    "other": "strings.slice"
                },
                "contract": {}
            },
            "join(strings.slice,strings.slice[])": {
                "argument": {
                    "self": "strings.slice",
                    "parts": "strings.slice[]"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "DSSafeAddSub": {
        "function_list": [
            "safeToAdd(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "safeToSubtract(uint256,uint256)",
            "safeSub(uint256,uint256)"
        ],
        "initial_state": {
            "safeToAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeToSubtract(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Etheroll": {
        "function_list": [
            "safeToAdd(uint256,uint256)",
            "safeAdd(uint256,uint256)",
            "safeToSubtract(uint256,uint256)",
            "safeSub(uint256,uint256)",
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "Etheroll()",
            "playerRollDice(uint256)",
            "__callback(bytes32,string,bytes)",
            "playerWithdrawPendingTransactions()",
            "playerGetPendingTxByAddress(address)",
            "setMaxProfit()",
            "fallback()",
            "ownerSetOraclizeSafeGas(uint32)",
            "ownerUpdateContractBalance(uint256)",
            "ownerSetHouseEdge(uint256)",
            "ownerSetMaxProfitAsPercentOfHouse(uint256)",
            "ownerSetMinBet(uint256)",
            "ownerTransferEther(address,uint256)",
            "ownerRefundPlayer(bytes32,address,uint256,uint256)",
            "ownerPauseGame(bool)",
            "ownerPausePayouts(bool)",
            "ownerSetTreasury(address)",
            "ownerChangeOwner(address)",
            "ownerkill()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "safeToAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "safeAdd(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "safeToSubtract(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "safeSub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "Etheroll()": {
                "argument": {},
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "playerRollDice(uint256)": {
                "argument": {
                    "rollUnder": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "playerWithdrawPendingTransactions()": {
                "argument": {},
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "playerGetPendingTxByAddress(address)": {
                "argument": {},
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "setMaxProfit()": {
                "argument": {},
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "ownerSetOraclizeSafeGas(uint32)": {
                "argument": {
                    "newSafeGasToOraclize": "uint32"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "ownerUpdateContractBalance(uint256)": {
                "argument": {
                    "newContractBalanceInWei": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "ownerSetHouseEdge(uint256)": {
                "argument": {
                    "newHouseEdge": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "ownerSetMaxProfitAsPercentOfHouse(uint256)": {
                "argument": {
                    "newMaxProfitAsPercent": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "ownerSetMinBet(uint256)": {
                "argument": {
                    "newMinimumBet": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "ownerTransferEther(address,uint256)": {
                "argument": {
                    "amount": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "ownerRefundPlayer(bytes32,address,uint256,uint256)": {
                "argument": {
                    "originalPlayerBetId": "bytes32",
                    "originalPlayerProfit": "uint256",
                    "originalPlayerBetValue": "uint256"
                },
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "ownerPauseGame(bool)": {
                "argument": {},
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "ownerPausePayouts(bool)": {
                "argument": {},
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "ownerSetTreasury(address)": {
                "argument": {},
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "ownerChangeOwner(address)": {
                "argument": {},
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "ownerkill()": {
                "argument": {},
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "maxProfitDivisor": "uint256",
                    "houseEdgeDivisor": "uint256",
                    "maxNumber": "uint256",
                    "minNumber": "uint256",
                    "gasForOraclize": "uint32",
                    "contractBalance": "uint256",
                    "houseEdge": "uint256",
                    "maxProfit": "uint256",
                    "maxProfitAsPercentOfHouse": "uint256",
                    "minBet": "uint256",
                    "maxPendingPayouts": "uint256",
                    "costToCallOraclizeInWei": "uint256",
                    "totalWeiWon": "uint256",
                    "totalWeiWagered": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "ownerUpdateContractBalance(uint256)": [
                1253,
                273
            ],
            "ownerTransferEther(address,uint256)": [
                1820,
                515
            ],
            "ownerkill()": [
                2402,
                735
            ],
            "playerGetPendingTxByAddress(address)": [
                1166,
                251
            ],
            "ownerSetHouseEdge(uint256)": [
                656,
                119
            ],
            "__callback(bytes32,string,bytes)": [
                934,
                207
            ],
            "ownerPausePayouts(bool)": [
                1341,
                317
            ],
            "ownerSetTreasury(address)": [
                867,
                185
            ],
            "ownerChangeOwner(address)": [
                1388,
                339
            ],
            "ownerSetOraclizeSafeGas(uint32)": [
                2351,
                713
            ],
            "__callback(bytes32,string)": [
                701,
                141
            ],
            "ownerSetMaxProfitAsPercentOfHouse(uint256)": [
                1498,
                383
            ],
            "playerWithdrawPendingTransactions()": [
                2070,
                603
            ],
            "playerRollDice(uint256)": [
                2468,
                779
            ],
            "ownerRefundPlayer(bytes32,address,uint256,uint256)": [
                2250,
                691
            ],
            "ownerPauseGame(bool)": [
                1718,
                471
            ],
            "ownerSetMinBet(uint256)": [
                1673,
                449
            ]
        },
        "block_CALL_mapping": {
            "block9585": [
                "sendTo.send(originalPlayerBetValue)"
            ],
            "block13496": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump6236_0": [
                "playerTempAddress[myid].send(playerTempReward[myid])",
                "playerTempAddress[myid].send(playerTempReward[myid])"
            ],
            "jump8958": [
                "sendTo.send(amount)",
                "sendTo.send(amount)"
            ],
            "block11594_0": [
                "oraclize.cbAddress()"
            ],
            "jump11337": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block6236_0": [
                "playerTempAddress[myid].send(playerTempReward[myid])"
            ],
            "block12788": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump11594": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "jump12411": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump11337_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump9585": [
                "sendTo.send(originalPlayerBetValue)",
                "sendTo.send(originalPlayerBetValue)"
            ],
            "block11337": [
                "OAR.getAddress()"
            ],
            "jump11594_0": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "block8958": [
                "sendTo.send(amount)"
            ],
            "jump7561_0": [
                "playerTempAddress[myid].send(1)",
                "playerTempAddress[myid].send(1)"
            ],
            "block4758_0": [
                "playerTempAddress[myid].send(playerTempBetValue[myid])"
            ],
            "jump12788": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump13961": [
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)",
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)"
            ],
            "jump4758": [
                "playerTempAddress[myid].send(playerTempBetValue[myid])",
                "playerTempAddress[myid].send(playerTempBetValue[myid])"
            ],
            "jump6236": [
                "playerTempAddress[myid].send(playerTempReward[myid])",
                "playerTempAddress[myid].send(playerTempReward[myid])"
            ],
            "jump13496": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block7561_0": [
                "playerTempAddress[myid].send(1)"
            ],
            "block11594": [
                "oraclize.cbAddress()"
            ],
            "block11337_0": [
                "OAR.getAddress()"
            ],
            "block4758": [
                "playerTempAddress[myid].send(playerTempBetValue[myid])"
            ],
            "jump7561": [
                "playerTempAddress[myid].send(1)",
                "playerTempAddress[myid].send(1)"
            ],
            "block13119": [
                "OAR.getAddress()"
            ],
            "block6236": [
                "playerTempAddress[myid].send(playerTempReward[myid])"
            ],
            "block9180": [
                "msg.sender.call.value(withdrawAmount)()"
            ],
            "block7561": [
                "playerTempAddress[myid].send(1)"
            ],
            "jump13119": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump9180": [
                "msg.sender.call.value(withdrawAmount)()",
                "msg.sender.call.value(withdrawAmount)()"
            ],
            "jump4758_0": [
                "playerTempAddress[myid].send(playerTempBetValue[myid])",
                "playerTempAddress[myid].send(playerTempBetValue[myid])"
            ],
            "block13961": [
                "oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit)"
            ],
            "block12411": [
                "OAR.getAddress()"
            ]
        }
    }
}