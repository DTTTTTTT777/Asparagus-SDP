{
    "DSAuthEvents": {
        "function_list": [],
        "initial_state": {},
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "DSAuth": {
        "function_list": [
            "DSAuth()",
            "setOwner(address)",
            "setAuthority(DSAuthority)",
            "isAuthorized(address,bytes4)"
        ],
        "initial_state": {
            "DSAuth()": {
                "argument": {},
                "contract": {}
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "setAuthority(DSAuthority)": {
                "argument": {},
                "contract": {}
            },
            "isAuthorized(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "setOwner(address)": [
                103,
                75
            ]
        },
        "block_CALL_mapping": {
            "jump1499": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block1499_0": [
                "authority.canCall(src, this, sig)"
            ],
            "jump1499_0": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block1499": [
                "authority.canCall(src, this, sig)"
            ]
        }
    },
    "DSGuardEvents": {
        "function_list": [],
        "initial_state": {},
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "DSGuard": {
        "function_list": [
            "canCall(address,address,bytes4)",
            "DSAuth()",
            "setOwner(address)",
            "setAuthority(DSAuthority)",
            "isAuthorized(address,bytes4)",
            "canCall(address,address,bytes4)",
            "permit(bytes32,bytes32,bytes32)",
            "forbid(bytes32,bytes32,bytes32)",
            "permit(address,address,bytes32)",
            "forbid(address,address,bytes32)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "canCall(address,address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {
                    "ANY": "bytes32"
                }
            },
            "DSAuth()": {
                "argument": {},
                "contract": {
                    "ANY": "bytes32"
                }
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {
                    "ANY": "bytes32"
                }
            },
            "setAuthority(DSAuthority)": {
                "argument": {},
                "contract": {
                    "ANY": "bytes32"
                }
            },
            "isAuthorized(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {
                    "ANY": "bytes32"
                }
            },
            "permit(bytes32,bytes32,bytes32)": {
                "argument": {
                    "src": "bytes32",
                    "dst": "bytes32",
                    "sig": "bytes32"
                },
                "contract": {
                    "ANY": "bytes32"
                }
            },
            "forbid(bytes32,bytes32,bytes32)": {
                "argument": {
                    "src": "bytes32",
                    "dst": "bytes32",
                    "sig": "bytes32"
                },
                "contract": {
                    "ANY": "bytes32"
                }
            },
            "permit(address,address,bytes32)": {
                "argument": {
                    "sig": "bytes32"
                },
                "contract": {
                    "ANY": "bytes32"
                }
            },
            "forbid(address,address,bytes32)": {
                "argument": {
                    "sig": "bytes32"
                },
                "contract": {
                    "ANY": "bytes32"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "ANY": "bytes32"
                }
            }
        },
        "function_block_mapping": {
            "canCall(address,address,bytes4)": [
                4154,
                995
            ],
            "setOwner(address)": [
                169,
                75
            ],
            "forbid(bytes32,bytes32,bytes32)": [
                349,
                119
            ],
            "permit(bytes32,bytes32,bytes32)": [
                995,
                273
            ],
            "forbid(address,address,bytes32)": [
                236,
                97
            ],
            "permit(address,address,bytes32)": [
                882,
                251
            ]
        },
        "block_CALL_mapping": {
            "block4154_4": [
                "authority.canCall(src, this, sig)"
            ],
            "block4154_3": [
                "authority.canCall(src, this, sig)"
            ],
            "block4154_2": [
                "authority.canCall(src, this, sig)"
            ],
            "block4154_1": [
                "authority.canCall(src, this, sig)"
            ],
            "block4154_0": [
                "authority.canCall(src, this, sig)"
            ],
            "block4154": [
                "authority.canCall(src, this, sig)"
            ],
            "jump4154_4": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump4154_1": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump4154_0": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump4154": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump4154_2": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump4154_3": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ]
        }
    }
}