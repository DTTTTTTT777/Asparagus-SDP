{
    "usingOraclize": {
        "function_list": [
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)",
            "matchBytes32Prefix(bytes32,bytes,uint256)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "proof": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "matchBytes32Prefix(bytes32,bytes,uint256)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes",
                    "n_random_bytes": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "day": "uint256",
                    "week": "uint256",
                    "month": "uint256",
                    "proofType_NONE": "bytes1",
                    "proofType_TLSNotary": "bytes1",
                    "proofType_Android": "bytes1",
                    "proofType_Ledger": "bytes1",
                    "proofType_Native": "bytes1",
                    "proofStorage_IPFS": "bytes1",
                    "networkID_auto": "uint8",
                    "networkID_mainnet": "uint8",
                    "networkID_testnet": "uint8",
                    "networkID_morden": "uint8",
                    "networkID_consensys": "uint8",
                    "oraclize_network_name": "string"
                }
            }
        },
        "function_block_mapping": {
            "__callback(bytes32,string,bytes)": [
                200,
                97
            ],
            "__callback(bytes32,string)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "DSMath": {
        "function_list": [
            "add(uint256,uint256)",
            "sub(uint256,uint256)",
            "mul(uint256,uint256)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "imin(int256,int256)",
            "imax(int256,int256)",
            "wmul(uint256,uint256)",
            "rmul(uint256,uint256)",
            "wdiv(uint256,uint256)",
            "rdiv(uint256,uint256)",
            "rpow(uint256,uint256)",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "imin(int256,int256)": {
                "argument": {},
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "imax(int256,int256)": {
                "argument": {},
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "wmul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "rmul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "wdiv(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "rdiv(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "rpow(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "n": "uint256"
                },
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "WAD": "uint256",
                    "RAY": "uint256"
                }
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Owned": {
        "function_list": [
            "Owned()"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "oraclizeSettings": {
        "function_list": [
            "Owned()",
            "setSafeGas(uint256)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {
                    "ORACLIZE_PER_SPIN_GAS_LIMIT": "uint256",
                    "ORACLIZE_BASE_GAS_LIMIT": "uint256",
                    "safeGas": "uint256"
                }
            },
            "setSafeGas(uint256)": {
                "argument": {
                    "_gas": "uint256"
                },
                "contract": {
                    "ORACLIZE_PER_SPIN_GAS_LIMIT": "uint256",
                    "ORACLIZE_BASE_GAS_LIMIT": "uint256",
                    "safeGas": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "ORACLIZE_PER_SPIN_GAS_LIMIT": "uint256",
                    "ORACLIZE_BASE_GAS_LIMIT": "uint256",
                    "safeGas": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "setSafeGas(uint256)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "HouseManaged": {
        "function_list": [
            "Owned()",
            "HouseManaged()",
            "stop_or_resume_Contract(bool)",
            "changeHouse(address)",
            "changeOwner(address)",
            "acceptOwnership()"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {}
            },
            "HouseManaged()": {
                "argument": {},
                "contract": {}
            },
            "stop_or_resume_Contract(bool)": {
                "argument": {},
                "contract": {}
            },
            "changeHouse(address)": {
                "argument": {},
                "contract": {}
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "acceptOwnership()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "changeHouse(address)": [
                494,
                207
            ],
            "stop_or_resume_Contract(bool)": [
                136,
                75
            ],
            "changeOwner(address)": [
                340,
                163
            ],
            "acceptOwnership()": [
                230,
                119
            ]
        },
        "block_CALL_mapping": {}
    },
    "usingInvestorsModule": {
        "function_list": [
            "setSafeGas(uint256)",
            "Owned()",
            "HouseManaged()",
            "stop_or_resume_Contract(bool)",
            "changeHouse(address)",
            "changeOwner(address)",
            "acceptOwnership()",
            "getBankroll()",
            "getMinInvestment()",
            "getLossesShare(address)",
            "getProfitShare(address)",
            "getBalance(address)",
            "searchSmallestInvestor()",
            "addInvestorAtID(uint256)",
            "profitDistribution()",
            "increaseInvestment()",
            "newInvestor()",
            "divest()",
            "divest(address)",
            "forceDivestOfAllInvestors()",
            "safeSend(address,uint256)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "setSafeGas(uint256)": {
                "argument": {
                    "_gas": "uint256"
                },
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "Owned()": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "HouseManaged()": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "stop_or_resume_Contract(bool)": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "changeHouse(address)": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "acceptOwnership()": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "getBankroll()": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "getMinInvestment()": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "getLossesShare(address)": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "getProfitShare(address)": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "getBalance(address)": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "searchSmallestInvestor()": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "addInvestorAtID(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "profitDistribution()": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "increaseInvestment()": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "newInvestor()": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "divest()": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "divest(address)": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "forceDivestOfAllInvestors()": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "safeSend(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "MAX_INVESTORS": "uint256",
                    "divestFee": "uint256",
                    "numInvestors": "uint256",
                    "invested": "uint256",
                    "investorsProfit": "uint256",
                    "investorsLosses": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "getMinInvestment()": [
                1066,
                361
            ],
            "changeHouse(address)": [
                1558,
                559
            ],
            "getBalance(address)": [
                1471,
                537
            ],
            "forceDivestOfAllInvestors()": [
                653,
                207
            ],
            "stop_or_resume_Contract(bool)": [
                606,
                185
            ],
            "getLossesShare(address)": [
                519,
                163
            ],
            "increaseInvestment()": [
                1219,
                427
            ],
            "changeOwner(address)": [
                1229,
                449
            ],
            "getProfitShare(address)": [
                389,
                119
            ],
            "getBankroll()": [
                346,
                97
            ],
            "searchSmallestInvestor()": [
                850,
                273
            ],
            "divest()": [
                323,
                75
            ],
            "newInvestor()": [
                1625,
                581
            ],
            "setSafeGas(uint256)": [
                1426,
                515
            ],
            "acceptOwnership()": [
                1109,
                383
            ]
        },
        "block_CALL_mapping": {
            "block6904_1": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump6655": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block6655": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump6904_3": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump6655_1": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump6655_0": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump6655_3": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump6655_2": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump6655_4": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block6655_3": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block6904_4": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block6655_4": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block6904_2": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block6904_3": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block6655_1": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block6655_2": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block6904_0": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block6655_0": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block6904": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump6904_0": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump6904_1": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump6904_2": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump6904": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump6904_4": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ]
        }
    },
    "EmergencyWithdrawalModule": {
        "function_list": [
            "getBankroll()",
            "getMinInvestment()",
            "getLossesShare(address)",
            "getProfitShare(address)",
            "getBalance(address)",
            "searchSmallestInvestor()",
            "addInvestorAtID(uint256)",
            "profitDistribution()",
            "increaseInvestment()",
            "newInvestor()",
            "divest()",
            "divest(address)",
            "forceDivestOfAllInvestors()",
            "safeSend(address,uint256)",
            "setSafeGas(uint256)",
            "Owned()",
            "HouseManaged()",
            "stop_or_resume_Contract(bool)",
            "changeHouse(address)",
            "changeOwner(address)",
            "acceptOwnership()",
            "voteEmergencyWithdrawal(bool)",
            "proposeEmergencyWithdrawal(address)",
            "executeEmergencyWithdrawal()",
            "forceDivestOfOneInvestor(address)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "getBankroll()": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "getMinInvestment()": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "getLossesShare(address)": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "getProfitShare(address)": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "getBalance(address)": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "searchSmallestInvestor()": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "addInvestorAtID(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "profitDistribution()": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "increaseInvestment()": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "newInvestor()": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "divest()": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "divest(address)": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "forceDivestOfAllInvestors()": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "safeSend(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "setSafeGas(uint256)": {
                "argument": {
                    "_gas": "uint256"
                },
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "Owned()": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "HouseManaged()": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "stop_or_resume_Contract(bool)": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "changeHouse(address)": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "acceptOwnership()": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "voteEmergencyWithdrawal(bool)": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "proposeEmergencyWithdrawal(address)": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "executeEmergencyWithdrawal()": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "forceDivestOfOneInvestor(address)": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "EMERGENCY_WITHDRAWAL_RATIO": "uint256",
                    "EMERGENCY_TIMEOUT": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "getMinInvestment()": [
                1396,
                449
            ],
            "executeEmergencyWithdrawal()": [
                1801,
                625
            ],
            "changeHouse(address)": [
                1911,
                669
            ],
            "getBalance(address)": [
                1824,
                647
            ],
            "forceDivestOfAllInvestors()": [
                755,
                229
            ],
            "stop_or_resume_Contract(bool)": [
                708,
                207
            ],
            "getLossesShare(address)": [
                574,
                163
            ],
            "increaseInvestment()": [
                1549,
                515
            ],
            "changeOwner(address)": [
                1559,
                537
            ],
            "getProfitShare(address)": [
                444,
                119
            ],
            "forceDivestOfOneInvestor(address)": [
                1062,
                339
            ],
            "getBankroll()": [
                401,
                97
            ],
            "searchSmallestInvestor()": [
                952,
                295
            ],
            "divest()": [
                378,
                75
            ],
            "proposeEmergencyWithdrawal(address)": [
                995,
                317
            ],
            "voteEmergencyWithdrawal(bool)": [
                661,
                185
            ],
            "newInvestor()": [
                1978,
                691
            ],
            "setSafeGas(uint256)": [
                1756,
                603
            ],
            "acceptOwnership()": [
                1439,
                471
            ]
        },
        "block_CALL_mapping": {
            "block8930_6": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block8930_1": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump5573": [
                "proposedWithdrawal.toAddress.send(amountToWithdraw)",
                "proposedWithdrawal.toAddress.send(amountToWithdraw)"
            ],
            "jump8681_5": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block8930_3": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block5573": [
                "proposedWithdrawal.toAddress.send(amountToWithdraw)"
            ],
            "block8681": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block8930": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block8681_2": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block8681_3": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block8681_0": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block8681_1": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block8681_6": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block8681_4": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block8681_5": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump8930_4": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block8930_5": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump8681_0": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump8681_1": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump8681_2": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump8681_3": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump8681_4": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block8930_0": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump8681_6": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block8930_2": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump8930_3": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump8930_2": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump8930_1": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump8930_0": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump8930_6": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump8930_5": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block8930_4": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump8681": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump8930": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ]
        }
    },
    "Slot": {
        "function_list": [
            "add(uint256,uint256)",
            "sub(uint256,uint256)",
            "mul(uint256,uint256)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "imin(int256,int256)",
            "imax(int256,int256)",
            "wmul(uint256,uint256)",
            "rmul(uint256,uint256)",
            "wdiv(uint256,uint256)",
            "rdiv(uint256,uint256)",
            "rpow(uint256,uint256)",
            "voteEmergencyWithdrawal(bool)",
            "proposeEmergencyWithdrawal(address)",
            "executeEmergencyWithdrawal()",
            "forceDivestOfOneInvestor(address)",
            "getBankroll()",
            "getMinInvestment()",
            "getLossesShare(address)",
            "getProfitShare(address)",
            "getBalance(address)",
            "searchSmallestInvestor()",
            "addInvestorAtID(uint256)",
            "profitDistribution()",
            "increaseInvestment()",
            "newInvestor()",
            "divest()",
            "divest(address)",
            "forceDivestOfAllInvestors()",
            "safeSend(address,uint256)",
            "setSafeGas(uint256)",
            "Owned()",
            "HouseManaged()",
            "stop_or_resume_Contract(bool)",
            "changeHouse(address)",
            "changeOwner(address)",
            "acceptOwnership()",
            "oraclize_setNetwork(uint8)",
            "__callback(bytes32,string)",
            "__callback(bytes32,string,bytes)",
            "oraclize_useCoupon(string)",
            "oraclize_getPrice(string)",
            "oraclize_getPrice(string,uint256)",
            "oraclize_query(string,string)",
            "oraclize_query(uint256,string,string)",
            "oraclize_query(uint256,string,string,uint256)",
            "oraclize_query(string,string,uint256)",
            "oraclize_query(string,string,string)",
            "oraclize_query(uint256,string,string,string)",
            "oraclize_query(uint256,string,string,string,uint256)",
            "oraclize_query(string,string,string,uint256)",
            "oraclize_query(string,string[])",
            "oraclize_query(uint256,string,string[])",
            "oraclize_query(uint256,string,string[],uint256)",
            "oraclize_query(string,string[],uint256)",
            "oraclize_query(string,string[1])",
            "oraclize_query(uint256,string,string[1])",
            "oraclize_query(uint256,string,string[1],uint256)",
            "oraclize_query(string,string[1],uint256)",
            "oraclize_query(string,string[2])",
            "oraclize_query(uint256,string,string[2])",
            "oraclize_query(uint256,string,string[2],uint256)",
            "oraclize_query(string,string[2],uint256)",
            "oraclize_query(string,string[3])",
            "oraclize_query(uint256,string,string[3])",
            "oraclize_query(uint256,string,string[3],uint256)",
            "oraclize_query(string,string[3],uint256)",
            "oraclize_query(string,string[4])",
            "oraclize_query(uint256,string,string[4])",
            "oraclize_query(uint256,string,string[4],uint256)",
            "oraclize_query(string,string[4],uint256)",
            "oraclize_query(string,string[5])",
            "oraclize_query(uint256,string,string[5])",
            "oraclize_query(uint256,string,string[5],uint256)",
            "oraclize_query(string,string[5],uint256)",
            "oraclize_query(string,bytes[])",
            "oraclize_query(uint256,string,bytes[])",
            "oraclize_query(uint256,string,bytes[],uint256)",
            "oraclize_query(string,bytes[],uint256)",
            "oraclize_query(string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1])",
            "oraclize_query(uint256,string,bytes[1],uint256)",
            "oraclize_query(string,bytes[1],uint256)",
            "oraclize_query(string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2])",
            "oraclize_query(uint256,string,bytes[2],uint256)",
            "oraclize_query(string,bytes[2],uint256)",
            "oraclize_query(string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3])",
            "oraclize_query(uint256,string,bytes[3],uint256)",
            "oraclize_query(string,bytes[3],uint256)",
            "oraclize_query(string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4])",
            "oraclize_query(uint256,string,bytes[4],uint256)",
            "oraclize_query(string,bytes[4],uint256)",
            "oraclize_query(string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5])",
            "oraclize_query(uint256,string,bytes[5],uint256)",
            "oraclize_query(string,bytes[5],uint256)",
            "oraclize_cbAddress()",
            "oraclize_setProof(bytes1)",
            "oraclize_setCustomGasPrice(uint256)",
            "oraclize_setConfig(bytes32)",
            "oraclize_randomDS_getSessionPubKeyHash()",
            "getCodeSize(address)",
            "parseAddr(string)",
            "strCompare(string,string)",
            "indexOf(string,string)",
            "strConcat(string,string,string,string,string)",
            "strConcat(string,string,string,string)",
            "strConcat(string,string,string)",
            "strConcat(string,string)",
            "parseInt(string)",
            "parseInt(string,uint256)",
            "uint2str(uint256)",
            "stra2cbor(string[])",
            "ba2cbor(bytes[])",
            "oraclize_setNetworkName(string)",
            "oraclize_getNetworkName()",
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "verifySig(bytes32,bytes,bytes)",
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)",
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)",
            "matchBytes32Prefix(bytes32,bytes,uint256)",
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)",
            "copyBytes(bytes,uint256,uint256,bytes,uint256)",
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)",
            "ecrecovery(bytes32,bytes)",
            "Slot(address)",
            "oraclize_randomDS_setCommitment(bytes32,bytes32)",
            "isValidSize(uint256)",
            "fallback()",
            "buySpins(uint256)",
            "executeSpins(bytes32,bytes)",
            "sendPayout(bytes32,uint256)",
            "__callback(bytes32,string,bytes)",
            "refundPlayer(bytes32)",
            "setConfiguration(uint256[],uint256[])",
            "setMinBet(uint256)",
            "getSpinsContainer(bytes32)",
            "getMinAmountToWager(uint256)",
            "getMaxAmountToWager(uint256)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "imin(int256,int256)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "imax(int256,int256)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "wmul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "rmul(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "wdiv(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "rdiv(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "rpow(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "n": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "voteEmergencyWithdrawal(bool)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "proposeEmergencyWithdrawal(address)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "executeEmergencyWithdrawal()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "forceDivestOfOneInvestor(address)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "getBankroll()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "getMinInvestment()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "getLossesShare(address)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "getProfitShare(address)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "getBalance(address)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "searchSmallestInvestor()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "addInvestorAtID(uint256)": {
                "argument": {
                    "id": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "profitDistribution()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "increaseInvestment()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "newInvestor()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "divest()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "divest(address)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "forceDivestOfAllInvestors()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "safeSend(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "setSafeGas(uint256)": {
                "argument": {
                    "_gas": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "Owned()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "HouseManaged()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "stop_or_resume_Contract(bool)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "changeHouse(address)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "acceptOwnership()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_setNetwork(uint8)": {
                "argument": {
                    "networkID": "uint8"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "__callback(bytes32,string)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "__callback(bytes32,string,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "result": "string",
                    "_proof": "bytes"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_useCoupon(string)": {
                "argument": {
                    "code": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_getPrice(string)": {
                "argument": {
                    "datasource": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_getPrice(string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string,string)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string,string,uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string,string,uint256)": {
                "argument": {
                    "datasource": "string",
                    "arg1": "string",
                    "arg2": "string",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "string[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,string[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,string[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "string[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,bytes[])": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,bytes[],uint256)": {
                "argument": {
                    "datasource": "string",
                    "argN": "bytes[]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,bytes[1])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[1])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[1],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,bytes[1],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[1]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,bytes[2])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[2])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[2],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,bytes[2],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[2]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,bytes[3])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[3])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[3],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,bytes[3],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[3]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,bytes[4])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[4])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[4],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,bytes[4],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[4]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,bytes[5])": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[5])": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(uint256,string,bytes[5],uint256)": {
                "argument": {
                    "timestamp": "uint256",
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_query(string,bytes[5],uint256)": {
                "argument": {
                    "datasource": "string",
                    "args": "bytes[5]",
                    "gaslimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_cbAddress()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_setProof(bytes1)": {
                "argument": {
                    "proofP": "bytes1"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_setCustomGasPrice(uint256)": {
                "argument": {
                    "gasPrice": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_setConfig(bytes32)": {
                "argument": {
                    "config": "bytes32"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_randomDS_getSessionPubKeyHash()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "getCodeSize(address)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "parseAddr(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "strCompare(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "indexOf(string,string)": {
                "argument": {
                    "_haystack": "string",
                    "_needle": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "strConcat(string,string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string",
                    "_e": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "strConcat(string,string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string",
                    "_d": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "strConcat(string,string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string",
                    "_c": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "strConcat(string,string)": {
                "argument": {
                    "_a": "string",
                    "_b": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "parseInt(string)": {
                "argument": {
                    "_a": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "parseInt(string,uint256)": {
                "argument": {
                    "_a": "string",
                    "_b": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "uint2str(uint256)": {
                "argument": {
                    "i": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "stra2cbor(string[])": {
                "argument": {
                    "arr": "string[]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "ba2cbor(bytes[])": {
                "argument": {
                    "arr": "bytes[]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_setNetworkName(string)": {
                "argument": {
                    "_network_name": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_getNetworkName()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_newRandomDSQuery(uint256,uint256,uint256)": {
                "argument": {
                    "_delay": "uint256",
                    "_nbytes": "uint256",
                    "_customGasLimit": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_randomDS_setCommitment(bytes32,bytes32)": {
                "argument": {
                    "queryId": "bytes32",
                    "commitment": "bytes32"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "verifySig(bytes32,bytes,bytes)": {
                "argument": {
                    "tosignh": "bytes32",
                    "dersig": "bytes",
                    "pubkey": "bytes"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)": {
                "argument": {
                    "proof": "bytes",
                    "sig2offset": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes)": {
                "argument": {
                    "_queryId": "bytes32",
                    "_result": "string",
                    "_proof": "bytes"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "matchBytes32Prefix(bytes32,bytes,uint256)": {
                "argument": {
                    "content": "bytes32",
                    "prefix": "bytes",
                    "n_random_bytes": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)": {
                "argument": {
                    "proof": "bytes",
                    "queryId": "bytes32",
                    "result": "bytes",
                    "context_name": "string"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "copyBytes(bytes,uint256,uint256,bytes,uint256)": {
                "argument": {
                    "from": "bytes",
                    "fromOffset": "uint256",
                    "length": "uint256",
                    "to": "bytes",
                    "toOffset": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "safer_ecrecover(bytes32,uint8,bytes32,bytes32)": {
                "argument": {
                    "hash": "bytes32",
                    "v": "uint8",
                    "r": "bytes32",
                    "s": "bytes32"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "ecrecovery(bytes32,bytes)": {
                "argument": {
                    "hash": "bytes32",
                    "sig": "bytes"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "Slot(address)": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "isValidSize(uint256)": {
                "argument": {
                    "_amountWagered": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "buySpins(uint256)": {
                "argument": {
                    "_nSpins": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "executeSpins(bytes32,bytes)": {
                "argument": {
                    "myid": "bytes32",
                    "randomBytes": "bytes"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "sendPayout(bytes32,uint256)": {
                "argument": {
                    "myid": "bytes32",
                    "payout": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "refundPlayer(bytes32)": {
                "argument": {
                    "myid": "bytes32"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "setConfiguration(uint256[],uint256[])": {
                "argument": {
                    "_probabilities": "uint256[]",
                    "_multipliers": "uint256[]"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "setMinBet(uint256)": {
                "argument": {
                    "_minBet": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "getSpinsContainer(bytes32)": {
                "argument": {
                    "myid": "bytes32"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "getMinAmountToWager(uint256)": {
                "argument": {
                    "_nSpins": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "getMaxAmountToWager(uint256)": {
                "argument": {
                    "_nSpins": "uint256"
                },
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "INVESTORS_EDGE": "uint256",
                    "HOUSE_EDGE": "uint256",
                    "CAPITAL_RISK": "uint256",
                    "MAX_SPINS": "uint256",
                    "minBet": "uint256",
                    "probabilities": "uint256[]",
                    "multipliers": "uint256[]",
                    "totalAmountWagered": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "getMaxAmountToWager(uint256)": [
                1285,
                361
            ],
            "buySpins(uint256)": [
                615,
                141
            ],
            "getMinInvestment()": [
                2157,
                603
            ],
            "getSpinsContainer(bytes32)": [
                647,
                163
            ],
            "executeEmergencyWithdrawal()": [
                2841,
                845
            ],
            "changeHouse(address)": [
                3016,
                911
            ],
            "getBalance(address)": [
                2929,
                889
            ],
            "forceDivestOfAllInvestors()": [
                1143,
                317
            ],
            "stop_or_resume_Contract(bool)": [
                1096,
                295
            ],
            "getLossesShare(address)": [
                962,
                251
            ],
            "setConfiguration(uint256[],uint256[])": [
                2497,
                757
            ],
            "__callback(bytes32,string,bytes)": [
                1350,
                383
            ],
            "changeOwner(address)": [
                2365,
                713
            ],
            "setMinBet(uint256)": [
                2223,
                647
            ],
            "getBankroll()": [
                572,
                119
            ],
            "forceDivestOfOneInvestor(address)": [
                1823,
                493
            ],
            "getProfitShare(address)": [
                832,
                207
            ],
            "searchSmallestInvestor()": [
                1713,
                449
            ],
            "getMinAmountToWager(uint256)": [
                767,
                185
            ],
            "divest()": [
                506,
                75
            ],
            "__callback(bytes32,string)": [
                1166,
                339
            ],
            "proposeEmergencyWithdrawal(address)": [
                1756,
                471
            ],
            "voteEmergencyWithdrawal(bool)": [
                1049,
                273
            ],
            "newInvestor()": [
                3083,
                933
            ],
            "setSafeGas(uint256)": [
                2796,
                823
            ],
            "increaseInvestment()": [
                2355,
                691
            ],
            "acceptOwnership()": [
                2200,
                625
            ]
        },
        "block_CALL_mapping": {
            "block17048_0": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block17048_1": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block14325": [
                "OAR.getAddress()"
            ],
            "block17048_3": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block17048_4": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block17048_5": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block17048_6": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block17048_7": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block17048_8": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block17048_9": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block17048_2": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block20485": [
                "OAR.getAddress()"
            ],
            "block19878": [
                "oraclize.randomDS_getSessionPubKeyHash()"
            ],
            "block20207_1": [
                "OAR.getAddress()"
            ],
            "block23662_1": [
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)"
            ],
            "block23662_0": [
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)"
            ],
            "block7034_0": [
                "externalContract.external_oraclize_randomDS_proofVerify(_proof, myid, bytes(result), oraclize_getNetworkName())"
            ],
            "block3525_0": [
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", gas)"
            ],
            "block3525_1": [
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", gas)"
            ],
            "jump14325": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block19620_0": [
                "OAR.getAddress()"
            ],
            "block19620_1": [
                "OAR.getAddress()"
            ],
            "block3525": [
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", gas)"
            ],
            "jump21001": [
                "externalContract.external_oraclize_randomDS_setCommitment(queryId, commitment)",
                "externalContract.external_oraclize_randomDS_setCommitment(queryId, commitment)"
            ],
            "jump22531_1": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump22531_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block22531": [
                "OAR.getAddress()"
            ],
            "jump22809_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump3525_0": [
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", gas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", gas)"
            ],
            "jump3525_1": [
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", gas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", gas)"
            ],
            "block23187": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block17048": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block19620": [
                "OAR.getAddress()"
            ],
            "block14861_0": [
                "oraclize.cbAddress()"
            ],
            "block20207_0": [
                "OAR.getAddress()"
            ],
            "jump19878_1": [
                "oraclize.randomDS_getSessionPubKeyHash()",
                "oraclize.randomDS_getSessionPubKeyHash()"
            ],
            "jump12655": [
                "sha256(args[0])",
                "sha256(args[0])"
            ],
            "jump19342_1": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block16799_14": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block5934": [
                "OAR.getAddress()"
            ],
            "jump23187_1": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump23187_0": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block16799_10": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block16799_11": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block16799_12": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block16799_13": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block12655": [
                "sha256(args[0])"
            ],
            "block21001_0": [
                "externalContract.external_oraclize_randomDS_setCommitment(queryId, commitment)"
            ],
            "jump19878": [
                "oraclize.randomDS_getSessionPubKeyHash()",
                "oraclize.randomDS_getSessionPubKeyHash()"
            ],
            "jump19878_0": [
                "oraclize.randomDS_getSessionPubKeyHash()",
                "oraclize.randomDS_getSessionPubKeyHash()"
            ],
            "block19342": [
                "OAR.getAddress()"
            ],
            "block4682": [
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", gas)"
            ],
            "jump19342_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump19620": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump12655_1": [
                "sha256(args[0])",
                "sha256(args[0])"
            ],
            "jump3299": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump14325_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block19878_1": [
                "oraclize.randomDS_getSessionPubKeyHash()"
            ],
            "block14325_0": [
                "OAR.getAddress()"
            ],
            "block19878_0": [
                "oraclize.randomDS_getSessionPubKeyHash()"
            ],
            "jump4682": [
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", gas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", gas)"
            ],
            "block4456": [
                "OAR.getAddress()"
            ],
            "jump16799_11": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump20485": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump17048_14": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block21001_1": [
                "externalContract.external_oraclize_randomDS_setCommitment(queryId, commitment)"
            ],
            "block18776": [
                "oraclize.setProofType(proofP)"
            ],
            "jump17048_10": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump17048_11": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump17048_12": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump17048_13": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block22531_0": [
                "OAR.getAddress()"
            ],
            "block14603": [
                "OAR.getAddress()"
            ],
            "block16799": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump18776": [
                "oraclize.setProofType(proofP)",
                "oraclize.setProofType(proofP)"
            ],
            "jump23187": [
                "oraclize.getPrice(datasource, gaslimit)",
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "jump4456": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block10761": [
                "proposedWithdrawal.toAddress.send(amountToWithdraw)"
            ],
            "block19342_1": [
                "OAR.getAddress()"
            ],
            "block14603_0": [
                "OAR.getAddress()"
            ],
            "block23662": [
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)"
            ],
            "jump22809": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump3525": [
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", gas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", gas)"
            ],
            "jump16799_14": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block19342_0": [
                "OAR.getAddress()"
            ],
            "jump16799_12": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump16799_13": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump16799_10": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block3299": [
                "OAR.getAddress()"
            ],
            "block16799_6": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block16799_7": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block16799_4": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block16799_5": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block16799_2": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block16799_3": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block16799_0": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block16799_1": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block6173": [
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", _nSpins*ORACLIZE_PER_SPIN_GAS_LIMIT + ORACLIZE_BASE_GAS_LIMIT + safeGas)"
            ],
            "block3299_0": [
                "OAR.getAddress()"
            ],
            "block3299_1": [
                "OAR.getAddress()"
            ],
            "block16799_8": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block16799_9": [
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block22809": [
                "OAR.getAddress()"
            ],
            "jump7034_0": [
                "externalContract.external_oraclize_randomDS_proofVerify(_proof, myid, bytes(result), oraclize_getNetworkName())",
                "externalContract.external_oraclize_randomDS_proofVerify(_proof, myid, bytes(result), oraclize_getNetworkName())"
            ],
            "jump16799_8": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump16799_9": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump23662": [
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)",
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)"
            ],
            "jump16799_5": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump16799_6": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump16799_7": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump7034": [
                "externalContract.external_oraclize_randomDS_proofVerify(_proof, myid, bytes(result), oraclize_getNetworkName())",
                "externalContract.external_oraclize_randomDS_proofVerify(_proof, myid, bytes(result), oraclize_getNetworkName())"
            ],
            "jump16799_1": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump16799_2": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block12655_0": [
                "sha256(args[0])"
            ],
            "jump19620_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump19620_1": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump5934": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block20207": [
                "OAR.getAddress()"
            ],
            "jump16799_4": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump19342": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block17048_12": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block17048_13": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block17048_10": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block17048_11": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block17048_14": [
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump16799_0": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump22809_1": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump21001_0": [
                "externalContract.external_oraclize_randomDS_setCommitment(queryId, commitment)",
                "externalContract.external_oraclize_randomDS_setCommitment(queryId, commitment)"
            ],
            "jump16799": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "jump20207": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block12655_1": [
                "sha256(args[0])"
            ],
            "jump16799_3": [
                "addr.call.gas(safeGas).value(value)()",
                "addr.call.gas(safeGas).value(value)()"
            ],
            "block7034": [
                "externalContract.external_oraclize_randomDS_proofVerify(_proof, myid, bytes(result), oraclize_getNetworkName())"
            ],
            "jump14861_0": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "jump14603": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block22809_1": [
                "OAR.getAddress()"
            ],
            "block21001": [
                "externalContract.external_oraclize_randomDS_setCommitment(queryId, commitment)"
            ],
            "jump20485_1": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump20485_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump10761": [
                "proposedWithdrawal.toAddress.send(amountToWithdraw)",
                "proposedWithdrawal.toAddress.send(amountToWithdraw)"
            ],
            "block22809_0": [
                "OAR.getAddress()"
            ],
            "jump23662_1": [
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)",
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)"
            ],
            "jump23662_0": [
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)",
                "oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit)"
            ],
            "jump17048_2": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump17048_3": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump14603_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump17048_1": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump17048_6": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump17048_7": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump17048_4": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump14861": [
                "oraclize.cbAddress()",
                "oraclize.cbAddress()"
            ],
            "jump17048_8": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump17048_9": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump12655_0": [
                "sha256(args[0])",
                "sha256(args[0])"
            ],
            "jump22531": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block14861": [
                "oraclize.cbAddress()"
            ],
            "jump21001_1": [
                "externalContract.external_oraclize_randomDS_setCommitment(queryId, commitment)",
                "externalContract.external_oraclize_randomDS_setCommitment(queryId, commitment)"
            ],
            "block18439": [
                "OAR.getAddress()"
            ],
            "block18161": [
                "OAR.getAddress()"
            ],
            "block22531_1": [
                "OAR.getAddress()"
            ],
            "jump17048_0": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "block20485_1": [
                "OAR.getAddress()"
            ],
            "block20485_0": [
                "OAR.getAddress()"
            ],
            "jump6173": [
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", _nSpins*ORACLIZE_PER_SPIN_GAS_LIMIT + ORACLIZE_BASE_GAS_LIMIT + safeGas)",
                "OraclizeI(OAR.getAddress()).getPrice(\"random\", _nSpins*ORACLIZE_PER_SPIN_GAS_LIMIT + ORACLIZE_BASE_GAS_LIMIT + safeGas)"
            ],
            "jump3299_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump3299_1": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump18439": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump17048_5": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump17048": [
                "houseAddress.call.gas(safeGas).value(value)()",
                "houseAddress.call.gas(safeGas).value(value)()"
            ],
            "jump18161": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump20207_1": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "jump20207_0": [
                "OAR.getAddress()",
                "OAR.getAddress()"
            ],
            "block23187_1": [
                "oraclize.getPrice(datasource, gaslimit)"
            ],
            "block23187_0": [
                "oraclize.getPrice(datasource, gaslimit)"
            ]
        }
    }
}