{
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "ERC20Basic": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "totalSupply": "uint256"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {
                    "totalSupply": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "balanceOf(address)": [
                124,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "ERC20": {
        "function_list": [
            "balanceOf(address)",
            "transfer(address,uint256)",
            "allowance(address,address)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                401,
                97
            ],
            "transfer(address,uint256)": [
                1385,
                361
            ],
            "allowance(address,address)": [
                1704,
                427
            ],
            "balanceOf(address)": [
                1044,
                273
            ],
            "transferFrom(address,address,uint256)": [
                588,
                163
            ]
        },
        "block_CALL_mapping": {
            "block3721": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ],
            "jump3721": [
                "spender.receiveApproval(msg.sender, _value, this, _extraData)",
                "spender.receiveApproval(msg.sender, _value, this, _extraData)"
            ]
        }
    },
    "SafeERC20": {
        "function_list": [
            "safeTransfer(ERC20Basic,address,uint256)",
            "safeTransferFrom(ERC20,address,address,uint256)",
            "safeApprove(ERC20,address,uint256)"
        ],
        "initial_state": {
            "safeTransfer(ERC20Basic,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "safeTransferFrom(ERC20,address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "safeApprove(ERC20,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Ownable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "transferOwnership(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "KYC": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "KYC()",
            "setAdmin(address)",
            "register(address)",
            "registerByList(address[])",
            "unregister(address)",
            "unregisterByList(address[])",
            "claimTokens(address)"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "KYC()": {
                "argument": {},
                "contract": {}
            },
            "setAdmin(address)": {
                "argument": {},
                "contract": {}
            },
            "register(address)": {
                "argument": {},
                "contract": {}
            },
            "registerByList(address[])": {
                "argument": {
                    "_addrs": "address[]"
                },
                "contract": {}
            },
            "unregister(address)": {
                "argument": {},
                "contract": {}
            },
            "unregisterByList(address[])": {
                "argument": {
                    "_addrs": "address[]"
                },
                "contract": {}
            },
            "claimTokens(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "unregisterByList(address[])": [
                808,
                251
            ],
            "claimTokens(address)": [
                741,
                229
            ],
            "unregister(address)": [
                169,
                75
            ],
            "register(address)": [
                236,
                97
            ],
            "registerByList(address[])": [
                303,
                119
            ],
            "setAdmin(address)": [
                496,
                163
            ],
            "transferOwnership(address)": [
                910,
                273
            ]
        },
        "block_CALL_mapping": {
            "block3403": [
                "token.transfer(owner, balance)"
            ],
            "block2857": [
                "owner.transfer(this.balance)"
            ],
            "jump3403": [
                "token.transfer(owner, balance)",
                "token.transfer(owner, balance)"
            ],
            "block3146": [
                "token.balanceOf(this)"
            ],
            "jump2857": [
                "owner.transfer(this.balance)",
                "owner.transfer(this.balance)"
            ],
            "jump3146": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ]
        }
    },
    "Controlled": {
        "function_list": [
            "Controlled()",
            "changeController(address)"
        ],
        "initial_state": {
            "Controlled()": {
                "argument": {},
                "contract": {}
            },
            "changeController(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "changeController(address)": [
                81,
                75
            ]
        },
        "block_CALL_mapping": {}
    },
    "MiniMeToken": {
        "function_list": [
            "Controlled()",
            "changeController(address)",
            "MiniMeToken(address,address,uint256,string,uint8,string,bool)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "doTransfer(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "approveAndCall(address,uint256,bytes)",
            "totalSupply()",
            "balanceOfAt(address,uint256)",
            "totalSupplyAt(uint256)",
            "createCloneToken(string,uint8,string,uint256,bool)",
            "generateTokens(address,uint256)",
            "destroyTokens(address,uint256)",
            "enableTransfers(bool)",
            "getValueAt(MiniMeToken.Checkpoint[],uint256)",
            "updateValueAtNow(MiniMeToken.Checkpoint[],uint256)",
            "isContract(address)",
            "min(uint256,uint256)",
            "fallback()",
            "claimTokens(address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Controlled()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "changeController(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "MiniMeToken(address,address,uint256,string,uint8,string,bool)": {
                "argument": {
                    "_parentSnapShotBlock": "uint256",
                    "_tokenName": "string",
                    "_decimalUnits": "uint8",
                    "_tokenSymbol": "string"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "doTransfer(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "approve(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_amount": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "totalSupply()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "balanceOfAt(address,uint256)": {
                "argument": {
                    "_blockNumber": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "totalSupplyAt(uint256)": {
                "argument": {
                    "_blockNumber": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "createCloneToken(string,uint8,string,uint256,bool)": {
                "argument": {
                    "_cloneTokenName": "string",
                    "_cloneDecimalUnits": "uint8",
                    "_cloneTokenSymbol": "string",
                    "_snapshotBlock": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "generateTokens(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "destroyTokens(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "enableTransfers(bool)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "getValueAt(MiniMeToken.Checkpoint[],uint256)": {
                "argument": {
                    "checkpoints": "MiniMeToken.Checkpoint[]",
                    "_block": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "updateValueAtNow(MiniMeToken.Checkpoint[],uint256)": {
                "argument": {
                    "checkpoints": "MiniMeToken.Checkpoint[]",
                    "_value": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "isContract(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "min(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            },
            "claimTokens(address)": {
                "argument": {},
                "contract": {
                    "name": "string",
                    "decimals": "uint8",
                    "symbol": "string",
                    "version": "string",
                    "parentSnapShotBlock": "uint256",
                    "creationBlock": "uint256",
                    "balances": "mapping(address => MiniMeToken.Checkpoint[])",
                    "totalSupplyHistory": "MiniMeToken.Checkpoint[]"
                }
            }
        },
        "function_block_mapping": {
            "balanceOfAt(address,uint256)": [
                10086,
                26
            ],
            "claimTokens(address)": [
                2804,
                537
            ],
            "totalSupply()": [
                931,
                141
            ],
            "allowance(address,address)": [
                2685,
                515
            ],
            "transferFrom(address,address,uint256)": [
                974,
                163
            ],
            "approve(address,uint256)": [
                787,
                97
            ],
            "totalSupplyAt(uint256)": [
                10086,
                26
            ],
            "enableTransfers(bool)": [
                2958,
                581
            ],
            "createCloneToken(string,uint8,string,uint256,bool)": [
                1464,
                273
            ],
            "changeController(address)": [
                6193,
                889
            ],
            "balanceOf(address)": [
                8600,
                847
            ],
            "generateTokens(address,uint256)": [
                1912,
                339
            ],
            "approveAndCall(address,uint256,bytes)": [
                2413,
                471
            ],
            "destroyTokens(address,uint256)": [
                2584,
                493
            ],
            "transfer(address,uint256)": [
                8857,
                996
            ]
        },
        "block_CALL_mapping": {
            "jump5977": [
                "tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            )",
                "tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            )"
            ],
            "block7175_1": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump8857": [
                "token.transfer(controller, balance)",
                "token.transfer(controller, balance)"
            ],
            "block5977": [
                "tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            )"
            ],
            "block5206_6": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5206_4": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5206_5": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5206_2": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5206_3": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5206_0": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5206_1": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block9708_0": [
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "jump9708_0": [
                "TokenController(controller).onTransfer(_from, _to, _amount)",
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "jump7175_2": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))",
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump3784": [
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)",
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)"
            ],
            "jump5206": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5206": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block9708": [
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "jump7175": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))",
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "block8857": [
                "token.transfer(controller, balance)"
            ],
            "jump3784_0": [
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)",
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)"
            ],
            "block570_0": [
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "jump5206_4": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5206_5": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5206_6": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5206_0": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5206_1": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5206_2": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5206_3": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump9708": [
                "TokenController(controller).onTransfer(_from, _to, _amount)",
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "block3784_0": [
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)"
            ],
            "block3784": [
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)"
            ],
            "block6193": [
                "cloneToken.changeController(msg.sender)"
            ],
            "jump7175_1": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))",
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7175_0": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))",
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "block570": [
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "block7689": [
                "ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        )"
            ],
            "block7175_0": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7175_2": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7689": [
                "ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        )",
                "ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        )"
            ],
            "block8600": [
                "token.balanceOf(this)"
            ],
            "jump8311": [
                "controller.transfer(this.balance)",
                "controller.transfer(this.balance)"
            ],
            "jump8600": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "block8311": [
                "controller.transfer(this.balance)"
            ],
            "block7175": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6193": [
                "cloneToken.changeController(msg.sender)",
                "cloneToken.changeController(msg.sender)"
            ],
            "jump570_0": [
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)",
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "jump570": [
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)",
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)"
            ]
        }
    },
    "ATC": {
        "function_list": [
            "MiniMeToken(address,address,uint256,string,uint8,string,bool)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "doTransfer(address,address,uint256)",
            "balanceOf(address)",
            "approve(address,uint256)",
            "allowance(address,address)",
            "approveAndCall(address,uint256,bytes)",
            "totalSupply()",
            "balanceOfAt(address,uint256)",
            "totalSupplyAt(uint256)",
            "createCloneToken(string,uint8,string,uint256,bool)",
            "generateTokens(address,uint256)",
            "destroyTokens(address,uint256)",
            "enableTransfers(bool)",
            "getValueAt(MiniMeToken.Checkpoint[],uint256)",
            "updateValueAtNow(MiniMeToken.Checkpoint[],uint256)",
            "isContract(address)",
            "min(uint256,uint256)",
            "fallback()",
            "claimTokens(address)",
            "Controlled()",
            "changeController(address)",
            "ATC(address)",
            "generateTokens(address,uint256)",
            "doTransfer(address,address,uint256)",
            "finishGenerating()",
            "blacklistAccount(address)",
            "unBlacklistAccount(address)",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "MiniMeToken(address,address,uint256,string,uint8,string,bool)": {
                "argument": {
                    "_parentSnapShotBlock": "uint256",
                    "_tokenName": "string",
                    "_decimalUnits": "uint8",
                    "_tokenSymbol": "string"
                },
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "doTransfer(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "approveAndCall(address,uint256,bytes)": {
                "argument": {
                    "_amount": "uint256",
                    "_extraData": "bytes"
                },
                "contract": {}
            },
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOfAt(address,uint256)": {
                "argument": {
                    "_blockNumber": "uint256"
                },
                "contract": {}
            },
            "totalSupplyAt(uint256)": {
                "argument": {
                    "_blockNumber": "uint256"
                },
                "contract": {}
            },
            "createCloneToken(string,uint8,string,uint256,bool)": {
                "argument": {
                    "_cloneTokenName": "string",
                    "_cloneDecimalUnits": "uint8",
                    "_cloneTokenSymbol": "string",
                    "_snapshotBlock": "uint256"
                },
                "contract": {}
            },
            "generateTokens(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "destroyTokens(address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {}
            },
            "enableTransfers(bool)": {
                "argument": {},
                "contract": {}
            },
            "getValueAt(MiniMeToken.Checkpoint[],uint256)": {
                "argument": {
                    "checkpoints": "MiniMeToken.Checkpoint[]",
                    "_block": "uint256"
                },
                "contract": {}
            },
            "updateValueAtNow(MiniMeToken.Checkpoint[],uint256)": {
                "argument": {
                    "checkpoints": "MiniMeToken.Checkpoint[]",
                    "_value": "uint256"
                },
                "contract": {}
            },
            "isContract(address)": {
                "argument": {},
                "contract": {}
            },
            "min(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "fallback()": {
                "argument": {},
                "contract": {}
            },
            "claimTokens(address)": {
                "argument": {},
                "contract": {}
            },
            "Controlled()": {
                "argument": {},
                "contract": {}
            },
            "changeController(address)": {
                "argument": {},
                "contract": {}
            },
            "ATC(address)": {
                "argument": {},
                "contract": {}
            },
            "finishGenerating()": {
                "argument": {},
                "contract": {}
            },
            "blacklistAccount(address)": {
                "argument": {},
                "contract": {}
            },
            "unBlacklistAccount(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "balanceOfAt(address,uint256)": [
                10178,
                26
            ],
            "claimTokens(address)": [
                3226,
                647
            ],
            "totalSupply()": [
                1077,
                163
            ],
            "unBlacklistAccount(address)": [
                943,
                119
            ],
            "allowance(address,address)": [
                3107,
                625
            ],
            "transferFrom(address,address,uint256)": [
                1120,
                185
            ],
            "generateTokens(address,uint256)": [
                2058,
                361
            ],
            "approve(address,uint256)": [
                842,
                97
            ],
            "totalSupplyAt(uint256)": [
                10178,
                26
            ],
            "blacklistAccount(address)": [
                2824,
                559
            ],
            "enableTransfers(bool)": [
                3380,
                691
            ],
            "createCloneToken(string,uint8,string,uint256,bool)": [
                1610,
                295
            ],
            "changeController(address)": [
                6805,
                889
            ],
            "balanceOf(address)": [
                9395,
                847
            ],
            "finishGenerating()": [
                2415,
                449
            ],
            "approveAndCall(address,uint256,bytes)": [
                2653,
                537
            ],
            "destroyTokens(address,uint256)": [
                2915,
                581
            ],
            "transfer(address,uint256)": [
                9652,
                996
            ]
        },
        "block_CALL_mapping": {
            "jump625_0": [
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)",
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "jump5818_6": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5818_5": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5818_4": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5818_3": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5818_2": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5818_1": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump5818_0": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5818_5": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block4206_0": [
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)"
            ],
            "jump6589": [
                "tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            )",
                "tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            )"
            ],
            "block11873": [
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "block8262": [
                "ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        )"
            ],
            "jump9395": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "jump8262": [
                "ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        )",
                "ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        )"
            ],
            "block5818_2": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5818_6": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump4206_0": [
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)",
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)"
            ],
            "jump7602": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))",
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "block625_0": [
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "block5818_1": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7602": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump11873": [
                "TokenController(controller).onTransfer(_from, _to, _amount)",
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "jump11873_0": [
                "TokenController(controller).onTransfer(_from, _to, _amount)",
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "jump625": [
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)",
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "jump5818": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))",
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump9652": [
                "token.transfer(controller, balance)",
                "token.transfer(controller, balance)"
            ],
            "block9652": [
                "token.transfer(controller, balance)"
            ],
            "block625": [
                "TokenController(controller).proxyPayment.value(msg.value)(msg.sender)"
            ],
            "block11873_0": [
                "TokenController(controller).onTransfer(_from, _to, _amount)"
            ],
            "block9395": [
                "token.balanceOf(this)"
            ],
            "block6805": [
                "cloneToken.changeController(msg.sender)"
            ],
            "block5818_0": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block9106": [
                "controller.transfer(this.balance)"
            ],
            "jump9106": [
                "controller.transfer(this.balance)",
                "controller.transfer(this.balance)"
            ],
            "block5818_4": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block4206": [
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)"
            ],
            "jump7602_2": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))",
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7602_0": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))",
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump7602_1": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))",
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "block5818": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "block6589": [
                "tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            )"
            ],
            "jump4206": [
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)",
                "TokenController(controller).onApprove(msg.sender, _spender, _amount)"
            ],
            "block5818_3": [
                "parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock))"
            ],
            "jump6805": [
                "cloneToken.changeController(msg.sender)",
                "cloneToken.changeController(msg.sender)"
            ],
            "block7602_0": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7602_1": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ],
            "block7602_2": [
                "parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock))"
            ]
        }
    },
    "RefundVault": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)",
            "Ownable()",
            "transferOwnership(address)",
            "RefundVault(address[])",
            "deposit(address)",
            "close()",
            "enableRefunds()",
            "refund(address)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "reserveWallet": "address[]"
                }
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "reserveWallet": "address[]"
                }
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "reserveWallet": "address[]"
                }
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "reserveWallet": "address[]"
                }
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {
                    "reserveWallet": "address[]"
                }
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {
                    "reserveWallet": "address[]"
                }
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "reserveWallet": "address[]"
                }
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "reserveWallet": "address[]"
                }
            },
            "Ownable()": {
                "argument": {},
                "contract": {
                    "reserveWallet": "address[]"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "reserveWallet": "address[]"
                }
            },
            "RefundVault(address[])": {
                "argument": {
                    "_reserveWallet": "address[]"
                },
                "contract": {
                    "reserveWallet": "address[]"
                }
            },
            "deposit(address)": {
                "argument": {},
                "contract": {
                    "reserveWallet": "address[]"
                }
            },
            "close()": {
                "argument": {},
                "contract": {
                    "reserveWallet": "address[]"
                }
            },
            "enableRefunds()": {
                "argument": {},
                "contract": {
                    "reserveWallet": "address[]"
                }
            },
            "refund(address)": {
                "argument": {},
                "contract": {
                    "reserveWallet": "address[]"
                }
            }
        },
        "function_block_mapping": {
            "enableRefunds()": [
                192,
                97
            ],
            "refund(address)": [
                763,
                273
            ],
            "close()": [
                169,
                75
            ],
            "deposit(address)": [
                709,
                251
            ],
            "transferOwnership(address)": [
                642,
                229
            ]
        },
        "block_CALL_mapping": {
            "jump1120": [
                "reserveWallet[i].transfer(reserveAmountForEach)",
                "reserveWallet[i].transfer(reserveAmountForEach)"
            ],
            "block2493": [
                "investor.transfer(depositedValue)"
            ],
            "block1120": [
                "reserveWallet[i].transfer(reserveAmountForEach)"
            ],
            "jump2493": [
                "investor.transfer(depositedValue)",
                "investor.transfer(depositedValue)"
            ]
        }
    },
    "Pausable": {
        "function_list": [
            "Ownable()",
            "transferOwnership(address)",
            "pause()",
            "unpause()",
            "slitherConstructorVariables()"
        ],
        "initial_state": {
            "Ownable()": {
                "argument": {},
                "contract": {}
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {}
            },
            "pause()": {
                "argument": {},
                "contract": {}
            },
            "unpause()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "pause()": [
                184,
                119
            ],
            "unpause()": [
                114,
                75
            ],
            "transferOwnership(address)": [
                294,
                163
            ]
        },
        "block_CALL_mapping": {}
    },
    "ATCCrowdSale": {
        "function_list": [
            "pause()",
            "unpause()",
            "Ownable()",
            "transferOwnership(address)",
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)",
            "initialize(address,address,address,address,address,address,address,address,address,uint256,uint256,uint256,uint256[])",
            "fallback()",
            "presaleFallBack(uint256)",
            "buy(address)",
            "pushInvestorList(address)",
            "validPurchase()",
            "forwardFunds(uint256)",
            "minReached()",
            "maxReached()",
            "getPeriodBonus()",
            "calculateRate(uint256)",
            "startPeriod(uint256,uint256)",
            "onSale()",
            "finalize()",
            "finalization()",
            "distributeToken(uint256,uint256,uint256,uint256)",
            "refundAll(uint256)",
            "claimRefund(address)",
            "claimTokens(address)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "pause()": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "unpause()": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "Ownable()": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "initialize(address,address,address,address,address,address,address,address,address,uint256,uint256,uint256,uint256[])": {
                "argument": {
                    "_maxEtherCap": "uint256",
                    "_minEtherCap": "uint256",
                    "_baseRate": "uint256",
                    "_additionalBonusAmounts": "uint256[]"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "presaleFallBack(uint256)": {
                "argument": {
                    "_presaleWeiRaised": "uint256"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "buy(address)": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "pushInvestorList(address)": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "validPurchase()": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "forwardFunds(uint256)": {
                "argument": {
                    "toFund": "uint256"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "minReached()": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "maxReached()": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "getPeriodBonus()": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "calculateRate(uint256)": {
                "argument": {
                    "toFund": "uint256"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "startPeriod(uint256,uint256)": {
                "argument": {
                    "_startTime": "uint256",
                    "_endTime": "uint256"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "onSale()": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "finalize()": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "finalization()": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "distributeToken(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "bountyAmount": "uint256",
                    "partnersAmount": "uint256",
                    "reserveAmount": "uint256",
                    "teamAmount": "uint256"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "refundAll(uint256)": {
                "argument": {
                    "numToRefund": "uint256"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "claimRefund(address)": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "claimTokens(address)": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "claimTokens(address)": [
                8828,
                925
            ],
            "pause()": [
                1381,
                427
            ],
            "calculateRate(uint256)": [
                739,
                163
            ],
            "unpause()": [
                894,
                229
            ],
            "buy(address)": [
                2886,
                823
            ],
            "startPeriod(uint256,uint256)": [
                505,
                75
            ],
            "minReached()": [
                2427,
                669
            ],
            "initialize(address,address,address,address,address,address,address,address,address,uint256,uint256,uint256,uint256[])": [
                1808,
                581
            ],
            "presaleFallBack(uint256)": [
                2358,
                647
            ],
            "getPeriodBonus()": [
                2719,
                757
            ],
            "claimRefund(address)": [
                2474,
                691
            ],
            "maxReached()": [
                1587,
                515
            ],
            "refundAll(uint256)": [
                2762,
                779
            ],
            "transferOwnership(address)": [
                2940,
                845
            ],
            "finalize()": [
                960,
                273
            ],
            "onSale()": [
                804,
                185
            ]
        },
        "block_CALL_mapping": {
            "jump11771": [
                "vault.close()",
                "vault.close()"
            ],
            "jump11561": [
                "vault.deposit.value(toFund)(msg.sender)",
                "vault.deposit.value(toFund)(msg.sender)"
            ],
            "jump12244": [
                "token.enableTransfers(true)",
                "token.enableTransfers(true)"
            ],
            "block8552": [
                "token.controller()"
            ],
            "block3602_1": [
                "kyc.registeredAddress(beneficiary)"
            ],
            "block14266": [
                "token.generateTokens(teamLocker, teamAmount)"
            ],
            "block12849": [
                "token.changeController(ATCController)"
            ],
            "jump12407": [
                "vault.enableRefunds()",
                "vault.enableRefunds()"
            ],
            "block8885": [
                "owner.transfer(this.balance)"
            ],
            "block4289_0": [
                "msg.sender.transfer(toReturn)"
            ],
            "block4289_1": [
                "msg.sender.transfer(toReturn)"
            ],
            "jump13975": [
                "token.generateTokens(ATCReserveLocker, reserveAmount)",
                "token.generateTokens(ATCReserveLocker, reserveAmount)"
            ],
            "block3602_0": [
                "kyc.registeredAddress(beneficiary)"
            ],
            "block11929": [
                "token.totalSupply()"
            ],
            "block9174": [
                "claimToken.balanceOf(this)"
            ],
            "jump9174": [
                "claimToken.balanceOf(this)",
                "claimToken.balanceOf(this)"
            ],
            "jump4219": [
                "token.generateTokens(beneficiary, tokens)",
                "token.generateTokens(beneficiary, tokens)"
            ],
            "jump4289_1": [
                "msg.sender.transfer(toReturn)",
                "msg.sender.transfer(toReturn)"
            ],
            "jump8552": [
                "token.controller()",
                "token.controller()"
            ],
            "block12566": [
                "token.finishGenerating()"
            ],
            "block4219": [
                "token.generateTokens(beneficiary, tokens)"
            ],
            "jump13393": [
                "token.generateTokens(bountyAddress, bountyAmount)",
                "token.generateTokens(bountyAddress, bountyAmount)"
            ],
            "block10321": [
                "vault.refund(investorList[i])"
            ],
            "jump11561_0": [
                "vault.deposit.value(toFund)(msg.sender)",
                "vault.deposit.value(toFund)(msg.sender)"
            ],
            "block4289": [
                "msg.sender.transfer(toReturn)"
            ],
            "block13975": [
                "token.generateTokens(ATCReserveLocker, reserveAmount)"
            ],
            "jump4289_0": [
                "msg.sender.transfer(toReturn)",
                "msg.sender.transfer(toReturn)"
            ],
            "block12244": [
                "token.enableTransfers(true)"
            ],
            "block11561": [
                "vault.deposit.value(toFund)(msg.sender)"
            ],
            "jump11929": [
                "token.totalSupply()",
                "token.totalSupply()"
            ],
            "jump8828": [
                "token.claimTokens(_claimToken)",
                "token.claimTokens(_claimToken)"
            ],
            "jump9431": [
                "claimToken.transfer(owner, balance)",
                "claimToken.transfer(owner, balance)"
            ],
            "block4219_1": [
                "token.generateTokens(beneficiary, tokens)"
            ],
            "block11561_0": [
                "vault.deposit.value(toFund)(msg.sender)"
            ],
            "block11561_1": [
                "vault.deposit.value(toFund)(msg.sender)"
            ],
            "jump12566": [
                "token.finishGenerating()",
                "token.finishGenerating()"
            ],
            "jump10321": [
                "vault.refund(investorList[i])",
                "vault.refund(investorList[i])"
            ],
            "jump11561_1": [
                "vault.deposit.value(toFund)(msg.sender)",
                "vault.deposit.value(toFund)(msg.sender)"
            ],
            "jump8885": [
                "owner.transfer(this.balance)",
                "owner.transfer(this.balance)"
            ],
            "block4219_0": [
                "token.generateTokens(beneficiary, tokens)"
            ],
            "jump12849": [
                "token.changeController(ATCController)",
                "token.changeController(ATCController)"
            ],
            "jump8197": [
                "vault.refund(investor)",
                "vault.refund(investor)"
            ],
            "jump3602": [
                "kyc.registeredAddress(beneficiary)",
                "kyc.registeredAddress(beneficiary)"
            ],
            "block3602": [
                "kyc.registeredAddress(beneficiary)"
            ],
            "jump13684": [
                "token.generateTokens(partnersAddress, partnersAmount)",
                "token.generateTokens(partnersAddress, partnersAmount)"
            ],
            "block9431": [
                "claimToken.transfer(owner, balance)"
            ],
            "block8828": [
                "token.claimTokens(_claimToken)"
            ],
            "block13684": [
                "token.generateTokens(partnersAddress, partnersAmount)"
            ],
            "jump4289": [
                "msg.sender.transfer(toReturn)",
                "msg.sender.transfer(toReturn)"
            ],
            "block8197": [
                "vault.refund(investor)"
            ],
            "block13393": [
                "token.generateTokens(bountyAddress, bountyAmount)"
            ],
            "jump4219_1": [
                "token.generateTokens(beneficiary, tokens)",
                "token.generateTokens(beneficiary, tokens)"
            ],
            "jump4219_0": [
                "token.generateTokens(beneficiary, tokens)",
                "token.generateTokens(beneficiary, tokens)"
            ],
            "jump14266": [
                "token.generateTokens(teamLocker, teamAmount)",
                "token.generateTokens(teamLocker, teamAmount)"
            ],
            "block12407": [
                "vault.enableRefunds()"
            ],
            "block11771": [
                "vault.close()"
            ],
            "jump3602_0": [
                "kyc.registeredAddress(beneficiary)",
                "kyc.registeredAddress(beneficiary)"
            ],
            "jump3602_1": [
                "kyc.registeredAddress(beneficiary)",
                "kyc.registeredAddress(beneficiary)"
            ]
        }
    },
    "ReserveLocker": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)",
            "ReserveLocker(address,address,address)",
            "release()",
            "setToken(address)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "ReserveLocker(address,address,address)": {
                "argument": {},
                "contract": {}
            },
            "release()": {
                "argument": {},
                "contract": {}
            },
            "setToken(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "release()": [
                268,
                119
            ],
            "setToken(address)": [
                114,
                75
            ]
        },
        "block_CALL_mapping": {
            "block837": [
                "crowdsale.finalizedTime()"
            ],
            "jump1125": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "jump837": [
                "crowdsale.finalizedTime()",
                "crowdsale.finalizedTime()"
            ],
            "jump1583": [
                "token.transfer(to, value)",
                "token.transfer(to, value)"
            ],
            "block1583": [
                "token.transfer(to, value)"
            ],
            "block1125": [
                "token.balanceOf(this)"
            ]
        }
    },
    "TeamLocker": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)",
            "TeamLocker(address,address,address[])",
            "release()",
            "setToken(address)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "beneficiaries": "address[]",
                    "collectedTokens": "uint256"
                }
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "beneficiaries": "address[]",
                    "collectedTokens": "uint256"
                }
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "beneficiaries": "address[]",
                    "collectedTokens": "uint256"
                }
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "beneficiaries": "address[]",
                    "collectedTokens": "uint256"
                }
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {
                    "beneficiaries": "address[]",
                    "collectedTokens": "uint256"
                }
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {
                    "beneficiaries": "address[]",
                    "collectedTokens": "uint256"
                }
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "beneficiaries": "address[]",
                    "collectedTokens": "uint256"
                }
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "beneficiaries": "address[]",
                    "collectedTokens": "uint256"
                }
            },
            "TeamLocker(address,address,address[])": {
                "argument": {
                    "_beneficiaries": "address[]"
                },
                "contract": {
                    "beneficiaries": "address[]",
                    "collectedTokens": "uint256"
                }
            },
            "release()": {
                "argument": {},
                "contract": {
                    "beneficiaries": "address[]",
                    "collectedTokens": "uint256"
                }
            },
            "setToken(address)": {
                "argument": {},
                "contract": {
                    "beneficiaries": "address[]",
                    "collectedTokens": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "release()": [
                235,
                119
            ],
            "setToken(address)": [
                125,
                75
            ]
        },
        "block_CALL_mapping": {
            "jump1017": [
                "token.balanceOf(address(this))",
                "token.balanceOf(address(this))"
            ],
            "block2056": [
                "token.transfer(to, value)"
            ],
            "jump2056": [
                "token.transfer(to, value)",
                "token.transfer(to, value)"
            ],
            "block1226": [
                "crowdsale.finalizedTime()"
            ],
            "jump1226": [
                "crowdsale.finalizedTime()",
                "crowdsale.finalizedTime()"
            ],
            "block1017": [
                "token.balanceOf(address(this))"
            ]
        }
    },
    "ATCCrowdSale2": {
        "function_list": [
            "pause()",
            "unpause()",
            "Ownable()",
            "transferOwnership(address)",
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)",
            "initialize(address,address,address,address,address,address,address,address,uint256,uint256,uint256,uint256[])",
            "fallback()",
            "buy(address)",
            "pushInvestorList(address)",
            "validPurchase()",
            "forwardFunds(uint256)",
            "minReached()",
            "maxReached()",
            "getPeriodBonus()",
            "calculateRate(uint256)",
            "startPeriod(uint256,uint256)",
            "onSale()",
            "finalize()",
            "finalization()",
            "distributeToken(uint256,uint256,uint256,uint256)",
            "refundAll(uint256)",
            "claimRefund(address)",
            "claimTokens(address)",
            "slitherConstructorVariables()",
            "slitherConstructorConstantVariables()"
        ],
        "initial_state": {
            "pause()": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "unpause()": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "Ownable()": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "transferOwnership(address)": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "initialize(address,address,address,address,address,address,address,address,uint256,uint256,uint256,uint256[])": {
                "argument": {
                    "_maxEtherCap": "uint256",
                    "_minEtherCap": "uint256",
                    "_baseRate": "uint256",
                    "_additionalBonusAmounts": "uint256[]"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "fallback()": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "buy(address)": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "pushInvestorList(address)": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "validPurchase()": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "forwardFunds(uint256)": {
                "argument": {
                    "toFund": "uint256"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "minReached()": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "maxReached()": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "getPeriodBonus()": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "calculateRate(uint256)": {
                "argument": {
                    "toFund": "uint256"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "startPeriod(uint256,uint256)": {
                "argument": {
                    "_startTime": "uint256",
                    "_endTime": "uint256"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "onSale()": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "finalize()": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "finalization()": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "distributeToken(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "bountyAmount": "uint256",
                    "partnersAmount": "uint256",
                    "reserveAmount": "uint256",
                    "teamAmount": "uint256"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "refundAll(uint256)": {
                "argument": {
                    "numToRefund": "uint256"
                },
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "claimRefund(address)": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "claimTokens(address)": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            },
            "slitherConstructorConstantVariables()": {
                "argument": {},
                "contract": {
                    "baseRate": "uint256",
                    "additionalBonusAmounts": "uint256[]",
                    "periods": "ATCCrowdSale2.Period[]",
                    "MAX_PERIOD_COUNT": "uint8",
                    "weiRaised": "uint256",
                    "maxEtherCap": "uint256",
                    "minEtherCap": "uint256",
                    "investorList": "address[]",
                    "refundCompleted": "uint256",
                    "finalizedTime": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "claimTokens(address)": [
                8193,
                925
            ],
            "pause()": [
                1301,
                405
            ],
            "calculateRate(uint256)": [
                706,
                163
            ],
            "unpause()": [
                861,
                229
            ],
            "buy(address)": [
                2705,
                779
            ],
            "startPeriod(uint256,uint256)": [
                472,
                75
            ],
            "minReached()": [
                2246,
                625
            ],
            "initialize(address,address,address,address,address,address,address,address,uint256,uint256,uint256,uint256[])": [
                1324,
                427
            ],
            "getPeriodBonus()": [
                2538,
                713
            ],
            "claimRefund(address)": [
                2293,
                647
            ],
            "maxReached()": [
                1895,
                515
            ],
            "refundAll(uint256)": [
                2581,
                735
            ],
            "transferOwnership(address)": [
                2759,
                801
            ],
            "finalize()": [
                927,
                273
            ],
            "onSale()": [
                771,
                185
            ]
        },
        "block_CALL_mapping": {
            "jump13011": [
                "token.generateTokens(partnersAddress, partnersAmount)",
                "token.generateTokens(partnersAddress, partnersAmount)"
            ],
            "block8796": [
                "claimToken.transfer(owner, balance)"
            ],
            "block13593": [
                "token.generateTokens(teamLocker, teamAmount)"
            ],
            "block3924": [
                "token.generateTokens(beneficiary, tokens)"
            ],
            "block11893": [
                "token.finishGenerating()"
            ],
            "block13302": [
                "token.generateTokens(ATCReserveLocker, reserveAmount)"
            ],
            "jump10888_1": [
                "vault.deposit.value(toFund)(msg.sender)",
                "vault.deposit.value(toFund)(msg.sender)"
            ],
            "block8539": [
                "claimToken.balanceOf(this)"
            ],
            "block3924_0": [
                "token.generateTokens(beneficiary, tokens)"
            ],
            "jump13593": [
                "token.generateTokens(teamLocker, teamAmount)",
                "token.generateTokens(teamLocker, teamAmount)"
            ],
            "block11734": [
                "vault.enableRefunds()"
            ],
            "jump12176": [
                "token.changeController(ATCController)",
                "token.changeController(ATCController)"
            ],
            "block9686": [
                "vault.refund(investorList[i])"
            ],
            "jump12720": [
                "token.generateTokens(bountyAddress, bountyAmount)",
                "token.generateTokens(bountyAddress, bountyAmount)"
            ],
            "jump13302": [
                "token.generateTokens(ATCReserveLocker, reserveAmount)",
                "token.generateTokens(ATCReserveLocker, reserveAmount)"
            ],
            "block7562": [
                "vault.refund(investor)"
            ],
            "jump3994_0": [
                "msg.sender.transfer(toReturn)",
                "msg.sender.transfer(toReturn)"
            ],
            "jump3994_1": [
                "msg.sender.transfer(toReturn)",
                "msg.sender.transfer(toReturn)"
            ],
            "jump3994": [
                "msg.sender.transfer(toReturn)",
                "msg.sender.transfer(toReturn)"
            ],
            "jump3924_1": [
                "token.generateTokens(beneficiary, tokens)",
                "token.generateTokens(beneficiary, tokens)"
            ],
            "jump3924_0": [
                "token.generateTokens(beneficiary, tokens)",
                "token.generateTokens(beneficiary, tokens)"
            ],
            "jump8539": [
                "claimToken.balanceOf(this)",
                "claimToken.balanceOf(this)"
            ],
            "block12176": [
                "token.changeController(ATCController)"
            ],
            "block11256": [
                "token.totalSupply()"
            ],
            "jump11893": [
                "token.finishGenerating()",
                "token.finishGenerating()"
            ],
            "jump3307": [
                "kyc.registeredAddress(beneficiary)",
                "kyc.registeredAddress(beneficiary)"
            ],
            "block11098": [
                "vault.close()"
            ],
            "block3924_1": [
                "token.generateTokens(beneficiary, tokens)"
            ],
            "jump9686": [
                "vault.refund(investorList[i])",
                "vault.refund(investorList[i])"
            ],
            "block12720": [
                "token.generateTokens(bountyAddress, bountyAmount)"
            ],
            "jump3307_1": [
                "kyc.registeredAddress(beneficiary)",
                "kyc.registeredAddress(beneficiary)"
            ],
            "jump11571": [
                "token.enableTransfers(true)",
                "token.enableTransfers(true)"
            ],
            "jump8193": [
                "token.claimTokens(_claimToken)",
                "token.claimTokens(_claimToken)"
            ],
            "block8250": [
                "owner.transfer(this.balance)"
            ],
            "jump7917": [
                "token.controller()",
                "token.controller()"
            ],
            "block3307": [
                "kyc.registeredAddress(beneficiary)"
            ],
            "jump3924": [
                "token.generateTokens(beneficiary, tokens)",
                "token.generateTokens(beneficiary, tokens)"
            ],
            "block10888_1": [
                "vault.deposit.value(toFund)(msg.sender)"
            ],
            "block10888_0": [
                "vault.deposit.value(toFund)(msg.sender)"
            ],
            "jump10888": [
                "vault.deposit.value(toFund)(msg.sender)",
                "vault.deposit.value(toFund)(msg.sender)"
            ],
            "block3994_0": [
                "msg.sender.transfer(toReturn)"
            ],
            "block3994_1": [
                "msg.sender.transfer(toReturn)"
            ],
            "jump11256": [
                "token.totalSupply()",
                "token.totalSupply()"
            ],
            "jump7562": [
                "vault.refund(investor)",
                "vault.refund(investor)"
            ],
            "block13011": [
                "token.generateTokens(partnersAddress, partnersAmount)"
            ],
            "jump8796": [
                "claimToken.transfer(owner, balance)",
                "claimToken.transfer(owner, balance)"
            ],
            "block7917": [
                "token.controller()"
            ],
            "block8193": [
                "token.claimTokens(_claimToken)"
            ],
            "jump10888_0": [
                "vault.deposit.value(toFund)(msg.sender)",
                "vault.deposit.value(toFund)(msg.sender)"
            ],
            "block3994": [
                "msg.sender.transfer(toReturn)"
            ],
            "block10888": [
                "vault.deposit.value(toFund)(msg.sender)"
            ],
            "block11571": [
                "token.enableTransfers(true)"
            ],
            "jump3307_0": [
                "kyc.registeredAddress(beneficiary)",
                "kyc.registeredAddress(beneficiary)"
            ],
            "block3307_1": [
                "kyc.registeredAddress(beneficiary)"
            ],
            "jump11734": [
                "vault.enableRefunds()",
                "vault.enableRefunds()"
            ],
            "jump11098": [
                "vault.close()",
                "vault.close()"
            ],
            "block3307_0": [
                "kyc.registeredAddress(beneficiary)"
            ],
            "jump8250": [
                "owner.transfer(this.balance)",
                "owner.transfer(this.balance)"
            ]
        }
    }
}