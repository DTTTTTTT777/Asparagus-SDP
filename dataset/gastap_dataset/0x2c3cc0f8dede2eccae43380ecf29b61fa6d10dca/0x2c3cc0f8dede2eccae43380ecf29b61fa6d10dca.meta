{
    "SafeMath": {
        "function_list": [
            "add(uint256,uint256)",
            "subtract(uint256,uint256)",
            "multiply(uint256,uint256)",
            "divide(uint256,uint256)",
            "min64(uint64,uint64)",
            "max64(uint64,uint64)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "assert(bool)"
        ],
        "initial_state": {
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "subtract(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "multiply(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "divide(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "x": "uint64",
                    "y": "uint64"
                },
                "contract": {}
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "x": "uint64",
                    "y": "uint64"
                },
                "contract": {}
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "assert(bool)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "Owned": {
        "function_list": [
            "Owned()",
            "changeOwner(address)"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {}
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "changeOwner(address)": [
                168,
                97
            ]
        },
        "block_CALL_mapping": {}
    },
    "Escapable": {
        "function_list": [
            "Owned()",
            "changeOwner(address)",
            "Escapable(address,address)",
            "escapeHatch()",
            "changeEscapeCaller(address)"
        ],
        "initial_state": {
            "Owned()": {
                "argument": {},
                "contract": {}
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "Escapable(address,address)": {
                "argument": {},
                "contract": {}
            },
            "escapeHatch()": {
                "argument": {},
                "contract": {}
            },
            "changeEscapeCaller(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "escapeHatch()": [
                125,
                75
            ],
            "changeEscapeCaller(address)": [
                235,
                119
            ],
            "changeOwner(address)": [
                389,
                163
            ]
        },
        "block_CALL_mapping": {
            "jump726": [
                "escapeHatchDestination.send(total)",
                "escapeHatchDestination.send(total)"
            ],
            "block726": [
                "escapeHatchDestination.send(total)"
            ]
        }
    },
    "Campaign": {
        "function_list": [
            "proxyPayment(address)"
        ],
        "initial_state": {
            "proxyPayment(address)": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "proxyPayment(address)": [
                1269,
                405
            ]
        },
        "block_CALL_mapping": {
            "jump1937": [
                "tokenContract.generateTokens(_owner, msg.value)",
                "tokenContract.generateTokens(_owner, msg.value)"
            ],
            "jump1937_1": [
                "tokenContract.generateTokens(_owner, msg.value)",
                "tokenContract.generateTokens(_owner, msg.value)"
            ],
            "jump1937_0": [
                "tokenContract.generateTokens(_owner, msg.value)",
                "tokenContract.generateTokens(_owner, msg.value)"
            ],
            "jump2701": [
                "tokenContract.generateTokens(dth, amount)",
                "tokenContract.generateTokens(dth, amount)"
            ],
            "block1626": [
                "vaultAddress.send(msg.value)"
            ],
            "block1626_0": [
                "vaultAddress.send(msg.value)"
            ],
            "block1626_1": [
                "vaultAddress.send(msg.value)"
            ],
            "jump1506_1": [
                "tokenContract.controller()",
                "tokenContract.controller()"
            ],
            "jump1506_0": [
                "tokenContract.controller()",
                "tokenContract.controller()"
            ],
            "block1506_1": [
                "tokenContract.controller()"
            ],
            "block1506_0": [
                "tokenContract.controller()"
            ],
            "block1506": [
                "tokenContract.controller()"
            ],
            "block1937": [
                "tokenContract.generateTokens(_owner, msg.value)"
            ],
            "jump3047": [
                "tokenContract.changeController(0)",
                "tokenContract.changeController(0)"
            ],
            "block1937_1": [
                "tokenContract.generateTokens(_owner, msg.value)"
            ],
            "block1937_0": [
                "tokenContract.generateTokens(_owner, msg.value)"
            ],
            "block2701": [
                "tokenContract.generateTokens(dth, amount)"
            ],
            "jump1506": [
                "tokenContract.controller()",
                "tokenContract.controller()"
            ],
            "jump1626_0": [
                "vaultAddress.send(msg.value)",
                "vaultAddress.send(msg.value)"
            ],
            "jump1626_1": [
                "vaultAddress.send(msg.value)",
                "vaultAddress.send(msg.value)"
            ],
            "block3047": [
                "tokenContract.changeController(0)"
            ],
            "jump1626": [
                "vaultAddress.send(msg.value)",
                "vaultAddress.send(msg.value)"
            ]
        }
    },
    "DonationDoubler": {
        "function_list": [
            "add(uint256,uint256)",
            "subtract(uint256,uint256)",
            "multiply(uint256,uint256)",
            "divide(uint256,uint256)",
            "min64(uint64,uint64)",
            "max64(uint64,uint64)",
            "min(uint256,uint256)",
            "max(uint256,uint256)",
            "assert(bool)",
            "Escapable(address,address)",
            "escapeHatch()",
            "changeEscapeCaller(address)",
            "Owned()",
            "changeOwner(address)",
            "DonationDoubler(Campaign,address,address)",
            "depositETH()",
            "fallback()"
        ],
        "initial_state": {
            "add(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "subtract(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "multiply(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "divide(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "x": "uint64",
                    "y": "uint64"
                },
                "contract": {}
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "x": "uint64",
                    "y": "uint64"
                },
                "contract": {}
            },
            "min(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "max(uint256,uint256)": {
                "argument": {
                    "x": "uint256",
                    "y": "uint256"
                },
                "contract": {}
            },
            "assert(bool)": {
                "argument": {},
                "contract": {}
            },
            "Escapable(address,address)": {
                "argument": {},
                "contract": {}
            },
            "escapeHatch()": {
                "argument": {},
                "contract": {}
            },
            "changeEscapeCaller(address)": {
                "argument": {},
                "contract": {}
            },
            "Owned()": {
                "argument": {},
                "contract": {}
            },
            "changeOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "DonationDoubler(Campaign,address,address)": {
                "argument": {},
                "contract": {}
            },
            "depositETH()": {
                "argument": {},
                "contract": {}
            },
            "fallback()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "depositETH()": [
                1415,
                229
            ],
            "escapeHatch()": [
                910,
                75
            ],
            "changeEscapeCaller(address)": [
                1107,
                141
            ],
            "changeOwner(address)": [
                1261,
                185
            ]
        },
        "block_CALL_mapping": {
            "jump388": [
                "beneficiary.proxyPayment.value(amount)(msg.sender)",
                "beneficiary.proxyPayment.value(amount)(msg.sender)"
            ],
            "jump757_0": [
                "beneficiary.proxyPayment.value(amount)(msg.sender)",
                "beneficiary.proxyPayment.value(amount)(msg.sender)"
            ],
            "jump388_0": [
                "beneficiary.proxyPayment.value(amount)(msg.sender)",
                "beneficiary.proxyPayment.value(amount)(msg.sender)"
            ],
            "block388": [
                "beneficiary.proxyPayment.value(amount)(msg.sender)"
            ],
            "block757_0": [
                "beneficiary.proxyPayment.value(amount)(msg.sender)"
            ],
            "jump757": [
                "beneficiary.proxyPayment.value(amount)(msg.sender)",
                "beneficiary.proxyPayment.value(amount)(msg.sender)"
            ],
            "jump1657": [
                "escapeHatchDestination.send(total)",
                "escapeHatchDestination.send(total)"
            ],
            "block388_0": [
                "beneficiary.proxyPayment.value(amount)(msg.sender)"
            ],
            "block1657": [
                "escapeHatchDestination.send(total)"
            ],
            "block757": [
                "beneficiary.proxyPayment.value(amount)(msg.sender)"
            ]
        }
    }
}