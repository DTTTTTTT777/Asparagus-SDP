{
    "DSAuthEvents": {
        "function_list": [],
        "initial_state": {},
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "DSAuth": {
        "function_list": [
            "DSAuth()",
            "setOwner(address)",
            "setAuthority(DSAuthority)",
            "isAuthorized(address,bytes4)"
        ],
        "initial_state": {
            "DSAuth()": {
                "argument": {},
                "contract": {}
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "setAuthority(DSAuthority)": {
                "argument": {},
                "contract": {}
            },
            "isAuthorized(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "setOwner(address)": [
                103,
                75
            ]
        },
        "block_CALL_mapping": {
            "jump1499": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block1499_0": [
                "authority.canCall(src, this, sig)"
            ],
            "jump1499_0": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block1499": [
                "authority.canCall(src, this, sig)"
            ]
        }
    },
    "DSNote": {
        "function_list": [],
        "initial_state": {},
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "DSStop": {
        "function_list": [
            "DSAuth()",
            "setOwner(address)",
            "setAuthority(DSAuthority)",
            "isAuthorized(address,bytes4)",
            "stop()",
            "start()"
        ],
        "initial_state": {
            "DSAuth()": {
                "argument": {},
                "contract": {}
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {}
            },
            "setAuthority(DSAuthority)": {
                "argument": {},
                "contract": {}
            },
            "isAuthorized(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {}
            },
            "stop()": {
                "argument": {},
                "contract": {}
            },
            "start()": {
                "argument": {},
                "contract": {}
            }
        },
        "function_block_mapping": {
            "setOwner(address)": [
                159,
                97
            ],
            "start()": [
                427,
                185
            ],
            "stop()": [
                136,
                75
            ]
        },
        "block_CALL_mapping": {
            "block2161_1": [
                "authority.canCall(src, this, sig)"
            ],
            "block2161_0": [
                "authority.canCall(src, this, sig)"
            ],
            "block2161": [
                "authority.canCall(src, this, sig)"
            ],
            "jump2161_0": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump2161_2": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump2161": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump2161_1": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block2161_2": [
                "authority.canCall(src, this, sig)"
            ]
        }
    },
    "ERC20": {
        "function_list": [
            "totalSupply()",
            "balanceOf(address)",
            "allowance(address,address)",
            "transfer(address,uint256)",
            "transferFrom(address,address,uint256)",
            "approve(address,uint256)"
        ],
        "initial_state": {
            "totalSupply()": {
                "argument": {},
                "contract": {}
            },
            "balanceOf(address)": {
                "argument": {},
                "contract": {}
            },
            "allowance(address,address)": {
                "argument": {},
                "contract": {}
            },
            "transfer(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "transferFrom(address,address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            },
            "approve(address,uint256)": {
                "argument": {
                    "value": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {
            "approve(address,uint256)": [
                202,
                75
            ],
            "transfer(address,uint256)": [
                873,
                273
            ],
            "balanceOf(address)": [
                601,
                185
            ],
            "totalSupply()": [
                303,
                97
            ],
            "transferFrom(address,address,uint256)": [
                346,
                119
            ],
            "allowance(address,address)": [
                1061,
                317
            ]
        },
        "block_CALL_mapping": {}
    },
    "SafeMath": {
        "function_list": [
            "mul(uint256,uint256)",
            "div(uint256,uint256)",
            "sub(uint256,uint256)",
            "add(uint256,uint256)",
            "max64(uint64,uint64)",
            "min64(uint64,uint64)",
            "max256(uint256,uint256)",
            "min256(uint256,uint256)"
        ],
        "initial_state": {
            "mul(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "div(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "sub(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "add(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "max64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "min64(uint64,uint64)": {
                "argument": {
                    "a": "uint64",
                    "b": "uint64"
                },
                "contract": {}
            },
            "max256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            },
            "min256(uint256,uint256)": {
                "argument": {
                    "a": "uint256",
                    "b": "uint256"
                },
                "contract": {}
            }
        },
        "function_block_mapping": {},
        "block_CALL_mapping": {}
    },
    "BetGame": {
        "function_list": [
            "stop()",
            "start()",
            "DSAuth()",
            "setOwner(address)",
            "setAuthority(DSAuthority)",
            "isAuthorized(address,bytes4)",
            "BetGame(address)",
            "onTokenTransfer(address,address,uint256)",
            "receiveToken(address,uint256,address)",
            "tokenFallback(address,uint256,bytes)",
            "startRoundWithFirstBet(uint256,uint256,uint256,bytes32)",
            "betWithRound(uint256,bytes32)",
            "revealBet(uint256,uint256,bool,bytes32)",
            "finalizeRound(uint256)",
            "withdraw()",
            "claimFromPool()",
            "calculateSecretHash(uint256,bool,bytes32)",
            "isPlayerInRound(uint256,address)",
            "getBetIds(uint256)",
            "getBetIdAtRound(uint256,uint256)",
            "getBetSizeAtRound(uint256)",
            "betRevealed(uint256)",
            "getJackpotResults(uint256)",
            "getBlockNumber()",
            "addBet(address,bytes32,uint256)",
            "addRound(uint256,uint256,uint256,uint256)",
            "finalizeRewardForBet(uint256,bool,uint256,uint256,uint256,uint256)",
            "finalizeRewardForRound(uint256)",
            "claimTokens(address)"
        ],
        "initial_state": {
            "stop()": {
                "argument": {},
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "start()": {
                "argument": {},
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "DSAuth()": {
                "argument": {},
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "setOwner(address)": {
                "argument": {},
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "setAuthority(DSAuthority)": {
                "argument": {},
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "isAuthorized(address,bytes4)": {
                "argument": {
                    "sig": "bytes4"
                },
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "BetGame(address)": {
                "argument": {},
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "onTokenTransfer(address,address,uint256)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "receiveToken(address,uint256,address)": {
                "argument": {
                    "_amount": "uint256"
                },
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "tokenFallback(address,uint256,bytes)": {
                "argument": {
                    "_value": "uint256",
                    "_data": "bytes"
                },
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "startRoundWithFirstBet(uint256,uint256,uint256,bytes32)": {
                "argument": {
                    "_betCount": "uint256",
                    "_maxBetBlockCount": "uint256",
                    "_maxRevealBlockCount": "uint256",
                    "_secretHashForFirstBet": "bytes32"
                },
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "betWithRound(uint256,bytes32)": {
                "argument": {
                    "_roundId": "uint256",
                    "_secretHashForBet": "bytes32"
                },
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "revealBet(uint256,uint256,bool,bytes32)": {
                "argument": {
                    "betId": "uint256",
                    "_nonce": "uint256",
                    "_secret": "bytes32"
                },
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "finalizeRound(uint256)": {
                "argument": {
                    "roundId": "uint256"
                },
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "withdraw()": {
                "argument": {},
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "claimFromPool()": {
                "argument": {},
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "calculateSecretHash(uint256,bool,bytes32)": {
                "argument": {
                    "_nonce": "uint256",
                    "_secret": "bytes32"
                },
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "isPlayerInRound(uint256,address)": {
                "argument": {
                    "_roundId": "uint256"
                },
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "getBetIds(uint256)": {
                "argument": {
                    "roundIndex": "uint256"
                },
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "getBetIdAtRound(uint256,uint256)": {
                "argument": {
                    "roundIndex": "uint256",
                    "innerIndex": "uint256"
                },
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "getBetSizeAtRound(uint256)": {
                "argument": {
                    "roundIndex": "uint256"
                },
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "betRevealed(uint256)": {
                "argument": {
                    "roundId": "uint256"
                },
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "getJackpotResults(uint256)": {
                "argument": {
                    "roundId": "uint256"
                },
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "getBlockNumber()": {
                "argument": {},
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "addBet(address,bytes32,uint256)": {
                "argument": {
                    "_secretHash": "bytes32",
                    "_amount": "uint256"
                },
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "addRound(uint256,uint256,uint256,uint256)": {
                "argument": {
                    "_betCount": "uint256",
                    "_maxBetBlockCount": "uint256",
                    "_maxRevealBlockCount": "uint256",
                    "_betId": "uint256"
                },
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "finalizeRewardForBet(uint256,bool,uint256,uint256,uint256,uint256)": {
                "argument": {
                    "betId": "uint256",
                    "jackpotSum": "uint256",
                    "oddSum": "uint256",
                    "evenSum": "uint256",
                    "dustLeft": "uint256"
                },
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "finalizeRewardForRound(uint256)": {
                "argument": {
                    "roundId": "uint256"
                },
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            },
            "claimTokens(address)": {
                "argument": {},
                "contract": {
                    "betCount": "uint256",
                    "roundCount": "uint256",
                    "poolAmount": "uint256",
                    "initializeTime": "uint256"
                }
            }
        },
        "function_block_mapping": {
            "claimFromPool()": [
                1703,
                449
            ],
            "claimTokens(address)": [
                2757,
                735
            ],
            "calculateSecretHash(uint256,bool,bytes32)": [
                1813,
                493
            ],
            "onTokenTransfer(address,address,uint256)": [
                1251,
                339
            ],
            "tokenFallback(address,uint256,bytes)": [
                2567,
                691
            ],
            "receiveToken(address,uint256,address)": [
                2243,
                603
            ],
            "startRoundWithFirstBet(uint256,uint256,uint256,bytes32)": [
                555,
                141
            ],
            "start()": [
                2457,
                647
            ],
            "getBetSizeAtRound(uint256)": [
                923,
                207
            ],
            "finalizeRound(uint256)": [
                988,
                229
            ],
            "revealBet(uint256,uint256,bool,bytes32)": [
                2352,
                625
            ],
            "getJackpotResults(uint256)": [
                1955,
                537
            ],
            "setOwner(address)": [
                488,
                119
            ],
            "withdraw()": [
                1092,
                273
            ],
            "betRevealed(uint256)": [
                1182,
                317
            ],
            "getBetIds(uint256)": [
                2038,
                559
            ],
            "isPlayerInRound(uint256,address)": [
                2824,
                757
            ],
            "getBetIdAtRound(uint256,uint256)": [
                2168,
                581
            ],
            "betWithRound(uint256,bytes32)": [
                1033,
                251
            ],
            "stop()": [
                422,
                75
            ]
        },
        "block_CALL_mapping": {
            "block6353": [
                "pls.transfer(msg.sender, amount)"
            ],
            "block7212": [
                "owner.transfer(poolAmount)"
            ],
            "jump6353": [
                "pls.transfer(msg.sender, amount)",
                "pls.transfer(msg.sender, amount)"
            ],
            "block9215": [
                "this.call(_data)"
            ],
            "block11022_4": [
                "authority.canCall(src, this, sig)"
            ],
            "block9460": [
                "owner.transfer(this.balance)"
            ],
            "block11022_2": [
                "authority.canCall(src, this, sig)"
            ],
            "block11022_3": [
                "authority.canCall(src, this, sig)"
            ],
            "block11022_0": [
                "authority.canCall(src, this, sig)"
            ],
            "block11022_1": [
                "authority.canCall(src, this, sig)"
            ],
            "jump7212": [
                "owner.transfer(poolAmount)",
                "owner.transfer(poolAmount)"
            ],
            "jump9215": [
                "this.call(_data)",
                "this.call(_data)"
            ],
            "jump11022_4": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump11022_0": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump11022_1": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump11022_2": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "jump11022_3": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block10008": [
                "token.transfer(owner, balance)"
            ],
            "block9750": [
                "token.balanceOf(this)"
            ],
            "jump11022": [
                "authority.canCall(src, this, sig)",
                "authority.canCall(src, this, sig)"
            ],
            "block11022": [
                "authority.canCall(src, this, sig)"
            ],
            "jump9460": [
                "owner.transfer(this.balance)",
                "owner.transfer(this.balance)"
            ],
            "jump9750": [
                "token.balanceOf(this)",
                "token.balanceOf(this)"
            ],
            "jump10008": [
                "token.transfer(owner, balance)",
                "token.transfer(owner, balance)"
            ]
        }
    }
}